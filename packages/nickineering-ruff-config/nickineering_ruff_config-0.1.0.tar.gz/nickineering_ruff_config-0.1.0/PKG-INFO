Metadata-Version: 2.1
Name: nickineering-ruff-config
Version: 0.1.0
Summary: An aggressive Ruff config designed to get as much as possible from Ruff quickly.
Home-page: https://github.com/nickineering/ruff-config.git
License: MIT
Keywords: config,configuration,dotfiles,formatting,linting,ruff,templates
Author: Nicholas Ferrara
Author-email: nferrara100@gmail.com
Requires-Python: >=3.12,<4.0
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.12
Project-URL: Repository, https://github.com/nickineering/ruff-config.git
Description-Content-Type: text/markdown

# Nickineering's Default Ruff Config

An aggressive Ruff config designed to get as much as possible from Ruff quickly.

## Usage

Install [Ruff](https://docs.astral.sh/ruff/) and create a `ruff.toml` or another
Ruff supported configuration file in your project root. Inside that file extend
this config like so:

```toml
extend = ["nickineering-ruff-config/ruff.toml"]

# Override these settings, or add your own here

# For example:
[format]
docstring-code-format = false
```

Although it is not required, I recommend creating a `Makefile` or other command
runner so that calls to Ruff run both the lint and format commands. An example
`Makefile` is below:

```makefile
lint:
    ruff format && ruff check --fix
```

## Publishing

A Github Action is automatically run deploying this code to PyPi when a new
version is published in Github.

