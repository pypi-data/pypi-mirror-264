"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import lass_republisher_oi.lcm_header_t

class octans_t(object):
    __slots__ = ["header", "uptime_sec", "sync_cnt", "parse_err_cnt", "rx_connected", "roll_deg", "pitch_deg", "heading_deg", "roll_deg_sec", "pitch_deg_sec", "heading_deg_sec", "x_meters_sec2", "y_meters_sec2", "z_meters_sec2", "status"]

    __typenames__ = ["lass_republisher_oi.lcm_header_t", "double", "int64_t", "int64_t", "boolean", "double", "double", "double", "double", "double", "double", "double", "double", "double", "byte"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.header = lass_republisher_oi.lcm_header_t()
        self.uptime_sec = 0.0
        self.sync_cnt = 0
        self.parse_err_cnt = 0
        self.rx_connected = False
        self.roll_deg = 0.0
        self.pitch_deg = 0.0
        self.heading_deg = 0.0
        self.roll_deg_sec = 0.0
        self.pitch_deg_sec = 0.0
        self.heading_deg_sec = 0.0
        self.x_meters_sec2 = 0.0
        self.y_meters_sec2 = 0.0
        self.z_meters_sec2 = 0.0
        self.status = 0

    def encode(self):
        buf = BytesIO()
        buf.write(octans_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == lass_republisher_oi.lcm_header_t._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">dqqbdddddddddB", self.uptime_sec, self.sync_cnt, self.parse_err_cnt, self.rx_connected, self.roll_deg, self.pitch_deg, self.heading_deg, self.roll_deg_sec, self.pitch_deg_sec, self.heading_deg_sec, self.x_meters_sec2, self.y_meters_sec2, self.z_meters_sec2, self.status))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != octans_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return octans_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = octans_t()
        self.header = lass_republisher_oi.lcm_header_t._decode_one(buf)
        self.uptime_sec, self.sync_cnt, self.parse_err_cnt = struct.unpack(">dqq", buf.read(24))
        self.rx_connected = bool(struct.unpack('b', buf.read(1))[0])
        self.roll_deg, self.pitch_deg, self.heading_deg, self.roll_deg_sec, self.pitch_deg_sec, self.heading_deg_sec, self.x_meters_sec2, self.y_meters_sec2, self.z_meters_sec2, self.status = struct.unpack(">dddddddddB", buf.read(73))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if octans_t in parents: return 0
        newparents = parents + [octans_t]
        tmphash = (0xf891078e85c07136+ lass_republisher_oi.lcm_header_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if octans_t._packed_fingerprint is None:
            octans_t._packed_fingerprint = struct.pack(">Q", octans_t._get_hash_recursive([]))
        return octans_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

