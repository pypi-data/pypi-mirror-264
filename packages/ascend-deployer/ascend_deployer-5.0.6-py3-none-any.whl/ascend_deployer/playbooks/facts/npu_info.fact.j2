#!{{ ansible_python.executable }}
import json
import os
import platform
import shlex
import subprocess
import sys

ID_LEN = 6  # read 6 chars in /sys/bus/pci/devices/*/{class,vendor,device,subsystem_vendor,subsystem_device}
ARCH = platform.machine()
FIND_PRODUCT_CMD = 'dmidecode -t 1'
FIND_SOC_PRODUCT_CMD = 'dmidecode -t 2'

card_map = {
    ('0x19e5', '0xd100', '0x0200', '0x0100'): {'x86_64': 'A300-3010', 'aarch64': 'A300-3000'},
    ('0x19e5', '0xd801', '0x0200', '0x0100'): 'A300T-9000',
    ('0x19e5', '0xd802', '0x0200', '0x0100'): 'A900T',
    ('0x19e5', '0xd802', '0x19e5', '0x3000'): 'A900T',
    ('0x19e5', '0xd802', '0x19e5', '0x3001'): 'A900T',
    ('0x19e5', '0xd802', '0x19e5', '0x3002'): 'A900T',
    ('0x19e5', '0xd802', '0x19e5', '0x3003'): 'A900T',
    ('0x19e5', '0xd802', '0x19e5', '0x3004'): 'A900T',
    ('0x19e5', '0xd802', '0x19e5', '0x3400'): 'A900T',
    ('0x19e5', '0xd802', '0x19e5', '0x3401'): 'A900T',
    ('0x19e5', '0xd802', '0x19e5', '0x3402'): 'A900T',
    ('0x19e5', '0xd802', '0x19e5', '0x3403'): 'A900T',
    ('0x19e5', '0xd802', '0x19e5', '0x6000'): 'A900T',
    ('0x19e5', '0xd500', '0x0200', '0x0100'): 'A300i-pro',
    ('0x19e5', '0xd500', '0x0200', '0x0110'): 'A300i-duo',
    ('0x19e5', '0xd802', '0x19e5', '0x4000'): 'A300i-a2',
    ('0x19e5', '0xd105', '0x0200', '0x0100'): 'A200i-a2',
    ('0x19e5', '0xd107', '0x0000', '0x0000'): 'A200i-a2',
}

product_model_dict = {
    'Atlas 800 (Model 9000)': {'product': 'A800', 'model': '9000', 'name': 'A800-9000'},
    'Atlas 800 (Model 9010)': {'product': 'A800', 'model': '9010', 'name': 'A800-9010'},
    'Atlas 900 (Model 9000)': {'product': 'A900', 'model': '9000'},
    'Atlas 900 Compute Node': {'product': 'A900', 'model': '9000'},
    'A300T-9000': {'product': 'A300t', 'model': '9000', 'name': 'A300t-9000'},
    'Atlas 800 (Model 3000)': {'product': 'A300', 'model': '3000', 'name': 'A300-3000'},
    'Atlas 800 (Model 3010)': {'product': 'A300', 'model': '3010', 'name': 'A300-3010'},
    'Atlas 500 Pro (Model 3000)': {'product': 'A300', 'model': '3000', 'name': 'A300-3000'},
    'Atlas 500 Pro(Model 3000)': {'product': 'A300', 'model': '3000', 'name': 'A300-3000'},
    'A300-3010': {'product': 'A300', 'model': '3010', 'name': 'A300-3010'},
    'A300-3000': {'product': 'A300', 'model': '3000', 'name': 'A300-3000'},
    'Atlas 500 (Model 3000)': {'product': 'A300', 'model': '3000', 'name': 'A300-3000'},
    'A300i-pro': {'product': 'A300i', 'model': 'pro', 'name': 'A300i-pro'},
    'A200-3000': {'product': 'A300', 'model': '3000'},
    'A300i-duo': {'product': 'Atlas-300i-duo', 'model': 'duo', 'name': 'A300i-duo'},
    'A300i-a2': {'product': 'Atlas-300I-A2', 'model': 'A2', 'name': 'A300i-a2'},
    'A200i-a2': {'product': 'Atlas-200I-DK-A2', 'model': 'A2', 'name': 'A200i-a2'},
}

scene_dict = {
    'A300i-pro': 'a300i',
    'A300-3000': 'infer',
    'A300-3010': 'infer',
    'A200-3000': 'infer',
    'A800-9000': 'train',
    'A800-9010': 'train',
    'Atlas 900 Compute Node': 'train',
    'A900T': 'a910b',
    'A300i-duo': 'a300iduo',
    'A300i-a2': 'a910b',
    'A200i-a2': 'a310b',
}

product_name_tuple = (
    "Atlas 800 (Model 9000)",
    "Atlas 800 (Model 9010)",
    "Atlas 900 (Model 9000)",
    "Atlas 900 Compute Node",
    "Atlas 500 Pro (Model 3000)",
    "Atlas 500 Pro(Model 3000)",
    "Atlas 500 (Model 3000)",
)


def get_profile_model(model):
    if model == '--':
        return 'unknown'

    if 'Atlas' in model and 'Model' in model:
        model = "A" + model.split("(")[0].split()[1].strip() + \
                "-" + model.split(")")[0].split("Model")[1].strip()

    if model == 'A300T-9000':
        if ARCH == 'aarch64':
            model = 'A800-9000'
        else:
            model = 'A800-9010'

    if model in ['A500-3000', 'A800-3000']:
        model = 'A300-3000'
    if model == 'A800-3010':
        model = 'A300-3010'

    return model


def parse_item(dir_path):
    """
    parse device to tuple

    @rtype: tuple
    """
    id_list = []
    name_order = ('vendor', 'device', 'subsystem_vendor', 'subsystem_device')
    for file_name in name_order:
        full_file_path = os.path.join(dir_path, file_name)
        if not os.path.exists(full_file_path):
            continue
        with open(os.path.join(full_file_path)) as f:
            id_list.append(f.read(ID_LEN))
    return tuple(id_list)


def parse_card():
    devices_path = '/sys/bus/pci/devices/'
    tmp_value = '--'
    for dir_name in os.listdir(devices_path):
        full_dir = os.path.join(devices_path, dir_name)
        class_file = os.path.join(full_dir, 'class')
        if not os.path.exists(class_file):
            continue
        with open(class_file) as f:
            # to explain the device type, starting with 0x1200 represent the accelerator card, 0x0604 means pcie device
            class_id = f.read(ID_LEN)
            if not class_id.startswith('0x1200') and not class_id.startswith('0x0604'):
                continue
        item = parse_item(full_dir)
        value = card_map.get(item, '--')
        if value == '--':
            continue
        if class_id.startswith('0x0604'):
            tmp_value = value
            continue
        if isinstance(value, dict):
            return value.get(ARCH, '--')
        return value
    return tmp_value


def get_product_from_dmi(cmd):
    try:
        cp = subprocess.Popen(
            args=shlex.split(cmd), shell=False, universal_newlines=True,
            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except OSError:
        return ''
    for line in cp.stdout.readlines():
        if 'Product' in line:
            product_infos = line.split(':')
            if len(product_infos) < 2:
                return ''
            raw_product = product_infos[1]
            return raw_product.replace('\t', '').replace('\n', '').strip()


def parse_model(card):
    if card != '--':
        if os.path.exists("/run/board_cfg.ini"):
            return "Atlas 500 (Model 3000)"
        model_from_system = get_product_from_dmi(FIND_PRODUCT_CMD)
        if model_from_system in product_name_tuple:
            return model_from_system
    model_from_baseboard = get_product_from_dmi(FIND_SOC_PRODUCT_CMD)
    if model_from_baseboard == 'Atlas 200I SoC A1':
        return model_from_baseboard
    return card


def main():
    card = parse_card()
    product_model = parse_model(card)
    model = card if card == 'A300i-pro' else product_model
    profile_model = get_profile_model(model)
    scene = scene_dict.get(profile_model, 'unknown')
    product = product_model_dict.get(model, {}).get('product', '')
    model_num = product_model_dict.get(model, {}).get('model', '')

    ret = {
        "card": card,
        "model": product_model,
        "scene": scene,
        "python375_installed": os.path.exists('/usr/local/python3.7.5') if os.getuid() == 0 else os.path.exists(
            os.path.expanduser('~/.local/python3.7.5')),
        "product": product,
        "model_number": model_num,
        "all_model_dict": {k: v.get('name') for k, v in product_model_dict.items() if v.get('name')}
    }
    json.dump(ret, sys.stdout, indent=2)


main()
