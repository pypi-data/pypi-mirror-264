# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rime_sdk.swagger.swagger_client.api_client import ApiClient


class FirewallConfigurationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def firewall_configuration_configure_firewall(self, body, **kwargs):  # noqa: E501
        """ConfigureFirewall  # noqa: E501

        Configure the firewall to change the behavior of validation. Note: changes in configuration are eventually consistent, there may be a slight delay for the firewall to pick up configuration changes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.firewall_configuration_configure_firewall(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GenerativefirewallFirewallRuleConfig body: Config containing the updated values. (required)
        :param str update_mask: Update mask specifies the fields in the config that will be updated. Any values not in the mask will be ignored.
        :return: GenerativefirewallConfigureFirewallResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.firewall_configuration_configure_firewall_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.firewall_configuration_configure_firewall_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def firewall_configuration_configure_firewall_with_http_info(self, body, **kwargs):  # noqa: E501
        """ConfigureFirewall  # noqa: E501

        Configure the firewall to change the behavior of validation. Note: changes in configuration are eventually consistent, there may be a slight delay for the firewall to pick up configuration changes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.firewall_configuration_configure_firewall_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GenerativefirewallFirewallRuleConfig body: Config containing the updated values. (required)
        :param str update_mask: Update mask specifies the fields in the config that will be updated. Any values not in the mask will be ignored.
        :return: GenerativefirewallConfigureFirewallResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'update_mask']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method firewall_configuration_configure_firewall" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `firewall_configuration_configure_firewall`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'update_mask' in params:
            query_params.append(('updateMask', params['update_mask']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Firewall-Api-Key', 'X-Firewall-Auth-Token', 'rime-api-key']  # noqa: E501

        return self.api_client.call_api(
            '/v1-beta/firewall/config', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenerativefirewallConfigureFirewallResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def firewall_configuration_configure_firewall2(self, body, **kwargs):  # noqa: E501
        """ConfigureFirewall  # noqa: E501

        Configure the firewall to change the behavior of validation. Note: changes in configuration are eventually consistent, there may be a slight delay for the firewall to pick up configuration changes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.firewall_configuration_configure_firewall2(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GenerativefirewallFirewallRuleConfig body: Config containing the updated values. (required)
        :param str update_mask: Update mask specifies the fields in the config that will be updated. Any values not in the mask will be ignored.
        :return: GenerativefirewallConfigureFirewallResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.firewall_configuration_configure_firewall2_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.firewall_configuration_configure_firewall2_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def firewall_configuration_configure_firewall2_with_http_info(self, body, **kwargs):  # noqa: E501
        """ConfigureFirewall  # noqa: E501

        Configure the firewall to change the behavior of validation. Note: changes in configuration are eventually consistent, there may be a slight delay for the firewall to pick up configuration changes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.firewall_configuration_configure_firewall2_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GenerativefirewallFirewallRuleConfig body: Config containing the updated values. (required)
        :param str update_mask: Update mask specifies the fields in the config that will be updated. Any values not in the mask will be ignored.
        :return: GenerativefirewallConfigureFirewallResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'update_mask']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method firewall_configuration_configure_firewall2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `firewall_configuration_configure_firewall2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'update_mask' in params:
            query_params.append(('updateMask', params['update_mask']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Firewall-Api-Key', 'X-Firewall-Auth-Token', 'rime-api-key']  # noqa: E501

        return self.api_client.call_api(
            '/v1-beta/firewall/config', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenerativefirewallConfigureFirewallResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def firewall_configuration_get_file_upload_url(self, file_name, **kwargs):  # noqa: E501
        """Returns a presigned URL to upload to blob storage. The user of the firewall can upload files to aid in validation, such as knowledge base or sensitive term files.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.firewall_configuration_get_file_upload_url(file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_name: Unique key for the file. If there exists a file in the blob storage already, writing to the upload URL will overwrite it. (required)
        :return: GenerativefirewallGetFileUploadURLResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.firewall_configuration_get_file_upload_url_with_http_info(file_name, **kwargs)  # noqa: E501
        else:
            (data) = self.firewall_configuration_get_file_upload_url_with_http_info(file_name, **kwargs)  # noqa: E501
            return data

    def firewall_configuration_get_file_upload_url_with_http_info(self, file_name, **kwargs):  # noqa: E501
        """Returns a presigned URL to upload to blob storage. The user of the firewall can upload files to aid in validation, such as knowledge base or sensitive term files.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.firewall_configuration_get_file_upload_url_with_http_info(file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_name: Unique key for the file. If there exists a file in the blob storage already, writing to the upload URL will overwrite it. (required)
        :return: GenerativefirewallGetFileUploadURLResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method firewall_configuration_get_file_upload_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params or
                params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `firewall_configuration_get_file_upload_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_name' in params:
            path_params['fileName'] = params['file_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-Firewall-Api-Key', 'X-Firewall-Auth-Token', 'rime-api-key']  # noqa: E501

        return self.api_client.call_api(
            '/v1-beta/firewall/upload/{fileName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenerativefirewallGetFileUploadURLResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
