import inflection

from komodo.framework.komodo_agent import KomodoAgent
from komodo.framework.komodo_context import KomodoContext
from komodo.framework.komodo_locations import KomodoLocations
from komodo.loaders.filesystem.loader_helper import load_context_from_yaml, load_dictionary_from_yaml, load_contents


class AgentLoader():
    def __init__(self, locations: KomodoLocations):
        self.locations = locations

    def load(self, agent_name: str) -> KomodoAgent:
        agent_folder = self.locations.agent(agent_name)
        if not agent_folder.exists():
            raise ValueError(f"Agent {agent_name} not found in {self.locations.agents()}")

        instructions_file = self.locations.agent_instructions(agent_name)
        if not instructions_file.exists():
            raise ValueError(f"Instructions file not found for agent {agent_name}")

        context = KomodoContext()
        context_file = self.locations.agent_context(agent_name)
        if context_file.exists():
            context = load_context_from_yaml(context_file)

        dictionary_file = self.locations.agent_dictionary(agent_name)
        if dictionary_file.exists():
            dictionary = load_dictionary_from_yaml(dictionary_file)
            context.extend(dictionary)

        return KomodoAgent(shortcode=agent_name,
                           name=f'{inflection.titleize(agent_name)}',
                           instructions=load_contents(instructions_file),
                           context=context,
                           purpose="Generated by agent loader.")

    def load_all(self) -> [KomodoAgent]:
        return [self.load(agent_name) for agent_name in self.locations.available_agents()]


if __name__ == "__main__":
    from komodo.testdata.config import TestConfig
    from komodo.models.framework.chat_message import ChatMessage

    locations = KomodoLocations(TestConfig().data_dir())
    print(locations.available_agents())
    loader = AgentLoader(locations)
    agents = loader.load_all()
    for agent in agents:
        print(agent.shortcode)
        print(agent.context)
        print(agent.instructions)
        messages = ChatMessage.convert_from_context(agent.context)
        print(messages)
