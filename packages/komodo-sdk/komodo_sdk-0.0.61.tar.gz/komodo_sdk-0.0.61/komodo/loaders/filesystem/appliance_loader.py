import inflection

from komodo.framework.komodo_app import KomodoApp
from komodo.framework.komodo_context import KomodoContext
from komodo.framework.komodo_locations import KomodoLocations
from komodo.loaders.filesystem.agent_loader import AgentLoader
from komodo.loaders.filesystem.loader_helper import load_context_from_yaml, load_dictionary_from_yaml, load_contents


class ApplianceLoader():
    def __init__(self, locations: KomodoLocations):
        self.locations = locations

    def load(self, appliance_name: str) -> dict:
        appliance_folder = self.locations.appliance(appliance_name)
        if not appliance_folder.exists():
            raise ValueError(f"appliance {appliance_name} not found in {self.locations.appliances()}")

        appliance_file = self.locations.appliance(appliance_name) / "appliance.yml"
        if not appliance_file.exists():
            raise ValueError(f"Appliance file not found for appliance {appliance_file}")

        import yaml
        appliance_data = yaml.safe_load(appliance_file.read_text()) or {}

        context = KomodoContext()
        context_file = self.locations.appliance_context(appliance_name)
        if context_file.exists():
            context = load_context_from_yaml(context_file)

        dictionary = {}
        dictionary_file = self.locations.appliance_dictionary(appliance_name)
        if dictionary_file.exists():
            dictionary = load_dictionary_from_yaml(dictionary_file)

        goal_file = self.locations.agent(appliance_name) / "goal.yml"
        goal = load_contents(goal_file) if goal_file.exists() else None

        shortcode = appliance_data.get('shortcode', appliance_name)
        name = appliance_data.get('name', f'{inflection.titleize(appliance_name)}')
        purpose = appliance_data.get('purpose', "Generated by appliance loader.")
        tools = appliance_data.get('tools', [])
        agents = [AgentLoader(self.locations).load_agent(shortcode) for shortcode in appliance_data.get('agents', [])]

        data_folder = self.locations.appliance_data(appliance_name)
        data = {}
        for file in data_folder.glob("**/*"):
            if file.is_file():
                data[file.stem] = load_contents(file)

        for key in ['shortcode', 'name', 'purpose', 'tools', 'agents', 'context', 'dictionary', 'goal']:
            if key in appliance_data:
                del appliance_data[key]

        return dict(shortcode=shortcode,
                    name=name,
                    purpose=purpose,
                    agents=agents,
                    tools=tools,
                    context=context,
                    dictionary=dictionary,
                    data=data,
                    goal=goal,
                    **appliance_data)

    def load_appliance(self, appliance_name: str) -> [KomodoApp]:
        appliance_data = self.load(appliance_name)
        return KomodoApp(**appliance_data)

    def load_all(self) -> [KomodoApp]:
        return [self.load_appliance(appliance_name) for appliance_name in self.locations.available_appliances()]


if __name__ == "__main__":
    from komodo.testdata.config import TestConfig
    from komodo.core.tools.utils.sample_tool import SampleTool
    from komodo.framework.komodo_tool_registry import KomodoToolRegistry

    KomodoToolRegistry.add_komodo_tool(SampleTool("."))

    locations = KomodoLocations(TestConfig().data_dir())
    print(locations.available_appliances())
    loader = ApplianceLoader(locations)
    appliances = loader.load_all()
    for appliance in appliances:
        print(appliance.shortcode)
        print(appliance.context)
        print(appliance.purpose)
        print(appliance.agents)
        print(appliance.tools)
