import inflection

from komodo.framework.komodo_agent import KomodoAgent
from komodo.framework.komodo_context import KomodoContext
from komodo.framework.komodo_locations import KomodoLocations
from komodo.loaders.filesystem.loader_helper import load_context_from_yaml, load_dictionary_from_yaml, load_contents


class AgentLoader():
    def __init__(self, locations: KomodoLocations):
        self.locations = locations

    def load(self, agent_name: str) -> dict:
        agent_folder = self.locations.agent(agent_name)
        if not agent_folder.exists():
            raise ValueError(f"Agent {agent_name} not found in {self.locations.agents()}")

        agent_file = self.locations.agent(agent_name) / "agent.yml"
        if not agent_file.exists():
            raise ValueError(f"Agent file not found for agent {agent_name}")

        import yaml
        agent_data = yaml.safe_load(agent_file.read_text()) or {}

        instructions_file = self.locations.agent_instructions(agent_name)
        if not instructions_file.exists():
            raise ValueError(f"Instructions file not found for agent {agent_name}")

        context = KomodoContext()
        context_file = self.locations.agent_context(agent_name)
        if context_file.exists():
            context = load_context_from_yaml(context_file)

        dictionary_file = self.locations.agent_dictionary(agent_name)
        if dictionary_file.exists():
            dictionary = load_dictionary_from_yaml(dictionary_file)
            context.extend(dictionary)

        role_file = self.locations.agent(agent_name) / "role.yml"
        role = load_contents(role_file) if role_file.exists() else None

        shortcode = agent_data.get('shortcode', agent_name)
        name = agent_data.get('name', f'{inflection.titleize(agent_name)}')
        purpose = agent_data.get('purpose', "Generated by agent loader.")
        tools = agent_data.get('tools', [])

        data_folder = locations.agent_data(agent_name)
        data = {}
        for file in data_folder.glob("**/*"):
            if file.is_file():
                data[file.name] = load_contents(file)

        return dict(shortcode=shortcode,
                    name=name,
                    instructions=load_contents(instructions_file),
                    context=context,
                    purpose=purpose,
                    tools=tools,
                    role=role,
                    data=data)

    def load_agent(self, agent_name: str) -> KomodoAgent:
        agent_data = self.load(agent_name)
        return KomodoAgent(**agent_data)

    def load_all(self) -> [KomodoAgent]:
        return [self.load_agent(agent_name) for agent_name in self.locations.available_agents()]


if __name__ == "__main__":
    from komodo.models.framework.chat_message import ChatMessage
    from komodo.testdata.config import TestConfig

    locations = TestConfig().locations()
    print(locations.available_agents())
    loader = AgentLoader(locations)
    agents = loader.load_all()
    for agent in agents:
        print(agent.shortcode)
        print(agent.context)
        print(agent.instructions)
        messages = ChatMessage.convert_from_context(agent.context)
        print(messages)
        print(agent.role)
        print(agent.data)
