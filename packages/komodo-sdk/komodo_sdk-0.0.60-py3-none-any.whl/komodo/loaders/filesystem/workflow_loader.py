import inflection

from komodo.framework.komodo_context import KomodoContext
from komodo.framework.komodo_locations import KomodoLocations
from komodo.framework.komodo_workflow import KomodoWorkflow
from komodo.loaders.filesystem.loader_helper import load_context_from_yaml, load_dictionary_from_yaml, load_contents


class WorkflowLoader():
    def __init__(self, locations: KomodoLocations):
        self.locations = locations

    def load(self, workflow_name: str) -> dict:
        workflow_folder = self.locations.workflow(workflow_name)
        if not workflow_folder.exists():
            raise ValueError(f"Workflow {workflow_name} not found in {self.locations.workflows()}")

        workflow_file = self.locations.workflow(workflow_name) / "workflow.yml"
        if not workflow_file.exists():
            raise ValueError(f"Workflow file not found for workflow {workflow_name}")

        import yaml
        workflow_data = yaml.safe_load(workflow_file.read_text()) or {}

        context = KomodoContext()
        context_file = self.locations.workflow_context(workflow_name)
        if context_file.exists():
            context = load_context_from_yaml(context_file)

        dictionary_file = self.locations.workflow_dictionary(workflow_name)
        if dictionary_file.exists():
            dictionary = load_dictionary_from_yaml(dictionary_file)
            context.extend(dictionary)

        data_folder = locations.workflow_data(workflow_name)
        data = {}
        for file in data_folder.glob("**/*"):
            if file.is_file():
                data[file.name] = load_contents(file)

        shortcode = workflow_data.get('shortcode', workflow_name)
        name = workflow_data.get('name', f'{inflection.titleize(workflow_name)}')
        purpose = workflow_data.get('purpose', "Generated by workflow loader.")

        return dict(shortcode=shortcode,
                    name=name,
                    context=context,
                    purpose=purpose,
                    data=data)

    def load_workflow(self, workflow_name: str) -> [KomodoWorkflow]:
        workflow_data = self.load(workflow_name)
        return KomodoWorkflow(**workflow_data)

    def load_all(self) -> [KomodoWorkflow]:
        return [self.load_workflow(workflow_name) for workflow_name in self.locations.available_workflows()]


if __name__ == "__main__":
    from komodo.testdata.config import TestConfig
    from komodo.models.framework.chat_message import ChatMessage

    locations = KomodoLocations(TestConfig().data_dir())
    print(locations.available_workflows())
    loader = WorkflowLoader(locations)
    workflows = loader.load_all()
    for workflow in workflows:
        print(workflow.shortcode)
        print(workflow.context)
        messages = ChatMessage.convert_from_context(workflow.context)
        print(messages)
