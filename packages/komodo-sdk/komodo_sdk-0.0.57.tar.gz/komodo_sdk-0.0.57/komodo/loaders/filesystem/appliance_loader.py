import inflection

from komodo.framework.komodo_app import KomodoApp
from komodo.framework.komodo_context import KomodoContext
from komodo.framework.komodo_locations import KomodoLocations
from komodo.loaders.filesystem.loader_helper import load_context_from_yaml, load_dictionary_from_yaml


class ApplianceLoader():
    def __init__(self, locations: KomodoLocations):
        self.locations = locations

    def load(self, appliance_name: str) -> KomodoApp:
        appliance_folder = self.locations.appliance(appliance_name)
        if not appliance_folder.exists():
            raise ValueError(f"appliance {appliance_name} not found in {self.locations.appliances()}")

        context = KomodoContext()
        context_file = self.locations.appliance_context(appliance_name)
        if context_file.exists():
            context = load_context_from_yaml(context_file)

        dictionary_file = self.locations.appliance_dictionary(appliance_name)
        if dictionary_file.exists():
            dictionary = load_dictionary_from_yaml(dictionary_file)
            context.extend(dictionary)

        return KomodoApp(shortcode=appliance_name,
                         name=f'{inflection.titleize(appliance_name)}',
                         context=context,
                         purpose="Generated by appliance loader.")

    def load_all(self) -> [KomodoApp]:
        return [self.load(appliance_name) for appliance_name in self.locations.available_appliances()]


if __name__ == "__main__":
    from komodo.testdata.config import TestConfig
    from komodo.models.framework.chat_message import ChatMessage

    locations = KomodoLocations(TestConfig().data_dir())
    print(locations.available_appliances())
    loader = ApplianceLoader(locations)
    appliances = loader.load_all()
    for appliance in appliances:
        print(appliance.shortcode)
        print(appliance.context)
        print(appliance.purpose)
        messages = ChatMessage.convert_from_context(appliance.context)
        print(messages)
