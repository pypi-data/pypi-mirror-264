"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import fundamentum_edge_proto.provisioning_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class ProvisioningStub:
    """Fundamentum Edge's provisioning service."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Provision: grpc.UnaryUnaryMultiCallable[
        fundamentum_edge_proto.provisioning_pb2.ProvisionRequest,
        fundamentum_edge_proto.provisioning_pb2.ProvisionResponse,
    ]
    """Provision this device against cloud-side.

    On successful provisioning, amongst other things, the edge daemon will be
    granted MQTT connectivity to the cloud-side broker thus enabling more
    features.
    """

class ProvisioningAsyncStub:
    """Fundamentum Edge's provisioning service."""

    Provision: grpc.aio.UnaryUnaryMultiCallable[
        fundamentum_edge_proto.provisioning_pb2.ProvisionRequest,
        fundamentum_edge_proto.provisioning_pb2.ProvisionResponse,
    ]
    """Provision this device against cloud-side.

    On successful provisioning, amongst other things, the edge daemon will be
    granted MQTT connectivity to the cloud-side broker thus enabling more
    features.
    """

class ProvisioningServicer(metaclass=abc.ABCMeta):
    """Fundamentum Edge's provisioning service."""

    @abc.abstractmethod
    def Provision(
        self,
        request: fundamentum_edge_proto.provisioning_pb2.ProvisionRequest,
        context: _ServicerContext,
    ) -> typing.Union[fundamentum_edge_proto.provisioning_pb2.ProvisionResponse, collections.abc.Awaitable[fundamentum_edge_proto.provisioning_pb2.ProvisionResponse]]:
        """Provision this device against cloud-side.

        On successful provisioning, amongst other things, the edge daemon will be
        granted MQTT connectivity to the cloud-side broker thus enabling more
        features.
        """

def add_ProvisioningServicer_to_server(servicer: ProvisioningServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
