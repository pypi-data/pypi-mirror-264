"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import fundamentum_edge_proto.telemetry_pb2
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class TelemetryStub:
    """Fundamentum Edge's telemetry service."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Publish: grpc.StreamUnaryMultiCallable[
        fundamentum_edge_proto.telemetry_pb2.TelemetryRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Publishes device-specific data to the `event` topic or to one of its sub-topics if specified."""

class TelemetryAsyncStub:
    """Fundamentum Edge's telemetry service."""

    Publish: grpc.aio.StreamUnaryMultiCallable[
        fundamentum_edge_proto.telemetry_pb2.TelemetryRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Publishes device-specific data to the `event` topic or to one of its sub-topics if specified."""

class TelemetryServicer(metaclass=abc.ABCMeta):
    """Fundamentum Edge's telemetry service."""

    @abc.abstractmethod
    def Publish(
        self,
        request_iterator: _MaybeAsyncIterator[fundamentum_edge_proto.telemetry_pb2.TelemetryRequest],
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """Publishes device-specific data to the `event` topic or to one of its sub-topics if specified."""

def add_TelemetryServicer_to_server(servicer: TelemetryServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
