
# DO NOT EDIT THIS FILE -- AUTOGENERATED BY PANTS
# Target: jsf:jsf-dist

from setuptools import setup

setup(**{
    'author': 'ghandic',
    'classifiers': [
        'Programming Language :: Python :: 3',
        'License :: OSI Approved :: MIT License',
        'Operating System :: OS Independent',
    ],
    'description': 'Creates fake JSON files from a JSON schema',
    'entry_points': {
        'console_scripts': [
            'jsf = jsf.cli:app',
        ],
    },
    'extras_require': {
        'cli': [
            'typer>=0.7.0',
        ],
    },
    'install_requires': (
        'faker>=15.3.4',
        'jsonschema>=4.17.3',
        'pydantic>=2.0.0',
        'rstr>=3.2.0',
        'smart-open[http]>=6.3.0',
        'typing-extensions>=4.9.0',
    ),
    'keywords': [
        'JSON Schema',
        'Fake data',
        'Test data',
        'Schema',
        'JSON',
        'Faker',
        'Hypothesis',
        'Rapid Prototype',
        'Data contract',
    ],
    'long_description': """<h1 align="center">
   <strong>jsf</strong><img src="docs/assets/imgs/index.png" width="50" style="position: absolute; padding-left:10px;">
</h1>

<p align="center">
    <a href="https://codecov.io/gh/ghandic/jsf" target="_blank">
        <img src="https://img.shields.io/codecov/c/github/ghandic/jsf?color=%2334D058" alt="Coverage">
    </a>
    <a href="https://ghandic.github.io/jsf/index.html" target="_blank">
        <img src="https://img.shields.io/badge/docs-mkdocs%20material-blue.svg?style=flat" alt="Docs">
    </a>
    <a href="https://pypi.org/project/jsf/" target="_blank">
        <img src="https://img.shields.io/pypi/v/jsf.svg" alt="PyPI Latest Release">
    </a>
    <br />
    <a href="https://github.com/ghandic/jsf/blob/main/LICENSE" target="_blank">
        <img src="https://img.shields.io/badge/License-MIT-yellow.svg" alt="License">
    </a>
    <a href="https://github.com/psf/black" target="_blank">
        <img src="https://img.shields.io/badge/code%20style-black-000000.svg" alt="Code style: black">
    </a>
</p>

Use **jsf** along with fake data generators to provide consistent and meaningful fake data for your system.

## Main Features

- Provides out of the box data generation from any JSON schema üì¶
- Extendable custom data providers using any lambda functions üîó
- Multi level state for dependant data (eg multiple objects sharing value, such as children with same surname) ü§ì
- Inbuilt validation of fake JSON produced ‚úÖ
- In memory conversion from JSON Schema to Pydantic Models with generated examples ü§Ø
- Seamless integration with [FastAPI](https://fastapi.tiangolo.com/) üöÄ

## Installation

<div class="termy">

```console
$ pip install jsf

---> 100%
```

</div>

## Usage

### Basic üòä

```python
from jsf import JSF

faker = JSF(
    {
        "type": "object",
        "properties": {
            "name": {"type": "string", "$provider": "faker.name"},
            "email": {"type": "string", "$provider": "faker.email"},
        },
        "required": ["name", "email"],
    }
)

fake_json = faker.generate()
```

Results in ...

```python
{
    'name': 'Jesse Phillips', 
    'email': 'xroberson@hotmail.com'
}
```

### From JSON file üìÅ

```python
from jsf import JSF

faker = JSF.from_json("demo-schema.json")
fake_json = faker.generate()
```

<details markdown="1">
<summary>Or run straight from the <code>commandline</code>...</summary>

#### Native install

```bash
pip install jsf[cli]
jsf --schema jsf/tests/data/custom.json --instance wow.json
```

#### Docker

```bash
docker run -v $PWD:/data challisa/jsf jsf --schema /data/custom.json --instance /data/example.json
```

</details>

### FastAPI Integration üöÄ

Create a file main.py with:

```python
from jsf import JSF
from fastapi import FastAPI

app = FastAPI(docs_url="/")
generator = JSF.from_json("custom.json")


@app.get("/generate", response_model=generator.pydantic())
def read_root():
    return generator.generate()

```

Run the server with:

<div class="termy">

```console
$ uvicorn main:app --reload

INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
```

Navigate to [http://127.0.0.1:8000](http://127.0.0.1:8000) and check out your endpoint. Notice the following are all automatically created:

- Schema with descriptions and examples
- Example response
- Data generation by clicking "try it out"

![Example Swagger UI - Page 1](docs/assets/imgs/ui-1.png)
![Example Swagger UI - Page 2](docs/assets/imgs/ui-2.png)
![Example Swagger UI - Page 3](docs/assets/imgs/ui-3.png)
![Example Swagger UI - Page 4](docs/assets/imgs/ui-4.png)

</div>

### Partially supported features

- string `contentMediaType` - only a subset of these are supported, however they can be expanded within [this file](jsf/schema_types/string_utils/content_type/__init__.py)  

## Credits

- This repository is a Python port of [json-schema-faker](https://github.com/json-schema-faker/json-schema-faker) with some minor differences in implementation.

## License

- [MIT License](/LICENSE)
""",
    'long_description_content_type': 'text/markdown',
    'name': 'jsf',
    'namespace_packages': (
    ),
    'package_data': {
        'jsf': (
            'LICENSE',
            'README.md',
        ),
        'jsf.tests': (
            '__init__.py',
            'conftest.py',
            'data/allof-complex.json',
            'data/allof.json',
            'data/anyof.json',
            'data/anyof_object.json',
            'data/array-dicts.json',
            'data/array-fixed-int.json',
            'data/array-fixed-str.json',
            'data/array.json',
            'data/boolean.json',
            'data/complex_recursive.json',
            'data/const.json',
            'data/custom.json',
            'data/empty.json',
            'data/enum.json',
            'data/external-ref-common.json',
            'data/external-ref.json',
            'data/inner-ref.json',
            'data/integer.json',
            'data/null.json',
            'data/number-exclusive-float.json',
            'data/number-exclusive.json',
            'data/number.json',
            'data/object-enum.json',
            'data/object-pattern-properties.json',
            'data/object-with-optionals.json',
            'data/object.json',
            'data/object_no_properties.json',
            'data/object_recursive.json',
            'data/oneof.json',
            'data/oneof_allof.json',
            'data/oneof_object.json',
            'data/oneof_recursive.json',
            'data/ordered-refs.json',
            'data/recursion.json',
            'data/string-content-encoding.json',
            'data/string-content-type.json',
            'data/string-enum.json',
            'data/string-format.json',
            'data/string-max-min-length.json',
            'data/string.json',
            'data/tuple.json',
            'data/type-list-null.json',
            'data/type-list.json',
            'data/unique-items-array.json',
            'data/unordered-refs.json',
            'test_cli.py',
            'test_default_fake.py',
            'test_model_gen.py',
            'test_nullable_types_gen.py',
            'test_parser.py',
            'test_utils.py',
        ),
    },
    'packages': (
        'jsf',
        'jsf.schema_types',
        'jsf.schema_types.string_utils',
        'jsf.schema_types.string_utils.content_type',
        'jsf.tests',
    ),
    'python_requires': '>=3.8',
    'url': 'https://github.com/ghandic/jsf',
    'version': '0.11.1',
    'zip_safe': True,
})
