{"version":3,"file":"static/js/3786.ea29bcd9.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/src/components/tooltip/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/tooltip/utils.ts","../node_modules/@esri/calcite-components/dist/components/src/components/tooltip/tooltip.scss?tag=calcite-tooltip&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/tooltip/tooltip.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/tooltip/TooltipManager.ts"],"sourcesContent":["export const CSS = {\n  container: \"container\",\n};\n\nexport const TOOLTIP_OPEN_DELAY_MS = 300;\nexport const TOOLTIP_CLOSE_DELAY_MS = 500;\n\nexport const ARIA_DESCRIBED_BY = \"aria-describedby\";\n","import { ReferenceElement } from \"../../utils/floating-ui\";\nimport { queryElementRoots } from \"../../utils/dom\";\n\nexport function getEffectiveReferenceElement(tooltip: HTMLCalciteTooltipElement): ReferenceElement {\n  const { referenceElement } = tooltip;\n\n  return (\n    (typeof referenceElement === \"string\" ? queryElementRoots(tooltip, { id: referenceElement }) : referenceElement) ||\n    null\n  );\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-tooltip-z-index: Sets the z-index value for the component.\n */\n\n:host {\n  --calcite-floating-ui-z-index: var(--calcite-tooltip-z-index, theme(\"zIndex.tooltip\"));\n}\n\n@include floatingUIHost();\n@include floatingUIArrow();\n\n.container {\n  @apply text-color-1\n    text-n2-wrap\n    relative\n    overflow-hidden\n    rounded\n    py-3\n    px-4\n    font-medium;\n  max-inline-size: 20rem;\n  max-block-size: 20rem;\n  text-align: start;\n}\n\n.calcite-floating-ui-anim {\n  @apply bg-foreground-1\n    border-color-3\n    rounded\n    border\n    border-solid;\n}\n\n.arrow::before {\n  outline: 1px solid var(--calcite-color-border-3);\n}\n\n@include base-component();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { toAriaBoolean } from \"../../utils/dom\";\nimport {\n  connectFloatingUI,\n  defaultOffsetDistance,\n  disconnectFloatingUI,\n  FloatingCSS,\n  FloatingLayout,\n  FloatingUIComponent,\n  LogicalPlacement,\n  OverlayPositioning,\n  ReferenceElement,\n  reposition,\n} from \"../../utils/floating-ui\";\nimport { guid } from \"../../utils/guid\";\nimport { onToggleOpenCloseComponent, OpenCloseComponent } from \"../../utils/openCloseComponent\";\nimport { ARIA_DESCRIBED_BY, CSS } from \"./resources\";\n\nimport TooltipManager from \"./TooltipManager\";\nimport { getEffectiveReferenceElement } from \"./utils\";\nimport { FloatingArrow } from \"../functional/FloatingArrow\";\n\nconst manager = new TooltipManager();\n\n/**\n * @slot - A slot for adding text.\n */\n@Component({\n  tag: \"calcite-tooltip\",\n  styleUrl: \"tooltip.scss\",\n  shadow: true,\n})\nexport class Tooltip implements FloatingUIComponent, OpenCloseComponent {\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /** Closes the component when the `referenceElement` is clicked. */\n  @Prop({ reflect: true }) closeOnClick = false;\n\n  /**\n   * Accessible name for the component.\n   *\n   * @deprecated No longer necessary. Overrides the context of the component's description, which could confuse assistive technology users.\n   */\n  @Prop() label: string;\n\n  /**\n   * Offset the position of the component away from the `referenceElement`.\n   *\n   * @default 6\n   */\n  @Prop({ reflect: true }) offsetDistance = defaultOffsetDistance;\n\n  @Watch(\"offsetDistance\")\n  offsetDistanceOffsetHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * Offset the position of the component along the `referenceElement`.\n   */\n  @Prop({ reflect: true }) offsetSkidding = 0;\n\n  @Watch(\"offsetSkidding\")\n  offsetSkiddingHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * When `true`, the component is open.\n   */\n  @Prop({ reflect: true }) open = false;\n\n  @Watch(\"open\")\n  openHandler(): void {\n    onToggleOpenCloseComponent(this);\n    this.reposition(true);\n  }\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   *\n   * The `\"fixed\"` value should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  @Watch(\"overlayPositioning\")\n  overlayPositioningHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * Determines where the component will be positioned relative to the `referenceElement`.\n   */\n  @Prop({ reflect: true }) placement: LogicalPlacement = \"auto\";\n\n  @Watch(\"placement\")\n  placementHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * The `referenceElement` to position the component according to its `\"placement\"` value.\n   *\n   * Setting to the `HTMLElement` is preferred so the component does not need to query the DOM for the `referenceElement`.\n   *\n   * However, a string ID of the reference element can be used.\n   */\n  @Prop() referenceElement: ReferenceElement | string;\n\n  @Watch(\"referenceElement\")\n  referenceElementHandler(): void {\n    this.setUpReferenceElement();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteTooltipElement;\n\n  @State() effectiveReferenceElement: ReferenceElement;\n\n  @State() floatingLayout: FloatingLayout = \"vertical\";\n\n  arrowEl: SVGElement;\n\n  guid = `calcite-tooltip-${guid()}`;\n\n  hasLoaded = false;\n\n  openTransitionProp = \"opacity\";\n\n  transitionEl: HTMLDivElement;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.setUpReferenceElement(this.hasLoaded);\n    if (this.open) {\n      onToggleOpenCloseComponent(this);\n    }\n    connectFloatingUI(this, this.effectiveReferenceElement, this.el);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    if (this.open) {\n      onToggleOpenCloseComponent(this);\n    }\n  }\n\n  componentDidLoad(): void {\n    if (this.referenceElement && !this.effectiveReferenceElement) {\n      this.setUpReferenceElement();\n    }\n    this.reposition(true);\n    this.hasLoaded = true;\n  }\n\n  disconnectedCallback(): void {\n    this.removeReferences();\n    disconnectFloatingUI(this, this.effectiveReferenceElement, this.el);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /** Fires when the component is requested to be closed and before the closing transition begins. */\n  @Event({ cancelable: false }) calciteTooltipBeforeClose: EventEmitter<void>;\n\n  /** Fires when the component is closed and animation is complete. */\n  @Event({ cancelable: false }) calciteTooltipClose: EventEmitter<void>;\n\n  /** Fires when the component is added to the DOM but not rendered, and before the opening transition begins. */\n  @Event({ cancelable: false }) calciteTooltipBeforeOpen: EventEmitter<void>;\n\n  /** Fires when the component is open and animation is complete. */\n  @Event({ cancelable: false }) calciteTooltipOpen: EventEmitter<void>;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Updates the position of the component.\n   *\n   * @param delayed\n   */\n  @Method()\n  async reposition(delayed = false): Promise<void> {\n    const {\n      el,\n      effectiveReferenceElement,\n      placement,\n      overlayPositioning,\n      offsetDistance,\n      offsetSkidding,\n      arrowEl,\n    } = this;\n\n    return reposition(\n      this,\n      {\n        floatingEl: el,\n        referenceEl: effectiveReferenceElement,\n        overlayPositioning,\n        placement,\n        offsetDistance,\n        offsetSkidding,\n        arrowEl,\n        type: \"tooltip\",\n      },\n      delayed,\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  onBeforeOpen(): void {\n    this.calciteTooltipBeforeOpen.emit();\n  }\n\n  onOpen(): void {\n    this.calciteTooltipOpen.emit();\n  }\n\n  onBeforeClose(): void {\n    this.calciteTooltipBeforeClose.emit();\n  }\n\n  onClose(): void {\n    this.calciteTooltipClose.emit();\n  }\n\n  private setTransitionEl = (el): void => {\n    this.transitionEl = el;\n  };\n\n  setUpReferenceElement = (warn = true): void => {\n    this.removeReferences();\n    this.effectiveReferenceElement = getEffectiveReferenceElement(this.el);\n    connectFloatingUI(this, this.effectiveReferenceElement, this.el);\n\n    const { el, referenceElement, effectiveReferenceElement } = this;\n    if (warn && referenceElement && !effectiveReferenceElement) {\n      console.warn(`${el.tagName}: reference-element id \"${referenceElement}\" was not found.`, {\n        el,\n      });\n    }\n\n    this.addReferences();\n  };\n\n  getId = (): string => {\n    return this.el.id || this.guid;\n  };\n\n  addReferences = (): void => {\n    const { effectiveReferenceElement } = this;\n\n    if (!effectiveReferenceElement) {\n      return;\n    }\n\n    const id = this.getId();\n\n    if (\"setAttribute\" in effectiveReferenceElement) {\n      effectiveReferenceElement.setAttribute(ARIA_DESCRIBED_BY, id);\n    }\n\n    manager.registerElement(effectiveReferenceElement, this.el);\n  };\n\n  removeReferences = (): void => {\n    const { effectiveReferenceElement } = this;\n\n    if (!effectiveReferenceElement) {\n      return;\n    }\n\n    if (\"removeAttribute\" in effectiveReferenceElement) {\n      effectiveReferenceElement.removeAttribute(ARIA_DESCRIBED_BY);\n    }\n\n    manager.unregisterElement(effectiveReferenceElement);\n  };\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  render(): VNode {\n    const { effectiveReferenceElement, label, open, floatingLayout } = this;\n    const displayed = effectiveReferenceElement && open;\n    const hidden = !displayed;\n\n    return (\n      <Host\n        aria-hidden={toAriaBoolean(hidden)}\n        aria-label={label}\n        aria-live=\"polite\"\n        calcite-hydrated-hidden={hidden}\n        id={this.getId()}\n        role=\"tooltip\"\n      >\n        <div\n          class={{\n            [FloatingCSS.animation]: true,\n            [FloatingCSS.animationActive]: displayed,\n          }}\n          // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n          ref={this.setTransitionEl}\n        >\n          <FloatingArrow\n            floatingLayout={floatingLayout}\n            // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n            ref={(arrowEl: SVGElement) => (this.arrowEl = arrowEl)}\n          />\n          <div class={CSS.container}>\n            <slot />\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n","import { getShadowRootNode, isPrimaryPointerButton } from \"../../utils/dom\";\nimport { ReferenceElement } from \"../../utils/floating-ui\";\nimport { TOOLTIP_OPEN_DELAY_MS, TOOLTIP_CLOSE_DELAY_MS } from \"./resources\";\nimport { getEffectiveReferenceElement } from \"./utils\";\n\nexport default class TooltipManager {\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  private registeredElements = new WeakMap<ReferenceElement, HTMLCalciteTooltipElement>();\n\n  private registeredShadowRootCounts = new WeakMap<ShadowRoot, number>();\n\n  private hoverOpenTimeout: number = null;\n\n  private hoverCloseTimeout: number = null;\n\n  private hoveredTooltip: HTMLCalciteTooltipElement = null;\n\n  private clickedTooltip: HTMLCalciteTooltipElement = null;\n\n  private activeTooltip: HTMLCalciteTooltipElement = null;\n\n  private registeredElementCount = 0;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  registerElement(referenceEl: ReferenceElement, tooltip: HTMLCalciteTooltipElement): void {\n    this.registeredElementCount++;\n    this.registeredElements.set(referenceEl, tooltip);\n    const shadowRoot = this.getReferenceElShadowRootNode(referenceEl);\n\n    if (shadowRoot) {\n      this.registerShadowRoot(shadowRoot);\n    }\n\n    if (this.registeredElementCount === 1) {\n      this.addListeners();\n    }\n  }\n\n  unregisterElement(referenceEl: ReferenceElement): void {\n    const shadowRoot = this.getReferenceElShadowRootNode(referenceEl);\n\n    if (shadowRoot) {\n      this.unregisterShadowRoot(shadowRoot);\n    }\n\n    if (this.registeredElements.delete(referenceEl)) {\n      this.registeredElementCount--;\n    }\n\n    if (this.registeredElementCount === 0) {\n      this.removeListeners();\n    }\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  private queryTooltip = (composedPath: EventTarget[]): HTMLCalciteTooltipElement => {\n    const { registeredElements } = this;\n\n    const registeredElement = (composedPath as HTMLElement[]).find((pathEl) => registeredElements.has(pathEl));\n\n    return registeredElements.get(registeredElement);\n  };\n\n  private keyDownHandler = (event: KeyboardEvent): void => {\n    if (event.key === \"Escape\" && !event.defaultPrevented) {\n      const { activeTooltip } = this;\n\n      if (activeTooltip?.open) {\n        this.clearHoverTimeout();\n        this.closeActiveTooltip();\n\n        const referenceElement = getEffectiveReferenceElement(activeTooltip);\n\n        if (referenceElement instanceof Element && referenceElement.contains(event.target as HTMLElement)) {\n          event.preventDefault();\n        }\n      }\n    }\n  };\n\n  private pointerMoveHandler = (event: PointerEvent): void => {\n    const composedPath = event.composedPath();\n    const { activeTooltip } = this;\n    const hoveringActiveTooltip = activeTooltip?.open && composedPath.includes(activeTooltip);\n\n    if (hoveringActiveTooltip) {\n      this.clearHoverTimeout();\n      return;\n    }\n\n    const tooltip = this.queryTooltip(composedPath);\n    this.hoveredTooltip = tooltip;\n\n    if (this.isClosableClickedTooltip(tooltip)) {\n      return;\n    }\n\n    this.clickedTooltip = null;\n\n    if (tooltip) {\n      this.openHoveredTooltip(tooltip);\n    } else if (activeTooltip) {\n      this.closeHoveredTooltip();\n    }\n  };\n\n  private pointerDownHandler = (event: PointerEvent): void => {\n    if (!isPrimaryPointerButton(event)) {\n      return;\n    }\n\n    const clickedTooltip = this.queryTooltip(event.composedPath());\n\n    this.clickedTooltip = clickedTooltip;\n\n    if (clickedTooltip?.closeOnClick) {\n      this.toggleTooltip(clickedTooltip, false);\n      this.clearHoverTimeout();\n    }\n  };\n\n  private focusInHandler = (event: FocusEvent): void => {\n    this.queryFocusedTooltip(event, true);\n  };\n\n  private focusOutHandler = (event: FocusEvent): void => {\n    this.queryFocusedTooltip(event, false);\n  };\n\n  private addShadowListeners(shadowRoot: ShadowRoot): void {\n    shadowRoot.addEventListener(\"focusin\", this.focusInHandler, { capture: true });\n    shadowRoot.addEventListener(\"focusout\", this.focusOutHandler, { capture: true });\n  }\n\n  private removeShadowListeners(shadowRoot: ShadowRoot): void {\n    shadowRoot.removeEventListener(\"focusin\", this.focusInHandler, { capture: true });\n    shadowRoot.removeEventListener(\"focusout\", this.focusOutHandler, { capture: true });\n  }\n\n  private addListeners(): void {\n    window.addEventListener(\"keydown\", this.keyDownHandler, { capture: true });\n    window.addEventListener(\"pointermove\", this.pointerMoveHandler, { capture: true });\n    window.addEventListener(\"pointerdown\", this.pointerDownHandler, { capture: true });\n    window.addEventListener(\"focusin\", this.focusInHandler, { capture: true });\n    window.addEventListener(\"focusout\", this.focusOutHandler, { capture: true });\n  }\n\n  private removeListeners(): void {\n    window.removeEventListener(\"keydown\", this.keyDownHandler, { capture: true });\n    window.removeEventListener(\"pointermove\", this.pointerMoveHandler, { capture: true });\n    window.removeEventListener(\"pointerdown\", this.pointerDownHandler, { capture: true });\n    window.removeEventListener(\"focusin\", this.focusInHandler, { capture: true });\n    window.removeEventListener(\"focusout\", this.focusOutHandler, { capture: true });\n  }\n\n  private clearHoverOpenTimeout(): void {\n    window.clearTimeout(this.hoverOpenTimeout);\n    this.hoverOpenTimeout = null;\n  }\n\n  private clearHoverCloseTimeout(): void {\n    window.clearTimeout(this.hoverCloseTimeout);\n    this.hoverCloseTimeout = null;\n  }\n\n  private clearHoverTimeout(): void {\n    this.clearHoverOpenTimeout();\n    this.clearHoverCloseTimeout();\n  }\n\n  private closeActiveTooltip(): void {\n    const { activeTooltip } = this;\n\n    if (activeTooltip?.open) {\n      this.toggleTooltip(activeTooltip, false);\n    }\n  }\n\n  private toggleFocusedTooltip(tooltip: HTMLCalciteTooltipElement, open: boolean): void {\n    this.closeActiveTooltip();\n\n    if (open) {\n      this.clearHoverTimeout();\n    }\n\n    this.toggleTooltip(tooltip, open);\n  }\n\n  private toggleTooltip(tooltip: HTMLCalciteTooltipElement, open: boolean): void {\n    tooltip.open = open;\n\n    this.activeTooltip = open ? tooltip : null;\n  }\n\n  private openHoveredTooltip = (tooltip: HTMLCalciteTooltipElement): void => {\n    this.hoverOpenTimeout = window.setTimeout(\n      () => {\n        if (this.hoverOpenTimeout === null) {\n          return;\n        }\n\n        this.clearHoverCloseTimeout();\n\n        if (this.activeTooltip === this.hoveredTooltip) {\n          return;\n        }\n\n        this.closeActiveTooltip();\n\n        if (tooltip !== this.hoveredTooltip) {\n          return;\n        }\n\n        this.toggleTooltip(tooltip, true);\n      },\n      this.activeTooltip ? 0 : TOOLTIP_OPEN_DELAY_MS,\n    );\n  };\n\n  private closeHoveredTooltip = (): void => {\n    this.hoverCloseTimeout = window.setTimeout(() => {\n      if (this.hoverCloseTimeout === null) {\n        return;\n      }\n\n      this.closeActiveTooltip();\n    }, TOOLTIP_CLOSE_DELAY_MS);\n  };\n\n  private queryFocusedTooltip(event: FocusEvent, open: boolean): void {\n    const tooltip = this.queryTooltip(event.composedPath());\n\n    if (!tooltip || this.isClosableClickedTooltip(tooltip)) {\n      return;\n    }\n\n    this.toggleFocusedTooltip(tooltip, open);\n  }\n\n  private isClosableClickedTooltip(tooltip: HTMLCalciteTooltipElement): boolean {\n    return tooltip?.closeOnClick && tooltip === this.clickedTooltip;\n  }\n\n  private registerShadowRoot(shadowRoot: ShadowRoot): void {\n    const { registeredShadowRootCounts } = this;\n\n    const newCount = (registeredShadowRootCounts.get(shadowRoot) ?? 0) + 1;\n\n    if (newCount === 1) {\n      this.addShadowListeners(shadowRoot);\n    }\n\n    registeredShadowRootCounts.set(shadowRoot, newCount);\n  }\n\n  private unregisterShadowRoot(shadowRoot: ShadowRoot): void {\n    const { registeredShadowRootCounts } = this;\n\n    const newCount = registeredShadowRootCounts.get(shadowRoot) - 1;\n\n    if (newCount === 0) {\n      this.removeShadowListeners(shadowRoot);\n    }\n\n    registeredShadowRootCounts.set(shadowRoot, newCount);\n  }\n\n  private getReferenceElShadowRootNode(referenceEl: ReferenceElement): ShadowRoot | null {\n    return referenceEl instanceof Element ? getShadowRootNode(referenceEl) : null;\n  }\n}\n"],"names":["CSS","ARIA_DESCRIBED_BY","getEffectiveReferenceElement","tooltip","referenceElement","queryElementRoots","id","manager","constructor","registeredElements","WeakMap","registeredShadowRootCounts","hoverOpenTimeout","hoverCloseTimeout","hoveredTooltip","clickedTooltip","activeTooltip","registeredElementCount","queryTooltip","composedPath","this","registeredElement","find","pathEl","has","get","keyDownHandler","event","key","defaultPrevented","open","clearHoverTimeout","closeActiveTooltip","Element","contains","target","preventDefault","pointerMoveHandler","includes","isClosableClickedTooltip","openHoveredTooltip","closeHoveredTooltip","pointerDownHandler","isPrimaryPointerButton","closeOnClick","toggleTooltip","focusInHandler","queryFocusedTooltip","focusOutHandler","window","setTimeout","clearHoverCloseTimeout","registerElement","referenceEl","set","shadowRoot","getReferenceElShadowRootNode","registerShadowRoot","addListeners","unregisterElement","unregisterShadowRoot","delete","removeListeners","addShadowListeners","addEventListener","capture","removeShadowListeners","removeEventListener","clearHoverOpenTimeout","clearTimeout","toggleFocusedTooltip","_registeredShadowRoot","newCount","getShadowRootNode","Tooltip","proxyCustomElement","HTMLElement","guid","concat","hasLoaded","openTransitionProp","setTransitionEl","el","transitionEl","setUpReferenceElement","warn","arguments","length","undefined","_this","removeReferences","effectiveReferenceElement","connectFloatingUI","console","tagName","addReferences","getId","setAttribute","removeAttribute","defaultOffsetDistance","offsetDistanceOffsetHandler","reposition","offsetSkiddingHandler","openHandler","onToggleOpenCloseComponent","overlayPositioningHandler","placementHandler","referenceElementHandler","connectedCallback","componentWillLoad","componentDidLoad","disconnectedCallback","disconnectFloatingUI","delayed","placement","overlayPositioning","offsetDistance","offsetSkidding","arrowEl","floatingEl","type","onBeforeOpen","calciteTooltipBeforeOpen","emit","onOpen","calciteTooltipOpen","onBeforeClose","calciteTooltipBeforeClose","onClose","calciteTooltipClose","render","label","floatingLayout","displayed","hidden","h","Host","toAriaBoolean","role","class","FloatingCSS","animation","animationActive","ref","FloatingArrow"],"sourceRoot":""}