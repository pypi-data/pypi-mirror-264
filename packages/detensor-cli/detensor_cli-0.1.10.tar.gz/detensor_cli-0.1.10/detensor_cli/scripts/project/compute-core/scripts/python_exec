#! /usr/bin/env python3
import subprocess

import grpc
from typing import List
from inter_pb2 import PyExecReq
import inter_pb2_grpc
import argparse
import time
from pathlib import Path

argparser = argparse.ArgumentParser(description='script to async exec contract')
argparser.add_argument('-H', '--host', type=str, default='http://localhost:3000',
                       help='http endpoint of compute user service')
argparser.add_argument('-u', '--uid', type=int, default=1, help='contract uid')
argparser.add_argument('-a', '--args', type=str, nargs='+', help='execute arguments')
argparser.add_argument('-m', '--members', type=str, nargs="+", help='members involved in this execution')
argparser.add_argument('--verbose', action='store_true', help='print debug information')

ARGS = argparser.parse_args()
host: str = ARGS.host
uid: int = ARGS.uid
args: List[str] = ARGS.args
members: List[str] = ARGS.members
verbose: bool = ARGS.verbose


def printv(*args, **kwargs):
    if verbose:
        print(*args, **kwargs)


if len(members) == 0:
    print("members can't be empty!")
    exit(1)

all_time = []

printv('create client and connect grpc server ...')
if host.startswith('http://'):
    addr = host[7:]
    printv('addr:', addr)
    channel = grpc.insecure_channel(addr)
elif host.startswith('https://'):
    addr = host[8:]
    printv('addr:', addr)
    channel = grpc.secure_channel(addr, grpc.ssl_channel_credentials())
else:
    print('unknown protocol, support protocol http:// or https://')
    exit(1)

client = inter_pb2_grpc.CoreUserServiceStub(channel)
printv('connected')

exec_req = PyExecReq(
    uid=uid,
    members=members,
    args=args
)

start = time.time()
out = client.PyExec(exec_req)
end = time.time()
diff = end - start

print(f'({out.creator}, {out.serial})')
time.sleep(2)
python_script = Path(__file__).parent / "get_output"
# 使用 subprocess 模块调用不以 .py 结尾的 Python 脚本
subprocess.run(["python3", python_script, f"{out.creator}", f"{out.serial}"])
