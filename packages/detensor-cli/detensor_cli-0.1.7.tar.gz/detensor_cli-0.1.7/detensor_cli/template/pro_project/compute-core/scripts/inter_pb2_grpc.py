# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import inter_pb2 as inter__pb2


class CoreServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Fetch = channel.unary_unary(
                '/inter.CoreService/Fetch',
                request_serializer=inter__pb2.FetchReq.SerializeToString,
                response_deserializer=inter__pb2.FetchRes.FromString,
                )
        self.Ipc = channel.unary_unary(
                '/inter.CoreService/Ipc',
                request_serializer=inter__pb2.IpcReq.SerializeToString,
                response_deserializer=inter__pb2.IpcRes.FromString,
                )
        self.Start = channel.unary_unary(
                '/inter.CoreService/Start',
                request_serializer=inter__pb2.StartReq.SerializeToString,
                response_deserializer=inter__pb2.StartRes.FromString,
                )
        self.PyStart = channel.unary_unary(
                '/inter.CoreService/PyStart',
                request_serializer=inter__pb2.PyStartReq.SerializeToString,
                response_deserializer=inter__pb2.PyStartRes.FromString,
                )
        self.Prepare = channel.unary_unary(
                '/inter.CoreService/Prepare',
                request_serializer=inter__pb2.PrepareReq.SerializeToString,
                response_deserializer=inter__pb2.PrepareRes.FromString,
                )
        self.PyPrepare = channel.unary_unary(
                '/inter.CoreService/PyPrepare',
                request_serializer=inter__pb2.PyPrepareReq.SerializeToString,
                response_deserializer=inter__pb2.PyPrepareRes.FromString,
                )


class CoreServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Fetch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ipc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Start(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PyStart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Prepare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PyPrepare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoreServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Fetch': grpc.unary_unary_rpc_method_handler(
                    servicer.Fetch,
                    request_deserializer=inter__pb2.FetchReq.FromString,
                    response_serializer=inter__pb2.FetchRes.SerializeToString,
            ),
            'Ipc': grpc.unary_unary_rpc_method_handler(
                    servicer.Ipc,
                    request_deserializer=inter__pb2.IpcReq.FromString,
                    response_serializer=inter__pb2.IpcRes.SerializeToString,
            ),
            'Start': grpc.unary_unary_rpc_method_handler(
                    servicer.Start,
                    request_deserializer=inter__pb2.StartReq.FromString,
                    response_serializer=inter__pb2.StartRes.SerializeToString,
            ),
            'PyStart': grpc.unary_unary_rpc_method_handler(
                    servicer.PyStart,
                    request_deserializer=inter__pb2.PyStartReq.FromString,
                    response_serializer=inter__pb2.PyStartRes.SerializeToString,
            ),
            'Prepare': grpc.unary_unary_rpc_method_handler(
                    servicer.Prepare,
                    request_deserializer=inter__pb2.PrepareReq.FromString,
                    response_serializer=inter__pb2.PrepareRes.SerializeToString,
            ),
            'PyPrepare': grpc.unary_unary_rpc_method_handler(
                    servicer.PyPrepare,
                    request_deserializer=inter__pb2.PyPrepareReq.FromString,
                    response_serializer=inter__pb2.PyPrepareRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'inter.CoreService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CoreService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Fetch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inter.CoreService/Fetch',
            inter__pb2.FetchReq.SerializeToString,
            inter__pb2.FetchRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ipc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inter.CoreService/Ipc',
            inter__pb2.IpcReq.SerializeToString,
            inter__pb2.IpcRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inter.CoreService/Start',
            inter__pb2.StartReq.SerializeToString,
            inter__pb2.StartRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PyStart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inter.CoreService/PyStart',
            inter__pb2.PyStartReq.SerializeToString,
            inter__pb2.PyStartRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Prepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inter.CoreService/Prepare',
            inter__pb2.PrepareReq.SerializeToString,
            inter__pb2.PrepareRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PyPrepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inter.CoreService/PyPrepare',
            inter__pb2.PyPrepareReq.SerializeToString,
            inter__pb2.PyPrepareRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CoreUserServiceStub(object):
    """计算节点用户服务接口
    系统用户应当使用这个接口
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Exec = channel.unary_unary(
                '/inter.CoreUserService/Exec',
                request_serializer=inter__pb2.ExecReq.SerializeToString,
                response_deserializer=inter__pb2.ExecRes.FromString,
                )
        self.ExecSync = channel.unary_unary(
                '/inter.CoreUserService/ExecSync',
                request_serializer=inter__pb2.ExecReq.SerializeToString,
                response_deserializer=inter__pb2.ExecSyncRes.FromString,
                )
        self.GetOutput = channel.unary_unary(
                '/inter.CoreUserService/GetOutput',
                request_serializer=inter__pb2.GetOutputReq.SerializeToString,
                response_deserializer=inter__pb2.GetOutputRes.FromString,
                )
        self.PyExec = channel.unary_unary(
                '/inter.CoreUserService/PyExec',
                request_serializer=inter__pb2.PyExecReq.SerializeToString,
                response_deserializer=inter__pb2.PyExecRes.FromString,
                )
        self.PyExecSync = channel.unary_unary(
                '/inter.CoreUserService/PyExecSync',
                request_serializer=inter__pb2.PyExecReq.SerializeToString,
                response_deserializer=inter__pb2.PyExecSyncRes.FromString,
                )


class CoreUserServiceServicer(object):
    """计算节点用户服务接口
    系统用户应当使用这个接口
    """

    def Exec(self, request, context):
        """异步执行合约, 系统收到请求后会返回合约的id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecSync(self, request, context):
        """同步执行合约, 系统收到请求后会直接返回合约的执行结果
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOutput(self, request, context):
        """获取输出, 系统收到请求后查询合约的执行状态并返回执行结果
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PyExec(self, request, context):
        """执行Python合约，系统收到请求后会返回合约的id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PyExecSync(self, request, context):
        """同步执行Python合约，系统收到请求后直接返回结果
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoreUserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Exec': grpc.unary_unary_rpc_method_handler(
                    servicer.Exec,
                    request_deserializer=inter__pb2.ExecReq.FromString,
                    response_serializer=inter__pb2.ExecRes.SerializeToString,
            ),
            'ExecSync': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecSync,
                    request_deserializer=inter__pb2.ExecReq.FromString,
                    response_serializer=inter__pb2.ExecSyncRes.SerializeToString,
            ),
            'GetOutput': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOutput,
                    request_deserializer=inter__pb2.GetOutputReq.FromString,
                    response_serializer=inter__pb2.GetOutputRes.SerializeToString,
            ),
            'PyExec': grpc.unary_unary_rpc_method_handler(
                    servicer.PyExec,
                    request_deserializer=inter__pb2.PyExecReq.FromString,
                    response_serializer=inter__pb2.PyExecRes.SerializeToString,
            ),
            'PyExecSync': grpc.unary_unary_rpc_method_handler(
                    servicer.PyExecSync,
                    request_deserializer=inter__pb2.PyExecReq.FromString,
                    response_serializer=inter__pb2.PyExecSyncRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'inter.CoreUserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CoreUserService(object):
    """计算节点用户服务接口
    系统用户应当使用这个接口
    """

    @staticmethod
    def Exec(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inter.CoreUserService/Exec',
            inter__pb2.ExecReq.SerializeToString,
            inter__pb2.ExecRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecSync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inter.CoreUserService/ExecSync',
            inter__pb2.ExecReq.SerializeToString,
            inter__pb2.ExecSyncRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOutput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inter.CoreUserService/GetOutput',
            inter__pb2.GetOutputReq.SerializeToString,
            inter__pb2.GetOutputRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PyExec(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inter.CoreUserService/PyExec',
            inter__pb2.PyExecReq.SerializeToString,
            inter__pb2.PyExecRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PyExecSync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inter.CoreUserService/PyExecSync',
            inter__pb2.PyExecReq.SerializeToString,
            inter__pb2.PyExecSyncRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
