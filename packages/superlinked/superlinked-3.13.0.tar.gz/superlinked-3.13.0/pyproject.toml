[tool.poetry]
name = "superlinked"
version = "3.13.0"  # The version will be dynamically updated
description = "The Superlinked vector computing library"
authors = ["Superlinked Release <release@superlinked.com>"]
readme = "PYPI_README.md"
license = "Apache-2.0"
include = ["NOTICE"]

[tool.poetry.dependencies]
python = "~3.10"
numpy = "==1.22.4"
pandas = "^2.2.1"
sentence-transformers = "2.2.2"
typing_extensions = ">=3.10.0.2"
beartype = "^0.17.2"
furl = "^2.1.3"
pydantic = "^2.6.4"
altair = { version = "5.2.0", optional = true }
fastapi = { version = "0.109.0", optional = true }
uvicorn = { version = "0.15.0", optional = true }
supervisor = { version = "4.2.5", optional = true }
deltalake = { version = "0.15.1", optional = true }
dask = { version = "2024.1.0", extras = ["complete", "distributed"], optional = true }
fsspec = { version = "2023.12.2", optional = true }
gcsfs = { version = "2023.12.2.post1", optional = true }
s3fs = { version = "2023.12.2", optional = true }
adlfs = { version = "2023.12.0", optional = true }
httpx = { version = "0.26.0", optional = true }
boto3 = { version = "1.34.13", optional = true }
boto3-stubs = { version = "1.34.13", extras = ["s3"], optional = true }
google-auth = { version = "2.26.1", optional = true }
google-cloud-storage = { version = "2.14.0", optional = true }
pyyaml = { version = "6.0.1", optional = true }
requests = { version = "2.27.1", optional = true }
jupyter = { version = "^1.0.0", optional = true }
yelp-gprof2dot = { version = "~1.2.0", optional = true }
graphviz = { version = "~0.20.1", optional = true }
snakeviz = { version = "~2.2.0", optional = true }
pyspark = { version = "3.5.0", optional = true }
cerberus = {version = "==1.3.5", optional = true}
pydantic-settings = {version = "^2.2.1", optional = true}
typing-inspect = {version = "^0.9.0", optional = true}
umap-learn = {version = "==0.5.5", optional = true}
transformers = {version = "==4.38.2", optional = true}
accelerate = {version = "==0.27.2", optional = true}
ipywidgets = {version = "==8.1.2", optional = true}
inject = {version = "^5.2.0", optional = true}
fastapi-restful = {version = "^0.5.0", optional = true}

[tool.poetry.extras]
interactive = ["altair", "jupyter", "umap-learn", "transformers", "accelerate", "ipywidgets"]
deployment-executor = ["fastapi", "uvicorn", "supervisor", "deltalake", "dask", "typing-extensions", "fsspec", "gcsfs", "s3fs", "adlfs", "httpx", "cerberus", "pydantic-settings", "typing-inspect", "inject", "fastapi-restful"]
deployment-poller = ["boto3", "boto3-stubs", "google-auth", "google-cloud-storage", "pyyaml", "requests", "cerberus"]
profiler = ["jupyter", "yelp-gprof2dot", "graphviz", "snakeviz"]
batch = ["pyspark"]

[tool.poetry.group.dev.dependencies]
types-google-cloud-ndb = "~2.2.0.20240205"
types-jmespath = "~1.0.2.20240106"
types-pyyaml = "~6.0.12.12"
mypy-boto3 = "~1.34.41"
types-requests = "<2.31.0.7"
pytest = "7.4.3"
pytest-mock = "3.12.0"
pytest-emoji = "~0.2.0"
pytest-md = "~0.2.0"
autoflake = "~2.2.1"
coverage = "~7.4.0"
debugpy = "~1.8.0"
flake8 = "~7.0.0"
mypy = "<1.6"
pdoc3 = "~0.10.0"
pyflakes = "~3.2.0"
typing-protocol-intersection = "~0.3.10"
typing-extensions = "4.9.0"
data-science-types = "~0.2.23"
build = "~1.0.3"
in-place = "~1.0.0"
ipython = "~8.20.0"
nbconvert = "~7.14.2"
setuptools = "~69.0.3"
setuptools-git-versioning = "~1.13.5"
wheel = "~0.42.0"
pylint = "~3.0.3"
python-semantic-release = "~8.7.0"
mdformat-gfm = "~0.3.5"
moto = { version = "5.0.1", extras = ["all"] }
pylint-pydantic = "^0.3.2"
pytest-asyncio = "^0.23.5.post1"
nbqa = "^1.8.4"
black = {extras = ["jupyter"], version = "^24.2.0"}

[build-system]
requires = ["setuptools>=41", "wheel", "setuptools-git-versioning<2", "poetry-core>=1.0.0"]
build-backend = ["setuptools.build_meta", "poetry.core.masonry.api"]

[tool.setuptools-git-versioning]
enabled = true

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["superlinked*"]
exclude = ["tools*", "test*", "notebook*", "examples*", "deployment*"]

[semantic_release]
assets = []
commit_message = "[skip ci] {version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "angular"
logging_use_named_masks = false
major_on_zero = true
tag_format = "{version}"

[semantic_release.branches.main]
match = "(main)"
prerelease_token = "rc"
prerelease = false

[semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false

[semantic_release.remote.token]
env = "GH_TOKEN"

[semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = false
