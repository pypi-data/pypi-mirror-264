# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from terrascope_api.models import data_source_pb2 as data__source__pb2


class DataSourceAPIStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get = channel.unary_unary(
                '/oi.papi.DataSourceAPI/get',
                request_serializer=data__source__pb2.DataSourceGetRequest.SerializeToString,
                response_deserializer=data__source__pb2.DataSourceGetResponse.FromString,
                )
        self.list = channel.unary_unary(
                '/oi.papi.DataSourceAPI/list',
                request_serializer=data__source__pb2.DataSourceListRequest.SerializeToString,
                response_deserializer=data__source__pb2.DataSourceListResponse.FromString,
                )


class DataSourceAPIServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get(self, request, context):
        """
        Retrieves all of the details about the specified DataSource.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list(self, request, context):
        """
        List all available DataSources that the user has access to.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataSourceAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=data__source__pb2.DataSourceGetRequest.FromString,
                    response_serializer=data__source__pb2.DataSourceGetResponse.SerializeToString,
            ),
            'list': grpc.unary_unary_rpc_method_handler(
                    servicer.list,
                    request_deserializer=data__source__pb2.DataSourceListRequest.FromString,
                    response_serializer=data__source__pb2.DataSourceListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'oi.papi.DataSourceAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataSourceAPI(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/oi.papi.DataSourceAPI/get',
            data__source__pb2.DataSourceGetRequest.SerializeToString,
            data__source__pb2.DataSourceGetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/oi.papi.DataSourceAPI/list',
            data__source__pb2.DataSourceListRequest.SerializeToString,
            data__source__pb2.DataSourceListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
