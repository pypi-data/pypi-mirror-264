# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from terrascope_api.models import visualization_pb2 as visualization__pb2


class VisualizationApiStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get = channel.unary_unary(
                '/oi.papi.visualization.VisualizationApi/get',
                request_serializer=visualization__pb2.VisualizationGetRequest.SerializeToString,
                response_deserializer=visualization__pb2.VisualizationGetResponse.FromString,
                )
        self.create_config_algo_version = channel.unary_unary(
                '/oi.papi.visualization.VisualizationApi/create_config_algo_version',
                request_serializer=visualization__pb2.VisualizerConfigAlgoVersionCreateRequest.SerializeToString,
                response_deserializer=visualization__pb2.VisualizerConfigAlgoVersionCreateResponse.FromString,
                )
        self.create_config_algo_config = channel.unary_unary(
                '/oi.papi.visualization.VisualizationApi/create_config_algo_config',
                request_serializer=visualization__pb2.VisualizerConfigAlgoConfigCreateRequest.SerializeToString,
                response_deserializer=visualization__pb2.VisualizerConfigAlgoConfigCreateResponse.FromString,
                )
        self.get_config_algo = channel.unary_unary(
                '/oi.papi.visualization.VisualizationApi/get_config_algo',
                request_serializer=visualization__pb2.VisualizerConfigAlgoGetRequest.SerializeToString,
                response_deserializer=visualization__pb2.VisualizerConfigAlgoGetResponse.FromString,
                )


class VisualizationApiServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get(self, request, context):
        """
        Gets a list of Visualizations that can be used to download visualization data files that can then be rendered on the front end.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_config_algo_version(self, request, context):
        """
        Creates a list of Visualizer Config Algos to fetch Visualizer details for each algorithm_version_id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_config_algo_config(self, request, context):
        """
        Creates a list of Visualizer Config Algos to fetch Visualizer details for each algorithm_config_id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_config_algo(self, request, context):
        """
        Gets a list of Visualizer Config Algos to fetch Visualizer details for each algorithm_version_id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VisualizationApiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=visualization__pb2.VisualizationGetRequest.FromString,
                    response_serializer=visualization__pb2.VisualizationGetResponse.SerializeToString,
            ),
            'create_config_algo_version': grpc.unary_unary_rpc_method_handler(
                    servicer.create_config_algo_version,
                    request_deserializer=visualization__pb2.VisualizerConfigAlgoVersionCreateRequest.FromString,
                    response_serializer=visualization__pb2.VisualizerConfigAlgoVersionCreateResponse.SerializeToString,
            ),
            'create_config_algo_config': grpc.unary_unary_rpc_method_handler(
                    servicer.create_config_algo_config,
                    request_deserializer=visualization__pb2.VisualizerConfigAlgoConfigCreateRequest.FromString,
                    response_serializer=visualization__pb2.VisualizerConfigAlgoConfigCreateResponse.SerializeToString,
            ),
            'get_config_algo': grpc.unary_unary_rpc_method_handler(
                    servicer.get_config_algo,
                    request_deserializer=visualization__pb2.VisualizerConfigAlgoGetRequest.FromString,
                    response_serializer=visualization__pb2.VisualizerConfigAlgoGetResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'oi.papi.visualization.VisualizationApi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VisualizationApi(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/oi.papi.visualization.VisualizationApi/get',
            visualization__pb2.VisualizationGetRequest.SerializeToString,
            visualization__pb2.VisualizationGetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_config_algo_version(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/oi.papi.visualization.VisualizationApi/create_config_algo_version',
            visualization__pb2.VisualizerConfigAlgoVersionCreateRequest.SerializeToString,
            visualization__pb2.VisualizerConfigAlgoVersionCreateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_config_algo_config(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/oi.papi.visualization.VisualizationApi/create_config_algo_config',
            visualization__pb2.VisualizerConfigAlgoConfigCreateRequest.SerializeToString,
            visualization__pb2.VisualizerConfigAlgoConfigCreateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_config_algo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/oi.papi.visualization.VisualizationApi/get_config_algo',
            visualization__pb2.VisualizerConfigAlgoGetRequest.SerializeToString,
            visualization__pb2.VisualizerConfigAlgoGetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
