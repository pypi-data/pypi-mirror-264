# coding: utf-8

"""
    IONOS DBaaS MariaDB REST API

    An enterprise-grade Database is provided as a Service (DBaaS) solution that can be managed through a browser-based \"Data Center Designer\" (DCD) tool or via an easy to use API.  The API allows you to create additional MariaDB database clusters or modify existing ones. It is designed to allow users to leverage the same power and flexibility found within the DCD visual tool. Both tools are consistent with their concepts and lend well to making the experience smooth and intuitive.   # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from ionoscloud_dbaas_mariadb.configuration import Configuration


class Backup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {

        'cluster_id': 'str',

        'earliest_recovery_target_time': 'datetime',

        'size': 'int',

        'base_backups': 'list[BaseBackup]',
    }

    attribute_map = {

        'cluster_id': 'clusterId',

        'earliest_recovery_target_time': 'earliestRecoveryTargetTime',

        'size': 'size',

        'base_backups': 'baseBackups',
    }

    def __init__(self, cluster_id=None, earliest_recovery_target_time=None, size=None, base_backups=None, local_vars_configuration=None):  # noqa: E501
        """Backup - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cluster_id = None
        self._earliest_recovery_target_time = None
        self._size = None
        self._base_backups = None
        self.discriminator = None

        if cluster_id is not None:
            self.cluster_id = cluster_id
        if earliest_recovery_target_time is not None:
            self.earliest_recovery_target_time = earliest_recovery_target_time
        if size is not None:
            self.size = size
        if base_backups is not None:
            self.base_backups = base_backups


    @property
    def cluster_id(self):
        """Gets the cluster_id of this Backup.  # noqa: E501

        The unique ID of the cluster that was backed up.  # noqa: E501

        :return: The cluster_id of this Backup.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this Backup.

        The unique ID of the cluster that was backed up.  # noqa: E501

        :param cluster_id: The cluster_id of this Backup.  # noqa: E501
        :type cluster_id: str
        """

        self._cluster_id = cluster_id

    @property
    def earliest_recovery_target_time(self):
        """Gets the earliest_recovery_target_time of this Backup.  # noqa: E501

        The oldest available timestamp to which you can restore.  # noqa: E501

        :return: The earliest_recovery_target_time of this Backup.  # noqa: E501
        :rtype: datetime
        """
        return self._earliest_recovery_target_time

    @earliest_recovery_target_time.setter
    def earliest_recovery_target_time(self, earliest_recovery_target_time):
        """Sets the earliest_recovery_target_time of this Backup.

        The oldest available timestamp to which you can restore.  # noqa: E501

        :param earliest_recovery_target_time: The earliest_recovery_target_time of this Backup.  # noqa: E501
        :type earliest_recovery_target_time: datetime
        """

        self._earliest_recovery_target_time = earliest_recovery_target_time

    @property
    def size(self):
        """Gets the size of this Backup.  # noqa: E501

        Size of all base backups in MiB. This is at least the sum of all base backup sizes.   # noqa: E501

        :return: The size of this Backup.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Backup.

        Size of all base backups in MiB. This is at least the sum of all base backup sizes.   # noqa: E501

        :param size: The size of this Backup.  # noqa: E501
        :type size: int
        """

        self._size = size

    @property
    def base_backups(self):
        """Gets the base_backups of this Backup.  # noqa: E501


        :return: The base_backups of this Backup.  # noqa: E501
        :rtype: list[BaseBackup]
        """
        return self._base_backups

    @base_backups.setter
    def base_backups(self, base_backups):
        """Sets the base_backups of this Backup.


        :param base_backups: The base_backups of this Backup.  # noqa: E501
        :type base_backups: list[BaseBackup]
        """

        self._base_backups = base_backups
    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Backup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Backup):
            return True

        return self.to_dict() != other.to_dict()
