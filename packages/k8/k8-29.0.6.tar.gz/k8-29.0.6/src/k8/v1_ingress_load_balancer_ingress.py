# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from .v1_ingress_port_status import V1IngressPortStatus

class V1IngressLoadBalancerIngress(BaseModel):
    """
    IngressLoadBalancerIngress represents the status of a load-balancer ingress point.  # noqa: E501
    """
    hostname: Optional[StrictStr] = Field(default=None, description="hostname is set for load-balancer ingress points that are DNS based.")
    ip: Optional[StrictStr] = Field(default=None, description="ip is set for load-balancer ingress points that are IP based.")
    ports: Optional[list[V1IngressPortStatus]] = Field(default=None, description="ports provides information about the ports exposed by this LoadBalancer.")
    __properties = ["hostname", "ip", "ports"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1IngressLoadBalancerIngress:
        """Create an instance of V1IngressLoadBalancerIngress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in ports (list)
        _items = []
        if self.ports:
            for _item in self.ports:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ports'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1IngressLoadBalancerIngress:
        """Create an instance of V1IngressLoadBalancerIngress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1IngressLoadBalancerIngress.parse_obj(obj)

        _obj = V1IngressLoadBalancerIngress.parse_obj({
            "hostname": obj.get("hostname"),
            "ip": obj.get("ip"),
            "ports": [V1IngressPortStatus.from_dict(_item) for _item in obj.get("ports")] if obj.get("ports") is not None else None
        })
        return _obj


