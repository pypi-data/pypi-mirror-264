# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class V1ResourceRule(BaseModel):
    """
    ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.  # noqa: E501
    """
    api_groups: Optional[list[StrictStr]] = Field(default=None, alias="apiGroups", description="APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  \"*\" means all.")
    resource_names: Optional[list[StrictStr]] = Field(default=None, alias="resourceNames", description="ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  \"*\" means all.")
    resources: Optional[list[StrictStr]] = Field(default=None, description="Resources is a list of resources this rule applies to.  \"*\" means all in the specified apiGroups.  \"*/foo\" represents the subresource 'foo' for all resources in the specified apiGroups.")
    verbs: list[StrictStr] = Field(..., description="Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.")
    __properties = ["apiGroups", "resourceNames", "resources", "verbs"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ResourceRule:
        """Create an instance of V1ResourceRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ResourceRule:
        """Create an instance of V1ResourceRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ResourceRule.parse_obj(obj)

        _obj = V1ResourceRule.parse_obj({
            "api_groups": obj.get("apiGroups"),
            "resource_names": obj.get("resourceNames"),
            "resources": obj.get("resources"),
            "verbs": obj.get("verbs")
        })
        return _obj


