# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from .v1_object_reference import V1ObjectReference

class V1EndpointAddress(BaseModel):
    """
    EndpointAddress is a tuple that describes single IP address.  # noqa: E501
    """
    hostname: Optional[StrictStr] = Field(default=None, description="The Hostname of this endpoint")
    ip: StrictStr = Field(..., description="The IP of this endpoint. May not be loopback (127.0.0.0/8 or ::1), link-local (169.254.0.0/16 or fe80::/10), or link-local multicast (224.0.0.0/24 or ff02::/16).")
    node_name: Optional[StrictStr] = Field(default=None, alias="nodeName", description="Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.")
    target_ref: Optional[V1ObjectReference] = Field(default=None, alias="targetRef")
    __properties = ["hostname", "ip", "nodeName", "targetRef"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1EndpointAddress:
        """Create an instance of V1EndpointAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of target_ref
        if self.target_ref:
            _dict['targetRef'] = self.target_ref.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1EndpointAddress:
        """Create an instance of V1EndpointAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1EndpointAddress.parse_obj(obj)

        _obj = V1EndpointAddress.parse_obj({
            "hostname": obj.get("hostname"),
            "ip": obj.get("ip"),
            "node_name": obj.get("nodeName"),
            "target_ref": V1ObjectReference.from_dict(obj.get("targetRef")) if obj.get("targetRef") is not None else None
        })
        return _obj


