# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from .v1_http_header import V1HTTPHeader

class V1HTTPGetAction(BaseModel):
    """
    HTTPGetAction describes an action based on HTTP Get requests.  # noqa: E501
    """
    host: Optional[StrictStr] = Field(default=None, description="Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.")
    http_headers: Optional[list[V1HTTPHeader]] = Field(default=None, alias="httpHeaders", description="Custom headers to set in the request. HTTP allows repeated headers.")
    path: Optional[StrictStr] = Field(default=None, description="Path to access on the HTTP server.")
    port: StrictStr = Field(..., description="Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.")
    scheme: Optional[StrictStr] = Field(default=None, description="Scheme to use for connecting to the host. Defaults to HTTP.")
    __properties = ["host", "httpHeaders", "path", "port", "scheme"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1HTTPGetAction:
        """Create an instance of V1HTTPGetAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in http_headers (list)
        _items = []
        if self.http_headers:
            for _item in self.http_headers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['httpHeaders'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1HTTPGetAction:
        """Create an instance of V1HTTPGetAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1HTTPGetAction.parse_obj(obj)

        _obj = V1HTTPGetAction.parse_obj({
            "host": obj.get("host"),
            "http_headers": [V1HTTPHeader.from_dict(_item) for _item in obj.get("httpHeaders")] if obj.get("httpHeaders") is not None else None,
            "path": obj.get("path"),
            "port": obj.get("port"),
            "scheme": obj.get("scheme")
        })
        return _obj


