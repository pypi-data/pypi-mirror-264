# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from .v1_secret_reference import V1SecretReference

class V1CSIPersistentVolumeSource(BaseModel):
    """
    Represents storage that is managed by an external CSI volume driver (Beta feature)  # noqa: E501
    """
    controller_expand_secret_ref: Optional[V1SecretReference] = Field(default=None, alias="controllerExpandSecretRef")
    controller_publish_secret_ref: Optional[V1SecretReference] = Field(default=None, alias="controllerPublishSecretRef")
    driver: StrictStr = Field(..., description="driver is the name of the driver to use for this volume. Required.")
    fs_type: Optional[StrictStr] = Field(default=None, alias="fsType", description="fsType to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\".")
    node_expand_secret_ref: Optional[V1SecretReference] = Field(default=None, alias="nodeExpandSecretRef")
    node_publish_secret_ref: Optional[V1SecretReference] = Field(default=None, alias="nodePublishSecretRef")
    node_stage_secret_ref: Optional[V1SecretReference] = Field(default=None, alias="nodeStageSecretRef")
    read_only: Optional[StrictBool] = Field(default=None, alias="readOnly", description="readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).")
    volume_attributes: Optional[Dict[str, StrictStr]] = Field(default=None, alias="volumeAttributes", description="volumeAttributes of the volume to publish.")
    volume_handle: StrictStr = Field(..., alias="volumeHandle", description="volumeHandle is the unique volume name returned by the CSI volume pluginâ€™s CreateVolume to refer to the volume on all subsequent calls. Required.")
    __properties = ["controllerExpandSecretRef", "controllerPublishSecretRef", "driver", "fsType", "nodeExpandSecretRef", "nodePublishSecretRef", "nodeStageSecretRef", "readOnly", "volumeAttributes", "volumeHandle"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CSIPersistentVolumeSource:
        """Create an instance of V1CSIPersistentVolumeSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of controller_expand_secret_ref
        if self.controller_expand_secret_ref:
            _dict['controllerExpandSecretRef'] = self.controller_expand_secret_ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of controller_publish_secret_ref
        if self.controller_publish_secret_ref:
            _dict['controllerPublishSecretRef'] = self.controller_publish_secret_ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of node_expand_secret_ref
        if self.node_expand_secret_ref:
            _dict['nodeExpandSecretRef'] = self.node_expand_secret_ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of node_publish_secret_ref
        if self.node_publish_secret_ref:
            _dict['nodePublishSecretRef'] = self.node_publish_secret_ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of node_stage_secret_ref
        if self.node_stage_secret_ref:
            _dict['nodeStageSecretRef'] = self.node_stage_secret_ref.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CSIPersistentVolumeSource:
        """Create an instance of V1CSIPersistentVolumeSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CSIPersistentVolumeSource.parse_obj(obj)

        _obj = V1CSIPersistentVolumeSource.parse_obj({
            "controller_expand_secret_ref": V1SecretReference.from_dict(obj.get("controllerExpandSecretRef")) if obj.get("controllerExpandSecretRef") is not None else None,
            "controller_publish_secret_ref": V1SecretReference.from_dict(obj.get("controllerPublishSecretRef")) if obj.get("controllerPublishSecretRef") is not None else None,
            "driver": obj.get("driver"),
            "fs_type": obj.get("fsType"),
            "node_expand_secret_ref": V1SecretReference.from_dict(obj.get("nodeExpandSecretRef")) if obj.get("nodeExpandSecretRef") is not None else None,
            "node_publish_secret_ref": V1SecretReference.from_dict(obj.get("nodePublishSecretRef")) if obj.get("nodePublishSecretRef") is not None else None,
            "node_stage_secret_ref": V1SecretReference.from_dict(obj.get("nodeStageSecretRef")) if obj.get("nodeStageSecretRef") is not None else None,
            "read_only": obj.get("readOnly"),
            "volume_attributes": obj.get("volumeAttributes"),
            "volume_handle": obj.get("volumeHandle")
        })
        return _obj


