# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class V1CustomResourceColumnDefinition(BaseModel):
    """
    CustomResourceColumnDefinition specifies a column for server side printing.  # noqa: E501
    """
    description: Optional[StrictStr] = Field(default=None, description="description is a human readable description of this column.")
    format: Optional[StrictStr] = Field(default=None, description="format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.")
    json_path: StrictStr = Field(..., alias="jsonPath", description="jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.")
    name: StrictStr = Field(..., description="name is a human readable name for the column.")
    priority: Optional[StrictInt] = Field(default=None, description="priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.")
    type: StrictStr = Field(..., description="type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.")
    __properties = ["description", "format", "jsonPath", "name", "priority", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CustomResourceColumnDefinition:
        """Create an instance of V1CustomResourceColumnDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CustomResourceColumnDefinition:
        """Create an instance of V1CustomResourceColumnDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CustomResourceColumnDefinition.parse_obj(obj)

        _obj = V1CustomResourceColumnDefinition.parse_obj({
            "description": obj.get("description"),
            "format": obj.get("format"),
            "json_path": obj.get("jsonPath"),
            "name": obj.get("name"),
            "priority": obj.get("priority"),
            "type": obj.get("type")
        })
        return _obj


