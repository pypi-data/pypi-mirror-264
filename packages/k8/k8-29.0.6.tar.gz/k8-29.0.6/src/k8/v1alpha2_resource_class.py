# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from .v1_node_selector import V1NodeSelector
from .v1_object_meta import V1ObjectMeta
from .v1alpha2_resource_class_parameters_reference import V1alpha2ResourceClassParametersReference

class V1alpha2ResourceClass(BaseModel):
    """
    ResourceClass is used by administrators to influence how resources are allocated.  This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.  # noqa: E501
    """
    api_version: Optional[StrictStr] = Field(default=None, alias="apiVersion", description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources")
    driver_name: StrictStr = Field(..., alias="driverName", description="DriverName defines the name of the dynamic resource driver that is used for allocation of a ResourceClaim that uses this class.  Resource drivers have a unique name in forward domain order (acme.example.com).")
    kind: Optional[StrictStr] = Field(default=None, description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds")
    metadata: Optional[V1ObjectMeta] = None
    parameters_ref: Optional[V1alpha2ResourceClassParametersReference] = Field(default=None, alias="parametersRef")
    suitable_nodes: Optional[V1NodeSelector] = Field(default=None, alias="suitableNodes")
    __properties = ["apiVersion", "driverName", "kind", "metadata", "parametersRef", "suitableNodes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1alpha2ResourceClass:
        """Create an instance of V1alpha2ResourceClass from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parameters_ref
        if self.parameters_ref:
            _dict['parametersRef'] = self.parameters_ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suitable_nodes
        if self.suitable_nodes:
            _dict['suitableNodes'] = self.suitable_nodes.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1alpha2ResourceClass:
        """Create an instance of V1alpha2ResourceClass from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1alpha2ResourceClass.parse_obj(obj)

        _obj = V1alpha2ResourceClass.parse_obj({
            "api_version": obj.get("apiVersion"),
            "driver_name": obj.get("driverName"),
            "kind": obj.get("kind"),
            "metadata": V1ObjectMeta.from_dict(obj.get("metadata")) if obj.get("metadata") is not None else None,
            "parameters_ref": V1alpha2ResourceClassParametersReference.from_dict(obj.get("parametersRef")) if obj.get("parametersRef") is not None else None,
            "suitable_nodes": V1NodeSelector.from_dict(obj.get("suitableNodes")) if obj.get("suitableNodes") is not None else None
        })
        return _obj


