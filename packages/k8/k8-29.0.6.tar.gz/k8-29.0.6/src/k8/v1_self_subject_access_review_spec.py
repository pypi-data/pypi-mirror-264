# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from .v1_non_resource_attributes import V1NonResourceAttributes
from .v1_resource_attributes import V1ResourceAttributes

class V1SelfSubjectAccessReviewSpec(BaseModel):
    """
    SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set  # noqa: E501
    """
    non_resource_attributes: Optional[V1NonResourceAttributes] = Field(default=None, alias="nonResourceAttributes")
    resource_attributes: Optional[V1ResourceAttributes] = Field(default=None, alias="resourceAttributes")
    __properties = ["nonResourceAttributes", "resourceAttributes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1SelfSubjectAccessReviewSpec:
        """Create an instance of V1SelfSubjectAccessReviewSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of non_resource_attributes
        if self.non_resource_attributes:
            _dict['nonResourceAttributes'] = self.non_resource_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_attributes
        if self.resource_attributes:
            _dict['resourceAttributes'] = self.resource_attributes.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1SelfSubjectAccessReviewSpec:
        """Create an instance of V1SelfSubjectAccessReviewSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1SelfSubjectAccessReviewSpec.parse_obj(obj)

        _obj = V1SelfSubjectAccessReviewSpec.parse_obj({
            "non_resource_attributes": V1NonResourceAttributes.from_dict(obj.get("nonResourceAttributes")) if obj.get("nonResourceAttributes") is not None else None,
            "resource_attributes": V1ResourceAttributes.from_dict(obj.get("resourceAttributes")) if obj.get("resourceAttributes") is not None else None
        })
        return _obj


