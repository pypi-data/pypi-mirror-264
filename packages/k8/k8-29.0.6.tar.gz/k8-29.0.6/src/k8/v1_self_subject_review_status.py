# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from .v1_user_info import V1UserInfo

class V1SelfSubjectReviewStatus(BaseModel):
    """
    SelfSubjectReviewStatus is filled by the kube-apiserver and sent back to a user.  # noqa: E501
    """
    user_info: Optional[V1UserInfo] = Field(default=None, alias="userInfo")
    __properties = ["userInfo"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1SelfSubjectReviewStatus:
        """Create an instance of V1SelfSubjectReviewStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of user_info
        if self.user_info:
            _dict['userInfo'] = self.user_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1SelfSubjectReviewStatus:
        """Create an instance of V1SelfSubjectReviewStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1SelfSubjectReviewStatus.parse_obj(obj)

        _obj = V1SelfSubjectReviewStatus.parse_obj({
            "user_info": V1UserInfo.from_dict(obj.get("userInfo")) if obj.get("userInfo") is not None else None
        })
        return _obj


