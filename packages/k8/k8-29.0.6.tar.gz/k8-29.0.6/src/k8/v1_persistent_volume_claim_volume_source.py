# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class V1PersistentVolumeClaimVolumeSource(BaseModel):
    """
    PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).  # noqa: E501
    """
    claim_name: StrictStr = Field(..., alias="claimName", description="claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims")
    read_only: Optional[StrictBool] = Field(default=None, alias="readOnly", description="readOnly Will force the ReadOnly setting in VolumeMounts. Default false.")
    __properties = ["claimName", "readOnly"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1PersistentVolumeClaimVolumeSource:
        """Create an instance of V1PersistentVolumeClaimVolumeSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1PersistentVolumeClaimVolumeSource:
        """Create an instance of V1PersistentVolumeClaimVolumeSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1PersistentVolumeClaimVolumeSource.parse_obj(obj)

        _obj = V1PersistentVolumeClaimVolumeSource.parse_obj({
            "claim_name": obj.get("claimName"),
            "read_only": obj.get("readOnly")
        })
        return _obj


