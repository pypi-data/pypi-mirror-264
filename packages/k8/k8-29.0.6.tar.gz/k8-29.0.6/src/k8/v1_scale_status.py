# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class V1ScaleStatus(BaseModel):
    """
    ScaleStatus represents the current status of a scale subresource.  # noqa: E501
    """
    replicas: StrictInt = Field(..., description="replicas is the actual number of observed instances of the scaled object.")
    selector: Optional[StrictStr] = Field(default=None, description="selector is the label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/")
    __properties = ["replicas", "selector"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ScaleStatus:
        """Create an instance of V1ScaleStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ScaleStatus:
        """Create an instance of V1ScaleStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ScaleStatus.parse_obj(obj)

        _obj = V1ScaleStatus.parse_obj({
            "replicas": obj.get("replicas"),
            "selector": obj.get("selector")
        })
        return _obj


