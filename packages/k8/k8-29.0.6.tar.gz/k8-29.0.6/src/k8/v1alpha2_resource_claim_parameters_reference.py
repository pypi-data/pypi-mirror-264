# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class V1alpha2ResourceClaimParametersReference(BaseModel):
    """
    ResourceClaimParametersReference contains enough information to let you locate the parameters for a ResourceClaim. The object must be in the same namespace as the ResourceClaim.  # noqa: E501
    """
    api_group: Optional[StrictStr] = Field(default=None, alias="apiGroup", description="APIGroup is the group for the resource being referenced. It is empty for the core API. This matches the group in the APIVersion that is used when creating the resources.")
    kind: StrictStr = Field(..., description="Kind is the type of resource being referenced. This is the same value as in the parameter object's metadata, for example \"ConfigMap\".")
    name: StrictStr = Field(..., description="Name is the name of resource being referenced.")
    __properties = ["apiGroup", "kind", "name"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1alpha2ResourceClaimParametersReference:
        """Create an instance of V1alpha2ResourceClaimParametersReference from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1alpha2ResourceClaimParametersReference:
        """Create an instance of V1alpha2ResourceClaimParametersReference from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1alpha2ResourceClaimParametersReference.parse_obj(obj)

        _obj = V1alpha2ResourceClaimParametersReference.parse_obj({
            "api_group": obj.get("apiGroup"),
            "kind": obj.get("kind"),
            "name": obj.get("name")
        })
        return _obj


