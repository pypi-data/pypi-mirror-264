# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, conlist
from .v1_volume_projection import V1VolumeProjection

class V1ProjectedVolumeSource(BaseModel):
    """
    Represents a projected volume source  # noqa: E501
    """
    default_mode: Optional[StrictInt] = Field(default=None, alias="defaultMode", description="defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.")
    sources: Optional[list[V1VolumeProjection]] = Field(default=None, description="sources is the list of volume projections")
    __properties = ["defaultMode", "sources"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ProjectedVolumeSource:
        """Create an instance of V1ProjectedVolumeSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in sources (list)
        _items = []
        if self.sources:
            for _item in self.sources:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sources'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ProjectedVolumeSource:
        """Create an instance of V1ProjectedVolumeSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ProjectedVolumeSource.parse_obj(obj)

        _obj = V1ProjectedVolumeSource.parse_obj({
            "default_mode": obj.get("defaultMode"),
            "sources": [V1VolumeProjection.from_dict(_item) for _item in obj.get("sources")] if obj.get("sources") is not None else None
        })
        return _obj


