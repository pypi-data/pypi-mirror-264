# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from .v1_object_reference import V1ObjectReference

class V1CronJobStatus(BaseModel):
    """
    CronJobStatus represents the current state of a cron job.  # noqa: E501
    """
    active: Optional[list[V1ObjectReference]] = Field(default=None, description="A list of pointers to currently running jobs.")
    last_schedule_time: Optional[datetime] = Field(default=None, alias="lastScheduleTime", description="Information when was the last time the job was successfully scheduled.")
    last_successful_time: Optional[datetime] = Field(default=None, alias="lastSuccessfulTime", description="Information when was the last time the job successfully completed.")
    __properties = ["active", "lastScheduleTime", "lastSuccessfulTime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CronJobStatus:
        """Create an instance of V1CronJobStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in active (list)
        _items = []
        if self.active:
            for _item in self.active:
                if _item:
                    _items.append(_item.to_dict())
            _dict['active'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CronJobStatus:
        """Create an instance of V1CronJobStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CronJobStatus.parse_obj(obj)

        _obj = V1CronJobStatus.parse_obj({
            "active": [V1ObjectReference.from_dict(_item) for _item in obj.get("active")] if obj.get("active") is not None else None,
            "last_schedule_time": obj.get("lastScheduleTime"),
            "last_successful_time": obj.get("lastSuccessfulTime")
        })
        return _obj


