# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class V1AzureFilePersistentVolumeSource(BaseModel):
    """
    AzureFile represents an Azure File Service mount on the host and bind mount to the pod.  # noqa: E501
    """
    read_only: Optional[StrictBool] = Field(default=None, alias="readOnly", description="readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.")
    secret_name: StrictStr = Field(..., alias="secretName", description="secretName is the name of secret that contains Azure Storage Account Name and Key")
    secret_namespace: Optional[StrictStr] = Field(default=None, alias="secretNamespace", description="secretNamespace is the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod")
    share_name: StrictStr = Field(..., alias="shareName", description="shareName is the azure Share Name")
    __properties = ["readOnly", "secretName", "secretNamespace", "shareName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1AzureFilePersistentVolumeSource:
        """Create an instance of V1AzureFilePersistentVolumeSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1AzureFilePersistentVolumeSource:
        """Create an instance of V1AzureFilePersistentVolumeSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1AzureFilePersistentVolumeSource.parse_obj(obj)

        _obj = V1AzureFilePersistentVolumeSource.parse_obj({
            "read_only": obj.get("readOnly"),
            "secret_name": obj.get("secretName"),
            "secret_namespace": obj.get("secretNamespace"),
            "share_name": obj.get("shareName")
        })
        return _obj


