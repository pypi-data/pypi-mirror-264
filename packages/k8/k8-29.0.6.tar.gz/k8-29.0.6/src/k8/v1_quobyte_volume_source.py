# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class V1QuobyteVolumeSource(BaseModel):
    """
    Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.  # noqa: E501
    """
    group: Optional[StrictStr] = Field(default=None, description="group to map volume access to Default is no group")
    read_only: Optional[StrictBool] = Field(default=None, alias="readOnly", description="readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.")
    registry: StrictStr = Field(..., description="registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes")
    tenant: Optional[StrictStr] = Field(default=None, description="tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin")
    user: Optional[StrictStr] = Field(default=None, description="user to map volume access to Defaults to serivceaccount user")
    volume: StrictStr = Field(..., description="volume is a string that references an already created Quobyte volume by name.")
    __properties = ["group", "readOnly", "registry", "tenant", "user", "volume"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1QuobyteVolumeSource:
        """Create an instance of V1QuobyteVolumeSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1QuobyteVolumeSource:
        """Create an instance of V1QuobyteVolumeSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1QuobyteVolumeSource.parse_obj(obj)

        _obj = V1QuobyteVolumeSource.parse_obj({
            "group": obj.get("group"),
            "read_only": obj.get("readOnly"),
            "registry": obj.get("registry"),
            "tenant": obj.get("tenant"),
            "user": obj.get("user"),
            "volume": obj.get("volume")
        })
        return _obj


