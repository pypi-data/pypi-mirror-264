# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class V1OwnerReference(BaseModel):
    """
    OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.  # noqa: E501
    """
    api_version: StrictStr = Field(..., alias="apiVersion", description="API version of the referent.")
    block_owner_deletion: Optional[StrictBool] = Field(default=None, alias="blockOwnerDeletion", description="If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.")
    controller: Optional[StrictBool] = Field(default=None, description="If true, this reference points to the managing controller.")
    kind: StrictStr = Field(..., description="Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds")
    name: StrictStr = Field(..., description="Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names")
    uid: StrictStr = Field(..., description="UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids")
    __properties = ["apiVersion", "blockOwnerDeletion", "controller", "kind", "name", "uid"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1OwnerReference:
        """Create an instance of V1OwnerReference from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1OwnerReference:
        """Create an instance of V1OwnerReference from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1OwnerReference.parse_obj(obj)

        _obj = V1OwnerReference.parse_obj({
            "api_version": obj.get("apiVersion"),
            "block_owner_deletion": obj.get("blockOwnerDeletion"),
            "controller": obj.get("controller"),
            "kind": obj.get("kind"),
            "name": obj.get("name"),
            "uid": obj.get("uid")
        })
        return _obj


