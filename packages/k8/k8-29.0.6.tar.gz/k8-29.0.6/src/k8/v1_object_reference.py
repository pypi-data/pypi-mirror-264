# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class V1ObjectReference(BaseModel):
    """
    ObjectReference contains enough information to let you inspect or modify the referred object.  # noqa: E501
    """
    api_version: Optional[StrictStr] = Field(default=None, alias="apiVersion", description="API version of the referent.")
    field_path: Optional[StrictStr] = Field(default=None, alias="fieldPath", description="If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.")
    kind: Optional[StrictStr] = Field(default=None, description="Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds")
    name: Optional[StrictStr] = Field(default=None, description="Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names")
    namespace: Optional[StrictStr] = Field(default=None, description="Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/")
    resource_version: Optional[StrictStr] = Field(default=None, alias="resourceVersion", description="Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency")
    uid: Optional[StrictStr] = Field(default=None, description="UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids")
    __properties = ["apiVersion", "fieldPath", "kind", "name", "namespace", "resourceVersion", "uid"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ObjectReference:
        """Create an instance of V1ObjectReference from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ObjectReference:
        """Create an instance of V1ObjectReference from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ObjectReference.parse_obj(obj)

        _obj = V1ObjectReference.parse_obj({
            "api_version": obj.get("apiVersion"),
            "field_path": obj.get("fieldPath"),
            "kind": obj.get("kind"),
            "name": obj.get("name"),
            "namespace": obj.get("namespace"),
            "resource_version": obj.get("resourceVersion"),
            "uid": obj.get("uid")
        })
        return _obj


