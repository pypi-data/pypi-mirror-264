# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from .v1_preconditions import V1Preconditions

class V1DeleteOptions(BaseModel):
    """
    DeleteOptions may be provided when deleting an API object.  # noqa: E501
    """
    api_version: Optional[StrictStr] = Field(default=None, alias="apiVersion", description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources")
    dry_run: Optional[list[StrictStr]] = Field(default=None, alias="dryRun", description="When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed")
    grace_period_seconds: Optional[StrictInt] = Field(default=None, alias="gracePeriodSeconds", description="The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.")
    kind: Optional[StrictStr] = Field(default=None, description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds")
    orphan_dependents: Optional[StrictBool] = Field(default=None, alias="orphanDependents", description="Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.")
    preconditions: Optional[V1Preconditions] = None
    propagation_policy: Optional[StrictStr] = Field(default=None, alias="propagationPolicy", description="Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.")
    __properties = ["apiVersion", "dryRun", "gracePeriodSeconds", "kind", "orphanDependents", "preconditions", "propagationPolicy"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1DeleteOptions:
        """Create an instance of V1DeleteOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of preconditions
        if self.preconditions:
            _dict['preconditions'] = self.preconditions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1DeleteOptions:
        """Create an instance of V1DeleteOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1DeleteOptions.parse_obj(obj)

        _obj = V1DeleteOptions.parse_obj({
            "api_version": obj.get("apiVersion"),
            "dry_run": obj.get("dryRun"),
            "grace_period_seconds": obj.get("gracePeriodSeconds"),
            "kind": obj.get("kind"),
            "orphan_dependents": obj.get("orphanDependents"),
            "preconditions": V1Preconditions.from_dict(obj.get("preconditions")) if obj.get("preconditions") is not None else None,
            "propagation_policy": obj.get("propagationPolicy")
        })
        return _obj


