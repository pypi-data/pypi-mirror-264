# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class V1ContainerStateTerminated(BaseModel):
    """
    ContainerStateTerminated is a terminated state of a container.  # noqa: E501
    """
    container_id: Optional[StrictStr] = Field(default=None, alias="containerID", description="Container's ID in the format '<type>://<container_id>'")
    exit_code: StrictInt = Field(..., alias="exitCode", description="Exit status from the last termination of the container")
    finished_at: Optional[datetime] = Field(default=None, alias="finishedAt", description="Time at which the container last terminated")
    message: Optional[StrictStr] = Field(default=None, description="Message regarding the last termination of the container")
    reason: Optional[StrictStr] = Field(default=None, description="(brief) reason from the last termination of the container")
    signal: Optional[StrictInt] = Field(default=None, description="Signal from the last termination of the container")
    started_at: Optional[datetime] = Field(default=None, alias="startedAt", description="Time at which previous execution of the container started")
    __properties = ["containerID", "exitCode", "finishedAt", "message", "reason", "signal", "startedAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ContainerStateTerminated:
        """Create an instance of V1ContainerStateTerminated from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ContainerStateTerminated:
        """Create an instance of V1ContainerStateTerminated from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ContainerStateTerminated.parse_obj(obj)

        _obj = V1ContainerStateTerminated.parse_obj({
            "container_id": obj.get("containerID"),
            "exit_code": obj.get("exitCode"),
            "finished_at": obj.get("finishedAt"),
            "message": obj.get("message"),
            "reason": obj.get("reason"),
            "signal": obj.get("signal"),
            "started_at": obj.get("startedAt")
        })
        return _obj


