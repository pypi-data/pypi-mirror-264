# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from .v1_ingress_class_parameters_reference import V1IngressClassParametersReference

class V1IngressClassSpec(BaseModel):
    """
    IngressClassSpec provides information about the class of an Ingress.  # noqa: E501
    """
    controller: Optional[StrictStr] = Field(default=None, description="controller refers to the name of the controller that should handle this class. This allows for different \"flavors\" that are controlled by the same controller. For example, you may have different parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. \"acme.io/ingress-controller\". This field is immutable.")
    parameters: Optional[V1IngressClassParametersReference] = None
    __properties = ["controller", "parameters"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1IngressClassSpec:
        """Create an instance of V1IngressClassSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of parameters
        if self.parameters:
            _dict['parameters'] = self.parameters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1IngressClassSpec:
        """Create an instance of V1IngressClassSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1IngressClassSpec.parse_obj(obj)

        _obj = V1IngressClassSpec.parse_obj({
            "controller": obj.get("controller"),
            "parameters": V1IngressClassParametersReference.from_dict(obj.get("parameters")) if obj.get("parameters") is not None else None
        })
        return _obj


