# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class V1TypedObjectReference(BaseModel):
    """
    V1TypedObjectReference
    """
    api_group: Optional[StrictStr] = Field(default=None, alias="apiGroup", description="APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.")
    kind: StrictStr = Field(..., description="Kind is the type of resource being referenced")
    name: StrictStr = Field(..., description="Name is the name of resource being referenced")
    namespace: Optional[StrictStr] = Field(default=None, description="Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.")
    __properties = ["apiGroup", "kind", "name", "namespace"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1TypedObjectReference:
        """Create an instance of V1TypedObjectReference from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1TypedObjectReference:
        """Create an instance of V1TypedObjectReference from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1TypedObjectReference.parse_obj(obj)

        _obj = V1TypedObjectReference.parse_obj({
            "api_group": obj.get("apiGroup"),
            "kind": obj.get("kind"),
            "name": obj.get("name"),
            "namespace": obj.get("namespace")
        })
        return _obj


