# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class RbacV1Subject(BaseModel):
    """
    Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.  # noqa: E501
    """
    api_group: Optional[StrictStr] = Field(default=None, alias="apiGroup", description="APIGroup holds the API group of the referenced subject. Defaults to \"\" for ServiceAccount subjects. Defaults to \"rbac.authorization.k8s.io\" for User and Group subjects.")
    kind: StrictStr = Field(..., description="Kind of object being referenced. Values defined by this API group are \"User\", \"Group\", and \"ServiceAccount\". If the Authorizer does not recognized the kind value, the Authorizer should report an error.")
    name: StrictStr = Field(..., description="Name of the object being referenced.")
    namespace: Optional[StrictStr] = Field(default=None, description="Namespace of the referenced object.  If the object kind is non-namespace, such as \"User\" or \"Group\", and this value is not empty the Authorizer should report an error.")
    __properties = ["apiGroup", "kind", "name", "namespace"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RbacV1Subject:
        """Create an instance of RbacV1Subject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RbacV1Subject:
        """Create an instance of RbacV1Subject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RbacV1Subject.parse_obj(obj)

        _obj = RbacV1Subject.parse_obj({
            "api_group": obj.get("apiGroup"),
            "kind": obj.get("kind"),
            "name": obj.get("name"),
            "namespace": obj.get("namespace")
        })
        return _obj


