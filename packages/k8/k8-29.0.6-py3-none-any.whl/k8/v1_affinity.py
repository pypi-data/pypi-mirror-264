# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from .v1_node_affinity import V1NodeAffinity
from .v1_pod_affinity import V1PodAffinity
from .v1_pod_anti_affinity import V1PodAntiAffinity

class V1Affinity(BaseModel):
    """
    Affinity is a group of affinity scheduling rules.  # noqa: E501
    """
    node_affinity: Optional[V1NodeAffinity] = Field(default=None, alias="nodeAffinity")
    pod_affinity: Optional[V1PodAffinity] = Field(default=None, alias="podAffinity")
    pod_anti_affinity: Optional[V1PodAntiAffinity] = Field(default=None, alias="podAntiAffinity")
    __properties = ["nodeAffinity", "podAffinity", "podAntiAffinity"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1Affinity:
        """Create an instance of V1Affinity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of node_affinity
        if self.node_affinity:
            _dict['nodeAffinity'] = self.node_affinity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pod_affinity
        if self.pod_affinity:
            _dict['podAffinity'] = self.pod_affinity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pod_anti_affinity
        if self.pod_anti_affinity:
            _dict['podAntiAffinity'] = self.pod_anti_affinity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1Affinity:
        """Create an instance of V1Affinity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1Affinity.parse_obj(obj)

        _obj = V1Affinity.parse_obj({
            "node_affinity": V1NodeAffinity.from_dict(obj.get("nodeAffinity")) if obj.get("nodeAffinity") is not None else None,
            "pod_affinity": V1PodAffinity.from_dict(obj.get("podAffinity")) if obj.get("podAffinity") is not None else None,
            "pod_anti_affinity": V1PodAntiAffinity.from_dict(obj.get("podAntiAffinity")) if obj.get("podAntiAffinity") is not None else None
        })
        return _obj


