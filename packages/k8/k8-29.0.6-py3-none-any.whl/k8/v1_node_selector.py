# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, conlist
from .v1_node_selector_term import V1NodeSelectorTerm

class V1NodeSelector(BaseModel):
    """
    A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.  # noqa: E501
    """
    node_selector_terms: list[V1NodeSelectorTerm] = Field(..., alias="nodeSelectorTerms", description="Required. A list of node selector terms. The terms are ORed.")
    __properties = ["nodeSelectorTerms"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1NodeSelector:
        """Create an instance of V1NodeSelector from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in node_selector_terms (list)
        _items = []
        if self.node_selector_terms:
            for _item in self.node_selector_terms:
                if _item:
                    _items.append(_item.to_dict())
            _dict['nodeSelectorTerms'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1NodeSelector:
        """Create an instance of V1NodeSelector from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1NodeSelector.parse_obj(obj)

        _obj = V1NodeSelector.parse_obj({
            "node_selector_terms": [V1NodeSelectorTerm.from_dict(_item) for _item in obj.get("nodeSelectorTerms")] if obj.get("nodeSelectorTerms") is not None else None
        })
        return _obj


