# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class V1ModifyVolumeStatus(BaseModel):
    """
    ModifyVolumeStatus represents the status object of ControllerModifyVolume operation  # noqa: E501
    """
    status: StrictStr = Field(..., description="status is the status of the ControllerModifyVolume operation. It can be in any of following states:  - Pending    Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as    the specified VolumeAttributesClass not existing.  - InProgress    InProgress indicates that the volume is being modified.  - Infeasible   Infeasible indicates that the request has been rejected as invalid by the CSI driver. To    resolve the error, a valid VolumeAttributesClass needs to be specified. Note: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.")
    target_volume_attributes_class_name: Optional[StrictStr] = Field(default=None, alias="targetVolumeAttributesClassName", description="targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled")
    __properties = ["status", "targetVolumeAttributesClassName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ModifyVolumeStatus:
        """Create an instance of V1ModifyVolumeStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ModifyVolumeStatus:
        """Create an instance of V1ModifyVolumeStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ModifyVolumeStatus.parse_obj(obj)

        _obj = V1ModifyVolumeStatus.parse_obj({
            "status": obj.get("status"),
            "target_volume_attributes_class_name": obj.get("targetVolumeAttributesClassName")
        })
        return _obj


