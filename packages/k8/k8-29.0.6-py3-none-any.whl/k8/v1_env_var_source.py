# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from .v1_config_map_key_selector import V1ConfigMapKeySelector
from .v1_object_field_selector import V1ObjectFieldSelector
from .v1_resource_field_selector import V1ResourceFieldSelector
from .v1_secret_key_selector import V1SecretKeySelector

class V1EnvVarSource(BaseModel):
    """
    EnvVarSource represents a source for the value of an EnvVar.  # noqa: E501
    """
    config_map_key_ref: Optional[V1ConfigMapKeySelector] = Field(default=None, alias="configMapKeyRef")
    field_ref: Optional[V1ObjectFieldSelector] = Field(default=None, alias="fieldRef")
    resource_field_ref: Optional[V1ResourceFieldSelector] = Field(default=None, alias="resourceFieldRef")
    secret_key_ref: Optional[V1SecretKeySelector] = Field(default=None, alias="secretKeyRef")
    __properties = ["configMapKeyRef", "fieldRef", "resourceFieldRef", "secretKeyRef"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1EnvVarSource:
        """Create an instance of V1EnvVarSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of config_map_key_ref
        if self.config_map_key_ref:
            _dict['configMapKeyRef'] = self.config_map_key_ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of field_ref
        if self.field_ref:
            _dict['fieldRef'] = self.field_ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_field_ref
        if self.resource_field_ref:
            _dict['resourceFieldRef'] = self.resource_field_ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secret_key_ref
        if self.secret_key_ref:
            _dict['secretKeyRef'] = self.secret_key_ref.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1EnvVarSource:
        """Create an instance of V1EnvVarSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1EnvVarSource.parse_obj(obj)

        _obj = V1EnvVarSource.parse_obj({
            "config_map_key_ref": V1ConfigMapKeySelector.from_dict(obj.get("configMapKeyRef")) if obj.get("configMapKeyRef") is not None else None,
            "field_ref": V1ObjectFieldSelector.from_dict(obj.get("fieldRef")) if obj.get("fieldRef") is not None else None,
            "resource_field_ref": V1ResourceFieldSelector.from_dict(obj.get("resourceFieldRef")) if obj.get("resourceFieldRef") is not None else None,
            "secret_key_ref": V1SecretKeySelector.from_dict(obj.get("secretKeyRef")) if obj.get("secretKeyRef") is not None else None
        })
        return _obj


