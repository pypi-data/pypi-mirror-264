# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class V1Condition(BaseModel):
    """
    Condition contains details for one aspect of the current state of this API Resource.  # noqa: E501
    """
    last_transition_time: datetime = Field(..., alias="lastTransitionTime", description="lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.")
    message: StrictStr = Field(..., description="message is a human readable message indicating details about the transition. This may be an empty string.")
    observed_generation: Optional[StrictInt] = Field(default=None, alias="observedGeneration", description="observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.")
    reason: StrictStr = Field(..., description="reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.")
    status: StrictStr = Field(..., description="status of the condition, one of True, False, Unknown.")
    type: StrictStr = Field(..., description="type of condition in CamelCase or in foo.example.com/CamelCase.")
    __properties = ["lastTransitionTime", "message", "observedGeneration", "reason", "status", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1Condition:
        """Create an instance of V1Condition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1Condition:
        """Create an instance of V1Condition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1Condition.parse_obj(obj)

        _obj = V1Condition.parse_obj({
            "last_transition_time": obj.get("lastTransitionTime"),
            "message": obj.get("message"),
            "observed_generation": obj.get("observedGeneration"),
            "reason": obj.get("reason"),
            "status": obj.get("status"),
            "type": obj.get("type")
        })
        return _obj


