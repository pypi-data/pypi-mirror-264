# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field
from .v1_custom_resource_subresource_scale import V1CustomResourceSubresourceScale

class V1CustomResourceSubresources(BaseModel):
    """
    CustomResourceSubresources defines the status and scale subresources for CustomResources.  # noqa: E501
    """
    scale: Optional[V1CustomResourceSubresourceScale] = None
    status: Optional[Dict[str, Any]] = Field(default=None, description="status indicates the custom resource should serve a `/status` subresource. When enabled: 1. requests to the custom resource primary endpoint ignore changes to the `status` stanza of the object. 2. requests to the custom resource `/status` subresource ignore changes to anything other than the `status` stanza of the object.")
    __properties = ["scale", "status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CustomResourceSubresources:
        """Create an instance of V1CustomResourceSubresources from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of scale
        if self.scale:
            _dict['scale'] = self.scale.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CustomResourceSubresources:
        """Create an instance of V1CustomResourceSubresources from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CustomResourceSubresources.parse_obj(obj)

        _obj = V1CustomResourceSubresources.parse_obj({
            "scale": V1CustomResourceSubresourceScale.from_dict(obj.get("scale")) if obj.get("scale") is not None else None,
            "status": obj.get("status")
        })
        return _obj


