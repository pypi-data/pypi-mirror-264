# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from .v1_config_map_env_source import V1ConfigMapEnvSource
from .v1_secret_env_source import V1SecretEnvSource

class V1EnvFromSource(BaseModel):
    """
    EnvFromSource represents the source of a set of ConfigMaps  # noqa: E501
    """
    config_map_ref: Optional[V1ConfigMapEnvSource] = Field(default=None, alias="configMapRef")
    prefix: Optional[StrictStr] = Field(default=None, description="An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.")
    secret_ref: Optional[V1SecretEnvSource] = Field(default=None, alias="secretRef")
    __properties = ["configMapRef", "prefix", "secretRef"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1EnvFromSource:
        """Create an instance of V1EnvFromSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of config_map_ref
        if self.config_map_ref:
            _dict['configMapRef'] = self.config_map_ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secret_ref
        if self.secret_ref:
            _dict['secretRef'] = self.secret_ref.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1EnvFromSource:
        """Create an instance of V1EnvFromSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1EnvFromSource.parse_obj(obj)

        _obj = V1EnvFromSource.parse_obj({
            "config_map_ref": V1ConfigMapEnvSource.from_dict(obj.get("configMapRef")) if obj.get("configMapRef") is not None else None,
            "prefix": obj.get("prefix"),
            "secret_ref": V1SecretEnvSource.from_dict(obj.get("secretRef")) if obj.get("secretRef") is not None else None
        })
        return _obj


