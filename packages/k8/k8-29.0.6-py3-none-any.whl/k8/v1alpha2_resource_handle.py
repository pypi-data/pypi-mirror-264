# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class V1alpha2ResourceHandle(BaseModel):
    """
    ResourceHandle holds opaque resource data for processing by a specific kubelet plugin.  # noqa: E501
    """
    data: Optional[StrictStr] = Field(default=None, description="Data contains the opaque data associated with this ResourceHandle. It is set by the controller component of the resource driver whose name matches the DriverName set in the ResourceClaimStatus this ResourceHandle is embedded in. It is set at allocation time and is intended for processing by the kubelet plugin whose name matches the DriverName set in this ResourceHandle.  The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.")
    driver_name: Optional[StrictStr] = Field(default=None, alias="driverName", description="DriverName specifies the name of the resource driver whose kubelet plugin should be invoked to process this ResourceHandle's data once it lands on a node. This may differ from the DriverName set in ResourceClaimStatus this ResourceHandle is embedded in.")
    __properties = ["data", "driverName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1alpha2ResourceHandle:
        """Create an instance of V1alpha2ResourceHandle from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1alpha2ResourceHandle:
        """Create an instance of V1alpha2ResourceHandle from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1alpha2ResourceHandle.parse_obj(obj)

        _obj = V1alpha2ResourceHandle.parse_obj({
            "data": obj.get("data"),
            "driver_name": obj.get("driverName")
        })
        return _obj


