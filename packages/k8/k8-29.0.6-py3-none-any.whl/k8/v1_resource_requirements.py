# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from .v1_resource_claim import V1ResourceClaim

class V1ResourceRequirements(BaseModel):
    """
    ResourceRequirements describes the compute resource requirements.  # noqa: E501
    """
    claims: Optional[list[V1ResourceClaim]] = Field(default=None, description="Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.  This field is immutable. It can only be set for containers.")
    limits: Optional[Dict[str, StrictStr]] = Field(default=None, description="Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/")
    requests: Optional[Dict[str, StrictStr]] = Field(default=None, description="Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/")
    __properties = ["claims", "limits", "requests"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ResourceRequirements:
        """Create an instance of V1ResourceRequirements from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in claims (list)
        _items = []
        if self.claims:
            for _item in self.claims:
                if _item:
                    _items.append(_item.to_dict())
            _dict['claims'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ResourceRequirements:
        """Create an instance of V1ResourceRequirements from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ResourceRequirements.parse_obj(obj)

        _obj = V1ResourceRequirements.parse_obj({
            "claims": [V1ResourceClaim.from_dict(_item) for _item in obj.get("claims")] if obj.get("claims") is not None else None,
            "limits": obj.get("limits"),
            "requests": obj.get("requests")
        })
        return _obj


