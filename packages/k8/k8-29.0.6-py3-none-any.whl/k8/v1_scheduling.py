# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from .v1_toleration import V1Toleration

class V1Scheduling(BaseModel):
    """
    Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.  # noqa: E501
    """
    node_selector: Optional[Dict[str, StrictStr]] = Field(default=None, alias="nodeSelector", description="nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission.")
    tolerations: Optional[list[V1Toleration]] = Field(default=None, description="tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.")
    __properties = ["nodeSelector", "tolerations"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1Scheduling:
        """Create an instance of V1Scheduling from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in tolerations (list)
        _items = []
        if self.tolerations:
            for _item in self.tolerations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tolerations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1Scheduling:
        """Create an instance of V1Scheduling from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1Scheduling.parse_obj(obj)

        _obj = V1Scheduling.parse_obj({
            "node_selector": obj.get("nodeSelector"),
            "tolerations": [V1Toleration.from_dict(_item) for _item in obj.get("tolerations")] if obj.get("tolerations") is not None else None
        })
        return _obj


