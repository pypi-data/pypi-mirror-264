# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class V1LocalVolumeSource(BaseModel):
    """
    Local represents directly-attached storage with node affinity (Beta feature)  # noqa: E501
    """
    fs_type: Optional[StrictStr] = Field(default=None, alias="fsType", description="fsType is the filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default value is to auto-select a filesystem if unspecified.")
    path: StrictStr = Field(..., description="path of the full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).")
    __properties = ["fsType", "path"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1LocalVolumeSource:
        """Create an instance of V1LocalVolumeSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1LocalVolumeSource:
        """Create an instance of V1LocalVolumeSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1LocalVolumeSource.parse_obj(obj)

        _obj = V1LocalVolumeSource.parse_obj({
            "fs_type": obj.get("fsType"),
            "path": obj.get("path")
        })
        return _obj


