# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class V1ResourceAttributes(BaseModel):
    """
    ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface  # noqa: E501
    """
    group: Optional[StrictStr] = Field(default=None, description="Group is the API Group of the Resource.  \"*\" means all.")
    name: Optional[StrictStr] = Field(default=None, description="Name is the name of the resource being requested for a \"get\" or deleted for a \"delete\". \"\" (empty) means all.")
    namespace: Optional[StrictStr] = Field(default=None, description="Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \"\" (empty) is defaulted for LocalSubjectAccessReviews \"\" (empty) is empty for cluster-scoped resources \"\" (empty) means \"all\" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview")
    resource: Optional[StrictStr] = Field(default=None, description="Resource is one of the existing resource types.  \"*\" means all.")
    subresource: Optional[StrictStr] = Field(default=None, description="Subresource is one of the existing resource types.  \"\" means none.")
    verb: Optional[StrictStr] = Field(default=None, description="Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.")
    version: Optional[StrictStr] = Field(default=None, description="Version is the API Version of the Resource.  \"*\" means all.")
    __properties = ["group", "name", "namespace", "resource", "subresource", "verb", "version"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ResourceAttributes:
        """Create an instance of V1ResourceAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ResourceAttributes:
        """Create an instance of V1ResourceAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ResourceAttributes.parse_obj(obj)

        _obj = V1ResourceAttributes.parse_obj({
            "group": obj.get("group"),
            "name": obj.get("name"),
            "namespace": obj.get("namespace"),
            "resource": obj.get("resource"),
            "subresource": obj.get("subresource"),
            "verb": obj.get("verb"),
            "version": obj.get("version")
        })
        return _obj


