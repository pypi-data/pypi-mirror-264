# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from .v1_local_object_reference import V1LocalObjectReference

class V1StorageOSVolumeSource(BaseModel):
    """
    Represents a StorageOS persistent volume resource.  # noqa: E501
    """
    fs_type: Optional[StrictStr] = Field(default=None, alias="fsType", description="fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.")
    read_only: Optional[StrictBool] = Field(default=None, alias="readOnly", description="readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.")
    secret_ref: Optional[V1LocalObjectReference] = Field(default=None, alias="secretRef")
    volume_name: Optional[StrictStr] = Field(default=None, alias="volumeName", description="volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.")
    volume_namespace: Optional[StrictStr] = Field(default=None, alias="volumeNamespace", description="volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.")
    __properties = ["fsType", "readOnly", "secretRef", "volumeName", "volumeNamespace"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1StorageOSVolumeSource:
        """Create an instance of V1StorageOSVolumeSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of secret_ref
        if self.secret_ref:
            _dict['secretRef'] = self.secret_ref.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1StorageOSVolumeSource:
        """Create an instance of V1StorageOSVolumeSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1StorageOSVolumeSource.parse_obj(obj)

        _obj = V1StorageOSVolumeSource.parse_obj({
            "fs_type": obj.get("fsType"),
            "read_only": obj.get("readOnly"),
            "secret_ref": V1LocalObjectReference.from_dict(obj.get("secretRef")) if obj.get("secretRef") is not None else None,
            "volume_name": obj.get("volumeName"),
            "volume_namespace": obj.get("volumeNamespace")
        })
        return _obj


