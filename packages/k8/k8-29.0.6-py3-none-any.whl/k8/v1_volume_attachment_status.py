# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from .v1_volume_error import V1VolumeError

class V1VolumeAttachmentStatus(BaseModel):
    """
    VolumeAttachmentStatus is the status of a VolumeAttachment request.  # noqa: E501
    """
    attach_error: Optional[V1VolumeError] = Field(default=None, alias="attachError")
    attached: StrictBool = Field(..., description="attached indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.")
    attachment_metadata: Optional[Dict[str, StrictStr]] = Field(default=None, alias="attachmentMetadata", description="attachmentMetadata is populated with any information returned by the attach operation, upon successful attach, that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.")
    detach_error: Optional[V1VolumeError] = Field(default=None, alias="detachError")
    __properties = ["attachError", "attached", "attachmentMetadata", "detachError"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1VolumeAttachmentStatus:
        """Create an instance of V1VolumeAttachmentStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of attach_error
        if self.attach_error:
            _dict['attachError'] = self.attach_error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of detach_error
        if self.detach_error:
            _dict['detachError'] = self.detach_error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1VolumeAttachmentStatus:
        """Create an instance of V1VolumeAttachmentStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1VolumeAttachmentStatus.parse_obj(obj)

        _obj = V1VolumeAttachmentStatus.parse_obj({
            "attach_error": V1VolumeError.from_dict(obj.get("attachError")) if obj.get("attachError") is not None else None,
            "attached": obj.get("attached"),
            "attachment_metadata": obj.get("attachmentMetadata"),
            "detach_error": V1VolumeError.from_dict(obj.get("detachError")) if obj.get("detachError") is not None else None
        })
        return _obj


