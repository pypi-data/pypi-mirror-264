Metadata-Version: 2.1
Name: django-df-chat
Version: 0.1.3
Summary: Opinionated Django Chat
Author-email: Apexive OSS <open-source@apexive.com>
License: MIT License
        
        Copyright (c) 2023 Apexive.com
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: homepage, https://apexive.com/
Classifier: Environment :: Web Environment
Classifier: Framework :: Django
Classifier: Framework :: Django :: 4.2
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.9
Classifier: Topic :: Internet
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: Django >4
Requires-Dist: djangorestframework >=3
Requires-Dist: django-df-api-drf >=0.0.9
Requires-Dist: django-model-utils
Requires-Dist: Pillow
Requires-Dist: channels ==4.0.0
Requires-Dist: channels[daphne]
Provides-Extra: test
Requires-Dist: pytest ; extra == 'test'
Requires-Dist: pytest-django ; extra == 'test'
Requires-Dist: django-stubs[compatible-mypy] ; extra == 'test'
Requires-Dist: black ==23.7.0 ; extra == 'test'
Requires-Dist: ruff ==0.0.284 ; extra == 'test'
Requires-Dist: httpretty ; extra == 'test'
Requires-Dist: model-bakery ; extra == 'test'
Requires-Dist: faker ; extra == 'test'
Requires-Dist: channels-redis ; extra == 'test'

# django-df-chat


## Development

Installing dev requirements:

```
pip install -e .[test]
```

Installing pre-commit hook:

```
pre-commit install
```

Running tests:

```
pytest
```


## New Design

### Model Data


ChatRoom

- title = CharField()
- users = ManyToManyField(through="ChatMember")
- chat_type = Enum: 'private', 'group',

ChatMember

- is_owner = BooleanField(default=False)
- is_admin = BooleanField(default=False)
- user = ForeignKey(ChatUser)
- chat_room = ForeignKey(ChatRoom)

MemberChannel (service table)

- last_alive_at = DateTimeField()
- channel_name = CharField()
- user = ForeignKey(ChatUser)


ChatMessage

- created_by = ForeignKey(ChatUser)
- chat_room = ForeignKey(ChatRoom)
- message = TextField(settings.CHAT_USER_MODEL)


### API:

[GET]
/api/v1/chat/rooms/

[POST]
/api/v1/chat/rooms/

[GET]
/api/v1/chat/rooms/{id}/

[PUT]
/api/v1/chat/rooms/{id}/

[PATCH]
/api/v1/chat/rooms/{id}/

[DELETE]
/api/v1/chat/rooms/{id}/

[POST]
/api/v1/chat/rooms/{id}/member/

[GET]
/api/v1/chat/rooms/{room_id}/messages/

[POST]
/api/v1/chat/rooms/{room_id}/messages/

[GET]
/api/v1/chat/rooms/{room_id}/messages/{id}/

[PUT]
/api/v1/chat/rooms/{room_id}/messages/{id}/

[PATCH]
/api/v1/chat/rooms/{room_id}/messages/{id}/

[DELETE]
/api/v1/chat/rooms/{room_id}/messages/{id}/


### Use cases:

- Create chat room with specific type, and add user. Channel layer should be created if user are online and all online users should to receive messages
- Private chat room (chat between 2 members). Nobody can add new members.
- Group chat (chat between multiple users). Users could be added through API endpoint call
- moderation part is missed at the moment


### Flow:
- User connected to WS
- Channel layer stored to DB to use it in a future to dynamically subscribe user with a new chatRooms
- on user disconnected channel layer should be removed from DB
