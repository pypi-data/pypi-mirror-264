/* # accessible css configurations

we define these high level variables to allow for configuration during use and testing.
we are not sure what the preferred default values are for these any accessible notebooks features.
the variables specify critical degrees of freedom in the notebook style.

## notebook interface specific css variables

*/
:root {
    --nb-focus-width: 3px;
    --nb-accent-color: auto;
    --nb-margin: 5%;
    --nb-font-size: 16px;
    --nb-font-family: serif;
    --nb-line-height: 1.5;
    --nb-scrolled-height: 600px;
    --color-light: #FFFFFF;
    --color-dark: #2b2a33;
}


/* map css variables to css properties on the `body` elements.
this mapping turns out css variables into user interfaces. */

body {
    font-size: var(--nb-font-size);
    font-family: var(--nb-font-family);
    accent-color: var(--nb-accent-color);
    margin-left: var(--nb-margin);
    margin-right: var(--nb-margin);
    line-height: var(--nb-line-height);
    width: calc(100% - 2*var(--nb-margin));
    color: var(--color-dark);
    background-color: var(--color-light);
}

body:not([data-dev-sa11y]) sa11y-control-panel,
body:not([data-dev-sa11y]) sa11y-annotation {
    display: none;
}

body[data-dev-sa11y] sa11y-control-panel,
body[data-dev-sa11y] sa11y-annotation {
    display: unset;
}

body.dark {
    color: var(--color-light);
    background-color: var(--color-dark);
}

main:fullscreen {
    overflow: auto;
    background: var(--color-light);
}

.dark main:fullscreen {
    background: var(--color-dark);
}

/* ## notebook settings

the notebook settings interface connects configurable css features to the user.
we use dialog elements to represents an element that should be hidden by default.
it turns out there are two ways to layout `dialog` elements. 
they can be used as modals or block elements.
we extract this dual purpose to provide both configurations to the user.

*/

dialog form>* {
    display: block;
}


/* ## wcag accessibility guidelines as a feature

flexibility is the future of assistive interfaces.
it is not in the purvey of privileged developers and inaccessible systems to decide what priority accessibility is.
it is the fucking priority.

in this implementation, we want to satisfy broad user needs by making a lot of features configurable.
one configurable feature is the accessibility priority. 
experienced developers may need less assistive features as they spend more time with an interface.

### buttons sizes

WCAG 2.1 defines a huge stinking AAA hit size for buttons. its beautiful.

/* satisfy AAA 2.5.5 */

.wcag-aaa button,
.wcag-aaa input[type=checkbox] {
    min-height: 44px;
    min-width: 44px;
}

.wcag-aaa a {
    font-size: max(44px, var(--nb-font-size));
}

/* WCAG 2.2 clarified a AA button size that is used to style checkboxes and buttons. */
/* satisfy AA 2.5.8 minimum target requirement */
.wcag-aa button,
.wcag-aa input[type=checkbox] {
    min-height: 24px;
    min-width: 24px;
}

.wcag-aa a {
    font-size: max(24px, var(--nb-font-size));
}

/* remove the color styling for AAA */
.wcag-aaa .highlight pre code span[class] {
    color: unset;
}

/* ### native textareas for AAA priority.


our AAA priority choices often ensure that third party libraries can not compromise the accessibility of notebook.
the design decisions are focused native elements so that the assistive technology users have consistent expectations and outcomes.

*/

.markdown textarea[name=source]+[role=group],
.wcag-a textarea[name=source],
.wcag-aa textarea[name=source],
.wcag-aaa .markdown textarea[name=source],
/* this group selector is very ambiguous */
.wcag-aaa textarea[name=source]+[role=group] {
    display: none;
}

/* line height cant change pre elements based on browser presets */
pre,
.highlight>pre,
textarea {
    line-height: var(--nb-line-height);
    white-space: pre-wrap;
}

.horiz-overflow pre,
.horiz-overflow textarea {
    white-space: pre;
}

/* this is only needed for the lsit template variant */
ol#cells {
    margin: unset;
    padding: unset;
}

li.cell {
    list-style-type: none;
}

/* ## notebook components layout */

#cells,
#cells>tbody,
#cells>tbody>tr,
#cells>tbody>tr>[role="none"] {
    display: block;
    text-align: unset;
    width: calc(100vw - 2 * var(--nb-margin));
}

.nb-outputs img,
.nb-outputs image {
    height: 100%;
    width: 100%;
}


.horiz-overflow .nb-outputs img,
.horiz-overflow .nb-outputs image {
    height: unset;
    width: unset;
}

.horiz-overflow #cells,
.horiz-overflow #cells>tbody,
.horiz-overflow #cells>tbody>tr,
.horiz-overflow #cells>tbody>tr>[role="none"] {
    width: max-content;
}

#cells>tbody>tr[hidden],
#cells>tbody>tr>[role="none"][hidden] {
    display: none;
}

tr.cell>th:first-child {}

table {
    border-spacing: unset;
}

ol[reversed]#cells,
[reversed]#cells tbody {
    flex-direction: column-reverse;
}

/* hide the visual output area when there are no outputs. 
assistive technologies will recieve an audible notification that there are not outputs. */

fieldset[data-outputs="0"] {
    display: none;
}

/* ## modifications to html defaults 

### focus 

there nothing to be said about this topic that [sara soueidan](https://www.sarasoueidan.com/blog/focus-indicators/) hasn't said.
we start with her [universal focus recommendation](https://www.sarasoueidan.com/blog/focus-indicators/#a-%E2%80%98universal%E2%80%99-focus-indicator).

*/



.cell:focus-within,
:focus-visible {
    outline: max(var(--nb-focus-width), 1px) solid;
    box-shadow: 0 0 0 calc(2 * max(var(--nb-focus-width), 1px));
}


/* on firefox, the input and output become interactive when there is overflow. chrome fixed this recently find reference.*/
textarea[name=source] {
    min-width: 0;
}

td.nb-outputs,
td.nb-source {
    overflow-x: auto;
}

.horiz-overflow header,
.horiz-overflow footer {
    width: max-content;
}

.horiz-overflow td.nb-source {
    overflow-x: visible;
}

.horiz-overflow td.nb-outputs {
    min-width: 100%;
}

.horiz-overflow .cell {
    width: fit-content;
}

#nb-settings li::marker,
summary[inert]::marker {
    content: "";
}

/* ### inheriting styles */

input,
select,
button {
    font-family: inherit;
    font-size: inherit;
}

textarea {
    font-family: monospace;
    font-size: inherit;
    overflow: auto;
    color: unset;
}

textarea[name=source] {
    box-sizing: border-box;
    width: 100%;
    resize: none;
}


/* align checkboxes with buttons */
input[type="checkbox"] {
    vertical-align: middle;
}

/* ## custom class selectors */

#nb-dialogs details:not([open])~dialog:not([open]):not(:focus-within):not(:active),
/* legend:not(:focus-within):not(:active), */
details.log:not([open])+table,
.visually-hidden:not(:focus-within):not(:active),
.visually-hide {
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    height: 1px;
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
}

.nb-outputs.nb-scrolled {
    max-height: var(--nb-scrolled-height);
    overflow-y: auto;
}

.nb-outputs.nb-collapsed {
    display: none;
}