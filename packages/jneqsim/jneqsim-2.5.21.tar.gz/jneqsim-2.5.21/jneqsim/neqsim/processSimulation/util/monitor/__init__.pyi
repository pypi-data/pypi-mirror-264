
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.util
import jneqsim.neqsim.processSimulation.measurementDevice
import jneqsim.neqsim.processSimulation.processEquipment.compressor
import jneqsim.neqsim.processSimulation.processEquipment.heatExchanger
import jneqsim.neqsim.processSimulation.processEquipment.pump
import jneqsim.neqsim.processSimulation.processEquipment.separator
import jneqsim.neqsim.processSimulation.processEquipment.stream
import jneqsim.neqsim.thermo.system
import jneqsim.neqsim.util
import typing



class CompressorResponse:
    name: str = ...
    suctionTemperature: float = ...
    dischargeTemperature: float = ...
    suctionPressure: float = ...
    dischargePressure: float = ...
    polytropicHead: float = ...
    polytropicEfficiency: float = ...
    power: float = ...
    suctionVolumeFlow: float = ...
    internalVolumeFlow: float = ...
    dischargeVolumeFlow: float = ...
    molarMass: float = ...
    suctionMassDensity: float = ...
    dischargeMassDensity: float = ...
    massflow: float = ...
    speed: float = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, compressor: jneqsim.neqsim.processSimulation.processEquipment.compressor.Compressor): ...

class Fluid(jneqsim.neqsim.util.NamedBaseClass):
    volumeFlow: float = ...
    molarMass: float = ...
    massDensity: float = ...
    massflow: float = ...
    compProp: java.util.Map = ...
    definedComponent: java.util.Map = ...
    oilComponent: java.util.Map = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    def print_(self) -> None: ...

class HXResponse:
    name: str = ...
    feedTemperature1: float = ...
    dischargeTemperature1: float = ...
    HXthermalEfectiveness: float = ...
    feedTemperature2: float = ...
    dischargeTemperature2: float = ...
    dutyBalance: float = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, heatExchanger: jneqsim.neqsim.processSimulation.processEquipment.heatExchanger.HeatExchanger): ...

class HeaterResponse:
    name: str = ...
    feedTemperature: float = ...
    dischargeTemperature: float = ...
    duty: float = ...
    def __init__(self, heater: jneqsim.neqsim.processSimulation.processEquipment.heatExchanger.Heater): ...

class MPMResponse:
    name: str = ...
    massFLow: float = ...
    GOR: float = ...
    GOR_std: float = ...
    gasDensity: float = ...
    oilDensity: float = ...
    waterDensity: float = ...
    def __init__(self, multiPhaseMeter: jneqsim.neqsim.processSimulation.measurementDevice.MultiPhaseMeter): ...

class PumpResponse:
    name: str = ...
    suctionTemperature: float = ...
    dischargeTemperature: float = ...
    suctionPressure: float = ...
    dischargePressure: float = ...
    power: float = ...
    suctionVolumeFlow: float = ...
    internalVolumeFlow: float = ...
    dischargeVolumeFlow: float = ...
    molarMass: float = ...
    suctionMassDensity: float = ...
    dischargeMassDensity: float = ...
    massflow: float = ...
    speed: int = ...
    def __init__(self, pump: jneqsim.neqsim.processSimulation.processEquipment.pump.Pump): ...

class SeparatorResponse:
    name: str = ...
    gasLoadFactor: float = ...
    massflow: float = ...
    gasFluid: Fluid = ...
    liquidFluid: Fluid = ...
    oilFluid: Fluid = ...
    waterFluid: Fluid = ...
    @typing.overload
    def __init__(self, separator: jneqsim.neqsim.processSimulation.processEquipment.separator.Separator): ...
    @typing.overload
    def __init__(self, threePhaseSeparator: jneqsim.neqsim.processSimulation.processEquipment.separator.ThreePhaseSeparator): ...

class StreamResponse:
    name: str = ...
    fluid: Fluid = ...
    temperature: float = ...
    pressure: float = ...
    volumeFlow: float = ...
    molarMass: float = ...
    massDensity: float = ...
    massflow: float = ...
    massflowGas: float = ...
    massflowOil: float = ...
    massflowAqueous: float = ...
    def __init__(self, streamInterface: jneqsim.neqsim.processSimulation.processEquipment.stream.StreamInterface): ...
    def print_(self) -> None: ...

class ThreePhaseSeparatorResponse:
    name: str = ...
    gasLoadFactor: float = ...
    massflow: float = ...
    gasFluid: Fluid = ...
    oilFluid: Fluid = ...
    @typing.overload
    def __init__(self, separator: jneqsim.neqsim.processSimulation.processEquipment.separator.Separator): ...
    @typing.overload
    def __init__(self, threePhaseSeparator: jneqsim.neqsim.processSimulation.processEquipment.separator.ThreePhaseSeparator): ...

class WellAllocatorResponse:
    name: str = ...
    gasExportRate: float = ...
    oilExportRate: float = ...
    totalExportRate: float = ...
    def __init__(self, wellAllocator: jneqsim.neqsim.processSimulation.measurementDevice.WellAllocator): ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.processSimulation.util.monitor")``.

    CompressorResponse: typing.Type[CompressorResponse]
    Fluid: typing.Type[Fluid]
    HXResponse: typing.Type[HXResponse]
    HeaterResponse: typing.Type[HeaterResponse]
    MPMResponse: typing.Type[MPMResponse]
    PumpResponse: typing.Type[PumpResponse]
    SeparatorResponse: typing.Type[SeparatorResponse]
    StreamResponse: typing.Type[StreamResponse]
    ThreePhaseSeparatorResponse: typing.Type[ThreePhaseSeparatorResponse]
    WellAllocatorResponse: typing.Type[WellAllocatorResponse]
