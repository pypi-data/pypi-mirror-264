
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import jneqsim.neqsim.thermo
import typing



class NeqSimUnitSet:
    def __init__(self): ...
    def getComponentConcentrationUnit(self) -> str: ...
    def getFlowRateUnit(self) -> str: ...
    def getPressureUnit(self) -> str: ...
    def getTemperatureUnit(self) -> str: ...
    def setComponentConcentrationUnit(self, string: str) -> None: ...
    def setFlowRateUnit(self, string: str) -> None: ...
    def setPressureUnit(self, string: str) -> None: ...
    def setTemperatureUnit(self, string: str) -> None: ...

class Unit:
    def getSIvalue(self) -> float: ...
    @typing.overload
    def getValue(self, double: float, string: str, string2: str) -> float: ...
    @typing.overload
    def getValue(self, string: str) -> float: ...

class BaseUnit(Unit, jneqsim.neqsim.thermo.ThermodynamicConstantsInterface):
    def __init__(self, double: float, string: str): ...
    def getSIvalue(self) -> float: ...
    @typing.overload
    def getValue(self, double: float, string: str, string2: str) -> float: ...
    @typing.overload
    def getValue(self, string: str) -> float: ...

class LengthUnit(BaseUnit):
    def __init__(self, double: float, string: str): ...

class PressureUnit(BaseUnit):
    def __init__(self, double: float, string: str): ...
    def getConversionFactor(self, string: str) -> float: ...
    @typing.overload
    def getValue(self, double: float, string: str, string2: str) -> float: ...
    @typing.overload
    def getValue(self, string: str) -> float: ...

class RateUnit(BaseUnit):
    def __init__(self, double: float, string: str, double2: float, double3: float, double4: float): ...
    def getConversionFactor(self, string: str) -> float: ...
    def getSIvalue(self) -> float: ...
    @typing.overload
    def getValue(self, double: float, string: str, string2: str) -> float: ...
    @typing.overload
    def getValue(self, string: str) -> float: ...

class TemperatureUnit(BaseUnit):
    def __init__(self, double: float, string: str): ...
    def getConversionFactor(self, string: str) -> float: ...
    @typing.overload
    def getValue(self, double: float, string: str, string2: str) -> float: ...
    @typing.overload
    def getValue(self, string: str) -> float: ...

class TimeUnit(BaseUnit):
    def __init__(self, double: float, string: str): ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.util.unit")``.

    BaseUnit: typing.Type[BaseUnit]
    LengthUnit: typing.Type[LengthUnit]
    NeqSimUnitSet: typing.Type[NeqSimUnitSet]
    PressureUnit: typing.Type[PressureUnit]
    RateUnit: typing.Type[RateUnit]
    TemperatureUnit: typing.Type[TemperatureUnit]
    TimeUnit: typing.Type[TimeUnit]
    Unit: typing.Type[Unit]
