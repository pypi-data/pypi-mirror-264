
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import jpype
import jneqsim.neqsim.standards
import jneqsim.neqsim.thermo.system
import jneqsim.neqsim.util
import typing



class ContractInterface:
    def display(self) -> None: ...
    def getContractName(self) -> str: ...
    def getResultTable(self) -> typing.MutableSequence[typing.MutableSequence[str]]: ...
    def getSpecificationsNumber(self) -> int: ...
    def getWaterDewPointSpecPressure(self) -> float: ...
    def getWaterDewPointTemperature(self) -> float: ...
    def prettyPrint(self) -> None: ...
    def runCheck(self) -> None: ...
    def setContract(self, string: str) -> None: ...
    def setContractName(self, string: str) -> None: ...
    def setResultTable(self, stringArray: typing.Union[typing.List[typing.MutableSequence[str]], jpype.JArray]) -> None: ...
    def setSpecificationsNumber(self, int: int) -> None: ...
    def setWaterDewPointSpecPressure(self, double: float) -> None: ...
    def setWaterDewPointTemperature(self, double: float) -> None: ...

class ContractSpecification(jneqsim.neqsim.util.NamedBaseClass):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str, string2: str, string3: str, string4: str, standardInterface: jneqsim.neqsim.standards.StandardInterface, double: float, double2: float, string5: str, double3: float, double4: float, double5: float, string6: str): ...
    def getComments(self) -> str: ...
    def getCountry(self) -> str: ...
    def getMaxValue(self) -> float: ...
    def getMinValue(self) -> float: ...
    def getReferencePressure(self) -> float: ...
    def getReferenceTemperatureCombustion(self) -> float: ...
    def getReferenceTemperatureMeasurement(self) -> float: ...
    def getSpecification(self) -> str: ...
    def getStandard(self) -> jneqsim.neqsim.standards.StandardInterface: ...
    def getTerminal(self) -> str: ...
    def getUnit(self) -> str: ...
    def setComments(self, string: str) -> None: ...
    def setCountry(self, string: str) -> None: ...
    def setMaxValue(self, double: float) -> None: ...
    def setMinValue(self, double: float) -> None: ...
    def setReferencePressure(self, double: float) -> None: ...
    def setReferenceTemperatureCombustion(self, double: float) -> None: ...
    def setReferenceTemperatureMeasurement(self, double: float) -> None: ...
    def setSpecification(self, string: str) -> None: ...
    def setStandard(self, standardInterface: jneqsim.neqsim.standards.StandardInterface) -> None: ...
    def setTerminal(self, string: str) -> None: ...
    def setUnit(self, string: str) -> None: ...

class BaseContract(ContractInterface):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface): ...
    @typing.overload
    def __init__(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, string: str, string2: str): ...
    def display(self) -> None: ...
    def getContractName(self) -> str: ...
    def getMethod(self, systemInterface: jneqsim.neqsim.thermo.system.SystemInterface, string: str) -> jneqsim.neqsim.standards.StandardInterface: ...
    def getResultTable(self) -> typing.MutableSequence[typing.MutableSequence[str]]: ...
    def getSpecification(self, standardInterface: jneqsim.neqsim.standards.StandardInterface, string: str, string2: str, string3: str, string4: str, double: float, double2: float, string5: str, double3: float, double4: float, double5: float, string6: str) -> ContractSpecification: ...
    def getSpecificationsNumber(self) -> int: ...
    def getWaterDewPointSpecPressure(self) -> float: ...
    def getWaterDewPointTemperature(self) -> float: ...
    def runCheck(self) -> None: ...
    def setContract(self, string: str) -> None: ...
    def setContractName(self, string: str) -> None: ...
    def setResultTable(self, stringArray: typing.Union[typing.List[typing.MutableSequence[str]], jpype.JArray]) -> None: ...
    def setSpecificationsNumber(self, int: int) -> None: ...
    def setWaterDewPointSpecPressure(self, double: float) -> None: ...
    def setWaterDewPointTemperature(self, double: float) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.standards.salesContract")``.

    BaseContract: typing.Type[BaseContract]
    ContractInterface: typing.Type[ContractInterface]
    ContractSpecification: typing.Type[ContractSpecification]
