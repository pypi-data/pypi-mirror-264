
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import jpype
import jneqsim.neqsim.processSimulation.measurementDevice
import typing



class FluidSevereSlug:
    def getGasConstant(self) -> float: ...
    def getLiqDensity(self) -> float: ...
    def getMolecularWeight(self) -> float: ...
    def getliqVisc(self) -> float: ...
    def setLiqDensity(self, double: float) -> None: ...
    def setLiqVisc(self, double: float) -> None: ...
    def setMolecularWeight(self, double: float) -> None: ...

class Pipe:
    def getAngle(self, string: str) -> float: ...
    def getArea(self) -> float: ...
    def getInternalDiameter(self) -> float: ...
    def getLeftLength(self) -> float: ...
    def getName(self) -> str: ...
    def getRightLength(self) -> float: ...
    def setAngle(self, double: float) -> None: ...
    def setInternalDiameter(self, double: float) -> None: ...
    def setLeftLength(self, double: float) -> None: ...
    def setName(self, string: str) -> None: ...
    def setRightLength(self, double: float) -> None: ...

class SevereSlugAnalyser(jneqsim.neqsim.processSimulation.measurementDevice.MeasurementDeviceBaseClass):
    def checkFlowRegime(self, fluidSevereSlug: FluidSevereSlug, pipe: Pipe, severeSlugAnalyser: 'SevereSlugAnalyser') -> str: ...
    def gasConst(self, fluidSevereSlug: FluidSevereSlug) -> float: ...
    def getFlowPattern(self) -> str: ...
    @typing.overload
    def getMeasuredValue(self) -> float: ...
    @typing.overload
    def getMeasuredValue(self, string: str) -> float: ...
    @typing.overload
    def getMeasuredValue(self, fluidSevereSlug: FluidSevereSlug, pipe: Pipe, severeSlugAnalyser: 'SevereSlugAnalyser') -> float: ...
    def getNumberOfTimeSteps(self) -> int: ...
    def getOutletPressure(self) -> float: ...
    @typing.overload
    def getPredictedFlowRegime(self) -> str: ...
    @typing.overload
    def getPredictedFlowRegime(self, fluidSevereSlug: FluidSevereSlug, pipe: Pipe, severeSlugAnalyser: 'SevereSlugAnalyser') -> str: ...
    def getSimulationTime(self) -> float: ...
    def getSlugValue(self) -> float: ...
    def getSuperficialGasVelocity(self) -> float: ...
    def getSuperficialLiquidVelocity(self) -> float: ...
    def getTemperature(self) -> float: ...
    @staticmethod
    def main(stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    def runSevereSlug(self, fluidSevereSlug: FluidSevereSlug, pipe: Pipe, severeSlugAnalyser: 'SevereSlugAnalyser') -> None: ...
    def setNumberOfTimeSteps(self, int: int) -> None: ...
    def setOutletPressure(self, double: float) -> None: ...
    def setSimulationTime(self, double: float) -> None: ...
    def setSuperficialGasVelocity(self, double: float) -> None: ...
    def setSuperficialLiquidVelocity(self, double: float) -> None: ...
    def setTemperature(self, double: float) -> None: ...
    def slugHoldUp(self, pipe: Pipe, severeSlugAnalyser: 'SevereSlugAnalyser') -> float: ...
    def stratifiedHoldUp(self, fluidSevereSlug: FluidSevereSlug, pipe: Pipe, severeSlugAnalyser: 'SevereSlugAnalyser') -> float: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.processSimulation.measurementDevice.simpleFlowRegime")``.

    FluidSevereSlug: typing.Type[FluidSevereSlug]
    Pipe: typing.Type[Pipe]
    SevereSlugAnalyser: typing.Type[SevereSlugAnalyser]
