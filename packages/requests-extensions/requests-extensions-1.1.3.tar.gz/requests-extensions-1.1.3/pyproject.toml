[build-system]
requires = [
    "setuptools ~= 65.3",
    "wheel ~= 0.40.0",
    "build ~= 0.10.0",
]
build-backend = "setuptools.build_meta"

[project]
name = "requests-extensions"
version = "1.1.3"
description = "DataKitchen Inc. extension of requests package"
urls = { "homepage" = "https://datakitchen.io" }
authors = [
    { "name" = "Ricardo Boni", "email" = "rboni@datakitchen.io" },
    { "name" = "Brant Watson", "email" = "bwatson@datakitchen.io" },
    { "name" = "Diogo Basto", "email" = "dbasto@datakitchen.io" },
    { "name" = "Jimmie HÃ¶gklint", "email" = "jhogklint@datakitchen.io" },
    { "name" = "Khanh Tran", "email" = "ktran@datakitchen.io" },
    { "name" = "Tyler Stubenvoll", "email" = "tstubenvoll@datakitchen.io" },
]
license = { "text" = "CLOSED"  }
readme = "README.md"
classifiers = [
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
]
requires-python = ">=3.10"

dependencies = [
    "requests~=2.31",
    "urllib3>=1.26"
]

[project.optional-dependencies]
dev = [
    "black[d]~=23.1.0",
    "isort~=5.12.0",
    "lxml~=4.9.1",
    "mypy~=1.2.0",
    "pre-commit~=2.20.0",
    "types-setuptools~=65.3",
    "types-requests==2.31.0.6",
    "pytest~=7.2.0",
    "pytest-cov~=4.0.0",
    "tomli~=2.0.1",
    "twine ~= 4.0.2",
]
build = [
    "setuptools~=65.3",
    "wheel~=0.40.0",
    "build~=0.10.0",
]


[tool.setuptools]
include-package-data = true

[tool.setuptools.package-data]
"*" = ["*.toml", "*.sql", "*.yaml"]
"requests_extensions" = ["py.typed",]


[tool.setuptools.packages.find]
# see the important note for why we glob. TL;DR: Otherwise you don't get submodules
# https://setuptools.pypa.io/en/latest/userguide/package_discovery.html#finding-simple-packages
where = ["src"]
include = [
      "requests_extensions*",
]
exclude = ["tests*"]

[tool.pytest.ini_options]
minversion = "7.0"
# --strict-markers means the markers have to be defined in this file before use, which prevents mispellings.
# --strict-config means that any warnings encountered while parsing the `pytest`configuration file will raise errors.
# -ra: show extra test data.
addopts = "-ra --strict-markers --strict-config"

python_files = "test_*.py"
python_classes = "Test_"
python_functions = "test_*"


# Look up "Testing Pyramid" for more insight into these markers.
markers = [
    "unit: The test is a unit test and is thus expected to be fast with little setup",
    "integration: The test is an integration test and is thus expected to be somewhat slower with a little more setup",
]
filterwarnings = [
    # remove when resolved: https://github.com/marshmallow-code/apispec/issues/739
    'ignore:distutils Version classes are deprecated:DeprecationWarning:apispec'
]

# see: https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml-file
# for settings that do not have a comment,
# see: https://mypy.readthedocs.io/en/stable/config_file.html
# for an explanation of their functionality.
# WARNING: When changing mypy configurations, be sure to test them after removing your .mypy_cache
[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
# This warns if any returns get cast to 'Any' due to type uncertainty by mypy. Since 'Any' is a valid return type
# for any function, returning any from a str function would be valid. This causes it to raise a warning instead.
warn_return_any = true
# This shows an error-code on failure, which is useful on debugging and possibly ignoring those particular
# lines if need-be.
show_error_codes = true
# This warns us if we're using '# type ignore' on a function which mypy knows it has definitions for.
# Hopefully this allows us to phase in type-checks on more libraries.
warn_unused_ignores = true
# Enables PEP 420 style namespace packages. This is a complex topic,
# but my reading suggests this is a generally 'good' idea.
# so see: https://mypy.readthedocs.io/en/stable/config_file.html#confval-namespace_packages
namespace_packages = true
warn_redundant_casts = true
# Remember that time you forgot to put a return in the function? This warns us of that.
# i.e.,
#
# def foo() -> str:
#     x = 'a' + 'x'
# will return an error for not having the return it promised.
warn_no_return = true
# This attempts to warn us when we encounter code that is currently unreachable.
warn_unreachable = true
# Now for some configurations to improve our error messages Attempts to make the output prettier for us mere mortals.
pretty = true
# This tries to show some additional context around where the error is occuring
show_error_context = true
# Mypy appears smart enough to ignore hidden directories. But it needs to scan __pycache__ for .pyc and pyi files,
# so it cannot honor gitignore.
exclude = [
    '''^(?:.*\/)+[tT]ests?''',
    'conftest.py',
    'venv/',
    'build/',
]

[tool.isort]
profile = "black"
line_length = 120

[tool.black]
line-length = 120
target-version = ['py310']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.mypy_cache
    | \.tox
    | \.venv
    | env
    | venv
    | _build
    | build
    | dist
  )/
  | foo.py           # also separately exclude a file named foo.py in
                     # the root of the project
)
'''


# See: https://coverage.readthedocs.io/en/latest/config.html
[tool.coverage.run]
branch=true
# Every time there is a new top-level module, this will need to be expanded.
source = [
    "src"
]

[tool.coverage.report]
# We don't need to report the coverage lines on tests or templates.
omit = ["tests/*"]
# This skips __init__.py and other empty files.
skip_empty=true
