import sys
sys.path.insert(1, 'C:\\Users\\Aaron Co Hee\\Documents\\Customers\\Streamline\\CherwellAPI\\CherwellAPI')
from CherwellAPI import CherwellClient
from CherwellAPI import Filter
from itertools import islice
import requests
import json
import ssl
import base64
import paramiko
import datetime
import os
import pymysql
import time
import uuid

# Class to format an event for Cherwell
class CherwellEvent:
    """
    The 'CherwellEvent' class serves to Format the message that will be used in the Cherwell Event.

    Parameters
    ----------

    Action : str

        The Event Action, appends the Action to the start of the message, which triggers 
        a run book Automation based on the value

    ComputerId : str

        The Cherwell Rec ID of the Computer/Server

    Details : dict

        Hold the ScienceLogic Device Details for the particular SL1 Fil System

    Returns
    -------

        The Formatted string used for the Cherwell Event Message
    
    """

    def __init__(self, Action, Details):

        self.Action = "File System Update"
        self.Details = Details

    # returns properly formatted Cherwell Event
    def __repr__(self):

        string_result = "{{\"Action\":\"{}\",\n".format(str(self.Action).replace("\"", "").replace("'", ""))
        string_result = string_result + "\"Attributes\":[\n"
        for name, value in self.Details.items():
            string_result = string_result + "{{\"{}\":\"{}\"}},\n".format(str(name).replace("\"", "").replace("'", "").replace("None", ""),
                                                                          str(value).replace("\"", "").replace("'", "").replace("None", ""))
        string_result = string_result[:-2]
        string_result = string_result + "]\n}"

        return string_result

# Uploads a batch of devices to Cherwell
def upload_file_systems(sl1_db_host, sl1_db_user, sl1_db_password, sl1_db_port, cherwell_client, cherwell_host, cherwell_user, cherwell_password, cherwell_api_key, federation_source, update_key):
    """
    Function used to Get ScienceLogic File System Details and create a Cherwell Event with the details

    Parameters
    ----------

    sl1_db_host : str

        This is the DB IP for the SL1 Host and typically takes the form of '127.0.0.1'. 
        The IP address can be replaced by the host name provided DNS name resolution is setup
        correctly'

    sl1_db_user : str

        The username of a SL1 user with access to the SL1 DB

    sl1_db_password : str

        The password of the user referred to in the 'sl1_db_user' :parameter
    
    sl1_db_port : int

        The Port used to acces the SL1 DB

    cherwell_host : str

        This is the base uri for the Cherwell instance and typically take the form of 'http://127.0.0.1' or
        'https://127.0.0.1'. The IP address can be replaced by the host name provided DNS name resolution is setup
        correctly'

    cherwell_user : str

        The username of a Cherwell user that has access to all the objects and functions necessary for the
        required interaction

    cherwell_password : str

        The password of the user referred to in the 'username' :parameter

    cherwell_api_key : str

        This is the REST API key generated by the Cherwell Administration tool (Orange Pill). This is needed to
        properly authenticate with the Cherwell REST API
    
    federation_source : str

        The Federated Source in Cherwell that is being acted upon e.g. You have created one Federated
        Source for ScienceLogic and another for Nagios

    debug_mode : bool

        A value of True indicates that the message will be displayed on the IS4 Debug log,
        A value of False indicates that the message won't be displayed on the IS4 Debug Log

    Returns
    -------

        The number for total matched results. Returns the classes in SL1

    """

    db_connection = pymysql.connect(
        host=sl1_db_host,
        user=sl1_db_user,
        password=sl1_db_password,
        charset="utf8mb4",
        cursorclass=pymysql.cursors.DictCursor,
        port=int(sl1_db_port)
    )

    count = 1

    config_item_id_dict = {}

    with db_connection.cursor() as cursor:
        cursor.execute("SELECT `inv_id` `fs_id`, `did`, `name` `fs_name`, `value6` `description`, `date_time` `date_create`, `update_time` `date_update`, `value0` `fs_size`, `value2` `fs_used`, `value4` `fs_used_pct`, `device`, `ip` FROM `master_dev`.`device_hardware` INNER JOIN `master_dev`.`legend_device` ON `master_dev`.`device_hardware`.`did` = `master_dev`.`legend_device`.`id` WHERE `comp_type` = 3")
        file_systems = cursor.fetchall()

    # Loop through the sl1 devices found
    for file_system in file_systems:
        
        # if str(file_system["did"]) not in config_item_id_dict:
        #     federated_ci_filter = Filter.SimpleFilter("FederatedCI")
        #     federated_ci_filter.add_search_fields("FederatedCIID", "eq", str(file_system["did"]))
        #     federated_ci_filter.add_search_fields("FederationName", "eq", str(federation_source))
        #     time.sleep(0.5)
        #     num_records, federated_ci_objects = cherwell_client.get_business_objects(federated_ci_filter)
        #     print("Federated CI Num Record: {}".format(str(num_records)))
        #     if num_records < 1:
        #         pass
        #     else:
        #         for federated_ci_object in federated_ci_objects:
        #             config_item_id_dict[str(file_system["did"])] = str(federated_ci_object.ConfigurationItemID)
        #             print("ComputerID: {}".format(str(config_item_id_dict[str(file_system["did"])])))

        # drive_info_filter = Filter.SimpleFilter("DriveInfo")
        # drive_info_filter.add_search_fields("FederationName", "eq", federation_source)
        # drive_info_filter.add_search_fields("Name", "eq", str(file_system["fs_name"]))
        # drive_info_filter.add_search_fields("ComputerID", "eq", config_item_id_dict[str(file_system["did"])])
        # time.sleep(0.5)

        # # Attempt to get the records
        # num_records, drive_info_objects = cherwell_client.get_business_objects(drive_info_filter)

        # if num_records > 0:
        #     print("Drive info Num Record: {}".format(str(num_records)))
    
        #     print(u"File System found updating updatekey")

        #     # Clear the current UpdateKey
        #     for drive_info_object in drive_info_objects:
        #         drive_info_object.UpdateKey = "{}".format(str(update_key))
        #         time.sleep(0.5)
        #         drive_info_object.Save()

        try:

            # Create a new device list to populate
            new_file_systems = dict()

            # Set the Action, Whether to Update or Remove
            new_file_systems["Action"] = "Update"

            # Set the Free Space of the File System
            new_file_systems["FreeSpace"] = int(file_system["fs_size"]) - int(file_system["fs_used"])

            #Set the Name of the File System
            new_file_systems["Name"] = str(file_system["fs_name"]).replace("\\","\\\\")

            # set the Size of the File System
            new_file_systems["Size"] = int(file_system["fs_size"])
            
            # Set the device id
            new_file_systems["FederatedCIID"] = str(file_system["did"])
            
            # Set the Federation Source
            new_file_systems["FederationSource"] = str(federation_source)

            # Create a new Cherwell Event for the device
            cherwell_event = CherwellEvent("File System Update", new_file_systems)

            # Show the cherwell event
            print(u"Event: {}".format(cherwell_event))

            # Add the new event to Cherwell
            add_cherwell_event(cherwell_event,
                                    str(federation_source),
                                    str(file_system["did"]),
                                    cherwell_user,
                                    cherwell_client)

            print("Loop: {}".format(str(count)))
            count += 1

        except Exception as data_error:
            # Sometimes we have issues with a certain data element - pass for now
            print(u"Exception: {} - passing for now".format(data_error), True)
            pass

    # # Show the list of devices with their data
    # print(u"SL1 File Systems found in this round are {}".format(file_systems))

# Sets relationships found that do not have the curremt update key (update key blank) - to removed
def set_file_system_removed(cherwell_client, cherwell_host, cherwell_user, cherwell_password, cherwell_api_key, federation_source, update_key, debug_mode=False):
    """
    Function that sets file systems found that do not have the current update key (update key blank) - to removed

    Parameters
    ----------
    
    cherwell_client : dict

        Cherwell dictionary that holds variables allowing users to connect and communicate with the Cherwell API

    debug_mode : bool

        A value of True indicates that the message will be displayed on the IS4 Debug log,
        A value of False indicates that the message won't be displayed on the IS4 Debug Log

    """

    # Show we are setting relationships to removed
    print(u"Settings file system without an UpdateKey to removed", debug_mode)

    # Counters to check when we are done
    num_records = 0

    try:

        # Create a search filter to find the Federation Record
        search_filter = Filter.SimpleFilter("DriveInfo")
        search_filter.add_search_fields("UpdateKey", "eq", "")
        search_filter.add_search_fields("Present", "eq", "true")
        search_filter.add_search_fields("FederationName", "eq", federation_source)
        time.sleep(0.5)

        # Attempt to get the records
        num_records, business_objects = cherwell_client.get_business_objects(search_filter)

        if num_records > 0:

            print(u"file systems found to set to removed: {}".format(num_records),
                            debug_mode)

            # setup a counter
            count_complete = 0

            # Clear the current UpdateKey
            for business_object in business_objects:
                # Create a new device list to populate
                new_file_systems = dict()

                # Set the Action, Whether to Update or Remove
                new_file_systems["Action"] = "Remove"

                # Set the Free Space of the File System
                new_file_systems["FreeSpace"] = int(business_object.FreeSpace)

                #Set the Name of the File System
                new_file_systems["Name"] = str(business_object.Name).replace("\\","\\\\")

                # set the Size of the File System
                new_file_systems["Size"] = int(business_object.Size)
                
                # Set the Federation Source
                new_file_systems["FederationSource"] = str(federation_source)

                # Set the File System RecID
                new_file_systems["RecID"] = str(business_object.busObRecId)

                # Create a new Cherwell Event for the device
                cherwell_event = CherwellEvent("File System Update", new_file_systems)

                # Show the cherwell event
                print(u"Event: {}".format(cherwell_event), debug_mode)

                # Add the new event to Cherwell
                add_cherwell_event(cherwell_event,
                                        str(federation_source),
                                        "None",
                                        cherwell_user,
                                        cherwell_client)

                # Increment the counter
                count_complete = count_complete + 1

                # Show how many we have done
                print(
                    u"File Systems set to removed {} of {}".format(count_complete, num_records),
                    debug_mode)

    except Exception as cherwell_error:
        print(u"Exception removing file systems: {}".format(cherwell_error), True)

# Integration is enabled
def log_integration_enabled(auth_header, sl1_hostname, federation_source, debug_mode=False):
    """
    Function used to Create a Healthy Event in ScienceLogic if the Federation Registration is Active

    Parameters
    ----------

    auth_header : dict

        The Authorization Header Generated in the 'get_sl1_header' function. Used to authenticate
        with the SL1 API

    sl1_hostname : str

        This is the base uri for the SL1 Hostname and typically take the form of 'http://127.0.0.1' or
        'https://127.0.0.1'. The IP address can be replaced by the host name provided DNS name resolution is setup
        correctly'

    federation_source : str

        The name of the Federated Registration Record Created in Cherwell
    
    debug_mode : str

        A value of True indicates that the message will be displayed on the IS4 Debug log,
        A value of False indicates that the message won't be displayed on the IS4 Debug Log

    """

    error_message = u"Cherwell - Federation Registration is Active for {}".format(federation_source)

    print(error_message, True)

    # Log a SL1 Event
    log_sl1_event(auth_header, sl1_hostname, error_message, debug_mode)

# Integration is disabled
def log_integration_disabled(auth_header, sl1_hostname, federation_source, debug_mode=False):
    """
    Function used to Create a Critical Event in ScienceLogic if the Federation Registration is Disabled

    Parameters
    ----------

    auth_header : dict

        The Authorization Header Generated in the 'get_sl1_header' function. Used to authenticate
        with the SL1 API

    sl1_hostname : str

        This is the base uri for the SL1 Hostname and typically take the form of 'http://127.0.0.1' or
        'https://127.0.0.1'. The IP address can be replaced by the host name provided DNS name resolution is setup
        correctly'

    federation_source : str

        The name of the Federated Registration Record Created in Cherwell
    
    debug_mode : str

        A value of True indicates that the message will be displayed on the IS4 Debug log,
        A value of False indicates that the message won't be displayed on the IS4 Debug Log

    """

    error_message = u"Cherwell - Federation Registration is not Active for {}".format(federation_source)

    print(error_message, True)

    # Log a SL1 Event
    log_sl1_event(auth_header, sl1_hostname, error_message, debug_mode)

# This function performs a get request to retrieve a data from the SL1 REST api and returns that as JSON
def get_APIData(baseURI, endpoint, headers):
    """
    Function used to perform a REST API Get function

    Parameters
    ----------

    baseURI : str

        This is the base uri for the Targetted System e.g. SL1, Cherwell and typically take the form of 'http://127.0.0.1' or
        'https://127.0.0.1'. The IP address can be replaced by the host name provided DNS name resolution is setup
        correctly'

    endpoint : str

        The Specific endpoint you would like to perform a REST API Get to e.g. in SL1 when wanting to create an alert endpoint
        would be 'api/alert'

    headers : dict
    Returns
    -------

        The result of the REST API Get and its Contents in JSON Format

    """
        
    #Build the URI to access the required object
    URI="{}/{}".format(baseURI, endpoint)
        
    response = requests.get(URI, auth=None, headers=headers, verify=False)
    
    jsonresponse = json.loads(response.content)

    # return the result
    return jsonresponse

# Adds a new event to Cherwell for processing
def add_cherwell_event(new_event, federation_source, FederatedCIID, cherwell_user, cherwell_client, debug_mode=False):
    """
    Function used to Create a Cherwell Event for the ScienceLogic Device, which triggers a run book to either
    create or update a CI

    Parameters
    ----------

    federation_source : str

        The name of the Federated Registration Record Created in Cherwell
    
    cherwell_client : obj

        Cherwell API Connection Object
    
    cherwell_user : str

        The username of a Cherwell user that has access to all the objects and functions necessary for the
        required interaction

    debug_mode : bool

        A value of True indicates that the message will be displayed on the IS4 Debug log,
        A value of False indicates that the message won't be displayed on the IS4 Debug Log

    """

    # Show we are adding the event
    print(u"Adding event to Cherwell {}".format(new_event), debug_mode)

    try:
        
        # Create a new instance of a event
        event = cherwell_client.get_new_business_object("Event")

        # Set the properties of the new event
        event.Message = str(new_event)
        try:
            event.FederatedCIID = str(FederatedCIID)
        except:
            pass
        event.Source = federation_source
        event.FederationName = federation_source
        event.Status = "Recorded"
        event.LoggedUser = str(cherwell_user)
        time.sleep(0.5)

        # Save the new event
        event.Save()

        # Show we are adding the event
        print(u"Completed Adding event to Cherwell {}", debug_mode)

    except Exception as cherwell_error:
        print(u"Exception adding Cherwell Event: {}".format(cherwell_error), True)

# Checks integration status on the Federation record in Cherwell and return True/False
def check_integration_enabled(federation_source, cherwell_host, cherwell_user, cherwell_password,
                                cherwell_api_key, auth_header, sl1_hostname, debug_mode=False):
    """
    Function used to check if the Federation Registration Record in Cherwell is Active, if it is then it will
    Log a Healthy Event in SL1, if not then it will log a critical event in SL1

    Parameters
    ----------

    federation_source : str

        The name of the Federated Registration Record Created in Cherwell
    
    cherwell_host : str

        This is the base uri for the Cherwell instance and typically take the form of 'http://127.0.0.1' or
        'https://127.0.0.1'. The IP address can be replaced by the host name provided DNS name resolution is setup
        correctly'

    cherwell_user : str

        The username of a Cherwell user that has access to all the objects and functions necessary for the
        required interaction

    cherwell_password : str

        The password of the user referred to in the 'username' :parameter

    cherwell_api_key : str

        This is the REST API key generated by the Cherwell Administration tool (Orange Pill). This is needed to
        properly authenticate with the Cherwell REST API

    auth_header : dict

        The Authorization Header Generated in the 'get_sl1_header' function. Used to authenticate
        with the SL1 API

    sl1_hostname : str

        This is the base uri for the SL1 Hostname and typically take the form of 'http://127.0.0.1' or
        'https://127.0.0.1'. The IP address can be replaced by the host name provided DNS name resolution is setup
        correctly'

    debug_mode : bool

        A value of True indicates that the message will be displayed on the IS4 Debug log,
        A value of False indicates that the message won't be displayed on the IS4 Debug Log

    Returns
    -------

        The Status of the Federation Registration Record e.g. Active, Inactive

    """

    # Default to False
    integration_enabled = False

    # Show we are adding the event
    print(u"Checking Integration Status for Federation {}".format(federation_source), debug_mode)

    try:

        # Create a new cherwellclient connection
        cherwell_client = CherwellClient.Connection(cherwell_host, cherwell_api_key, cherwell_user,
                                                    cherwell_password)

        # Create a search filter to find the Federation Record
        search_filter = Filter.SimpleFilter("FederationRegistration")
        search_filter.add_search_fields("FederationName", "eq", federation_source)

        # Attempt to get the record
        num_records, business_objects = cherwell_client.get_business_objects(search_filter)

        if num_records > 0 and business_objects[0].Status == "Active":

            # Integration is enabled
            integration_enabled = True

        print(u"Integration Status is: {}".format(business_objects[0].Status), debug_mode)

    except Exception as cherwell_error:
        print(u"Exception getting Integration Status: {}".format(cherwell_error), True)

    finally:
        if integration_enabled:

            # Integration is now enabled
            log_integration_enabled(auth_header, sl1_hostname, federation_source, debug_mode)
        else:

            # Integration is not enabled - log an event to SL1
            log_integration_disabled(auth_header, sl1_hostname, federation_source, debug_mode)

    # return the result
    return integration_enabled

# Log a SL1 message to System Organisation
def log_sl1_event(auth_header, sl1_hostname, message, debug_mode=False):
    """
    Function Used to Write an Alert Log to the System Organization in SL1

    Parameters
    ----------

    auth_header : dict

        The Authorization Header Generated in the 'get_sl1_header' function. Used to authenticate
        with the SL1 API
    
    sl1_hostname : str

        This is the base uri for the SL1 Hostname and typically take the form of 'http://127.0.0.1' or
        'https://127.0.0.1'. The IP address can be replaced by the host name provided DNS name resolution is setup
        correctly'
    
    message : str

        The Message you would like to display on the SL1 System Organisation Log

    debug_mode : bool

        A value of True indicates that the message will be displayed on the IS4 Debug log,
        A value of False indicates that the message won't be displayed on the IS4 Debug Log

    """

    # Show we are adding the event
    print(u"Logging event to SL1 {}".format(message), debug_mode)

    data = {
        "message": message,
        "aligned_resource": "/api/organization/0"
    }

    post_APIData(sl1_hostname, 'api/alert', auth_header, data)

# Get the sl1 authorization header
def get_sl1_header(username, password):
    """
    Function used to Generate the SL1 Authorization string, and authorization header
    for API Calls

    Parameters
    ----------

    username : str

        The SL1 Username of a user who has access to the SL1 API

    password : str

        The password of the user referred to in the 'username' :parameter

    Returns
    -------

        The Authorization Header used to authenticate with the SL1 API

    """

    # Setup the base64 encoded auth string
    b64Text = "{}:{}".format(username,password)
    authorization = base64.b64encode(b64Text.encode('ascii')).decode("utf-8") 

    # return the header
    return {"Authorization": "Basic " + authorization, "Content-Type": "application/json"}

# This function performs a post request to a REST api
def post_APIData(baseURI, objectType, headers, jsonData):
    """
    Function Used to perform a REST API Post function

    Parameters
    ----------

    baseURI : str

        This is the base uri for the Targetted System e.g. SL1, Cherwell and typically take the form of 'http://127.0.0.1' or
        'https://127.0.0.1'. The IP address can be replaced by the host name provided DNS name resolution is setup
        correctly'

    objectType : str

        The Specific Object you would like to perform a REST API Post to e.g. in SL1 when wanting to create an alert objectType
        would be 'api/alert'

    headers : dict

        The Authorization Header used to authenticate with the particular API that is being connected to. if SL1 use
        the Authorization Header Generated in the 'get_sl1_header' function.

    jsonData : dict

        The JSON data used to POST to the particular API Resource that is being referred to. Format of the JSON data
        will be a dictionary.

    Returns
    -------

        The result of the REST API Post and its Contents

    """

    # Build the URI to access the required object
    URI = "{}/{}".format(baseURI, objectType)

    response = requests.post(URI, data=json.dumps(jsonData), headers=headers, verify=False)

    return response.content

try:
    # Get all the passed parameters into local variables
    sl1_db_host = "ec2-3-105-165-48.ap-southeast-2.compute.amazonaws.com"
    sl1_db_user = "root"
    sl1_db_password = "em7admin"
    sl1_db_port = 7706
    sl1_hostname = "https://ec2-3-105-165-48.ap-southeast-2.compute.amazonaws.com"
    sl1_user = "em7admin"
    sl1_password = "em7admin"
    federation_source = "SL1-Dev"
    cherwell_host = "http://ec2-3-104-173-24.ap-southeast-2.compute.amazonaws.com"
    cherwell_user = "SL1"
    cherwell_password = "Password123"
    cherwell_api_key = "2940baca-1e3a-4f5e-863a-a4e2370a8633"

    # Create a new uuid for this update - this is used to detect relationships that no longer exist
    update_key = uuid.uuid1()

    # Show the update key
    print(u"Generated [Update key] is {}".format(update_key))

    # Create a new cherwellclient connection
    cherwell_client = CherwellClient.Connection(cherwell_host, cherwell_api_key, cherwell_user,
                                            cherwell_password)

    # Get the sl1 authorization header
    auth_header = get_sl1_header(sl1_user, sl1_password)

    # Show the auth header
    print(u"SL1 Auth Header is {}".format(auth_header))

    # Before starting - Cherwell Federation record - whether integration is enabled
    integration_enabled = check_integration_enabled(federation_source, cherwell_host,
                                                                cherwell_user, cherwell_password,
                                                                cherwell_api_key, auth_header,
                                                                sl1_hostname)


    while integration_enabled:

        try:

            # Upload a batch for devices
            upload_file_systems(sl1_db_host, sl1_db_user, sl1_db_password,
                                    sl1_db_port, cherwell_client, cherwell_host, cherwell_user,
                                    cherwell_password, cherwell_api_key,
                                    federation_source, update_key)

            # we have all the devices
            break

        except Exception as device_error:
            print(u"Exception: {}".format(device_error),True)
            break

    # We are done with the updates - marked the ones for removal
    set_file_system_removed(cherwell_client, cherwell_host, cherwell_user, cherwell_password, cherwell_api_key, federation_source, update_key)

except Exception as app_error:
    print(u"Exception: {}".format(app_error), True)

