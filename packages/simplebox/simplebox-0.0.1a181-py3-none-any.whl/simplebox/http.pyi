#!/usr/bin/env python
# -*- coding:utf-8 -*-

from typing import List, Dict, Callable, Any, Type, Optional, MutableMapping, Union

from requests import Response

from .collection.arraylist import ArrayList
from .config.rest import RestConfig
from .decorators import Entity
from .enums import EnhanceEnum
from .generic import T
from .maps import Dictionary


class RestOptions(Dictionary):
    def __init__(self, params=None, data=None, headers=None, cookies=None, files=None, auth=None, timeout=None,
                 allow_redirects=True, proxies=None, hooks=None, stream=None, verify=None, cert=None, json=None,
                 restful: Dict = None, **kwargs): ...

    @property
    def opts_no_none(self) -> Dictionary: ...


class HttpMethod(EnhanceEnum):
    GET = ...
    OPTIONS = ...
    HEAD = ...
    POST = ...
    PUT = ...
    PATCH = ...
    DELETE = ...


class RestFul(dict):
    def update(self, m: dict = None, **kwargs) -> 'RestFul': ...


class RestResponse:
    def __init__(self, response: Optional[Response]): ...

    @property
    def success(self) -> bool: ...

    @property
    def code(self) -> int: ...

    @property
    def content(self) -> bytes: ...

    @property
    def text(self): ...

    @property
    def headers(self) -> MutableMapping: ...

    @property
    def response(self) -> Response: ...

    @property
    def body(self) -> Dictionary: ...

    def to_entity(self, type_reference: Type[Entity]) -> Union[ArrayList[T], T]: ...


class RestFast(object):
    def __init__(self, host, http2: bool = False, retry_times: int = 3, retry_backoff_factor: int = 5): ...
    def api(self, api: str) -> 'RestFast': ...

    def opts(self, opts: RestOptions) -> 'RestFast': ...

    def send(self, method: HttpMethod) -> 'RestFast': ...
    def response(self) -> RestResponse: ...

    @staticmethod
    def bulk(content: str) -> Dict: ...


class Rest(object):
    def __init__(self, file: str = None, server_name: str = None, host: str = None, herders: Dict = None,
                 cookies: Dict = None, check_status: bool = False, encoding: str = "utf-8", description: str = None,
                 restful: Dict = None, http2: bool = False, retry_times: int = 10, retry_interval: int = 5,
                 retry_exit_code_range: List = None, retry_exception_retry: bool = True,
                 retry_check_handler: Callable[[Any], bool] = None): ...

    @property
    def restful(self) -> RestFul: ...

    @property
    def check_status(self) -> bool: ...

    @check_status.setter
    def check_status(self, value): ...
    @property
    def encoding(self) -> str: ...
    @encoding.setter
    def encoding(self, value): ...
    @property
    def server_name(self) -> str: ...
    @server_name.setter
    def server_name(self, value): ...
    @property
    def server_list(self) -> list: ...
    @server_list.setter
    def server_list(self, value): ...
    @property
    def server(self) -> Dict: ...
    @server.setter
    def server(self, value): ...
    @property
    def host(self) -> str: ...
    @host.setter
    def host(self, value): ...
    @property
    def description(self) -> str: ...

    @description.setter
    def description(self, value): ...

    def soul(self, rest: 'Rest'): ...

    def retry(self, times: int = None, interval: int = None, exit_code_range: list = None, exception_retry: bool = None,
              check_handler: Callable[[Any], bool] = None) -> T: ...

    def request(self, api_name: str = None, server_name: str = None, host: str = None, api: str = None,
                method: HttpMethod or str = None, allow_redirection: bool = RestConfig.allow_redirection,
                headers: dict = None, check_status: bool = RestConfig.check_status,
                encoding: str = RestConfig.encoding, description: str = None, restful: RestFul = None) -> T: ...

    def get(self, api_name: str = None, server_name: str = None, host: str = None, api: str = None,
            allow_redirection: bool = RestConfig.allow_redirection, headers: dict = None,
            check_status: bool = RestConfig.check_status, encoding: str = RestConfig.encoding, description: str = None,
            restful: RestFul = None) -> T: ...

    def post(self, api_name: str = None, server_name: str = None, host: str = None, api: str = None,
             allow_redirection: bool = RestConfig.allow_redirection, headers: dict = None,
             check_status: bool = RestConfig.check_status, encoding: str = RestConfig.encoding,
             description: str = None, restful: RestFul = None) -> T: ...

    def put(self, api_name: str = None, server_name: str = None, host: str = None, api: str = None,
            allow_redirection: bool = RestConfig.allow_redirection, headers: dict = None,
            check_status: bool = RestConfig.check_status, encoding: str = RestConfig.encoding, description: str = None,
            restful: RestFul = None) -> T: ...

    def delete(self, api_name: str = None, server_name: str = None, host: str = None, api: str = None,
               allow_redirection: bool = RestConfig.allow_redirection, headers: dict = None,
               check_status: bool = RestConfig.check_status, encoding: str = RestConfig.encoding,
               description: str = None, restful: RestFul = None) -> T: ...

    def patch(self, api_name: str = None, server_name: str = None, host: str = None, api: str = None,
              allow_redirection: bool = RestConfig.allow_redirection, headers: dict = None,
              check_status: bool = RestConfig.check_status, encoding: str = RestConfig.encoding,
              description: str = None, restful: RestFul = None) -> T: ...

    def head(self, api_name: str = None, server_name: str = None, host: str = None, api: str = None,
             allow_redirection: bool = RestConfig.allow_redirection, headers: dict = None,
             check_status: bool = RestConfig.check_status, encoding: str = RestConfig.encoding,
             description: str = None, restful: RestFul = None) -> T: ...

    def options(self, api_name: str = None, server_name: str = None, host: str = None, api: str = None,
                allow_redirection: bool = RestConfig.allow_redirection, headers: dict = None,
                check_status: bool = RestConfig.check_status, encoding: str = RestConfig.encoding,
                description: str = None, restful: RestFul = None) -> T: ...

    @staticmethod
    def bulk(content: str) -> Dict: ...
