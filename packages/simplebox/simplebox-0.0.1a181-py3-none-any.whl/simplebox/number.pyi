from typing import TypeVar, Union, Container, Iterable

from ._handler._number_handler._compare import _Compare
from .collection.arraylist import ArrayList

Number = TypeVar("Number", bound=Union[int, float, 'Integer', 'Float'])

class Float(float, _Compare):
    def round(self, accuracy: int = None) -> 'Float': ...
    def integer(self) -> 'Integer': ...
    def add(self, numbers: Iterable[Number or str]) -> 'Float': ...
    def sub(self, numbers: Iterable[Number]) -> 'Float': ...
    def mul(self, numbers: Iterable[Number]) -> 'Float': ...
    def div(self, numbers: Iterable[Number]) -> 'Float': ...
    def factorial(self) -> 'Integer': ...
    def fibonacci(self) -> ArrayList['Float']: ...
    def abs(self) -> 'Float': ...
    def neg(self) -> 'Float': ...
    def pos(self) -> 'Float': ...
    def pow(self, p: Number) -> Number: ...
    def mod(self, b: Number) -> Number: ...
    def in_(self, numbers: Container[Number]) -> bool: ...
    def not_in(self, numbers: Container[Number]) -> bool: ...
    def count(self, numbers: Iterable[Number]) -> 'Integer': ...
    def last(self, numbers: Iterable[Number], positive: bool = False) -> 'Integer': ...
    def is_positive(self) -> bool: ...
    def is_negative(self) -> bool: ...

class Integer(int, _Compare):
    def float(self) -> Float: ...
    def is_odd(self) -> bool: ...
    def is_even(self) -> bool: ...
    def to_bin(self) -> str: ...
    def to_oct(self) -> str: ...
    def to_hex(self) -> str: ...
    def add(self, numbers: Iterable[Number]) -> Float: ...
    def sub(self, numbers: Iterable[Number]) -> Float: ...
    def mul(self, numbers: Iterable[Number]) -> Float: ...
    def div(self, numbers: Iterable[Number]) -> Float: ...
    def factorial(self) -> 'Integer': ...
    def fibonacci(self) -> ArrayList['Integer']: ...
    def abs(self) -> 'Integer': ...
    def neg(self) -> 'Integer': ...
    def or_(self, b: int) -> 'Integer': ...
    def pos(self) -> 'Integer': ...
    def pow(self, p: Number) -> Number: ...
    def rshift(self, b: int) -> 'Integer': ...
    def lshift(self, b: int) -> 'Integer': ...
    def inv(self) -> 'Integer': ...
    def xor(self, b: Number) -> 'Integer': ...
    def mod(self, b: Number) -> Number: ...
    def in_(self, numbers: Container[Number]) -> bool: ...
    def not_in(self, numbers: Container[Number]) -> bool: ...
    def count(self, numbers: Iterable[Number]) -> 'Integer': ...
    def last(self, numbers: Iterable[Number], positive: bool = False) -> 'Integer': ...
    def is_positive(self) -> bool: ...
    def is_negative(self) -> bool: ...
