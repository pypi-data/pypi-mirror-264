Metadata-Version: 2.3
Name: scikit-step
Version: 0.1.0
Summary: 1-D step detection algorithms
Project-URL: Download, https://github.com/hanjinliu/scikit-step
Author-email: Hanjin Liu <liuhanjin-sc@g.ecc.u-tokyo.ac.jp>
License: MIT License
        
        Copyright (c) 2022 Hanjin Liu
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
License-File: LICENSE
Requires-Python: >=3.8
Requires-Dist: numpy>=1.21
Requires-Dist: scipy>=1.7.3
Provides-Extra: all
Requires-Dist: dask>=2021.11.1; extra == 'all'
Requires-Dist: matplotlib>=3.1; extra == 'all'
Description-Content-Type: text/markdown

# scikit-step

1-D step detection algorithms.

![](images/plot.png)

### Example

##### Basic usage

```python
from skstep import GaussStepFinder

sf = GaussStepFinder()  # initialize
result = sf.fit(data)  # fitting
result.plot()  # plot result
result.step_positions  # step positions
result.means  # mean values at each constant region
result.step_sizes  # change between adjacent constant regions
result.lengths  # length of each constant region
```

##### Chunkwise fitting

Computation time of step finding algorithms are usually around O(N^1.5). This means that fragmenting large data makes computation faster while does not affect the result a lot.

All the step finding algorithms are implemented with chunkwise fitting with parallel processing using [dask](https://github.com/dask/dask).

```python
sf.fit_chunkwise(data)
```
