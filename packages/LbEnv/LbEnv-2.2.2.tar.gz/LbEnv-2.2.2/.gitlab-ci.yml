stages:
  - pre-commit-hooks
  - test
  - package
  - deploy

pre-commit-hooks:
  stage: pre-commit-hooks
  image: registry.cern.ch/docker.io/library/python:latest
  variables:
    GIT_STRATEGY: clone
  script:
    - pip install pre-commit
    - pre-commit run --from-ref FETCH_HEAD --to-ref HEAD

.test_template: &test_definition
  script:
    - .ci/run_tests.sh
  tags:
    - cvmfs
  artifacts:
    paths:
      - python/cover
      - public
    when: always
    expire_in: 1 week

python3.7:
  <<: *test_definition
  image: gitlab-registry.cern.ch/lhcb-docker/python-deployment:python-3.7

python3.8:
  <<: *test_definition
  image: gitlab-registry.cern.ch/lhcb-docker/python-deployment:python-3.8

python3.9:
  <<: *test_definition
  image: gitlab-registry.cern.ch/lhcb-docker/python-deployment:python-3.9

# Singularity
.integration_template: &integration_definition
  <<: *test_definition
  # Use specific version of the official docker client image (as well as the docker-in-docker image) as recommended by
  # https://about.gitlab.com/2019/07/31/docker-in-docker-with-docker-19-dot-03/
  # https://gitlab.cern.ch/gitlabci-examples/demo-privileged-runners/blob/master/.gitlab-ci.yml
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  tags:
    # "docker run --privileged" is required to use user namespaces
    - docker-privileged-xl
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    # Mount CVMFS on the host
    # See: https://cern.service-now.com/service-portal/article.do?n=KB0005851
    - docker run -d --name cvmfs --pid=host --user 0 --privileged --restart always -v /shared-mounts:/cvmfsmounts:rshared gitlab-registry.cern.ch/vcs/cvmfs-automounter:master
  script:
    # Run the tests
    - docker run --rm --privileged -v /shared-mounts/cvmfs:/cvmfs:rslave -v $CI_PROJECT_DIR:$CI_PROJECT_DIR -w $CI_PROJECT_DIR -e CONTAINER_IMPLEMENTATION $IMAGE_FOR_TESTING .ci/run_tests.sh PATCH_COVERAGE

# Keep just one singularity test for now
python-3.8-apptainer:
  <<: *integration_definition
  variables:
    IMAGE_FOR_TESTING: gitlab-registry.cern.ch/lhcb-docker/python-apptainer:python-3.8-apptainer
    CONTAINER_IMPLEMENTATION: apptainer

python-3.9-apptainer:
  <<: *integration_definition
  variables:
    IMAGE_FOR_TESTING: gitlab-registry.cern.ch/lhcb-docker/python-apptainer:python-3.9-apptainer
    CONTAINER_IMPLEMENTATION: apptainer

python-3.10-apptainer:
  <<: *integration_definition
  variables:
    IMAGE_FOR_TESTING: gitlab-registry.cern.ch/lhcb-docker/python-apptainer:python-3.10-apptainer
    CONTAINER_IMPLEMENTATION: apptainer

# Packaging step
deploy-packages:
  stage: deploy
  only:
    - tags@lhcb-core/LbEnv
  image: registry.cern.ch/docker.io/library/python:latest
  before_script:
    - pip install build twine
  script:
    - python -m build
    - if [ -z "$TWINE_PASSWORD" ] ; then echo "Set TWINE_PASSWORD in CI variables" ; exit 1 ; fi
    - twine upload -u __token__ dist/*
