Metadata-Version: 2.3
Name: pyalchemy
Version: 0.2.0
Summary: Provide kernels of the Alchemical Integral Transform
Project-URL: Homepage, https://github.com/SimonLeonKrug/pyalchemy
Project-URL: Bug Tracker, https://github.com/SimonLeonKrug/pyalchemy/issues
Author-email: Simon Le√≥n Krug <simonleon.krug@gmail.com>
License: MIT License
        
        Copyright (c) 2022 SimonLeonKrug
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
License-File: LICENSE
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.7
Requires-Dist: numpy
Requires-Dist: scipy
Description-Content-Type: text/markdown

A library which provides implementations of the kernel of the Alchemical Integral Transform (AIT) for general potentials in nD. An introduction to the concept, further explanations and details can be found under https://arxiv.org/abs/2312.04458.

Instead of calculating electronic energies of systems one at a time, this kernel provides a shortcut. By using an initial system's electron density, one can calculate the energy difference to any other system within the radius of convergence of AIT, if initial and final system are connected via an affine transformation. Check out my [GitHub page](https://github.com/SimonLeonKrug/pyalchemy) and the corresponding [paper](https://arxiv.org/abs/2312.04458).

PyAlchemy uses [Hartree atomic units](https://en.wikipedia.org/wiki/Hartree_atomic_units).
