# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/40_make.ipynb.

# %% auto 0
__all__ = ['make_rings', 'rings', 'make_circles', 'circles', 'make_orbits', 'orbits', 'make_diamonds', 'diamonds', 'jacks']

# %% ../nbs/40_make.ipynb 6
#| export


# %% ../nbs/40_make.ipynb 8
from typing import Tuple

# %% ../nbs/40_make.ipynb 11
#| export

# %% ../nbs/40_make.ipynb 13
try: import numpy as np
except ImportError: ...

try: import pandas as pd
except ImportError: ...

try: import matplotlib.pyplot as plt
except ImportError: ...

try: import seaborn as sns
except ImportError: ...

# %% ../nbs/40_make.ipynb 15
try: import torch
except ImportError: ...

try: import pytorch_lightning as pl
except ImportError: ...

# %% ../nbs/40_make.ipynb 17
from quac import real, intq
from utrc.atyp import XYArray, LabelArray
from utrc.seed import seedall
from utrc.data import catdists

# %% ../nbs/40_make.ipynb 19
from .util import rotate, ntheta, catrad, chord, npxy, dfxy, addz, catx, addx, negcats
from .poly import orbit, circle, subring, diamond

# %% ../nbs/40_make.ipynb 22
def make_rings(
    n: int, p: int = 400, r: float = .8, zscale: float = 0.02, 
    distcats: bool = True, ncats: intq = None, seed: int = 3
) -> pd.DataFrame:
    '''Generates a dataset of rings.'''    
    data, cats = npxy(seed=seed)
    if ncats is None: ncats = n
    
    rlocs = ntheta(ncats)
    r *= (0.5 * chord(rlocs, sx=0.5, sy=0.5))
    
    for i, t in enumerate(rlocs):
        newx = subring(p, r=r, t=t)
        data, cats = addx(i, newx, data, cats, zscale, distcats, ncats, seed)
    return data, cats

def rings(
    n: int = 5, p: int = 400, r: float = .8, zscale: float = 0.02, 
    distcats: bool = True, ncats: intq = None, seed: int = 3,
    label: str = 'label', use_index: bool = True
) -> pd.DataFrame:
    '''Generates a dataset of rings.'''
    x, y = make_rings(n, p, r, zscale, distcats, ncats, seed)
    return dfxy(x, y, label, use_index)

# %% ../nbs/40_make.ipynb 28
def make_circles(
    n: int, p: int = 400, zscale: float = 0.02, 
    distcats: bool = True, ncats: intq = None, seed: int = 3,
) -> pd.DataFrame:
    '''Generates a dataset of rings.'''
    data, cats = npxy(seed=seed)
    if ncats is None: ncats = n
    
    radii = np.linspace(0, 1, n + 1, endpoint=True)[1:]
    for i, r in enumerate(radii):
        newx = circle(p, r)
        data, cats = addx(i, newx, data, cats, zscale, distcats, ncats, seed)
    if distcats: cats = catdists(data, ncats)
    return data, cats

def circles(
    n: int = 5, p: int = 400, zscale: float = 0.02, 
    distcats: bool = True, ncats: intq = None, seed: int = 3,
    label: str = 'label', use_index: bool = True
) -> pd.DataFrame:
    '''Generates a dataset of rings.'''
    x, y = make_circles(n, p, zscale, distcats, ncats, seed)
    return dfxy(x, y, label, use_index)

# %% ../nbs/40_make.ipynb 33
def make_orbits(
    n: int, p: int = 400, w: real = .5, zscale: float = .02, 
    distcats: bool = True, ncats: intq = 5, seed: int = 3,
) -> Tuple[XYArray, LabelArray]:
    '''Generates a dataset of orbits.'''
    data, cats = npxy(seed=seed)
    if ncats is None: ncats = n
    
    for i in range(n):
        newx = orbit(p, w)
        newx = rotate(newx, catrad(i, n))
        data, cats = addx(i, newx, data, cats, zscale, distcats, ncats, seed)
    return data, cats

def orbits(
    n: int = 5, p: int = 400, w: real = 0.2, zscale: float = 0.2, 
    distcats: bool = True, ncats: intq = 5, seed: int = 3,
    label: str = 'label', use_index: bool = True
) -> pd.DataFrame:
    x, y = make_orbits(n, p, w, zscale, distcats, ncats, seed)
    return dfxy(x, y, label, use_index)

# %% ../nbs/40_make.ipynb 38
def make_diamonds(
    n: int, p: int = 400, w: real = .5, h: real = 1, zscale: float = .02,
    distcats: bool = True, ncats: intq = 5, seed: int = 3,
) -> Tuple[XYArray, LabelArray]:    
    data, cats = npxy(seed=seed)
    if ncats is None: ncats = n

    for i in range(n):
        newx = diamond(p, w, h)
        newx = rotate(newx, catrad(i, n))
        data, cats = addx(i, newx, data, cats, zscale, distcats, ncats, seed)
    return data, cats

def diamonds(
    n: int = 5, p: int = 400, w: real = .5, h: real = 1, zscale: float = .02, 
    distcats: bool = True, ncats: intq = 5, seed: int = 3,
    label: str = 'label', use_index: bool = True
) -> pd.DataFrame:    
    x, y = make_diamonds(n, p, w, h, zscale, distcats, ncats, seed)
    return dfxy(x, y, label, use_index)    

# %% ../nbs/40_make.ipynb 43
def jacks(
    n: int = 5, p: int = 400, zscale: float = 0.02, 
    distcats: bool = True, ncats: intq = 5, seed: int = 3,
    label: str = 'label', use_index: bool = True, use_neg: bool = False, 
) -> pd.DataFrame:
    df = orbits(n, p, 0, zscale, distcats, ncats, seed, label, False)
    if use_neg: df = negcats(df, label)
    df.x += np.random.normal(0, zscale, np.array(df.x).shape)
    df.y += np.random.normal(0, zscale, np.array(df.y).shape)
    if use_index: df.set_index(label, inplace=True)
    return df

# %% ../nbs/40_make.ipynb 48
#| export

