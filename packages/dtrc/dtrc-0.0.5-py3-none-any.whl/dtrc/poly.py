# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/20_poly.ipynb.

# %% auto 0
__all__ = ['ellipse', 'orbit', 'circle', 'subring', 'diamond_quadrant', 'diamond']

# %% ../nbs/20_poly.ipynb 6
from itertools import product

# %% ../nbs/20_poly.ipynb 8
#| export


# %% ../nbs/20_poly.ipynb 11
#| export

# %% ../nbs/20_poly.ipynb 13
try: import numpy as np
except ImportError: ...

# %% ../nbs/20_poly.ipynb 15
#| export

# %% ../nbs/20_poly.ipynb 17
from quac import real
from utrc.atyp import XYArray

# %% ../nbs/20_poly.ipynb 19
from .util import rotate, ntheta, rad2pnt

# %% ../nbs/20_poly.ipynb 21
def ellipse(p: int, sx: real = 1, sy: real = 1, ra: real = 0) -> XYArray:
    '''Create an ellipse.'''    
    return rotate(rad2pnt(ntheta(p), sx, sy), ra)

def orbit(p: int, sx: real = 0.2) -> XYArray:
    '''Generates an orbit.'''
    return ellipse(p, sx, 1, 0)

def circle(p: int, r: real = 1) -> XYArray:
    '''Create a circle.'''
    return ellipse(p, r, r, 0)

def subring(p: int, r: real = 1, t: real = 0, sx: real = 0.5, sy: real = 0.5) -> XYArray:
    '''Subring along a circle.'''
    return circle(p, r) - rad2pnt(t, sx, sy)


# %% ../nbs/20_poly.ipynb 23
def diamond_quadrant(p: int, w: real = 1, h: real = 1, top: bool = True, left: bool = True) -> XYArray:
    '''Generates one quadrant of a diamond.'''
    hw, hh = w / 2, h / 2
    match (top, left):
        case (True, True): # top left
            x = np.linspace(-hw, 0, p)
            y = np.linspace( hh, h, p)
        case (True, False): # top right
            x = np.linspace(hw, 0, p)
            y = np.linspace(hh, h, p)
        case (False, True): # bottom left
            x = np.linspace(0, -hw, p)
            y = np.linspace(0,  hh, p)
        case (False, False): # bottom right
            x = np.linspace(0, hw, p)
            y = np.linspace(0, hh, p)
        case _: raise NotImplementedError
    quadrant = np.vstack((x, y)).T
    return quadrant
     
def diamond(p: int, w: real = 1, h: real = 1) -> XYArray:
    '''Generates the four vertices of a diamond.'''
    q = int(np.floor(p / 4))
    combs = product((True, False), (True, False))
    return np.vstack(tuple(diamond_quadrant(q, w, h, t, l) for t, l in combs))

# %% ../nbs/20_poly.ipynb 25
#| export
