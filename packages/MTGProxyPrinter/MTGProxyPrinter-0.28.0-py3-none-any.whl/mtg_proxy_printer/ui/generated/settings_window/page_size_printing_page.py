# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '/tmp/build-via-sdist-0qikssi4/MTGProxyPrinter-0.28.0/mtg_proxy_printer/resources/ui/settings_window/page_size_printing_page.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_PageSizePrintingSettings(object):
    def setupUi(self, PageSizePrintingSettings):
        PageSizePrintingSettings.setObjectName("PageSizePrintingSettings")
        self.verticalLayout = QtWidgets.QVBoxLayout(PageSizePrintingSettings)
        self.verticalLayout.setObjectName("verticalLayout")
        self.pdf_connfiguration_group_box = QtWidgets.QGroupBox(PageSizePrintingSettings)
        self.pdf_connfiguration_group_box.setObjectName("pdf_connfiguration_group_box")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.pdf_connfiguration_group_box)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.pdf_page_count_limit_label = QtWidgets.QLabel(self.pdf_connfiguration_group_box)
        self.pdf_page_count_limit_label.setObjectName("pdf_page_count_limit_label")
        self.gridLayout_5.addWidget(self.pdf_page_count_limit_label, 0, 0, 1, 1)
        self.pdf_page_count_limit = QtWidgets.QSpinBox(self.pdf_connfiguration_group_box)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pdf_page_count_limit.sizePolicy().hasHeightForWidth())
        self.pdf_page_count_limit.setSizePolicy(sizePolicy)
        self.pdf_page_count_limit.setMaximum(2000000000)
        self.pdf_page_count_limit.setObjectName("pdf_page_count_limit")
        self.gridLayout_5.addWidget(self.pdf_page_count_limit, 0, 1, 1, 1)
        self.verticalLayout.addWidget(self.pdf_connfiguration_group_box)
        self.printer_configuration_group_box = QtWidgets.QGroupBox(PageSizePrintingSettings)
        self.printer_configuration_group_box.setObjectName("printer_configuration_group_box")
        self.gridLayout_8 = QtWidgets.QGridLayout(self.printer_configuration_group_box)
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.printer_use_borderless_printing = QtWidgets.QCheckBox(self.printer_configuration_group_box)
        self.printer_use_borderless_printing.setObjectName("printer_use_borderless_printing")
        self.gridLayout_8.addWidget(self.printer_use_borderless_printing, 0, 0, 1, 1)
        self.verticalLayout.addWidget(self.printer_configuration_group_box)
        self.page_configuration_group_box = PageConfigWidget(PageSizePrintingSettings)
        self.page_configuration_group_box.setTitle("")
        self.page_configuration_group_box.setObjectName("page_configuration_group_box")
        self.verticalLayout.addWidget(self.page_configuration_group_box)
        spacerItem = QtWidgets.QSpacerItem(20, 123, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.pdf_page_count_limit_label.setBuddy(self.pdf_page_count_limit)

        self.retranslateUi(PageSizePrintingSettings)
        QtCore.QMetaObject.connectSlotsByName(PageSizePrintingSettings)

    def retranslateUi(self, PageSizePrintingSettings):
        _translate = QtCore.QCoreApplication.translate
        PageSizePrintingSettings.setWindowTitle(_translate("PageSizePrintingSettings", "Form"))
        self.pdf_connfiguration_group_box.setTitle(_translate("PageSizePrintingSettings", "PDF options"))
        self.pdf_page_count_limit_label.setToolTip(_translate("PageSizePrintingSettings", "Automatically split PDF documents, if they get longer than this many pages.\n"
"Set to zero to disable splitting.\n"
"\n"
"\n"
"When printing PDFs using a USB flash drive directly connected to the printer,\n"
"the printer may refuse to print documents exceeding some arbitrary size limit.\n"
"To work around this limitation, you can enable this option,\n"
"and limit the number of pages per PDF. If the document has more pages,\n"
"it will be exported into multiple PDF documents automatically."))
        self.pdf_page_count_limit_label.setText(_translate("PageSizePrintingSettings", "Split PDF documents longer than"))
        self.pdf_page_count_limit.setToolTip(_translate("PageSizePrintingSettings", "Automatically split PDF documents, if they get longer than this many pages.\n"
"Set to zero to disable splitting.\n"
"\n"
"\n"
"When printing PDFs using a USB flash drive directly connected to the printer,\n"
"the printer may refuse to print documents exceeding some arbitrary size limit.\n"
"To work around this limitation, you can enable this option,\n"
"and limit the number of pages per PDF. If the document has more pages,\n"
"it will be exported into multiple PDF documents automatically."))
        self.pdf_page_count_limit.setSuffix(_translate("PageSizePrintingSettings", " pages"))
        self.printer_configuration_group_box.setTitle(_translate("PageSizePrintingSettings", "Printer options"))
        self.printer_use_borderless_printing.setToolTip(_translate("PageSizePrintingSettings", "When enabled, instruct the printer to use borderless mode and let MTGProxyPrinter manage the printing margins.\n"
"Disable this, if your printer keeps scaling print-outs up or down.\n"
"\n"
"When disabled, managing the page margins is delegated to the printer driver,\n"
"which should increase compatibility, at the expense of drawing shorter cut helper lines."))
        self.printer_use_borderless_printing.setText(_translate("PageSizePrintingSettings", "Configure printer for borderless printing"))
from mtg_proxy_printer.ui.page_config_widget import PageConfigWidget
