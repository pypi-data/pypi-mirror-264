[project]

name = "MTGProxyPrinter"
description = "MTGProxyPrinter allows efficient printing of Magic: The Gathering cards for playtesting purposes."
readme = "README.md"
# Incompatible with 3.11.1, because of bug https://github.com/python/cpython/issues/100098,
# causing an instant crash on start. According to the linked issue, a fix will be in 3.11.2
requires-python = ">= 3.8, != 3.11.1, < 4"
authors = [
    {name = "Thomas Hess", email = "thomas.hess@udo.edu"},
]
license = {text = "GNU GPLv3+, see LICENSE.md or https://www.gnu.org/licenses/gpl-3.0.html for details"}
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Environment :: X11 Applications :: Qt",
    "Environment :: Win32 (MS Windows)",
    "Intended Audience :: End Users/Desktop",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Games/Entertainment :: Board Games",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
]
# ijson adds full compatibility with Python 3.11 in version 3.2 (3.1 is really slow on Py3.11).
# Older Python works fine with ijson >= 3.1
dependencies = [
    "platformdirs >= 2.6.0",
    "PyQt5",
    "ijson >= 3.1.0; python_version < '3.11'",
    "ijson >= 3.2.0; python_version >= '3.11'",
    "pint < 0.22; platform_system == 'windows'",  # 0.22 dropped Py 3.8 support, thus Win7 support
    "pint; platform_system != 'windows'",
    "delegateto == 1.5",
    "PyHamcrest >= 1.8.1",
    "truststore; python_version >= '3.10'",
    "certifi; python_version < '3.10'",
]
dynamic = [
    "version",
]

[project.urls]
Homepage = "https://chiselapp.com/user/luziferius/repository/MTGProxyPrinter/index"
"Bug tracker" = "https://chiselapp.com/user/luziferius/repository/MTGProxyPrinter/ticket"
Changelog = "https://chiselapp.com/user/luziferius/repository/MTGProxyPrinter/doc/trunk/doc/changelog.md"

[project.gui-scripts]
mtg-proxy-printer = "mtg_proxy_printer.__main__:main"


[tool.setuptools]
exclude-package-data = {"mtg_proxy_printer" = ["resources*",]}


[tool.setuptools.packages.find]
include = [
   "mtg_proxy_printer*",
]
exclude = [
    "mtg_proxy_printer.resources*",
    "tests*",
]

[tool.setuptools.dynamic]
version = {attr= "mtg_proxy_printer.meta_data.__version__"}



[build-system]
requires = [
    "setuptools >=61",
    "wheel",
    "PyQt5",
    "build",
    "tox >= 3.8",
]
build-backend = "setuptools.build_meta"

[tool.tox]
legacy_tox_ini = """
[tox]
minversion = 3.18

envlist = 
    py3-unit_tests-platformdirs{26,33}-{windows, linux}
    py3-test_create_bundle-{windows, linux}

[testenv]
skip_install = True


platform =
    linux: linux
#    macos: darwin
    windows: win32


allowlist_externals =
    {toxinidir}{/}build{/}bundle_test{/}MTGProxyPrinter
    windows: {toxinidir}{/}scripts{/}clean_windows_build.bat


deps =
    platformdirs >= 2.6.0
    platformdirs26: platformdirs == 2.6
    platformdirs33: platformdirs >= 3.3.0
    build
    PyQt5
    ijson >= 3.1.0; python_version < '3.11'
    ijson >= 3.2.0; python_version >= '3.11'
    pint < 0.22; platform_system == 'windows'
    pint; platform_system != 'windows'
    delegateto == 1.5
    PyHamcrest >= 1.8.1
    truststore; python_version >= '3.10'
    certifi; python_version < '3.10'

build_deps =
    setuptools>=61

test_deps =
    pytest
    pytest-cov
    pytest-timeout
    pytest-qt >= 2.0
    PyHamcrest >= 2.0.0
    {[testenv]build_deps}


[testenv:py3-unit_tests-platformdirs{26,33}-{windows, linux}]

# Let Qt5 render offscreen, so that running tests don’t open windows or try to access the local system’s display
# This also prevents unwanted user interactions with the widgets under test.
# Offscreen rendering causes a segmentation fault on Windows, so simply show the GUI under test on Windows
setenv =
    linux: QT_QPA_PLATFORM = offscreen
    PYTHONDEVMODE = 1

deps =
    {[testenv]deps}
    {[testenv]test_deps}

commands =
    pytest tests

[testenv:py3-platformdirs{26,33}-visible_unit_tests]
# Runs the unit tests with the default Qt platform plugin,
# causing them to visibly spawn GUI windows for tests of view logic.
# Can be used to inspect the actions and GUI states manually.
# Not part of the environment list, so isn’t run automatically.

deps =
    {[testenv]deps}
    {[testenv]test_deps}

commands =
    pytest tests

# Pass DISPLAY, to allow rendering on screen. Also pass all other Qt-related environment variables,
# like QT_SCREEN_SCALE_FACTORS
passenv =
    DISPLAY
    QT_*
    XDG_RUNTIME_DIR
    
setenv = 
   PYTHONDEVMODE = 1


[testenv:py3-test_create_bundle-{windows, linux}]

deps =
    {[testenv]deps}
    cx-Freeze >= 6.11.1
    {[testenv]build_deps}

# Let Qt5 render offscreen, so that running tests don’t open windows or try to access the local system’s display
# This also prevents unwanted user interactions with the widgets under test
setenv =
    linux: QT_QPA_PLATFORM = offscreen
    PYTHONDEVMODE = 1

passenv =
    XDG_RUNTIME_DIR

commands =
    python scripts{/}compile_ui_files.py --full --purge-existing
    python setup_cx_freeze.py build_exe --build-exe build{/}bundle_test
    windows: {toxinidir}{/}scripts{/}clean_windows_build.bat build{/}bundle_test
    {toxinidir}{/}build{/}bundle_test{/}MTGProxyPrinter --test-exit-on-launch
    -python scripts{/}compile_ui_files.py --purge-existing


[testenv:py3-package-{windows,linux}]

deps =
    {[testenv]deps}
    cx-Freeze >= 6.11.1

commands =
    python scripts{/}compile_ui_files.py --full --purge-existing
    python -m build
    python setup_cx_freeze.py build_exe
    windows: {toxinidir}{/}scripts{/}clean_windows_build.bat
    windows: python setup_cx_freeze.py bdist_msi --skip-build
    -python scripts{/}compile_ui_files.py --purge-existing
"""
