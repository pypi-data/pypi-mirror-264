# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _quantlib_risks
else:
    import _quantlib_risks

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quantlib_risks.delete_SwigPyIterator

    def value(self):
        return _quantlib_risks.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _quantlib_risks.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _quantlib_risks.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _quantlib_risks.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _quantlib_risks.SwigPyIterator_equal(self, x)

    def copy(self):
        return _quantlib_risks.SwigPyIterator_copy(self)

    def next(self):
        return _quantlib_risks.SwigPyIterator_next(self)

    def __next__(self):
        return _quantlib_risks.SwigPyIterator___next__(self)

    def previous(self):
        return _quantlib_risks.SwigPyIterator_previous(self)

    def advance(self, n):
        return _quantlib_risks.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _quantlib_risks.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _quantlib_risks.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _quantlib_risks.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _quantlib_risks.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _quantlib_risks.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _quantlib_risks.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _quantlib_risks:
_quantlib_risks.SwigPyIterator_swigregister(SwigPyIterator)
cvar = _quantlib_risks.cvar
__hexversion__ = cvar.__hexversion__
__version__ = cvar.__version__

SHARED_PTR_DISOWN = _quantlib_risks.SHARED_PTR_DISOWN

XAD_ENABLED = _quantlib_risks.XAD_ENABLED

Sunday = _quantlib_risks.Sunday

Monday = _quantlib_risks.Monday

Tuesday = _quantlib_risks.Tuesday

Wednesday = _quantlib_risks.Wednesday

Thursday = _quantlib_risks.Thursday

Friday = _quantlib_risks.Friday

Saturday = _quantlib_risks.Saturday

January = _quantlib_risks.January

February = _quantlib_risks.February

March = _quantlib_risks.March

April = _quantlib_risks.April

May = _quantlib_risks.May

June = _quantlib_risks.June

July = _quantlib_risks.July

August = _quantlib_risks.August

September = _quantlib_risks.September

October = _quantlib_risks.October

November = _quantlib_risks.November

December = _quantlib_risks.December

Days = _quantlib_risks.Days

Weeks = _quantlib_risks.Weeks

Months = _quantlib_risks.Months

Years = _quantlib_risks.Years

Hours = _quantlib_risks.Hours

Minutes = _quantlib_risks.Minutes

Seconds = _quantlib_risks.Seconds

Milliseconds = _quantlib_risks.Milliseconds

Microseconds = _quantlib_risks.Microseconds

NoFrequency = _quantlib_risks.NoFrequency

Once = _quantlib_risks.Once

Annual = _quantlib_risks.Annual

Semiannual = _quantlib_risks.Semiannual

EveryFourthMonth = _quantlib_risks.EveryFourthMonth

Quarterly = _quantlib_risks.Quarterly

Bimonthly = _quantlib_risks.Bimonthly

Monthly = _quantlib_risks.Monthly

EveryFourthWeek = _quantlib_risks.EveryFourthWeek

Biweekly = _quantlib_risks.Biweekly

Weekly = _quantlib_risks.Weekly

Daily = _quantlib_risks.Daily

OtherFrequency = _quantlib_risks.OtherFrequency

class Period(object):
    r"""Proxy of C++ Period class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def length(self):
        r"""length(Period self) -> Integer"""
        return _quantlib_risks.Period_length(self)

    def units(self):
        r"""units(Period self) -> TimeUnit"""
        return _quantlib_risks.Period_units(self)

    def frequency(self):
        r"""frequency(Period self) -> Frequency"""
        return _quantlib_risks.Period_frequency(self)

    def normalized(self):
        r"""normalized(Period self) -> Period"""
        return _quantlib_risks.Period_normalized(self)

    def __init__(self, *args):
        r"""
        __init__(Period self) -> Period
        __init__(Period self, Integer n, TimeUnit units) -> Period
        __init__(Period self, Frequency arg2) -> Period
        __init__(Period self, std::string const & str) -> Period
        """
        _quantlib_risks.Period_swiginit(self, _quantlib_risks.new_Period(*args))

    def __str__(self):
        r"""__str__(Period self) -> std::string"""
        return _quantlib_risks.Period___str__(self)

    def __repr__(self):
        r"""__repr__(Period self) -> std::string"""
        return _quantlib_risks.Period___repr__(self)

    def __neg__(self):
        r"""__neg__(Period self) -> Period"""
        return _quantlib_risks.Period___neg__(self)

    def __add__(self, p):
        r"""__add__(Period self, Period p) -> Period"""
        return _quantlib_risks.Period___add__(self, p)

    def __sub__(self, p):
        r"""__sub__(Period self, Period p) -> Period"""
        return _quantlib_risks.Period___sub__(self, p)

    def __mul__(self, n):
        r"""__mul__(Period self, Integer n) -> Period"""
        return _quantlib_risks.Period___mul__(self, n)

    def __rmul__(self, n):
        r"""__rmul__(Period self, Integer n) -> Period"""
        return _quantlib_risks.Period___rmul__(self, n)

    def __lt__(self, other):
        r"""__lt__(Period self, Period other) -> bool"""
        return _quantlib_risks.Period___lt__(self, other)

    def __gt__(self, other):
        r"""__gt__(Period self, Period other) -> bool"""
        return _quantlib_risks.Period___gt__(self, other)

    def __le__(self, other):
        r"""__le__(Period self, Period other) -> bool"""
        return _quantlib_risks.Period___le__(self, other)

    def __ge__(self, other):
        r"""__ge__(Period self, Period other) -> bool"""
        return _quantlib_risks.Period___ge__(self, other)

    def __eq__(self, other):
        r"""__eq__(Period self, Period other) -> bool"""
        return _quantlib_risks.Period___eq__(self, other)

    def __cmp__(self, other):
        r"""__cmp__(Period self, Period other) -> int"""
        return _quantlib_risks.Period___cmp__(self, other)

    def __hash__(self):
        return hash(str(self.normalized()))

    __swig_destroy__ = _quantlib_risks.delete_Period

# Register Period in _quantlib_risks:
_quantlib_risks.Period_swigregister(Period)
class PeriodVector(object):
    r"""Proxy of C++ std::vector< Period > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(PeriodVector self) -> SwigPyIterator"""
        return _quantlib_risks.PeriodVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(PeriodVector self) -> bool"""
        return _quantlib_risks.PeriodVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(PeriodVector self) -> bool"""
        return _quantlib_risks.PeriodVector___bool__(self)

    def __len__(self):
        r"""__len__(PeriodVector self) -> std::vector< Period >::size_type"""
        return _quantlib_risks.PeriodVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(PeriodVector self, std::vector< Period >::difference_type i, std::vector< Period >::difference_type j) -> PeriodVector"""
        return _quantlib_risks.PeriodVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(PeriodVector self, std::vector< Period >::difference_type i, std::vector< Period >::difference_type j)
        __setslice__(PeriodVector self, std::vector< Period >::difference_type i, std::vector< Period >::difference_type j, PeriodVector v)
        """
        return _quantlib_risks.PeriodVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(PeriodVector self, std::vector< Period >::difference_type i, std::vector< Period >::difference_type j)"""
        return _quantlib_risks.PeriodVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(PeriodVector self, std::vector< Period >::difference_type i)
        __delitem__(PeriodVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.PeriodVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(PeriodVector self, SWIGPY_SLICEOBJECT * slice) -> PeriodVector
        __getitem__(PeriodVector self, std::vector< Period >::difference_type i) -> Period
        """
        return _quantlib_risks.PeriodVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(PeriodVector self, SWIGPY_SLICEOBJECT * slice, PeriodVector v)
        __setitem__(PeriodVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(PeriodVector self, std::vector< Period >::difference_type i, Period x)
        """
        return _quantlib_risks.PeriodVector___setitem__(self, *args)

    def pop(self):
        r"""pop(PeriodVector self) -> Period"""
        return _quantlib_risks.PeriodVector_pop(self)

    def append(self, x):
        r"""append(PeriodVector self, Period x)"""
        return _quantlib_risks.PeriodVector_append(self, x)

    def empty(self):
        r"""empty(PeriodVector self) -> bool"""
        return _quantlib_risks.PeriodVector_empty(self)

    def size(self):
        r"""size(PeriodVector self) -> std::vector< Period >::size_type"""
        return _quantlib_risks.PeriodVector_size(self)

    def swap(self, v):
        r"""swap(PeriodVector self, PeriodVector v)"""
        return _quantlib_risks.PeriodVector_swap(self, v)

    def begin(self):
        r"""begin(PeriodVector self) -> std::vector< Period >::iterator"""
        return _quantlib_risks.PeriodVector_begin(self)

    def end(self):
        r"""end(PeriodVector self) -> std::vector< Period >::iterator"""
        return _quantlib_risks.PeriodVector_end(self)

    def rbegin(self):
        r"""rbegin(PeriodVector self) -> std::vector< Period >::reverse_iterator"""
        return _quantlib_risks.PeriodVector_rbegin(self)

    def rend(self):
        r"""rend(PeriodVector self) -> std::vector< Period >::reverse_iterator"""
        return _quantlib_risks.PeriodVector_rend(self)

    def clear(self):
        r"""clear(PeriodVector self)"""
        return _quantlib_risks.PeriodVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(PeriodVector self) -> std::vector< Period >::allocator_type"""
        return _quantlib_risks.PeriodVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(PeriodVector self)"""
        return _quantlib_risks.PeriodVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(PeriodVector self, std::vector< Period >::iterator pos) -> std::vector< Period >::iterator
        erase(PeriodVector self, std::vector< Period >::iterator first, std::vector< Period >::iterator last) -> std::vector< Period >::iterator
        """
        return _quantlib_risks.PeriodVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(PeriodVector self) -> PeriodVector
        __init__(PeriodVector self, PeriodVector other) -> PeriodVector
        __init__(PeriodVector self, std::vector< Period >::size_type size) -> PeriodVector
        __init__(PeriodVector self, std::vector< Period >::size_type size, Period value) -> PeriodVector
        """
        _quantlib_risks.PeriodVector_swiginit(self, _quantlib_risks.new_PeriodVector(*args))

    def push_back(self, x):
        r"""push_back(PeriodVector self, Period x)"""
        return _quantlib_risks.PeriodVector_push_back(self, x)

    def front(self):
        r"""front(PeriodVector self) -> Period"""
        return _quantlib_risks.PeriodVector_front(self)

    def back(self):
        r"""back(PeriodVector self) -> Period"""
        return _quantlib_risks.PeriodVector_back(self)

    def assign(self, n, x):
        r"""assign(PeriodVector self, std::vector< Period >::size_type n, Period x)"""
        return _quantlib_risks.PeriodVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(PeriodVector self, std::vector< Period >::size_type new_size)
        resize(PeriodVector self, std::vector< Period >::size_type new_size, Period x)
        """
        return _quantlib_risks.PeriodVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(PeriodVector self, std::vector< Period >::iterator pos, Period x) -> std::vector< Period >::iterator
        insert(PeriodVector self, std::vector< Period >::iterator pos, std::vector< Period >::size_type n, Period x)
        """
        return _quantlib_risks.PeriodVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(PeriodVector self, std::vector< Period >::size_type n)"""
        return _quantlib_risks.PeriodVector_reserve(self, n)

    def capacity(self):
        r"""capacity(PeriodVector self) -> std::vector< Period >::size_type"""
        return _quantlib_risks.PeriodVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_PeriodVector

# Register PeriodVector in _quantlib_risks:
_quantlib_risks.PeriodVector_swigregister(PeriodVector)

import datetime as _datetime

class Date(object):
    r"""Proxy of C++ Date class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def weekday(self):
        r"""weekday(Date self) -> Weekday"""
        return _quantlib_risks.Date_weekday(self)

    def dayOfMonth(self):
        r"""dayOfMonth(Date self) -> Day"""
        return _quantlib_risks.Date_dayOfMonth(self)

    def dayOfYear(self):
        r"""dayOfYear(Date self) -> Day"""
        return _quantlib_risks.Date_dayOfYear(self)

    def month(self):
        r"""month(Date self) -> Month"""
        return _quantlib_risks.Date_month(self)

    def year(self):
        r"""year(Date self) -> Year"""
        return _quantlib_risks.Date_year(self)

    def hours(self):
        r"""hours(Date self) -> Hour"""
        return _quantlib_risks.Date_hours(self)

    def minutes(self):
        r"""minutes(Date self) -> Minute"""
        return _quantlib_risks.Date_minutes(self)

    def seconds(self):
        r"""seconds(Date self) -> Second"""
        return _quantlib_risks.Date_seconds(self)

    def milliseconds(self):
        r"""milliseconds(Date self) -> Millisecond"""
        return _quantlib_risks.Date_milliseconds(self)

    def microseconds(self):
        r"""microseconds(Date self) -> Microsecond"""
        return _quantlib_risks.Date_microseconds(self)

    def fractionOfDay(self):
        r"""fractionOfDay(Date self) -> Time"""
        return _quantlib_risks.Date_fractionOfDay(self)

    def fractionOfSecond(self):
        r"""fractionOfSecond(Date self) -> Time"""
        return _quantlib_risks.Date_fractionOfSecond(self)

    def serialNumber(self):
        r"""serialNumber(Date self) -> BigInteger"""
        return _quantlib_risks.Date_serialNumber(self)

    @staticmethod
    def isLeap(y):
        r"""isLeap(Year y) -> bool"""
        return _quantlib_risks.Date_isLeap(y)

    @staticmethod
    def minDate():
        r"""minDate() -> Date"""
        return _quantlib_risks.Date_minDate()

    @staticmethod
    def maxDate():
        r"""maxDate() -> Date"""
        return _quantlib_risks.Date_maxDate()

    @staticmethod
    def todaysDate():
        r"""todaysDate() -> Date"""
        return _quantlib_risks.Date_todaysDate()

    @staticmethod
    def localDateTime():
        r"""localDateTime() -> Date"""
        return _quantlib_risks.Date_localDateTime()

    @staticmethod
    def universalDateTime():
        r"""universalDateTime() -> Date"""
        return _quantlib_risks.Date_universalDateTime()

    @staticmethod
    def endOfMonth(arg1):
        r"""endOfMonth(Date arg1) -> Date"""
        return _quantlib_risks.Date_endOfMonth(arg1)

    @staticmethod
    def isEndOfMonth(arg1):
        r"""isEndOfMonth(Date arg1) -> bool"""
        return _quantlib_risks.Date_isEndOfMonth(arg1)

    @staticmethod
    def nextWeekday(arg1, arg2):
        r"""nextWeekday(Date arg1, Weekday arg2) -> Date"""
        return _quantlib_risks.Date_nextWeekday(arg1, arg2)

    @staticmethod
    def nthWeekday(n, arg2, m, y):
        r"""nthWeekday(Size n, Weekday arg2, Month m, Year y) -> Date"""
        return _quantlib_risks.Date_nthWeekday(n, arg2, m, y)

    def __add__(self, *args):
        r"""
        __add__(Date self, BigInteger days) -> Date
        __add__(Date self, Period arg2) -> Date
        """
        return _quantlib_risks.Date___add__(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Date self) -> Date
        __init__(Date self, Day d, Month m, Year y) -> Date
        __init__(Date self, Day d, Month m, Year y, Hour hours, Minute minutes, Second seconds, Millisecond millisec=0, Microsecond microsec=0) -> Date
        __init__(Date self, BigInteger serialNumber) -> Date
        __init__(Date self, std::string const & str, std::string fmt) -> Date
        """
        _quantlib_risks.Date_swiginit(self, _quantlib_risks.new_Date(*args))

    def weekdayNumber(self):
        r"""weekdayNumber(Date self) -> Integer"""
        return _quantlib_risks.Date_weekdayNumber(self)

    def __str__(self):
        r"""__str__(Date self) -> std::string"""
        return _quantlib_risks.Date___str__(self)

    def __repr__(self):
        r"""__repr__(Date self) -> std::string"""
        return _quantlib_risks.Date___repr__(self)

    def ISO(self):
        r"""ISO(Date self) -> std::string"""
        return _quantlib_risks.Date_ISO(self)

    def __sub__(self, *args):
        r"""
        __sub__(Date self, BigInteger days) -> Date
        __sub__(Date self, Period arg2) -> Date
        __sub__(Date self, Date other) -> BigInteger
        """
        return _quantlib_risks.Date___sub__(self, *args)

    def __eq__(self, other):
        r"""__eq__(Date self, Date other) -> bool"""
        return _quantlib_risks.Date___eq__(self, other)

    def __cmp__(self, other):
        r"""__cmp__(Date self, Date other) -> int"""
        return _quantlib_risks.Date___cmp__(self, other)

    def __nonzero__(self):
        r"""__nonzero__(Date self) -> bool"""
        return _quantlib_risks.Date___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Date self) -> bool"""
        return _quantlib_risks.Date___bool__(self)

    def __hash__(self):
        r"""__hash__(Date self) -> int"""
        return _quantlib_risks.Date___hash__(self)

    def __lt__(self, other):
        r"""__lt__(Date self, Date other) -> bool"""
        return _quantlib_risks.Date___lt__(self, other)

    def __gt__(self, other):
        r"""__gt__(Date self, Date other) -> bool"""
        return _quantlib_risks.Date___gt__(self, other)

    def __le__(self, other):
        r"""__le__(Date self, Date other) -> bool"""
        return _quantlib_risks.Date___le__(self, other)

    def __ge__(self, other):
        r"""__ge__(Date self, Date other) -> bool"""
        return _quantlib_risks.Date___ge__(self, other)

    def __ne__(self, other):
        r"""__ne__(Date self, Date other) -> bool"""
        return _quantlib_risks.Date___ne__(self, other)

    def to_date(self):
        return _datetime.date(self.year(), self.month(), self.dayOfMonth())

    @staticmethod
    def from_date(date):
        return Date(date.day, date.month, date.year)

    __swig_destroy__ = _quantlib_risks.delete_Date

# Register Date in _quantlib_risks:
_quantlib_risks.Date_swigregister(Date)
class DateParser(object):
    r"""Proxy of C++ DateParser class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def parseFormatted(str, fmt):
        r"""parseFormatted(std::string const & str, std::string const & fmt) -> Date"""
        return _quantlib_risks.DateParser_parseFormatted(str, fmt)

    @staticmethod
    def parseISO(str):
        r"""parseISO(std::string const & str) -> Date"""
        return _quantlib_risks.DateParser_parseISO(str)

    @staticmethod
    def parse(str, fmt):
        r"""parse(std::string const & str, std::string fmt) -> Date"""
        return _quantlib_risks.DateParser_parse(str, fmt)

    def __init__(self):
        r"""__init__(DateParser self) -> DateParser"""
        _quantlib_risks.DateParser_swiginit(self, _quantlib_risks.new_DateParser())
    __swig_destroy__ = _quantlib_risks.delete_DateParser

# Register DateParser in _quantlib_risks:
_quantlib_risks.DateParser_swigregister(DateParser)
class PeriodParser(object):
    r"""Proxy of C++ PeriodParser class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def parse(str):
        r"""parse(std::string const & str) -> Period"""
        return _quantlib_risks.PeriodParser_parse(str)

    def __init__(self):
        r"""__init__(PeriodParser self) -> PeriodParser"""
        _quantlib_risks.PeriodParser_swiginit(self, _quantlib_risks.new_PeriodParser())
    __swig_destroy__ = _quantlib_risks.delete_PeriodParser

# Register PeriodParser in _quantlib_risks:
_quantlib_risks.PeriodParser_swigregister(PeriodParser)

Date._old___add__ = Date.__add__
Date._old___sub__ = Date.__sub__
def Date_new___add__(self,x):
    if type(x) is tuple and len(x) == 2:
        return self._old___add__(Period(x[0],x[1]))
    else:
        return self._old___add__(x)
def Date_new___sub__(self,x):
    if type(x) is tuple and len(x) == 2:
        return self._old___sub__(Period(x[0],x[1]))
    else:
        return self._old___sub__(x)
Date.__add__ = Date_new___add__
Date.__sub__ = Date_new___sub__

class DateVector(object):
    r"""Proxy of C++ std::vector< Date > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DateVector self) -> SwigPyIterator"""
        return _quantlib_risks.DateVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DateVector self) -> bool"""
        return _quantlib_risks.DateVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DateVector self) -> bool"""
        return _quantlib_risks.DateVector___bool__(self)

    def __len__(self):
        r"""__len__(DateVector self) -> std::vector< Date >::size_type"""
        return _quantlib_risks.DateVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(DateVector self, std::vector< Date >::difference_type i, std::vector< Date >::difference_type j) -> DateVector"""
        return _quantlib_risks.DateVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DateVector self, std::vector< Date >::difference_type i, std::vector< Date >::difference_type j)
        __setslice__(DateVector self, std::vector< Date >::difference_type i, std::vector< Date >::difference_type j, DateVector v)
        """
        return _quantlib_risks.DateVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(DateVector self, std::vector< Date >::difference_type i, std::vector< Date >::difference_type j)"""
        return _quantlib_risks.DateVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DateVector self, std::vector< Date >::difference_type i)
        __delitem__(DateVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.DateVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DateVector self, SWIGPY_SLICEOBJECT * slice) -> DateVector
        __getitem__(DateVector self, std::vector< Date >::difference_type i) -> Date
        """
        return _quantlib_risks.DateVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DateVector self, SWIGPY_SLICEOBJECT * slice, DateVector v)
        __setitem__(DateVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(DateVector self, std::vector< Date >::difference_type i, Date x)
        """
        return _quantlib_risks.DateVector___setitem__(self, *args)

    def pop(self):
        r"""pop(DateVector self) -> Date"""
        return _quantlib_risks.DateVector_pop(self)

    def append(self, x):
        r"""append(DateVector self, Date x)"""
        return _quantlib_risks.DateVector_append(self, x)

    def empty(self):
        r"""empty(DateVector self) -> bool"""
        return _quantlib_risks.DateVector_empty(self)

    def size(self):
        r"""size(DateVector self) -> std::vector< Date >::size_type"""
        return _quantlib_risks.DateVector_size(self)

    def swap(self, v):
        r"""swap(DateVector self, DateVector v)"""
        return _quantlib_risks.DateVector_swap(self, v)

    def begin(self):
        r"""begin(DateVector self) -> std::vector< Date >::iterator"""
        return _quantlib_risks.DateVector_begin(self)

    def end(self):
        r"""end(DateVector self) -> std::vector< Date >::iterator"""
        return _quantlib_risks.DateVector_end(self)

    def rbegin(self):
        r"""rbegin(DateVector self) -> std::vector< Date >::reverse_iterator"""
        return _quantlib_risks.DateVector_rbegin(self)

    def rend(self):
        r"""rend(DateVector self) -> std::vector< Date >::reverse_iterator"""
        return _quantlib_risks.DateVector_rend(self)

    def clear(self):
        r"""clear(DateVector self)"""
        return _quantlib_risks.DateVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DateVector self) -> std::vector< Date >::allocator_type"""
        return _quantlib_risks.DateVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DateVector self)"""
        return _quantlib_risks.DateVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DateVector self, std::vector< Date >::iterator pos) -> std::vector< Date >::iterator
        erase(DateVector self, std::vector< Date >::iterator first, std::vector< Date >::iterator last) -> std::vector< Date >::iterator
        """
        return _quantlib_risks.DateVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DateVector self) -> DateVector
        __init__(DateVector self, DateVector other) -> DateVector
        __init__(DateVector self, std::vector< Date >::size_type size) -> DateVector
        __init__(DateVector self, std::vector< Date >::size_type size, Date value) -> DateVector
        """
        _quantlib_risks.DateVector_swiginit(self, _quantlib_risks.new_DateVector(*args))

    def push_back(self, x):
        r"""push_back(DateVector self, Date x)"""
        return _quantlib_risks.DateVector_push_back(self, x)

    def front(self):
        r"""front(DateVector self) -> Date"""
        return _quantlib_risks.DateVector_front(self)

    def back(self):
        r"""back(DateVector self) -> Date"""
        return _quantlib_risks.DateVector_back(self)

    def assign(self, n, x):
        r"""assign(DateVector self, std::vector< Date >::size_type n, Date x)"""
        return _quantlib_risks.DateVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DateVector self, std::vector< Date >::size_type new_size)
        resize(DateVector self, std::vector< Date >::size_type new_size, Date x)
        """
        return _quantlib_risks.DateVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DateVector self, std::vector< Date >::iterator pos, Date x) -> std::vector< Date >::iterator
        insert(DateVector self, std::vector< Date >::iterator pos, std::vector< Date >::size_type n, Date x)
        """
        return _quantlib_risks.DateVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(DateVector self, std::vector< Date >::size_type n)"""
        return _quantlib_risks.DateVector_reserve(self, n)

    def capacity(self):
        r"""capacity(DateVector self) -> std::vector< Date >::size_type"""
        return _quantlib_risks.DateVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_DateVector

# Register DateVector in _quantlib_risks:
_quantlib_risks.DateVector_swigregister(DateVector)

def daysBetween(arg1, arg2):
    r"""daysBetween(Date arg1, Date arg2) -> Time"""
    return _quantlib_risks.daysBetween(arg1, arg2)
class IMM(object):
    r"""Proxy of C++ IMM class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    F = _quantlib_risks.IMM_F
    
    G = _quantlib_risks.IMM_G
    
    H = _quantlib_risks.IMM_H
    
    J = _quantlib_risks.IMM_J
    
    K = _quantlib_risks.IMM_K
    
    M = _quantlib_risks.IMM_M
    
    N = _quantlib_risks.IMM_N
    
    Q = _quantlib_risks.IMM_Q
    
    U = _quantlib_risks.IMM_U
    
    V = _quantlib_risks.IMM_V
    
    X = _quantlib_risks.IMM_X
    
    Z = _quantlib_risks.IMM_Z
    

    @staticmethod
    def isIMMdate(d, mainCycle=True):
        r"""isIMMdate(Date d, bool mainCycle=True) -> bool"""
        return _quantlib_risks.IMM_isIMMdate(d, mainCycle)

    @staticmethod
    def isIMMcode(code, mainCycle=True):
        r"""isIMMcode(std::string const & code, bool mainCycle=True) -> bool"""
        return _quantlib_risks.IMM_isIMMcode(code, mainCycle)

    @staticmethod
    def code(immDate):
        r"""code(Date immDate) -> std::string"""
        return _quantlib_risks.IMM_code(immDate)

    @staticmethod
    def date(*args):
        r"""date(std::string const & immCode, Date referenceDate=Date()) -> Date"""
        return _quantlib_risks.IMM_date(*args)

    @staticmethod
    def nextDate(*args):
        r"""
        nextDate(Date d=Date(), bool mainCycle=True) -> Date
        nextDate(std::string const & immCode, bool mainCycle=True, Date referenceDate=Date()) -> Date
        """
        return _quantlib_risks.IMM_nextDate(*args)

    @staticmethod
    def nextCode(*args):
        r"""
        nextCode(Date d=Date(), bool mainCycle=True) -> std::string
        nextCode(std::string const & immCode, bool mainCycle=True, Date referenceDate=Date()) -> std::string
        """
        return _quantlib_risks.IMM_nextCode(*args)

    def __init__(self):
        r"""__init__(IMM self) -> IMM"""
        _quantlib_risks.IMM_swiginit(self, _quantlib_risks.new_IMM())
    __swig_destroy__ = _quantlib_risks.delete_IMM

# Register IMM in _quantlib_risks:
_quantlib_risks.IMM_swigregister(IMM)
class ASX(object):
    r"""Proxy of C++ ASX class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    F = _quantlib_risks.ASX_F
    
    G = _quantlib_risks.ASX_G
    
    H = _quantlib_risks.ASX_H
    
    J = _quantlib_risks.ASX_J
    
    K = _quantlib_risks.ASX_K
    
    M = _quantlib_risks.ASX_M
    
    N = _quantlib_risks.ASX_N
    
    Q = _quantlib_risks.ASX_Q
    
    U = _quantlib_risks.ASX_U
    
    V = _quantlib_risks.ASX_V
    
    X = _quantlib_risks.ASX_X
    
    Z = _quantlib_risks.ASX_Z
    

    @staticmethod
    def isASXdate(d, mainCycle=True):
        r"""isASXdate(Date d, bool mainCycle=True) -> bool"""
        return _quantlib_risks.ASX_isASXdate(d, mainCycle)

    @staticmethod
    def isASXcode(code, mainCycle=True):
        r"""isASXcode(std::string const & code, bool mainCycle=True) -> bool"""
        return _quantlib_risks.ASX_isASXcode(code, mainCycle)

    @staticmethod
    def code(asxDate):
        r"""code(Date asxDate) -> std::string"""
        return _quantlib_risks.ASX_code(asxDate)

    @staticmethod
    def date(*args):
        r"""date(std::string const & asxCode, Date referenceDate=Date()) -> Date"""
        return _quantlib_risks.ASX_date(*args)

    @staticmethod
    def nextDate(*args):
        r"""
        nextDate(Date d=Date(), bool mainCycle=True) -> Date
        nextDate(std::string const & asxCode, bool mainCycle=True, Date referenceDate=Date()) -> Date
        """
        return _quantlib_risks.ASX_nextDate(*args)

    @staticmethod
    def nextCode(*args):
        r"""
        nextCode(Date d=Date(), bool mainCycle=True) -> std::string
        nextCode(std::string const & asxCode, bool mainCycle=True, Date referenceDate=Date()) -> std::string
        """
        return _quantlib_risks.ASX_nextCode(*args)

    def __init__(self):
        r"""__init__(ASX self) -> ASX"""
        _quantlib_risks.ASX_swiginit(self, _quantlib_risks.new_ASX())
    __swig_destroy__ = _quantlib_risks.delete_ASX

# Register ASX in _quantlib_risks:
_quantlib_risks.ASX_swigregister(ASX)
class IntVector(object):
    r"""Proxy of C++ std::vector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(IntVector self) -> SwigPyIterator"""
        return _quantlib_risks.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(IntVector self) -> bool"""
        return _quantlib_risks.IntVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(IntVector self) -> bool"""
        return _quantlib_risks.IntVector___bool__(self)

    def __len__(self):
        r"""__len__(IntVector self) -> std::vector< int >::size_type"""
        return _quantlib_risks.IntVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> IntVector"""
        return _quantlib_risks.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, IntVector v)
        """
        return _quantlib_risks.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _quantlib_risks.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(IntVector self, std::vector< int >::difference_type i)
        __delitem__(IntVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(IntVector self, SWIGPY_SLICEOBJECT * slice) -> IntVector
        __getitem__(IntVector self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _quantlib_risks.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(IntVector self, SWIGPY_SLICEOBJECT * slice, IntVector v)
        __setitem__(IntVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _quantlib_risks.IntVector___setitem__(self, *args)

    def pop(self):
        r"""pop(IntVector self) -> std::vector< int >::value_type"""
        return _quantlib_risks.IntVector_pop(self)

    def append(self, x):
        r"""append(IntVector self, std::vector< int >::value_type const & x)"""
        return _quantlib_risks.IntVector_append(self, x)

    def empty(self):
        r"""empty(IntVector self) -> bool"""
        return _quantlib_risks.IntVector_empty(self)

    def size(self):
        r"""size(IntVector self) -> std::vector< int >::size_type"""
        return _quantlib_risks.IntVector_size(self)

    def swap(self, v):
        r"""swap(IntVector self, IntVector v)"""
        return _quantlib_risks.IntVector_swap(self, v)

    def begin(self):
        r"""begin(IntVector self) -> std::vector< int >::iterator"""
        return _quantlib_risks.IntVector_begin(self)

    def end(self):
        r"""end(IntVector self) -> std::vector< int >::iterator"""
        return _quantlib_risks.IntVector_end(self)

    def rbegin(self):
        r"""rbegin(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _quantlib_risks.IntVector_rbegin(self)

    def rend(self):
        r"""rend(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _quantlib_risks.IntVector_rend(self)

    def clear(self):
        r"""clear(IntVector self)"""
        return _quantlib_risks.IntVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(IntVector self) -> std::vector< int >::allocator_type"""
        return _quantlib_risks.IntVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(IntVector self)"""
        return _quantlib_risks.IntVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(IntVector self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(IntVector self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _quantlib_risks.IntVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(IntVector self) -> IntVector
        __init__(IntVector self, IntVector other) -> IntVector
        __init__(IntVector self, std::vector< int >::size_type size) -> IntVector
        __init__(IntVector self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> IntVector
        """
        _quantlib_risks.IntVector_swiginit(self, _quantlib_risks.new_IntVector(*args))

    def push_back(self, x):
        r"""push_back(IntVector self, std::vector< int >::value_type const & x)"""
        return _quantlib_risks.IntVector_push_back(self, x)

    def front(self):
        r"""front(IntVector self) -> std::vector< int >::value_type const &"""
        return _quantlib_risks.IntVector_front(self)

    def back(self):
        r"""back(IntVector self) -> std::vector< int >::value_type const &"""
        return _quantlib_risks.IntVector_back(self)

    def assign(self, n, x):
        r"""assign(IntVector self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _quantlib_risks.IntVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(IntVector self, std::vector< int >::size_type new_size)
        resize(IntVector self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _quantlib_risks.IntVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _quantlib_risks.IntVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(IntVector self, std::vector< int >::size_type n)"""
        return _quantlib_risks.IntVector_reserve(self, n)

    def capacity(self):
        r"""capacity(IntVector self) -> std::vector< int >::size_type"""
        return _quantlib_risks.IntVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_IntVector

# Register IntVector in _quantlib_risks:
_quantlib_risks.IntVector_swigregister(IntVector)
class UnsignedIntVector(object):
    r"""Proxy of C++ std::vector< unsigned int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(UnsignedIntVector self) -> SwigPyIterator"""
        return _quantlib_risks.UnsignedIntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(UnsignedIntVector self) -> bool"""
        return _quantlib_risks.UnsignedIntVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(UnsignedIntVector self) -> bool"""
        return _quantlib_risks.UnsignedIntVector___bool__(self)

    def __len__(self):
        r"""__len__(UnsignedIntVector self) -> std::vector< unsigned int >::size_type"""
        return _quantlib_risks.UnsignedIntVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(UnsignedIntVector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j) -> UnsignedIntVector"""
        return _quantlib_risks.UnsignedIntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(UnsignedIntVector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)
        __setslice__(UnsignedIntVector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j, UnsignedIntVector v)
        """
        return _quantlib_risks.UnsignedIntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(UnsignedIntVector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)"""
        return _quantlib_risks.UnsignedIntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(UnsignedIntVector self, std::vector< unsigned int >::difference_type i)
        __delitem__(UnsignedIntVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.UnsignedIntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(UnsignedIntVector self, SWIGPY_SLICEOBJECT * slice) -> UnsignedIntVector
        __getitem__(UnsignedIntVector self, std::vector< unsigned int >::difference_type i) -> std::vector< unsigned int >::value_type const &
        """
        return _quantlib_risks.UnsignedIntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(UnsignedIntVector self, SWIGPY_SLICEOBJECT * slice, UnsignedIntVector v)
        __setitem__(UnsignedIntVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(UnsignedIntVector self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::value_type const & x)
        """
        return _quantlib_risks.UnsignedIntVector___setitem__(self, *args)

    def pop(self):
        r"""pop(UnsignedIntVector self) -> std::vector< unsigned int >::value_type"""
        return _quantlib_risks.UnsignedIntVector_pop(self)

    def append(self, x):
        r"""append(UnsignedIntVector self, std::vector< unsigned int >::value_type const & x)"""
        return _quantlib_risks.UnsignedIntVector_append(self, x)

    def empty(self):
        r"""empty(UnsignedIntVector self) -> bool"""
        return _quantlib_risks.UnsignedIntVector_empty(self)

    def size(self):
        r"""size(UnsignedIntVector self) -> std::vector< unsigned int >::size_type"""
        return _quantlib_risks.UnsignedIntVector_size(self)

    def swap(self, v):
        r"""swap(UnsignedIntVector self, UnsignedIntVector v)"""
        return _quantlib_risks.UnsignedIntVector_swap(self, v)

    def begin(self):
        r"""begin(UnsignedIntVector self) -> std::vector< unsigned int >::iterator"""
        return _quantlib_risks.UnsignedIntVector_begin(self)

    def end(self):
        r"""end(UnsignedIntVector self) -> std::vector< unsigned int >::iterator"""
        return _quantlib_risks.UnsignedIntVector_end(self)

    def rbegin(self):
        r"""rbegin(UnsignedIntVector self) -> std::vector< unsigned int >::reverse_iterator"""
        return _quantlib_risks.UnsignedIntVector_rbegin(self)

    def rend(self):
        r"""rend(UnsignedIntVector self) -> std::vector< unsigned int >::reverse_iterator"""
        return _quantlib_risks.UnsignedIntVector_rend(self)

    def clear(self):
        r"""clear(UnsignedIntVector self)"""
        return _quantlib_risks.UnsignedIntVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(UnsignedIntVector self) -> std::vector< unsigned int >::allocator_type"""
        return _quantlib_risks.UnsignedIntVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(UnsignedIntVector self)"""
        return _quantlib_risks.UnsignedIntVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(UnsignedIntVector self, std::vector< unsigned int >::iterator pos) -> std::vector< unsigned int >::iterator
        erase(UnsignedIntVector self, std::vector< unsigned int >::iterator first, std::vector< unsigned int >::iterator last) -> std::vector< unsigned int >::iterator
        """
        return _quantlib_risks.UnsignedIntVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(UnsignedIntVector self) -> UnsignedIntVector
        __init__(UnsignedIntVector self, UnsignedIntVector other) -> UnsignedIntVector
        __init__(UnsignedIntVector self, std::vector< unsigned int >::size_type size) -> UnsignedIntVector
        __init__(UnsignedIntVector self, std::vector< unsigned int >::size_type size, std::vector< unsigned int >::value_type const & value) -> UnsignedIntVector
        """
        _quantlib_risks.UnsignedIntVector_swiginit(self, _quantlib_risks.new_UnsignedIntVector(*args))

    def push_back(self, x):
        r"""push_back(UnsignedIntVector self, std::vector< unsigned int >::value_type const & x)"""
        return _quantlib_risks.UnsignedIntVector_push_back(self, x)

    def front(self):
        r"""front(UnsignedIntVector self) -> std::vector< unsigned int >::value_type const &"""
        return _quantlib_risks.UnsignedIntVector_front(self)

    def back(self):
        r"""back(UnsignedIntVector self) -> std::vector< unsigned int >::value_type const &"""
        return _quantlib_risks.UnsignedIntVector_back(self)

    def assign(self, n, x):
        r"""assign(UnsignedIntVector self, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)"""
        return _quantlib_risks.UnsignedIntVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(UnsignedIntVector self, std::vector< unsigned int >::size_type new_size)
        resize(UnsignedIntVector self, std::vector< unsigned int >::size_type new_size, std::vector< unsigned int >::value_type const & x)
        """
        return _quantlib_risks.UnsignedIntVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(UnsignedIntVector self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::value_type const & x) -> std::vector< unsigned int >::iterator
        insert(UnsignedIntVector self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)
        """
        return _quantlib_risks.UnsignedIntVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(UnsignedIntVector self, std::vector< unsigned int >::size_type n)"""
        return _quantlib_risks.UnsignedIntVector_reserve(self, n)

    def capacity(self):
        r"""capacity(UnsignedIntVector self) -> std::vector< unsigned int >::size_type"""
        return _quantlib_risks.UnsignedIntVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_UnsignedIntVector

# Register UnsignedIntVector in _quantlib_risks:
_quantlib_risks.UnsignedIntVector_swigregister(UnsignedIntVector)
class StrVector(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(StrVector self) -> SwigPyIterator"""
        return _quantlib_risks.StrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(StrVector self) -> bool"""
        return _quantlib_risks.StrVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(StrVector self) -> bool"""
        return _quantlib_risks.StrVector___bool__(self)

    def __len__(self):
        r"""__len__(StrVector self) -> std::vector< std::string >::size_type"""
        return _quantlib_risks.StrVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(StrVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> StrVector"""
        return _quantlib_risks.StrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(StrVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        __setslice__(StrVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, StrVector v)
        """
        return _quantlib_risks.StrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(StrVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _quantlib_risks.StrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(StrVector self, std::vector< std::string >::difference_type i)
        __delitem__(StrVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.StrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(StrVector self, SWIGPY_SLICEOBJECT * slice) -> StrVector
        __getitem__(StrVector self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _quantlib_risks.StrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(StrVector self, SWIGPY_SLICEOBJECT * slice, StrVector v)
        __setitem__(StrVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(StrVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _quantlib_risks.StrVector___setitem__(self, *args)

    def pop(self):
        r"""pop(StrVector self) -> std::vector< std::string >::value_type"""
        return _quantlib_risks.StrVector_pop(self)

    def append(self, x):
        r"""append(StrVector self, std::vector< std::string >::value_type const & x)"""
        return _quantlib_risks.StrVector_append(self, x)

    def empty(self):
        r"""empty(StrVector self) -> bool"""
        return _quantlib_risks.StrVector_empty(self)

    def size(self):
        r"""size(StrVector self) -> std::vector< std::string >::size_type"""
        return _quantlib_risks.StrVector_size(self)

    def swap(self, v):
        r"""swap(StrVector self, StrVector v)"""
        return _quantlib_risks.StrVector_swap(self, v)

    def begin(self):
        r"""begin(StrVector self) -> std::vector< std::string >::iterator"""
        return _quantlib_risks.StrVector_begin(self)

    def end(self):
        r"""end(StrVector self) -> std::vector< std::string >::iterator"""
        return _quantlib_risks.StrVector_end(self)

    def rbegin(self):
        r"""rbegin(StrVector self) -> std::vector< std::string >::reverse_iterator"""
        return _quantlib_risks.StrVector_rbegin(self)

    def rend(self):
        r"""rend(StrVector self) -> std::vector< std::string >::reverse_iterator"""
        return _quantlib_risks.StrVector_rend(self)

    def clear(self):
        r"""clear(StrVector self)"""
        return _quantlib_risks.StrVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(StrVector self) -> std::vector< std::string >::allocator_type"""
        return _quantlib_risks.StrVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(StrVector self)"""
        return _quantlib_risks.StrVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(StrVector self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(StrVector self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _quantlib_risks.StrVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(StrVector self) -> StrVector
        __init__(StrVector self, StrVector other) -> StrVector
        __init__(StrVector self, std::vector< std::string >::size_type size) -> StrVector
        __init__(StrVector self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> StrVector
        """
        _quantlib_risks.StrVector_swiginit(self, _quantlib_risks.new_StrVector(*args))

    def push_back(self, x):
        r"""push_back(StrVector self, std::vector< std::string >::value_type const & x)"""
        return _quantlib_risks.StrVector_push_back(self, x)

    def front(self):
        r"""front(StrVector self) -> std::vector< std::string >::value_type const &"""
        return _quantlib_risks.StrVector_front(self)

    def back(self):
        r"""back(StrVector self) -> std::vector< std::string >::value_type const &"""
        return _quantlib_risks.StrVector_back(self)

    def assign(self, n, x):
        r"""assign(StrVector self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _quantlib_risks.StrVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(StrVector self, std::vector< std::string >::size_type new_size)
        resize(StrVector self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _quantlib_risks.StrVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(StrVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(StrVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
        """
        return _quantlib_risks.StrVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(StrVector self, std::vector< std::string >::size_type n)"""
        return _quantlib_risks.StrVector_reserve(self, n)

    def capacity(self):
        r"""capacity(StrVector self) -> std::vector< std::string >::size_type"""
        return _quantlib_risks.StrVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_StrVector

# Register StrVector in _quantlib_risks:
_quantlib_risks.StrVector_swigregister(StrVector)
class BoolVector(object):
    r"""Proxy of C++ std::vector< bool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(BoolVector self) -> SwigPyIterator"""
        return _quantlib_risks.BoolVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(BoolVector self) -> bool"""
        return _quantlib_risks.BoolVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(BoolVector self) -> bool"""
        return _quantlib_risks.BoolVector___bool__(self)

    def __len__(self):
        r"""__len__(BoolVector self) -> std::vector< bool >::size_type"""
        return _quantlib_risks.BoolVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(BoolVector self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j) -> BoolVector"""
        return _quantlib_risks.BoolVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(BoolVector self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j)
        __setslice__(BoolVector self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j, BoolVector v)
        """
        return _quantlib_risks.BoolVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(BoolVector self, std::vector< bool >::difference_type i, std::vector< bool >::difference_type j)"""
        return _quantlib_risks.BoolVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(BoolVector self, std::vector< bool >::difference_type i)
        __delitem__(BoolVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.BoolVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(BoolVector self, SWIGPY_SLICEOBJECT * slice) -> BoolVector
        __getitem__(BoolVector self, std::vector< bool >::difference_type i) -> std::vector< bool >::value_type
        """
        return _quantlib_risks.BoolVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(BoolVector self, SWIGPY_SLICEOBJECT * slice, BoolVector v)
        __setitem__(BoolVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(BoolVector self, std::vector< bool >::difference_type i, std::vector< bool >::value_type x)
        """
        return _quantlib_risks.BoolVector___setitem__(self, *args)

    def pop(self):
        r"""pop(BoolVector self) -> std::vector< bool >::value_type"""
        return _quantlib_risks.BoolVector_pop(self)

    def append(self, x):
        r"""append(BoolVector self, std::vector< bool >::value_type x)"""
        return _quantlib_risks.BoolVector_append(self, x)

    def empty(self):
        r"""empty(BoolVector self) -> bool"""
        return _quantlib_risks.BoolVector_empty(self)

    def size(self):
        r"""size(BoolVector self) -> std::vector< bool >::size_type"""
        return _quantlib_risks.BoolVector_size(self)

    def swap(self, v):
        r"""swap(BoolVector self, BoolVector v)"""
        return _quantlib_risks.BoolVector_swap(self, v)

    def begin(self):
        r"""begin(BoolVector self) -> std::vector< bool >::iterator"""
        return _quantlib_risks.BoolVector_begin(self)

    def end(self):
        r"""end(BoolVector self) -> std::vector< bool >::iterator"""
        return _quantlib_risks.BoolVector_end(self)

    def rbegin(self):
        r"""rbegin(BoolVector self) -> std::vector< bool >::reverse_iterator"""
        return _quantlib_risks.BoolVector_rbegin(self)

    def rend(self):
        r"""rend(BoolVector self) -> std::vector< bool >::reverse_iterator"""
        return _quantlib_risks.BoolVector_rend(self)

    def clear(self):
        r"""clear(BoolVector self)"""
        return _quantlib_risks.BoolVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(BoolVector self) -> std::vector< bool >::allocator_type"""
        return _quantlib_risks.BoolVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(BoolVector self)"""
        return _quantlib_risks.BoolVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(BoolVector self, std::vector< bool >::iterator pos) -> std::vector< bool >::iterator
        erase(BoolVector self, std::vector< bool >::iterator first, std::vector< bool >::iterator last) -> std::vector< bool >::iterator
        """
        return _quantlib_risks.BoolVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(BoolVector self) -> BoolVector
        __init__(BoolVector self, BoolVector other) -> BoolVector
        __init__(BoolVector self, std::vector< bool >::size_type size) -> BoolVector
        __init__(BoolVector self, std::vector< bool >::size_type size, std::vector< bool >::value_type value) -> BoolVector
        """
        _quantlib_risks.BoolVector_swiginit(self, _quantlib_risks.new_BoolVector(*args))

    def push_back(self, x):
        r"""push_back(BoolVector self, std::vector< bool >::value_type x)"""
        return _quantlib_risks.BoolVector_push_back(self, x)

    def front(self):
        r"""front(BoolVector self) -> std::vector< bool >::value_type"""
        return _quantlib_risks.BoolVector_front(self)

    def back(self):
        r"""back(BoolVector self) -> std::vector< bool >::value_type"""
        return _quantlib_risks.BoolVector_back(self)

    def assign(self, n, x):
        r"""assign(BoolVector self, std::vector< bool >::size_type n, std::vector< bool >::value_type x)"""
        return _quantlib_risks.BoolVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(BoolVector self, std::vector< bool >::size_type new_size)
        resize(BoolVector self, std::vector< bool >::size_type new_size, std::vector< bool >::value_type x)
        """
        return _quantlib_risks.BoolVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(BoolVector self, std::vector< bool >::iterator pos, std::vector< bool >::value_type x) -> std::vector< bool >::iterator
        insert(BoolVector self, std::vector< bool >::iterator pos, std::vector< bool >::size_type n, std::vector< bool >::value_type x)
        """
        return _quantlib_risks.BoolVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(BoolVector self, std::vector< bool >::size_type n)"""
        return _quantlib_risks.BoolVector_reserve(self, n)

    def capacity(self):
        r"""capacity(BoolVector self) -> std::vector< bool >::size_type"""
        return _quantlib_risks.BoolVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_BoolVector

# Register BoolVector in _quantlib_risks:
_quantlib_risks.BoolVector_swigregister(BoolVector)
class UnsignedIntPair(object):
    r"""Proxy of C++ std::pair< unsigned int,unsigned int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(UnsignedIntPair self) -> UnsignedIntPair
        __init__(UnsignedIntPair self, unsigned int first, unsigned int second) -> UnsignedIntPair
        __init__(UnsignedIntPair self, UnsignedIntPair other) -> UnsignedIntPair
        """
        _quantlib_risks.UnsignedIntPair_swiginit(self, _quantlib_risks.new_UnsignedIntPair(*args))
    first = property(_quantlib_risks.UnsignedIntPair_first_get, _quantlib_risks.UnsignedIntPair_first_set, doc=r"""first : unsigned int""")
    second = property(_quantlib_risks.UnsignedIntPair_second_get, _quantlib_risks.UnsignedIntPair_second_set, doc=r"""second : unsigned int""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _quantlib_risks.delete_UnsignedIntPair

# Register UnsignedIntPair in _quantlib_risks:
_quantlib_risks.UnsignedIntPair_swigregister(UnsignedIntPair)
class UnsignedIntPairVector(object):
    r"""Proxy of C++ std::vector< std::pair< unsigned int,unsigned int > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(UnsignedIntPairVector self) -> SwigPyIterator"""
        return _quantlib_risks.UnsignedIntPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(UnsignedIntPairVector self) -> bool"""
        return _quantlib_risks.UnsignedIntPairVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(UnsignedIntPairVector self) -> bool"""
        return _quantlib_risks.UnsignedIntPairVector___bool__(self)

    def __len__(self):
        r"""__len__(UnsignedIntPairVector self) -> std::vector< std::pair< unsigned int,unsigned int > >::size_type"""
        return _quantlib_risks.UnsignedIntPairVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(UnsignedIntPairVector self, std::vector< std::pair< unsigned int,unsigned int > >::difference_type i, std::vector< std::pair< unsigned int,unsigned int > >::difference_type j) -> UnsignedIntPairVector"""
        return _quantlib_risks.UnsignedIntPairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(UnsignedIntPairVector self, std::vector< std::pair< unsigned int,unsigned int > >::difference_type i, std::vector< std::pair< unsigned int,unsigned int > >::difference_type j)
        __setslice__(UnsignedIntPairVector self, std::vector< std::pair< unsigned int,unsigned int > >::difference_type i, std::vector< std::pair< unsigned int,unsigned int > >::difference_type j, UnsignedIntPairVector v)
        """
        return _quantlib_risks.UnsignedIntPairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(UnsignedIntPairVector self, std::vector< std::pair< unsigned int,unsigned int > >::difference_type i, std::vector< std::pair< unsigned int,unsigned int > >::difference_type j)"""
        return _quantlib_risks.UnsignedIntPairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(UnsignedIntPairVector self, std::vector< std::pair< unsigned int,unsigned int > >::difference_type i)
        __delitem__(UnsignedIntPairVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.UnsignedIntPairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(UnsignedIntPairVector self, SWIGPY_SLICEOBJECT * slice) -> UnsignedIntPairVector
        __getitem__(UnsignedIntPairVector self, std::vector< std::pair< unsigned int,unsigned int > >::difference_type i) -> UnsignedIntPair
        """
        return _quantlib_risks.UnsignedIntPairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(UnsignedIntPairVector self, SWIGPY_SLICEOBJECT * slice, UnsignedIntPairVector v)
        __setitem__(UnsignedIntPairVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(UnsignedIntPairVector self, std::vector< std::pair< unsigned int,unsigned int > >::difference_type i, UnsignedIntPair x)
        """
        return _quantlib_risks.UnsignedIntPairVector___setitem__(self, *args)

    def pop(self):
        r"""pop(UnsignedIntPairVector self) -> UnsignedIntPair"""
        return _quantlib_risks.UnsignedIntPairVector_pop(self)

    def append(self, x):
        r"""append(UnsignedIntPairVector self, UnsignedIntPair x)"""
        return _quantlib_risks.UnsignedIntPairVector_append(self, x)

    def empty(self):
        r"""empty(UnsignedIntPairVector self) -> bool"""
        return _quantlib_risks.UnsignedIntPairVector_empty(self)

    def size(self):
        r"""size(UnsignedIntPairVector self) -> std::vector< std::pair< unsigned int,unsigned int > >::size_type"""
        return _quantlib_risks.UnsignedIntPairVector_size(self)

    def swap(self, v):
        r"""swap(UnsignedIntPairVector self, UnsignedIntPairVector v)"""
        return _quantlib_risks.UnsignedIntPairVector_swap(self, v)

    def begin(self):
        r"""begin(UnsignedIntPairVector self) -> std::vector< std::pair< unsigned int,unsigned int > >::iterator"""
        return _quantlib_risks.UnsignedIntPairVector_begin(self)

    def end(self):
        r"""end(UnsignedIntPairVector self) -> std::vector< std::pair< unsigned int,unsigned int > >::iterator"""
        return _quantlib_risks.UnsignedIntPairVector_end(self)

    def rbegin(self):
        r"""rbegin(UnsignedIntPairVector self) -> std::vector< std::pair< unsigned int,unsigned int > >::reverse_iterator"""
        return _quantlib_risks.UnsignedIntPairVector_rbegin(self)

    def rend(self):
        r"""rend(UnsignedIntPairVector self) -> std::vector< std::pair< unsigned int,unsigned int > >::reverse_iterator"""
        return _quantlib_risks.UnsignedIntPairVector_rend(self)

    def clear(self):
        r"""clear(UnsignedIntPairVector self)"""
        return _quantlib_risks.UnsignedIntPairVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(UnsignedIntPairVector self) -> std::vector< std::pair< unsigned int,unsigned int > >::allocator_type"""
        return _quantlib_risks.UnsignedIntPairVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(UnsignedIntPairVector self)"""
        return _quantlib_risks.UnsignedIntPairVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(UnsignedIntPairVector self, std::vector< std::pair< unsigned int,unsigned int > >::iterator pos) -> std::vector< std::pair< unsigned int,unsigned int > >::iterator
        erase(UnsignedIntPairVector self, std::vector< std::pair< unsigned int,unsigned int > >::iterator first, std::vector< std::pair< unsigned int,unsigned int > >::iterator last) -> std::vector< std::pair< unsigned int,unsigned int > >::iterator
        """
        return _quantlib_risks.UnsignedIntPairVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(UnsignedIntPairVector self) -> UnsignedIntPairVector
        __init__(UnsignedIntPairVector self, UnsignedIntPairVector other) -> UnsignedIntPairVector
        __init__(UnsignedIntPairVector self, std::vector< std::pair< unsigned int,unsigned int > >::size_type size) -> UnsignedIntPairVector
        __init__(UnsignedIntPairVector self, std::vector< std::pair< unsigned int,unsigned int > >::size_type size, UnsignedIntPair value) -> UnsignedIntPairVector
        """
        _quantlib_risks.UnsignedIntPairVector_swiginit(self, _quantlib_risks.new_UnsignedIntPairVector(*args))

    def push_back(self, x):
        r"""push_back(UnsignedIntPairVector self, UnsignedIntPair x)"""
        return _quantlib_risks.UnsignedIntPairVector_push_back(self, x)

    def front(self):
        r"""front(UnsignedIntPairVector self) -> UnsignedIntPair"""
        return _quantlib_risks.UnsignedIntPairVector_front(self)

    def back(self):
        r"""back(UnsignedIntPairVector self) -> UnsignedIntPair"""
        return _quantlib_risks.UnsignedIntPairVector_back(self)

    def assign(self, n, x):
        r"""assign(UnsignedIntPairVector self, std::vector< std::pair< unsigned int,unsigned int > >::size_type n, UnsignedIntPair x)"""
        return _quantlib_risks.UnsignedIntPairVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(UnsignedIntPairVector self, std::vector< std::pair< unsigned int,unsigned int > >::size_type new_size)
        resize(UnsignedIntPairVector self, std::vector< std::pair< unsigned int,unsigned int > >::size_type new_size, UnsignedIntPair x)
        """
        return _quantlib_risks.UnsignedIntPairVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(UnsignedIntPairVector self, std::vector< std::pair< unsigned int,unsigned int > >::iterator pos, UnsignedIntPair x) -> std::vector< std::pair< unsigned int,unsigned int > >::iterator
        insert(UnsignedIntPairVector self, std::vector< std::pair< unsigned int,unsigned int > >::iterator pos, std::vector< std::pair< unsigned int,unsigned int > >::size_type n, UnsignedIntPair x)
        """
        return _quantlib_risks.UnsignedIntPairVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(UnsignedIntPairVector self, std::vector< std::pair< unsigned int,unsigned int > >::size_type n)"""
        return _quantlib_risks.UnsignedIntPairVector_reserve(self, n)

    def capacity(self):
        r"""capacity(UnsignedIntPairVector self) -> std::vector< std::pair< unsigned int,unsigned int > >::size_type"""
        return _quantlib_risks.UnsignedIntPairVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_UnsignedIntPairVector

# Register UnsignedIntPairVector in _quantlib_risks:
_quantlib_risks.UnsignedIntPairVector_swigregister(UnsignedIntPairVector)
Following = _quantlib_risks.Following

ModifiedFollowing = _quantlib_risks.ModifiedFollowing

Preceding = _quantlib_risks.Preceding

ModifiedPreceding = _quantlib_risks.ModifiedPreceding

Unadjusted = _quantlib_risks.Unadjusted

HalfMonthModifiedFollowing = _quantlib_risks.HalfMonthModifiedFollowing

Nearest = _quantlib_risks.Nearest

JoinHolidays = _quantlib_risks.JoinHolidays

JoinBusinessDays = _quantlib_risks.JoinBusinessDays

class Calendar(object):
    r"""Proxy of C++ Calendar class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isWeekend(self, w):
        r"""isWeekend(Calendar self, Weekday w) -> bool"""
        return _quantlib_risks.Calendar_isWeekend(self, w)

    def endOfMonth(self, arg2):
        r"""endOfMonth(Calendar self, Date arg2) -> Date"""
        return _quantlib_risks.Calendar_endOfMonth(self, arg2)

    def isBusinessDay(self, arg2):
        r"""isBusinessDay(Calendar self, Date arg2) -> bool"""
        return _quantlib_risks.Calendar_isBusinessDay(self, arg2)

    def isHoliday(self, arg2):
        r"""isHoliday(Calendar self, Date arg2) -> bool"""
        return _quantlib_risks.Calendar_isHoliday(self, arg2)

    def isEndOfMonth(self, arg2):
        r"""isEndOfMonth(Calendar self, Date arg2) -> bool"""
        return _quantlib_risks.Calendar_isEndOfMonth(self, arg2)

    def addHoliday(self, arg2):
        r"""addHoliday(Calendar self, Date arg2)"""
        return _quantlib_risks.Calendar_addHoliday(self, arg2)

    def removeHoliday(self, arg2):
        r"""removeHoliday(Calendar self, Date arg2)"""
        return _quantlib_risks.Calendar_removeHoliday(self, arg2)

    def resetAddedAndRemovedHolidays(self):
        r"""resetAddedAndRemovedHolidays(Calendar self)"""
        return _quantlib_risks.Calendar_resetAddedAndRemovedHolidays(self)

    def adjust(self, *args):
        r"""adjust(Calendar self, Date d, BusinessDayConvention convention=QuantLib::Following) -> Date"""
        return _quantlib_risks.Calendar_adjust(self, *args)

    def advance(self, *args):
        r"""
        advance(Calendar self, Date d, Integer n, TimeUnit unit, BusinessDayConvention convention=QuantLib::Following, bool endOfMonth=False) -> Date
        advance(Calendar self, Date d, Period period, BusinessDayConvention convention=QuantLib::Following, bool endOfMonth=False) -> Date
        """
        return _quantlib_risks.Calendar_advance(self, *args)

    def businessDaysBetween(self, _from, to, includeFirst=True, includeLast=False):
        r"""businessDaysBetween(Calendar self, Date _from, Date to, bool includeFirst=True, bool includeLast=False) -> BigInteger"""
        return _quantlib_risks.Calendar_businessDaysBetween(self, _from, to, includeFirst, includeLast)

    def holidayList(self, _from, to, includeWeekEnds=False):
        r"""holidayList(Calendar self, Date _from, Date to, bool includeWeekEnds=False) -> DateVector"""
        return _quantlib_risks.Calendar_holidayList(self, _from, to, includeWeekEnds)

    def businessDayList(self, _from, to):
        r"""businessDayList(Calendar self, Date _from, Date to) -> DateVector"""
        return _quantlib_risks.Calendar_businessDayList(self, _from, to)

    def name(self):
        r"""name(Calendar self) -> std::string"""
        return _quantlib_risks.Calendar_name(self)

    def __str__(self):
        r"""__str__(Calendar self) -> std::string"""
        return _quantlib_risks.Calendar___str__(self)

    def __eq__(self, other):
        r"""__eq__(Calendar self, Calendar other) -> bool"""
        return _quantlib_risks.Calendar___eq__(self, other)

    def __ne__(self, other):
        r"""__ne__(Calendar self, Calendar other) -> bool"""
        return _quantlib_risks.Calendar___ne__(self, other)

    def __hash__(self):
        return hash(self.name())

    __swig_destroy__ = _quantlib_risks.delete_Calendar

# Register Calendar in _quantlib_risks:
_quantlib_risks.Calendar_swigregister(Calendar)
class CalendarVector(object):
    r"""Proxy of C++ std::vector< Calendar > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(CalendarVector self) -> SwigPyIterator"""
        return _quantlib_risks.CalendarVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(CalendarVector self) -> bool"""
        return _quantlib_risks.CalendarVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(CalendarVector self) -> bool"""
        return _quantlib_risks.CalendarVector___bool__(self)

    def __len__(self):
        r"""__len__(CalendarVector self) -> std::vector< Calendar >::size_type"""
        return _quantlib_risks.CalendarVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(CalendarVector self, std::vector< Calendar >::difference_type i, std::vector< Calendar >::difference_type j) -> CalendarVector"""
        return _quantlib_risks.CalendarVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(CalendarVector self, std::vector< Calendar >::difference_type i, std::vector< Calendar >::difference_type j)
        __setslice__(CalendarVector self, std::vector< Calendar >::difference_type i, std::vector< Calendar >::difference_type j, CalendarVector v)
        """
        return _quantlib_risks.CalendarVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(CalendarVector self, std::vector< Calendar >::difference_type i, std::vector< Calendar >::difference_type j)"""
        return _quantlib_risks.CalendarVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(CalendarVector self, std::vector< Calendar >::difference_type i)
        __delitem__(CalendarVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.CalendarVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(CalendarVector self, SWIGPY_SLICEOBJECT * slice) -> CalendarVector
        __getitem__(CalendarVector self, std::vector< Calendar >::difference_type i) -> Calendar
        """
        return _quantlib_risks.CalendarVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(CalendarVector self, SWIGPY_SLICEOBJECT * slice, CalendarVector v)
        __setitem__(CalendarVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(CalendarVector self, std::vector< Calendar >::difference_type i, Calendar x)
        """
        return _quantlib_risks.CalendarVector___setitem__(self, *args)

    def pop(self):
        r"""pop(CalendarVector self) -> Calendar"""
        return _quantlib_risks.CalendarVector_pop(self)

    def append(self, x):
        r"""append(CalendarVector self, Calendar x)"""
        return _quantlib_risks.CalendarVector_append(self, x)

    def empty(self):
        r"""empty(CalendarVector self) -> bool"""
        return _quantlib_risks.CalendarVector_empty(self)

    def size(self):
        r"""size(CalendarVector self) -> std::vector< Calendar >::size_type"""
        return _quantlib_risks.CalendarVector_size(self)

    def swap(self, v):
        r"""swap(CalendarVector self, CalendarVector v)"""
        return _quantlib_risks.CalendarVector_swap(self, v)

    def begin(self):
        r"""begin(CalendarVector self) -> std::vector< Calendar >::iterator"""
        return _quantlib_risks.CalendarVector_begin(self)

    def end(self):
        r"""end(CalendarVector self) -> std::vector< Calendar >::iterator"""
        return _quantlib_risks.CalendarVector_end(self)

    def rbegin(self):
        r"""rbegin(CalendarVector self) -> std::vector< Calendar >::reverse_iterator"""
        return _quantlib_risks.CalendarVector_rbegin(self)

    def rend(self):
        r"""rend(CalendarVector self) -> std::vector< Calendar >::reverse_iterator"""
        return _quantlib_risks.CalendarVector_rend(self)

    def clear(self):
        r"""clear(CalendarVector self)"""
        return _quantlib_risks.CalendarVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(CalendarVector self) -> std::vector< Calendar >::allocator_type"""
        return _quantlib_risks.CalendarVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(CalendarVector self)"""
        return _quantlib_risks.CalendarVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(CalendarVector self, std::vector< Calendar >::iterator pos) -> std::vector< Calendar >::iterator
        erase(CalendarVector self, std::vector< Calendar >::iterator first, std::vector< Calendar >::iterator last) -> std::vector< Calendar >::iterator
        """
        return _quantlib_risks.CalendarVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(CalendarVector self) -> CalendarVector
        __init__(CalendarVector self, CalendarVector other) -> CalendarVector
        __init__(CalendarVector self, std::vector< Calendar >::size_type size) -> CalendarVector
        __init__(CalendarVector self, std::vector< Calendar >::size_type size, Calendar value) -> CalendarVector
        """
        _quantlib_risks.CalendarVector_swiginit(self, _quantlib_risks.new_CalendarVector(*args))

    def push_back(self, x):
        r"""push_back(CalendarVector self, Calendar x)"""
        return _quantlib_risks.CalendarVector_push_back(self, x)

    def front(self):
        r"""front(CalendarVector self) -> Calendar"""
        return _quantlib_risks.CalendarVector_front(self)

    def back(self):
        r"""back(CalendarVector self) -> Calendar"""
        return _quantlib_risks.CalendarVector_back(self)

    def assign(self, n, x):
        r"""assign(CalendarVector self, std::vector< Calendar >::size_type n, Calendar x)"""
        return _quantlib_risks.CalendarVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(CalendarVector self, std::vector< Calendar >::size_type new_size)
        resize(CalendarVector self, std::vector< Calendar >::size_type new_size, Calendar x)
        """
        return _quantlib_risks.CalendarVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(CalendarVector self, std::vector< Calendar >::iterator pos, Calendar x) -> std::vector< Calendar >::iterator
        insert(CalendarVector self, std::vector< Calendar >::iterator pos, std::vector< Calendar >::size_type n, Calendar x)
        """
        return _quantlib_risks.CalendarVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(CalendarVector self, std::vector< Calendar >::size_type n)"""
        return _quantlib_risks.CalendarVector_reserve(self, n)

    def capacity(self):
        r"""capacity(CalendarVector self) -> std::vector< Calendar >::size_type"""
        return _quantlib_risks.CalendarVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_CalendarVector

# Register CalendarVector in _quantlib_risks:
_quantlib_risks.CalendarVector_swigregister(CalendarVector)
class Argentina(Calendar):
    r"""Proxy of C++ QuantLib::Argentina class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Merval = _quantlib_risks.Argentina_Merval
    

    def __init__(self, *args):
        r"""__init__(Argentina self, QuantLib::Argentina::Market m=Merval) -> Argentina"""
        _quantlib_risks.Argentina_swiginit(self, _quantlib_risks.new_Argentina(*args))
    __swig_destroy__ = _quantlib_risks.delete_Argentina

# Register Argentina in _quantlib_risks:
_quantlib_risks.Argentina_swigregister(Argentina)
class Australia(Calendar):
    r"""Proxy of C++ QuantLib::Australia class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _quantlib_risks.Australia_Settlement
    
    ASX = _quantlib_risks.Australia_ASX
    

    def __init__(self, *args):
        r"""__init__(Australia self, QuantLib::Australia::Market market=Settlement) -> Australia"""
        _quantlib_risks.Australia_swiginit(self, _quantlib_risks.new_Australia(*args))
    __swig_destroy__ = _quantlib_risks.delete_Australia

# Register Australia in _quantlib_risks:
_quantlib_risks.Australia_swigregister(Australia)
class Austria(Calendar):
    r"""Proxy of C++ QuantLib::Austria class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _quantlib_risks.Austria_Settlement
    
    Exchange = _quantlib_risks.Austria_Exchange
    

    def __init__(self, *args):
        r"""__init__(Austria self, QuantLib::Austria::Market m=Settlement) -> Austria"""
        _quantlib_risks.Austria_swiginit(self, _quantlib_risks.new_Austria(*args))
    __swig_destroy__ = _quantlib_risks.delete_Austria

# Register Austria in _quantlib_risks:
_quantlib_risks.Austria_swigregister(Austria)
class Botswana(Calendar):
    r"""Proxy of C++ QuantLib::Botswana class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Botswana self) -> Botswana"""
        _quantlib_risks.Botswana_swiginit(self, _quantlib_risks.new_Botswana())
    __swig_destroy__ = _quantlib_risks.delete_Botswana

# Register Botswana in _quantlib_risks:
_quantlib_risks.Botswana_swigregister(Botswana)
class Brazil(Calendar):
    r"""Proxy of C++ QuantLib::Brazil class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _quantlib_risks.Brazil_Settlement
    
    Exchange = _quantlib_risks.Brazil_Exchange
    

    def __init__(self, *args):
        r"""__init__(Brazil self, QuantLib::Brazil::Market m=Settlement) -> Brazil"""
        _quantlib_risks.Brazil_swiginit(self, _quantlib_risks.new_Brazil(*args))
    __swig_destroy__ = _quantlib_risks.delete_Brazil

# Register Brazil in _quantlib_risks:
_quantlib_risks.Brazil_swigregister(Brazil)
class Canada(Calendar):
    r"""Proxy of C++ QuantLib::Canada class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _quantlib_risks.Canada_Settlement
    
    TSX = _quantlib_risks.Canada_TSX
    

    def __init__(self, *args):
        r"""__init__(Canada self, QuantLib::Canada::Market m=Settlement) -> Canada"""
        _quantlib_risks.Canada_swiginit(self, _quantlib_risks.new_Canada(*args))
    __swig_destroy__ = _quantlib_risks.delete_Canada

# Register Canada in _quantlib_risks:
_quantlib_risks.Canada_swigregister(Canada)
class Chile(Calendar):
    r"""Proxy of C++ QuantLib::Chile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SSE = _quantlib_risks.Chile_SSE
    

    def __init__(self, *args):
        r"""__init__(Chile self, QuantLib::Chile::Market m=SSE) -> Chile"""
        _quantlib_risks.Chile_swiginit(self, _quantlib_risks.new_Chile(*args))
    __swig_destroy__ = _quantlib_risks.delete_Chile

# Register Chile in _quantlib_risks:
_quantlib_risks.Chile_swigregister(Chile)
class China(Calendar):
    r"""Proxy of C++ QuantLib::China class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SSE = _quantlib_risks.China_SSE
    
    IB = _quantlib_risks.China_IB
    

    def __init__(self, *args):
        r"""__init__(China self, QuantLib::China::Market m=SSE) -> China"""
        _quantlib_risks.China_swiginit(self, _quantlib_risks.new_China(*args))
    __swig_destroy__ = _quantlib_risks.delete_China

# Register China in _quantlib_risks:
_quantlib_risks.China_swigregister(China)
class CzechRepublic(Calendar):
    r"""Proxy of C++ QuantLib::CzechRepublic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PSE = _quantlib_risks.CzechRepublic_PSE
    

    def __init__(self, *args):
        r"""__init__(CzechRepublic self, QuantLib::CzechRepublic::Market m=PSE) -> CzechRepublic"""
        _quantlib_risks.CzechRepublic_swiginit(self, _quantlib_risks.new_CzechRepublic(*args))
    __swig_destroy__ = _quantlib_risks.delete_CzechRepublic

# Register CzechRepublic in _quantlib_risks:
_quantlib_risks.CzechRepublic_swigregister(CzechRepublic)
class Denmark(Calendar):
    r"""Proxy of C++ QuantLib::Denmark class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Denmark self) -> Denmark"""
        _quantlib_risks.Denmark_swiginit(self, _quantlib_risks.new_Denmark())
    __swig_destroy__ = _quantlib_risks.delete_Denmark

# Register Denmark in _quantlib_risks:
_quantlib_risks.Denmark_swigregister(Denmark)
class Finland(Calendar):
    r"""Proxy of C++ QuantLib::Finland class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Finland self) -> Finland"""
        _quantlib_risks.Finland_swiginit(self, _quantlib_risks.new_Finland())
    __swig_destroy__ = _quantlib_risks.delete_Finland

# Register Finland in _quantlib_risks:
_quantlib_risks.Finland_swigregister(Finland)
class France(Calendar):
    r"""Proxy of C++ QuantLib::France class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _quantlib_risks.France_Settlement
    
    Exchange = _quantlib_risks.France_Exchange
    

    def __init__(self, *args):
        r"""__init__(France self, QuantLib::France::Market m=Settlement) -> France"""
        _quantlib_risks.France_swiginit(self, _quantlib_risks.new_France(*args))
    __swig_destroy__ = _quantlib_risks.delete_France

# Register France in _quantlib_risks:
_quantlib_risks.France_swigregister(France)
class Germany(Calendar):
    r"""Proxy of C++ QuantLib::Germany class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _quantlib_risks.Germany_Settlement
    
    FrankfurtStockExchange = _quantlib_risks.Germany_FrankfurtStockExchange
    
    Xetra = _quantlib_risks.Germany_Xetra
    
    Eurex = _quantlib_risks.Germany_Eurex
    

    def __init__(self, *args):
        r"""__init__(Germany self, QuantLib::Germany::Market m=FrankfurtStockExchange) -> Germany"""
        _quantlib_risks.Germany_swiginit(self, _quantlib_risks.new_Germany(*args))
    __swig_destroy__ = _quantlib_risks.delete_Germany

# Register Germany in _quantlib_risks:
_quantlib_risks.Germany_swigregister(Germany)
class HongKong(Calendar):
    r"""Proxy of C++ QuantLib::HongKong class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HKEx = _quantlib_risks.HongKong_HKEx
    

    def __init__(self, *args):
        r"""__init__(HongKong self, QuantLib::HongKong::Market m=HKEx) -> HongKong"""
        _quantlib_risks.HongKong_swiginit(self, _quantlib_risks.new_HongKong(*args))
    __swig_destroy__ = _quantlib_risks.delete_HongKong

# Register HongKong in _quantlib_risks:
_quantlib_risks.HongKong_swigregister(HongKong)
class Hungary(Calendar):
    r"""Proxy of C++ QuantLib::Hungary class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Hungary self) -> Hungary"""
        _quantlib_risks.Hungary_swiginit(self, _quantlib_risks.new_Hungary())
    __swig_destroy__ = _quantlib_risks.delete_Hungary

# Register Hungary in _quantlib_risks:
_quantlib_risks.Hungary_swigregister(Hungary)
class Iceland(Calendar):
    r"""Proxy of C++ QuantLib::Iceland class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ICEX = _quantlib_risks.Iceland_ICEX
    

    def __init__(self, *args):
        r"""__init__(Iceland self, QuantLib::Iceland::Market m=ICEX) -> Iceland"""
        _quantlib_risks.Iceland_swiginit(self, _quantlib_risks.new_Iceland(*args))
    __swig_destroy__ = _quantlib_risks.delete_Iceland

# Register Iceland in _quantlib_risks:
_quantlib_risks.Iceland_swigregister(Iceland)
class India(Calendar):
    r"""Proxy of C++ QuantLib::India class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NSE = _quantlib_risks.India_NSE
    

    def __init__(self, *args):
        r"""__init__(India self, QuantLib::India::Market m=NSE) -> India"""
        _quantlib_risks.India_swiginit(self, _quantlib_risks.new_India(*args))
    __swig_destroy__ = _quantlib_risks.delete_India

# Register India in _quantlib_risks:
_quantlib_risks.India_swigregister(India)
class Indonesia(Calendar):
    r"""Proxy of C++ QuantLib::Indonesia class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BEJ = _quantlib_risks.Indonesia_BEJ
    
    JSX = _quantlib_risks.Indonesia_JSX
    

    def __init__(self, *args):
        r"""__init__(Indonesia self, QuantLib::Indonesia::Market m=BEJ) -> Indonesia"""
        _quantlib_risks.Indonesia_swiginit(self, _quantlib_risks.new_Indonesia(*args))
    __swig_destroy__ = _quantlib_risks.delete_Indonesia

# Register Indonesia in _quantlib_risks:
_quantlib_risks.Indonesia_swigregister(Indonesia)
class Israel(Calendar):
    r"""Proxy of C++ QuantLib::Israel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _quantlib_risks.Israel_Settlement
    
    TASE = _quantlib_risks.Israel_TASE
    

    def __init__(self, *args):
        r"""__init__(Israel self, QuantLib::Israel::Market m=Settlement) -> Israel"""
        _quantlib_risks.Israel_swiginit(self, _quantlib_risks.new_Israel(*args))
    __swig_destroy__ = _quantlib_risks.delete_Israel

# Register Israel in _quantlib_risks:
_quantlib_risks.Israel_swigregister(Israel)
class Italy(Calendar):
    r"""Proxy of C++ QuantLib::Italy class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _quantlib_risks.Italy_Settlement
    
    Exchange = _quantlib_risks.Italy_Exchange
    

    def __init__(self, *args):
        r"""__init__(Italy self, QuantLib::Italy::Market m=Settlement) -> Italy"""
        _quantlib_risks.Italy_swiginit(self, _quantlib_risks.new_Italy(*args))
    __swig_destroy__ = _quantlib_risks.delete_Italy

# Register Italy in _quantlib_risks:
_quantlib_risks.Italy_swigregister(Italy)
class Japan(Calendar):
    r"""Proxy of C++ QuantLib::Japan class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Japan self) -> Japan"""
        _quantlib_risks.Japan_swiginit(self, _quantlib_risks.new_Japan())
    __swig_destroy__ = _quantlib_risks.delete_Japan

# Register Japan in _quantlib_risks:
_quantlib_risks.Japan_swigregister(Japan)
class Mexico(Calendar):
    r"""Proxy of C++ QuantLib::Mexico class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BMV = _quantlib_risks.Mexico_BMV
    

    def __init__(self, *args):
        r"""__init__(Mexico self, QuantLib::Mexico::Market m=BMV) -> Mexico"""
        _quantlib_risks.Mexico_swiginit(self, _quantlib_risks.new_Mexico(*args))
    __swig_destroy__ = _quantlib_risks.delete_Mexico

# Register Mexico in _quantlib_risks:
_quantlib_risks.Mexico_swigregister(Mexico)
class NewZealand(Calendar):
    r"""Proxy of C++ QuantLib::NewZealand class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(NewZealand self) -> NewZealand"""
        _quantlib_risks.NewZealand_swiginit(self, _quantlib_risks.new_NewZealand())
    __swig_destroy__ = _quantlib_risks.delete_NewZealand

# Register NewZealand in _quantlib_risks:
_quantlib_risks.NewZealand_swigregister(NewZealand)
class Norway(Calendar):
    r"""Proxy of C++ QuantLib::Norway class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Norway self) -> Norway"""
        _quantlib_risks.Norway_swiginit(self, _quantlib_risks.new_Norway())
    __swig_destroy__ = _quantlib_risks.delete_Norway

# Register Norway in _quantlib_risks:
_quantlib_risks.Norway_swigregister(Norway)
class Poland(Calendar):
    r"""Proxy of C++ QuantLib::Poland class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Poland self) -> Poland"""
        _quantlib_risks.Poland_swiginit(self, _quantlib_risks.new_Poland())
    __swig_destroy__ = _quantlib_risks.delete_Poland

# Register Poland in _quantlib_risks:
_quantlib_risks.Poland_swigregister(Poland)
class Romania(Calendar):
    r"""Proxy of C++ QuantLib::Romania class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Public = _quantlib_risks.Romania_Public
    
    BVB = _quantlib_risks.Romania_BVB
    

    def __init__(self, *args):
        r"""__init__(Romania self, QuantLib::Romania::Market m=BVB) -> Romania"""
        _quantlib_risks.Romania_swiginit(self, _quantlib_risks.new_Romania(*args))
    __swig_destroy__ = _quantlib_risks.delete_Romania

# Register Romania in _quantlib_risks:
_quantlib_risks.Romania_swigregister(Romania)
class Russia(Calendar):
    r"""Proxy of C++ QuantLib::Russia class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _quantlib_risks.Russia_Settlement
    
    MOEX = _quantlib_risks.Russia_MOEX
    

    def __init__(self, *args):
        r"""__init__(Russia self, QuantLib::Russia::Market m=Settlement) -> Russia"""
        _quantlib_risks.Russia_swiginit(self, _quantlib_risks.new_Russia(*args))
    __swig_destroy__ = _quantlib_risks.delete_Russia

# Register Russia in _quantlib_risks:
_quantlib_risks.Russia_swigregister(Russia)
class SaudiArabia(Calendar):
    r"""Proxy of C++ QuantLib::SaudiArabia class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Tadawul = _quantlib_risks.SaudiArabia_Tadawul
    

    def __init__(self, *args):
        r"""__init__(SaudiArabia self, QuantLib::SaudiArabia::Market m=Tadawul) -> SaudiArabia"""
        _quantlib_risks.SaudiArabia_swiginit(self, _quantlib_risks.new_SaudiArabia(*args))
    __swig_destroy__ = _quantlib_risks.delete_SaudiArabia

# Register SaudiArabia in _quantlib_risks:
_quantlib_risks.SaudiArabia_swigregister(SaudiArabia)
class Singapore(Calendar):
    r"""Proxy of C++ QuantLib::Singapore class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SGX = _quantlib_risks.Singapore_SGX
    

    def __init__(self, *args):
        r"""__init__(Singapore self, QuantLib::Singapore::Market m=SGX) -> Singapore"""
        _quantlib_risks.Singapore_swiginit(self, _quantlib_risks.new_Singapore(*args))
    __swig_destroy__ = _quantlib_risks.delete_Singapore

# Register Singapore in _quantlib_risks:
_quantlib_risks.Singapore_swigregister(Singapore)
class Slovakia(Calendar):
    r"""Proxy of C++ QuantLib::Slovakia class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BSSE = _quantlib_risks.Slovakia_BSSE
    

    def __init__(self, *args):
        r"""__init__(Slovakia self, QuantLib::Slovakia::Market m=BSSE) -> Slovakia"""
        _quantlib_risks.Slovakia_swiginit(self, _quantlib_risks.new_Slovakia(*args))
    __swig_destroy__ = _quantlib_risks.delete_Slovakia

# Register Slovakia in _quantlib_risks:
_quantlib_risks.Slovakia_swigregister(Slovakia)
class SouthAfrica(Calendar):
    r"""Proxy of C++ QuantLib::SouthAfrica class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SouthAfrica self) -> SouthAfrica"""
        _quantlib_risks.SouthAfrica_swiginit(self, _quantlib_risks.new_SouthAfrica())
    __swig_destroy__ = _quantlib_risks.delete_SouthAfrica

# Register SouthAfrica in _quantlib_risks:
_quantlib_risks.SouthAfrica_swigregister(SouthAfrica)
class SouthKorea(Calendar):
    r"""Proxy of C++ QuantLib::SouthKorea class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _quantlib_risks.SouthKorea_Settlement
    
    KRX = _quantlib_risks.SouthKorea_KRX
    

    def __init__(self, *args):
        r"""__init__(SouthKorea self, QuantLib::SouthKorea::Market m=KRX) -> SouthKorea"""
        _quantlib_risks.SouthKorea_swiginit(self, _quantlib_risks.new_SouthKorea(*args))
    __swig_destroy__ = _quantlib_risks.delete_SouthKorea

# Register SouthKorea in _quantlib_risks:
_quantlib_risks.SouthKorea_swigregister(SouthKorea)
class Sweden(Calendar):
    r"""Proxy of C++ QuantLib::Sweden class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Sweden self) -> Sweden"""
        _quantlib_risks.Sweden_swiginit(self, _quantlib_risks.new_Sweden())
    __swig_destroy__ = _quantlib_risks.delete_Sweden

# Register Sweden in _quantlib_risks:
_quantlib_risks.Sweden_swigregister(Sweden)
class Switzerland(Calendar):
    r"""Proxy of C++ QuantLib::Switzerland class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Switzerland self) -> Switzerland"""
        _quantlib_risks.Switzerland_swiginit(self, _quantlib_risks.new_Switzerland())
    __swig_destroy__ = _quantlib_risks.delete_Switzerland

# Register Switzerland in _quantlib_risks:
_quantlib_risks.Switzerland_swigregister(Switzerland)
class Taiwan(Calendar):
    r"""Proxy of C++ QuantLib::Taiwan class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    TSEC = _quantlib_risks.Taiwan_TSEC
    

    def __init__(self, *args):
        r"""__init__(Taiwan self, QuantLib::Taiwan::Market m=TSEC) -> Taiwan"""
        _quantlib_risks.Taiwan_swiginit(self, _quantlib_risks.new_Taiwan(*args))
    __swig_destroy__ = _quantlib_risks.delete_Taiwan

# Register Taiwan in _quantlib_risks:
_quantlib_risks.Taiwan_swigregister(Taiwan)
class TARGET(Calendar):
    r"""Proxy of C++ QuantLib::TARGET class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TARGET self) -> TARGET"""
        _quantlib_risks.TARGET_swiginit(self, _quantlib_risks.new_TARGET())
    __swig_destroy__ = _quantlib_risks.delete_TARGET

# Register TARGET in _quantlib_risks:
_quantlib_risks.TARGET_swigregister(TARGET)
class Thailand(Calendar):
    r"""Proxy of C++ QuantLib::Thailand class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Thailand self) -> Thailand"""
        _quantlib_risks.Thailand_swiginit(self, _quantlib_risks.new_Thailand())
    __swig_destroy__ = _quantlib_risks.delete_Thailand

# Register Thailand in _quantlib_risks:
_quantlib_risks.Thailand_swigregister(Thailand)
class Turkey(Calendar):
    r"""Proxy of C++ QuantLib::Turkey class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Turkey self) -> Turkey"""
        _quantlib_risks.Turkey_swiginit(self, _quantlib_risks.new_Turkey())
    __swig_destroy__ = _quantlib_risks.delete_Turkey

# Register Turkey in _quantlib_risks:
_quantlib_risks.Turkey_swigregister(Turkey)
class Ukraine(Calendar):
    r"""Proxy of C++ QuantLib::Ukraine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    USE = _quantlib_risks.Ukraine_USE
    

    def __init__(self, *args):
        r"""__init__(Ukraine self, QuantLib::Ukraine::Market m=USE) -> Ukraine"""
        _quantlib_risks.Ukraine_swiginit(self, _quantlib_risks.new_Ukraine(*args))
    __swig_destroy__ = _quantlib_risks.delete_Ukraine

# Register Ukraine in _quantlib_risks:
_quantlib_risks.Ukraine_swigregister(Ukraine)
class UnitedKingdom(Calendar):
    r"""Proxy of C++ QuantLib::UnitedKingdom class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _quantlib_risks.UnitedKingdom_Settlement
    
    Exchange = _quantlib_risks.UnitedKingdom_Exchange
    
    Metals = _quantlib_risks.UnitedKingdom_Metals
    

    def __init__(self, *args):
        r"""__init__(UnitedKingdom self, QuantLib::UnitedKingdom::Market m=Settlement) -> UnitedKingdom"""
        _quantlib_risks.UnitedKingdom_swiginit(self, _quantlib_risks.new_UnitedKingdom(*args))
    __swig_destroy__ = _quantlib_risks.delete_UnitedKingdom

# Register UnitedKingdom in _quantlib_risks:
_quantlib_risks.UnitedKingdom_swigregister(UnitedKingdom)
class UnitedStates(Calendar):
    r"""Proxy of C++ QuantLib::UnitedStates class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Settlement = _quantlib_risks.UnitedStates_Settlement
    
    NYSE = _quantlib_risks.UnitedStates_NYSE
    
    GovernmentBond = _quantlib_risks.UnitedStates_GovernmentBond
    
    NERC = _quantlib_risks.UnitedStates_NERC
    
    LiborImpact = _quantlib_risks.UnitedStates_LiborImpact
    
    FederalReserve = _quantlib_risks.UnitedStates_FederalReserve
    
    SOFR = _quantlib_risks.UnitedStates_SOFR
    

    def __init__(self, m):
        r"""__init__(UnitedStates self, QuantLib::UnitedStates::Market m) -> UnitedStates"""
        _quantlib_risks.UnitedStates_swiginit(self, _quantlib_risks.new_UnitedStates(m))
    __swig_destroy__ = _quantlib_risks.delete_UnitedStates

# Register UnitedStates in _quantlib_risks:
_quantlib_risks.UnitedStates_swigregister(UnitedStates)
class NullCalendar(Calendar):
    r"""Proxy of C++ QuantLib::NullCalendar class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(NullCalendar self) -> NullCalendar"""
        _quantlib_risks.NullCalendar_swiginit(self, _quantlib_risks.new_NullCalendar())
    __swig_destroy__ = _quantlib_risks.delete_NullCalendar

# Register NullCalendar in _quantlib_risks:
_quantlib_risks.NullCalendar_swigregister(NullCalendar)
class WeekendsOnly(Calendar):
    r"""Proxy of C++ QuantLib::WeekendsOnly class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(WeekendsOnly self) -> WeekendsOnly"""
        _quantlib_risks.WeekendsOnly_swiginit(self, _quantlib_risks.new_WeekendsOnly())
    __swig_destroy__ = _quantlib_risks.delete_WeekendsOnly

# Register WeekendsOnly in _quantlib_risks:
_quantlib_risks.WeekendsOnly_swigregister(WeekendsOnly)
class JointCalendar(Calendar):
    r"""Proxy of C++ QuantLib::JointCalendar class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(JointCalendar self, Calendar arg2, Calendar arg3, JointCalendarRule rule=QuantLib::JoinHolidays) -> JointCalendar
        __init__(JointCalendar self, Calendar arg2, Calendar arg3, Calendar arg4, JointCalendarRule rule=QuantLib::JoinHolidays) -> JointCalendar
        __init__(JointCalendar self, Calendar arg2, Calendar arg3, Calendar arg4, Calendar arg5, JointCalendarRule rule=QuantLib::JoinHolidays) -> JointCalendar
        __init__(JointCalendar self, CalendarVector arg2, JointCalendarRule arg3=QuantLib::JoinHolidays) -> JointCalendar
        """
        _quantlib_risks.JointCalendar_swiginit(self, _quantlib_risks.new_JointCalendar(*args))
    __swig_destroy__ = _quantlib_risks.delete_JointCalendar

# Register JointCalendar in _quantlib_risks:
_quantlib_risks.JointCalendar_swigregister(JointCalendar)
class BespokeCalendar(Calendar):
    r"""Proxy of C++ QuantLib::BespokeCalendar class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(BespokeCalendar self, std::string const & name) -> BespokeCalendar"""
        _quantlib_risks.BespokeCalendar_swiginit(self, _quantlib_risks.new_BespokeCalendar(name))

    def addWeekend(self, arg2):
        r"""addWeekend(BespokeCalendar self, Weekday arg2)"""
        return _quantlib_risks.BespokeCalendar_addWeekend(self, arg2)
    __swig_destroy__ = _quantlib_risks.delete_BespokeCalendar

# Register BespokeCalendar in _quantlib_risks:
_quantlib_risks.BespokeCalendar_swigregister(BespokeCalendar)

def nullInt():
    r"""nullInt() -> int"""
    return _quantlib_risks.nullInt()

def nullDouble():
    r"""nullDouble() -> Real"""
    return _quantlib_risks.nullDouble()
class DayCounter(object):
    r"""Proxy of C++ DayCounter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def dayCount(self, d1, d2):
        r"""dayCount(DayCounter self, Date d1, Date d2) -> BigInteger"""
        return _quantlib_risks.DayCounter_dayCount(self, d1, d2)

    def yearFraction(self, *args):
        r"""yearFraction(DayCounter self, Date d1, Date d2, Date startRef=Date(), Date endRef=Date()) -> Time"""
        return _quantlib_risks.DayCounter_yearFraction(self, *args)

    def name(self):
        r"""name(DayCounter self) -> std::string"""
        return _quantlib_risks.DayCounter_name(self)

    def __str__(self):
        r"""__str__(DayCounter self) -> std::string"""
        return _quantlib_risks.DayCounter___str__(self)

    def __eq__(self, other):
        r"""__eq__(DayCounter self, DayCounter other) -> bool"""
        return _quantlib_risks.DayCounter___eq__(self, other)

    def __ne__(self, other):
        r"""__ne__(DayCounter self, DayCounter other) -> bool"""
        return _quantlib_risks.DayCounter___ne__(self, other)

    def __hash__(self):
        return hash(self.name())

    __swig_destroy__ = _quantlib_risks.delete_DayCounter

# Register DayCounter in _quantlib_risks:
_quantlib_risks.DayCounter_swigregister(DayCounter)
class Actual360(DayCounter):
    r"""Proxy of C++ QuantLib::Actual360 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, includeLastDay=False):
        r"""__init__(Actual360 self, bool const includeLastDay=False) -> Actual360"""
        _quantlib_risks.Actual360_swiginit(self, _quantlib_risks.new_Actual360(includeLastDay))
    __swig_destroy__ = _quantlib_risks.delete_Actual360

# Register Actual360 in _quantlib_risks:
_quantlib_risks.Actual360_swigregister(Actual360)
class Actual366(DayCounter):
    r"""Proxy of C++ QuantLib::Actual366 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, includeLastDay=False):
        r"""__init__(Actual366 self, bool const includeLastDay=False) -> Actual366"""
        _quantlib_risks.Actual366_swiginit(self, _quantlib_risks.new_Actual366(includeLastDay))
    __swig_destroy__ = _quantlib_risks.delete_Actual366

# Register Actual366 in _quantlib_risks:
_quantlib_risks.Actual366_swigregister(Actual366)
class Actual36525(DayCounter):
    r"""Proxy of C++ QuantLib::Actual36525 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, includeLastDay=False):
        r"""__init__(Actual36525 self, bool const includeLastDay=False) -> Actual36525"""
        _quantlib_risks.Actual36525_swiginit(self, _quantlib_risks.new_Actual36525(includeLastDay))
    __swig_destroy__ = _quantlib_risks.delete_Actual36525

# Register Actual36525 in _quantlib_risks:
_quantlib_risks.Actual36525_swigregister(Actual36525)
class Actual364(DayCounter):
    r"""Proxy of C++ QuantLib::Actual364 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Actual364 self) -> Actual364"""
        _quantlib_risks.Actual364_swiginit(self, _quantlib_risks.new_Actual364())
    __swig_destroy__ = _quantlib_risks.delete_Actual364

# Register Actual364 in _quantlib_risks:
_quantlib_risks.Actual364_swigregister(Actual364)
class Actual365Fixed(DayCounter):
    r"""Proxy of C++ QuantLib::Actual365Fixed class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Standard = _quantlib_risks.Actual365Fixed_Standard
    
    Canadian = _quantlib_risks.Actual365Fixed_Canadian
    
    NoLeap = _quantlib_risks.Actual365Fixed_NoLeap
    

    def __init__(self, *args):
        r"""__init__(Actual365Fixed self, QuantLib::Actual365Fixed::Convention c=Standard) -> Actual365Fixed"""
        _quantlib_risks.Actual365Fixed_swiginit(self, _quantlib_risks.new_Actual365Fixed(*args))
    __swig_destroy__ = _quantlib_risks.delete_Actual365Fixed

# Register Actual365Fixed in _quantlib_risks:
_quantlib_risks.Actual365Fixed_swigregister(Actual365Fixed)
class Thirty360(DayCounter):
    r"""Proxy of C++ QuantLib::Thirty360 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    USA = _quantlib_risks.Thirty360_USA
    
    BondBasis = _quantlib_risks.Thirty360_BondBasis
    
    European = _quantlib_risks.Thirty360_European
    
    EurobondBasis = _quantlib_risks.Thirty360_EurobondBasis
    
    Italian = _quantlib_risks.Thirty360_Italian
    
    German = _quantlib_risks.Thirty360_German
    
    ISMA = _quantlib_risks.Thirty360_ISMA
    
    ISDA = _quantlib_risks.Thirty360_ISDA
    
    NASD = _quantlib_risks.Thirty360_NASD
    

    def __init__(self, *args):
        r"""__init__(Thirty360 self, QuantLib::Thirty360::Convention c, Date terminationDate=Date()) -> Thirty360"""
        _quantlib_risks.Thirty360_swiginit(self, _quantlib_risks.new_Thirty360(*args))
    __swig_destroy__ = _quantlib_risks.delete_Thirty360

# Register Thirty360 in _quantlib_risks:
_quantlib_risks.Thirty360_swigregister(Thirty360)
class Thirty365(DayCounter):
    r"""Proxy of C++ QuantLib::Thirty365 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Thirty365 self) -> Thirty365"""
        _quantlib_risks.Thirty365_swiginit(self, _quantlib_risks.new_Thirty365())
    __swig_destroy__ = _quantlib_risks.delete_Thirty365

# Register Thirty365 in _quantlib_risks:
_quantlib_risks.Thirty365_swigregister(Thirty365)
class ActualActual(DayCounter):
    r"""Proxy of C++ QuantLib::ActualActual class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ISMA = _quantlib_risks.ActualActual_ISMA
    
    Bond = _quantlib_risks.ActualActual_Bond
    
    ISDA = _quantlib_risks.ActualActual_ISDA
    
    Historical = _quantlib_risks.ActualActual_Historical
    
    Actual365 = _quantlib_risks.ActualActual_Actual365
    
    AFB = _quantlib_risks.ActualActual_AFB
    
    Euro = _quantlib_risks.ActualActual_Euro
    

    def __init__(self, *args):
        r"""__init__(ActualActual self, QuantLib::ActualActual::Convention c, Schedule schedule=Schedule()) -> ActualActual"""
        _quantlib_risks.ActualActual_swiginit(self, _quantlib_risks.new_ActualActual(*args))
    __swig_destroy__ = _quantlib_risks.delete_ActualActual

# Register ActualActual in _quantlib_risks:
_quantlib_risks.ActualActual_swigregister(ActualActual)
class OneDayCounter(DayCounter):
    r"""Proxy of C++ QuantLib::OneDayCounter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(OneDayCounter self) -> OneDayCounter"""
        _quantlib_risks.OneDayCounter_swiginit(self, _quantlib_risks.new_OneDayCounter())
    __swig_destroy__ = _quantlib_risks.delete_OneDayCounter

# Register OneDayCounter in _quantlib_risks:
_quantlib_risks.OneDayCounter_swigregister(OneDayCounter)
class SimpleDayCounter(DayCounter):
    r"""Proxy of C++ QuantLib::SimpleDayCounter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SimpleDayCounter self) -> SimpleDayCounter"""
        _quantlib_risks.SimpleDayCounter_swiginit(self, _quantlib_risks.new_SimpleDayCounter())
    __swig_destroy__ = _quantlib_risks.delete_SimpleDayCounter

# Register SimpleDayCounter in _quantlib_risks:
_quantlib_risks.SimpleDayCounter_swigregister(SimpleDayCounter)
class Business252(DayCounter):
    r"""Proxy of C++ QuantLib::Business252 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Business252 self, Calendar c=QuantLib::Brazil()) -> Business252"""
        _quantlib_risks.Business252_swiginit(self, _quantlib_risks.new_Business252(*args))
    __swig_destroy__ = _quantlib_risks.delete_Business252

# Register Business252 in _quantlib_risks:
_quantlib_risks.Business252_swigregister(Business252)

def yearFractionToDate(dayCounter, referenceDate, t):
    r"""yearFractionToDate(DayCounter dayCounter, Date referenceDate, Time t) -> Date"""
    return _quantlib_risks.yearFractionToDate(dayCounter, referenceDate, t)
class Rounding(object):
    r"""Proxy of C++ Rounding class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Rounding self) -> Rounding"""
        _quantlib_risks.Rounding_swiginit(self, _quantlib_risks.new_Rounding())

    def __call__(self, value):
        r"""__call__(Rounding self, Decimal value) -> Decimal"""
        return _quantlib_risks.Rounding___call__(self, value)
    __swig_destroy__ = _quantlib_risks.delete_Rounding

# Register Rounding in _quantlib_risks:
_quantlib_risks.Rounding_swigregister(Rounding)
class UpRounding(Rounding):
    r"""Proxy of C++ UpRounding class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, precision, digit=5):
        r"""__init__(UpRounding self, Integer precision, Integer digit=5) -> UpRounding"""
        _quantlib_risks.UpRounding_swiginit(self, _quantlib_risks.new_UpRounding(precision, digit))
    __swig_destroy__ = _quantlib_risks.delete_UpRounding

# Register UpRounding in _quantlib_risks:
_quantlib_risks.UpRounding_swigregister(UpRounding)
class DownRounding(Rounding):
    r"""Proxy of C++ DownRounding class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, precision, digit=5):
        r"""__init__(DownRounding self, Integer precision, Integer digit=5) -> DownRounding"""
        _quantlib_risks.DownRounding_swiginit(self, _quantlib_risks.new_DownRounding(precision, digit))
    __swig_destroy__ = _quantlib_risks.delete_DownRounding

# Register DownRounding in _quantlib_risks:
_quantlib_risks.DownRounding_swigregister(DownRounding)
class ClosestRounding(Rounding):
    r"""Proxy of C++ ClosestRounding class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, precision, digit=5):
        r"""__init__(ClosestRounding self, Integer precision, Integer digit=5) -> ClosestRounding"""
        _quantlib_risks.ClosestRounding_swiginit(self, _quantlib_risks.new_ClosestRounding(precision, digit))
    __swig_destroy__ = _quantlib_risks.delete_ClosestRounding

# Register ClosestRounding in _quantlib_risks:
_quantlib_risks.ClosestRounding_swigregister(ClosestRounding)
class CeilingTruncation(Rounding):
    r"""Proxy of C++ CeilingTruncation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, precision, digit=5):
        r"""__init__(CeilingTruncation self, Integer precision, Integer digit=5) -> CeilingTruncation"""
        _quantlib_risks.CeilingTruncation_swiginit(self, _quantlib_risks.new_CeilingTruncation(precision, digit))
    __swig_destroy__ = _quantlib_risks.delete_CeilingTruncation

# Register CeilingTruncation in _quantlib_risks:
_quantlib_risks.CeilingTruncation_swigregister(CeilingTruncation)
class FloorTruncation(Rounding):
    r"""Proxy of C++ FloorTruncation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, precision, digit=5):
        r"""__init__(FloorTruncation self, Integer precision, Integer digit=5) -> FloorTruncation"""
        _quantlib_risks.FloorTruncation_swiginit(self, _quantlib_risks.new_FloorTruncation(precision, digit))
    __swig_destroy__ = _quantlib_risks.delete_FloorTruncation

# Register FloorTruncation in _quantlib_risks:
_quantlib_risks.FloorTruncation_swigregister(FloorTruncation)
class Currency(object):
    r"""Proxy of C++ Currency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Currency self) -> Currency
        __init__(Currency self, std::string const & name, std::string const & code, Integer numericCode, std::string const & symbol, std::string const & fractionSymbol, Integer fractionsPerUnit, Rounding rounding, std::string const & formatString, Currency triangulationCurrency=Currency()) -> Currency
        """
        _quantlib_risks.Currency_swiginit(self, _quantlib_risks.new_Currency(*args))

    def name(self):
        r"""name(Currency self) -> std::string const &"""
        return _quantlib_risks.Currency_name(self)

    def code(self):
        r"""code(Currency self) -> std::string const &"""
        return _quantlib_risks.Currency_code(self)

    def numericCode(self):
        r"""numericCode(Currency self) -> Integer"""
        return _quantlib_risks.Currency_numericCode(self)

    def symbol(self):
        r"""symbol(Currency self) -> std::string const &"""
        return _quantlib_risks.Currency_symbol(self)

    def fractionSymbol(self):
        r"""fractionSymbol(Currency self) -> std::string const &"""
        return _quantlib_risks.Currency_fractionSymbol(self)

    def fractionsPerUnit(self):
        r"""fractionsPerUnit(Currency self) -> Integer"""
        return _quantlib_risks.Currency_fractionsPerUnit(self)

    def rounding(self):
        r"""rounding(Currency self) -> Rounding"""
        return _quantlib_risks.Currency_rounding(self)

    def format(self):
        r"""format(Currency self) -> std::string"""
        return _quantlib_risks.Currency_format(self)

    def empty(self):
        r"""empty(Currency self) -> bool"""
        return _quantlib_risks.Currency_empty(self)

    def triangulationCurrency(self):
        r"""triangulationCurrency(Currency self) -> Currency"""
        return _quantlib_risks.Currency_triangulationCurrency(self)

    def __str__(self):
        r"""__str__(Currency self) -> std::string"""
        return _quantlib_risks.Currency___str__(self)

    def __eq__(self, other):
        r"""__eq__(Currency self, Currency other) -> bool"""
        return _quantlib_risks.Currency___eq__(self, other)

    def __ne__(self, other):
        r"""__ne__(Currency self, Currency other) -> bool"""
        return _quantlib_risks.Currency___ne__(self, other)

    def __mul__(self, x):
        r"""__mul__(Currency self, Decimal x) -> Money"""
        return _quantlib_risks.Currency___mul__(self, x)

    def __rmul__(self, x):
        r"""__rmul__(Currency self, Decimal x) -> Money"""
        return _quantlib_risks.Currency___rmul__(self, x)

    def __nonzero__(self):
        r"""__nonzero__(Currency self) -> bool"""
        return _quantlib_risks.Currency___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Currency self) -> bool"""
        return _quantlib_risks.Currency___bool__(self)

    def __hash__(self):
        return hash(self.name())

    __swig_destroy__ = _quantlib_risks.delete_Currency

# Register Currency in _quantlib_risks:
_quantlib_risks.Currency_swigregister(Currency)
class AEDCurrency(Currency):
    r"""Proxy of C++ QuantLib::AEDCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(AEDCurrency self) -> AEDCurrency"""
        _quantlib_risks.AEDCurrency_swiginit(self, _quantlib_risks.new_AEDCurrency())
    __swig_destroy__ = _quantlib_risks.delete_AEDCurrency

# Register AEDCurrency in _quantlib_risks:
_quantlib_risks.AEDCurrency_swigregister(AEDCurrency)
class AOACurrency(Currency):
    r"""Proxy of C++ QuantLib::AOACurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(AOACurrency self) -> AOACurrency"""
        _quantlib_risks.AOACurrency_swiginit(self, _quantlib_risks.new_AOACurrency())
    __swig_destroy__ = _quantlib_risks.delete_AOACurrency

# Register AOACurrency in _quantlib_risks:
_quantlib_risks.AOACurrency_swigregister(AOACurrency)
class ARSCurrency(Currency):
    r"""Proxy of C++ QuantLib::ARSCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ARSCurrency self) -> ARSCurrency"""
        _quantlib_risks.ARSCurrency_swiginit(self, _quantlib_risks.new_ARSCurrency())
    __swig_destroy__ = _quantlib_risks.delete_ARSCurrency

# Register ARSCurrency in _quantlib_risks:
_quantlib_risks.ARSCurrency_swigregister(ARSCurrency)
class ATSCurrency(Currency):
    r"""Proxy of C++ QuantLib::ATSCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ATSCurrency self) -> ATSCurrency"""
        _quantlib_risks.ATSCurrency_swiginit(self, _quantlib_risks.new_ATSCurrency())
    __swig_destroy__ = _quantlib_risks.delete_ATSCurrency

# Register ATSCurrency in _quantlib_risks:
_quantlib_risks.ATSCurrency_swigregister(ATSCurrency)
class AUDCurrency(Currency):
    r"""Proxy of C++ QuantLib::AUDCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(AUDCurrency self) -> AUDCurrency"""
        _quantlib_risks.AUDCurrency_swiginit(self, _quantlib_risks.new_AUDCurrency())
    __swig_destroy__ = _quantlib_risks.delete_AUDCurrency

# Register AUDCurrency in _quantlib_risks:
_quantlib_risks.AUDCurrency_swigregister(AUDCurrency)
class BDTCurrency(Currency):
    r"""Proxy of C++ QuantLib::BDTCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(BDTCurrency self) -> BDTCurrency"""
        _quantlib_risks.BDTCurrency_swiginit(self, _quantlib_risks.new_BDTCurrency())
    __swig_destroy__ = _quantlib_risks.delete_BDTCurrency

# Register BDTCurrency in _quantlib_risks:
_quantlib_risks.BDTCurrency_swigregister(BDTCurrency)
class BEFCurrency(Currency):
    r"""Proxy of C++ QuantLib::BEFCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(BEFCurrency self) -> BEFCurrency"""
        _quantlib_risks.BEFCurrency_swiginit(self, _quantlib_risks.new_BEFCurrency())
    __swig_destroy__ = _quantlib_risks.delete_BEFCurrency

# Register BEFCurrency in _quantlib_risks:
_quantlib_risks.BEFCurrency_swigregister(BEFCurrency)
class BHDCurrency(Currency):
    r"""Proxy of C++ QuantLib::BHDCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(BHDCurrency self) -> BHDCurrency"""
        _quantlib_risks.BHDCurrency_swiginit(self, _quantlib_risks.new_BHDCurrency())
    __swig_destroy__ = _quantlib_risks.delete_BHDCurrency

# Register BHDCurrency in _quantlib_risks:
_quantlib_risks.BHDCurrency_swigregister(BHDCurrency)
class BGLCurrency(Currency):
    r"""Proxy of C++ QuantLib::BGLCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(BGLCurrency self) -> BGLCurrency"""
        _quantlib_risks.BGLCurrency_swiginit(self, _quantlib_risks.new_BGLCurrency())
    __swig_destroy__ = _quantlib_risks.delete_BGLCurrency

# Register BGLCurrency in _quantlib_risks:
_quantlib_risks.BGLCurrency_swigregister(BGLCurrency)
class BGNCurrency(Currency):
    r"""Proxy of C++ QuantLib::BGNCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(BGNCurrency self) -> BGNCurrency"""
        _quantlib_risks.BGNCurrency_swiginit(self, _quantlib_risks.new_BGNCurrency())
    __swig_destroy__ = _quantlib_risks.delete_BGNCurrency

# Register BGNCurrency in _quantlib_risks:
_quantlib_risks.BGNCurrency_swigregister(BGNCurrency)
class BRLCurrency(Currency):
    r"""Proxy of C++ QuantLib::BRLCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(BRLCurrency self) -> BRLCurrency"""
        _quantlib_risks.BRLCurrency_swiginit(self, _quantlib_risks.new_BRLCurrency())
    __swig_destroy__ = _quantlib_risks.delete_BRLCurrency

# Register BRLCurrency in _quantlib_risks:
_quantlib_risks.BRLCurrency_swigregister(BRLCurrency)
class BWPCurrency(Currency):
    r"""Proxy of C++ QuantLib::BWPCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(BWPCurrency self) -> BWPCurrency"""
        _quantlib_risks.BWPCurrency_swiginit(self, _quantlib_risks.new_BWPCurrency())
    __swig_destroy__ = _quantlib_risks.delete_BWPCurrency

# Register BWPCurrency in _quantlib_risks:
_quantlib_risks.BWPCurrency_swigregister(BWPCurrency)
class BYRCurrency(Currency):
    r"""Proxy of C++ QuantLib::BYRCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(BYRCurrency self) -> BYRCurrency"""
        _quantlib_risks.BYRCurrency_swiginit(self, _quantlib_risks.new_BYRCurrency())
    __swig_destroy__ = _quantlib_risks.delete_BYRCurrency

# Register BYRCurrency in _quantlib_risks:
_quantlib_risks.BYRCurrency_swigregister(BYRCurrency)
class CADCurrency(Currency):
    r"""Proxy of C++ QuantLib::CADCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CADCurrency self) -> CADCurrency"""
        _quantlib_risks.CADCurrency_swiginit(self, _quantlib_risks.new_CADCurrency())
    __swig_destroy__ = _quantlib_risks.delete_CADCurrency

# Register CADCurrency in _quantlib_risks:
_quantlib_risks.CADCurrency_swigregister(CADCurrency)
class CHFCurrency(Currency):
    r"""Proxy of C++ QuantLib::CHFCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CHFCurrency self) -> CHFCurrency"""
        _quantlib_risks.CHFCurrency_swiginit(self, _quantlib_risks.new_CHFCurrency())
    __swig_destroy__ = _quantlib_risks.delete_CHFCurrency

# Register CHFCurrency in _quantlib_risks:
_quantlib_risks.CHFCurrency_swigregister(CHFCurrency)
class CLFCurrency(Currency):
    r"""Proxy of C++ QuantLib::CLFCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CLFCurrency self) -> CLFCurrency"""
        _quantlib_risks.CLFCurrency_swiginit(self, _quantlib_risks.new_CLFCurrency())
    __swig_destroy__ = _quantlib_risks.delete_CLFCurrency

# Register CLFCurrency in _quantlib_risks:
_quantlib_risks.CLFCurrency_swigregister(CLFCurrency)
class CLPCurrency(Currency):
    r"""Proxy of C++ QuantLib::CLPCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CLPCurrency self) -> CLPCurrency"""
        _quantlib_risks.CLPCurrency_swiginit(self, _quantlib_risks.new_CLPCurrency())
    __swig_destroy__ = _quantlib_risks.delete_CLPCurrency

# Register CLPCurrency in _quantlib_risks:
_quantlib_risks.CLPCurrency_swigregister(CLPCurrency)
class CNHCurrency(Currency):
    r"""Proxy of C++ QuantLib::CNHCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CNHCurrency self) -> CNHCurrency"""
        _quantlib_risks.CNHCurrency_swiginit(self, _quantlib_risks.new_CNHCurrency())
    __swig_destroy__ = _quantlib_risks.delete_CNHCurrency

# Register CNHCurrency in _quantlib_risks:
_quantlib_risks.CNHCurrency_swigregister(CNHCurrency)
class CNYCurrency(Currency):
    r"""Proxy of C++ QuantLib::CNYCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CNYCurrency self) -> CNYCurrency"""
        _quantlib_risks.CNYCurrency_swiginit(self, _quantlib_risks.new_CNYCurrency())
    __swig_destroy__ = _quantlib_risks.delete_CNYCurrency

# Register CNYCurrency in _quantlib_risks:
_quantlib_risks.CNYCurrency_swigregister(CNYCurrency)
class COPCurrency(Currency):
    r"""Proxy of C++ QuantLib::COPCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(COPCurrency self) -> COPCurrency"""
        _quantlib_risks.COPCurrency_swiginit(self, _quantlib_risks.new_COPCurrency())
    __swig_destroy__ = _quantlib_risks.delete_COPCurrency

# Register COPCurrency in _quantlib_risks:
_quantlib_risks.COPCurrency_swigregister(COPCurrency)
class COUCurrency(Currency):
    r"""Proxy of C++ QuantLib::COUCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(COUCurrency self) -> COUCurrency"""
        _quantlib_risks.COUCurrency_swiginit(self, _quantlib_risks.new_COUCurrency())
    __swig_destroy__ = _quantlib_risks.delete_COUCurrency

# Register COUCurrency in _quantlib_risks:
_quantlib_risks.COUCurrency_swigregister(COUCurrency)
class CYPCurrency(Currency):
    r"""Proxy of C++ QuantLib::CYPCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CYPCurrency self) -> CYPCurrency"""
        _quantlib_risks.CYPCurrency_swiginit(self, _quantlib_risks.new_CYPCurrency())
    __swig_destroy__ = _quantlib_risks.delete_CYPCurrency

# Register CYPCurrency in _quantlib_risks:
_quantlib_risks.CYPCurrency_swigregister(CYPCurrency)
class CZKCurrency(Currency):
    r"""Proxy of C++ QuantLib::CZKCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CZKCurrency self) -> CZKCurrency"""
        _quantlib_risks.CZKCurrency_swiginit(self, _quantlib_risks.new_CZKCurrency())
    __swig_destroy__ = _quantlib_risks.delete_CZKCurrency

# Register CZKCurrency in _quantlib_risks:
_quantlib_risks.CZKCurrency_swigregister(CZKCurrency)
class DEMCurrency(Currency):
    r"""Proxy of C++ QuantLib::DEMCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DEMCurrency self) -> DEMCurrency"""
        _quantlib_risks.DEMCurrency_swiginit(self, _quantlib_risks.new_DEMCurrency())
    __swig_destroy__ = _quantlib_risks.delete_DEMCurrency

# Register DEMCurrency in _quantlib_risks:
_quantlib_risks.DEMCurrency_swigregister(DEMCurrency)
class DKKCurrency(Currency):
    r"""Proxy of C++ QuantLib::DKKCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DKKCurrency self) -> DKKCurrency"""
        _quantlib_risks.DKKCurrency_swiginit(self, _quantlib_risks.new_DKKCurrency())
    __swig_destroy__ = _quantlib_risks.delete_DKKCurrency

# Register DKKCurrency in _quantlib_risks:
_quantlib_risks.DKKCurrency_swigregister(DKKCurrency)
class EEKCurrency(Currency):
    r"""Proxy of C++ QuantLib::EEKCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(EEKCurrency self) -> EEKCurrency"""
        _quantlib_risks.EEKCurrency_swiginit(self, _quantlib_risks.new_EEKCurrency())
    __swig_destroy__ = _quantlib_risks.delete_EEKCurrency

# Register EEKCurrency in _quantlib_risks:
_quantlib_risks.EEKCurrency_swigregister(EEKCurrency)
class EGPCurrency(Currency):
    r"""Proxy of C++ QuantLib::EGPCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(EGPCurrency self) -> EGPCurrency"""
        _quantlib_risks.EGPCurrency_swiginit(self, _quantlib_risks.new_EGPCurrency())
    __swig_destroy__ = _quantlib_risks.delete_EGPCurrency

# Register EGPCurrency in _quantlib_risks:
_quantlib_risks.EGPCurrency_swigregister(EGPCurrency)
class ESPCurrency(Currency):
    r"""Proxy of C++ QuantLib::ESPCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ESPCurrency self) -> ESPCurrency"""
        _quantlib_risks.ESPCurrency_swiginit(self, _quantlib_risks.new_ESPCurrency())
    __swig_destroy__ = _quantlib_risks.delete_ESPCurrency

# Register ESPCurrency in _quantlib_risks:
_quantlib_risks.ESPCurrency_swigregister(ESPCurrency)
class ETBCurrency(Currency):
    r"""Proxy of C++ QuantLib::ETBCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ETBCurrency self) -> ETBCurrency"""
        _quantlib_risks.ETBCurrency_swiginit(self, _quantlib_risks.new_ETBCurrency())
    __swig_destroy__ = _quantlib_risks.delete_ETBCurrency

# Register ETBCurrency in _quantlib_risks:
_quantlib_risks.ETBCurrency_swigregister(ETBCurrency)
class EURCurrency(Currency):
    r"""Proxy of C++ QuantLib::EURCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(EURCurrency self) -> EURCurrency"""
        _quantlib_risks.EURCurrency_swiginit(self, _quantlib_risks.new_EURCurrency())
    __swig_destroy__ = _quantlib_risks.delete_EURCurrency

# Register EURCurrency in _quantlib_risks:
_quantlib_risks.EURCurrency_swigregister(EURCurrency)
class FIMCurrency(Currency):
    r"""Proxy of C++ QuantLib::FIMCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(FIMCurrency self) -> FIMCurrency"""
        _quantlib_risks.FIMCurrency_swiginit(self, _quantlib_risks.new_FIMCurrency())
    __swig_destroy__ = _quantlib_risks.delete_FIMCurrency

# Register FIMCurrency in _quantlib_risks:
_quantlib_risks.FIMCurrency_swigregister(FIMCurrency)
class FRFCurrency(Currency):
    r"""Proxy of C++ QuantLib::FRFCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(FRFCurrency self) -> FRFCurrency"""
        _quantlib_risks.FRFCurrency_swiginit(self, _quantlib_risks.new_FRFCurrency())
    __swig_destroy__ = _quantlib_risks.delete_FRFCurrency

# Register FRFCurrency in _quantlib_risks:
_quantlib_risks.FRFCurrency_swigregister(FRFCurrency)
class GELCurrency(Currency):
    r"""Proxy of C++ QuantLib::GELCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GELCurrency self) -> GELCurrency"""
        _quantlib_risks.GELCurrency_swiginit(self, _quantlib_risks.new_GELCurrency())
    __swig_destroy__ = _quantlib_risks.delete_GELCurrency

# Register GELCurrency in _quantlib_risks:
_quantlib_risks.GELCurrency_swigregister(GELCurrency)
class GBPCurrency(Currency):
    r"""Proxy of C++ QuantLib::GBPCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GBPCurrency self) -> GBPCurrency"""
        _quantlib_risks.GBPCurrency_swiginit(self, _quantlib_risks.new_GBPCurrency())
    __swig_destroy__ = _quantlib_risks.delete_GBPCurrency

# Register GBPCurrency in _quantlib_risks:
_quantlib_risks.GBPCurrency_swigregister(GBPCurrency)
class GHSCurrency(Currency):
    r"""Proxy of C++ QuantLib::GHSCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GHSCurrency self) -> GHSCurrency"""
        _quantlib_risks.GHSCurrency_swiginit(self, _quantlib_risks.new_GHSCurrency())
    __swig_destroy__ = _quantlib_risks.delete_GHSCurrency

# Register GHSCurrency in _quantlib_risks:
_quantlib_risks.GHSCurrency_swigregister(GHSCurrency)
class GRDCurrency(Currency):
    r"""Proxy of C++ QuantLib::GRDCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(GRDCurrency self) -> GRDCurrency"""
        _quantlib_risks.GRDCurrency_swiginit(self, _quantlib_risks.new_GRDCurrency())
    __swig_destroy__ = _quantlib_risks.delete_GRDCurrency

# Register GRDCurrency in _quantlib_risks:
_quantlib_risks.GRDCurrency_swigregister(GRDCurrency)
class HKDCurrency(Currency):
    r"""Proxy of C++ QuantLib::HKDCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(HKDCurrency self) -> HKDCurrency"""
        _quantlib_risks.HKDCurrency_swiginit(self, _quantlib_risks.new_HKDCurrency())
    __swig_destroy__ = _quantlib_risks.delete_HKDCurrency

# Register HKDCurrency in _quantlib_risks:
_quantlib_risks.HKDCurrency_swigregister(HKDCurrency)
class HRKCurrency(Currency):
    r"""Proxy of C++ QuantLib::HRKCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(HRKCurrency self) -> HRKCurrency"""
        _quantlib_risks.HRKCurrency_swiginit(self, _quantlib_risks.new_HRKCurrency())
    __swig_destroy__ = _quantlib_risks.delete_HRKCurrency

# Register HRKCurrency in _quantlib_risks:
_quantlib_risks.HRKCurrency_swigregister(HRKCurrency)
class HUFCurrency(Currency):
    r"""Proxy of C++ QuantLib::HUFCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(HUFCurrency self) -> HUFCurrency"""
        _quantlib_risks.HUFCurrency_swiginit(self, _quantlib_risks.new_HUFCurrency())
    __swig_destroy__ = _quantlib_risks.delete_HUFCurrency

# Register HUFCurrency in _quantlib_risks:
_quantlib_risks.HUFCurrency_swigregister(HUFCurrency)
class IDRCurrency(Currency):
    r"""Proxy of C++ QuantLib::IDRCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(IDRCurrency self) -> IDRCurrency"""
        _quantlib_risks.IDRCurrency_swiginit(self, _quantlib_risks.new_IDRCurrency())
    __swig_destroy__ = _quantlib_risks.delete_IDRCurrency

# Register IDRCurrency in _quantlib_risks:
_quantlib_risks.IDRCurrency_swigregister(IDRCurrency)
class IEPCurrency(Currency):
    r"""Proxy of C++ QuantLib::IEPCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(IEPCurrency self) -> IEPCurrency"""
        _quantlib_risks.IEPCurrency_swiginit(self, _quantlib_risks.new_IEPCurrency())
    __swig_destroy__ = _quantlib_risks.delete_IEPCurrency

# Register IEPCurrency in _quantlib_risks:
_quantlib_risks.IEPCurrency_swigregister(IEPCurrency)
class ILSCurrency(Currency):
    r"""Proxy of C++ QuantLib::ILSCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ILSCurrency self) -> ILSCurrency"""
        _quantlib_risks.ILSCurrency_swiginit(self, _quantlib_risks.new_ILSCurrency())
    __swig_destroy__ = _quantlib_risks.delete_ILSCurrency

# Register ILSCurrency in _quantlib_risks:
_quantlib_risks.ILSCurrency_swigregister(ILSCurrency)
class INRCurrency(Currency):
    r"""Proxy of C++ QuantLib::INRCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(INRCurrency self) -> INRCurrency"""
        _quantlib_risks.INRCurrency_swiginit(self, _quantlib_risks.new_INRCurrency())
    __swig_destroy__ = _quantlib_risks.delete_INRCurrency

# Register INRCurrency in _quantlib_risks:
_quantlib_risks.INRCurrency_swigregister(INRCurrency)
class IQDCurrency(Currency):
    r"""Proxy of C++ QuantLib::IQDCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(IQDCurrency self) -> IQDCurrency"""
        _quantlib_risks.IQDCurrency_swiginit(self, _quantlib_risks.new_IQDCurrency())
    __swig_destroy__ = _quantlib_risks.delete_IQDCurrency

# Register IQDCurrency in _quantlib_risks:
_quantlib_risks.IQDCurrency_swigregister(IQDCurrency)
class IRRCurrency(Currency):
    r"""Proxy of C++ QuantLib::IRRCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(IRRCurrency self) -> IRRCurrency"""
        _quantlib_risks.IRRCurrency_swiginit(self, _quantlib_risks.new_IRRCurrency())
    __swig_destroy__ = _quantlib_risks.delete_IRRCurrency

# Register IRRCurrency in _quantlib_risks:
_quantlib_risks.IRRCurrency_swigregister(IRRCurrency)
class ISKCurrency(Currency):
    r"""Proxy of C++ QuantLib::ISKCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ISKCurrency self) -> ISKCurrency"""
        _quantlib_risks.ISKCurrency_swiginit(self, _quantlib_risks.new_ISKCurrency())
    __swig_destroy__ = _quantlib_risks.delete_ISKCurrency

# Register ISKCurrency in _quantlib_risks:
_quantlib_risks.ISKCurrency_swigregister(ISKCurrency)
class ITLCurrency(Currency):
    r"""Proxy of C++ QuantLib::ITLCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ITLCurrency self) -> ITLCurrency"""
        _quantlib_risks.ITLCurrency_swiginit(self, _quantlib_risks.new_ITLCurrency())
    __swig_destroy__ = _quantlib_risks.delete_ITLCurrency

# Register ITLCurrency in _quantlib_risks:
_quantlib_risks.ITLCurrency_swigregister(ITLCurrency)
class JODCurrency(Currency):
    r"""Proxy of C++ QuantLib::JODCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(JODCurrency self) -> JODCurrency"""
        _quantlib_risks.JODCurrency_swiginit(self, _quantlib_risks.new_JODCurrency())
    __swig_destroy__ = _quantlib_risks.delete_JODCurrency

# Register JODCurrency in _quantlib_risks:
_quantlib_risks.JODCurrency_swigregister(JODCurrency)
class JPYCurrency(Currency):
    r"""Proxy of C++ QuantLib::JPYCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(JPYCurrency self) -> JPYCurrency"""
        _quantlib_risks.JPYCurrency_swiginit(self, _quantlib_risks.new_JPYCurrency())
    __swig_destroy__ = _quantlib_risks.delete_JPYCurrency

# Register JPYCurrency in _quantlib_risks:
_quantlib_risks.JPYCurrency_swigregister(JPYCurrency)
class KESCurrency(Currency):
    r"""Proxy of C++ QuantLib::KESCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(KESCurrency self) -> KESCurrency"""
        _quantlib_risks.KESCurrency_swiginit(self, _quantlib_risks.new_KESCurrency())
    __swig_destroy__ = _quantlib_risks.delete_KESCurrency

# Register KESCurrency in _quantlib_risks:
_quantlib_risks.KESCurrency_swigregister(KESCurrency)
class KRWCurrency(Currency):
    r"""Proxy of C++ QuantLib::KRWCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(KRWCurrency self) -> KRWCurrency"""
        _quantlib_risks.KRWCurrency_swiginit(self, _quantlib_risks.new_KRWCurrency())
    __swig_destroy__ = _quantlib_risks.delete_KRWCurrency

# Register KRWCurrency in _quantlib_risks:
_quantlib_risks.KRWCurrency_swigregister(KRWCurrency)
class KWDCurrency(Currency):
    r"""Proxy of C++ QuantLib::KWDCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(KWDCurrency self) -> KWDCurrency"""
        _quantlib_risks.KWDCurrency_swiginit(self, _quantlib_risks.new_KWDCurrency())
    __swig_destroy__ = _quantlib_risks.delete_KWDCurrency

# Register KWDCurrency in _quantlib_risks:
_quantlib_risks.KWDCurrency_swigregister(KWDCurrency)
class KZTCurrency(Currency):
    r"""Proxy of C++ QuantLib::KZTCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(KZTCurrency self) -> KZTCurrency"""
        _quantlib_risks.KZTCurrency_swiginit(self, _quantlib_risks.new_KZTCurrency())
    __swig_destroy__ = _quantlib_risks.delete_KZTCurrency

# Register KZTCurrency in _quantlib_risks:
_quantlib_risks.KZTCurrency_swigregister(KZTCurrency)
class LKRCurrency(Currency):
    r"""Proxy of C++ QuantLib::LKRCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(LKRCurrency self) -> LKRCurrency"""
        _quantlib_risks.LKRCurrency_swiginit(self, _quantlib_risks.new_LKRCurrency())
    __swig_destroy__ = _quantlib_risks.delete_LKRCurrency

# Register LKRCurrency in _quantlib_risks:
_quantlib_risks.LKRCurrency_swigregister(LKRCurrency)
class LTLCurrency(Currency):
    r"""Proxy of C++ QuantLib::LTLCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(LTLCurrency self) -> LTLCurrency"""
        _quantlib_risks.LTLCurrency_swiginit(self, _quantlib_risks.new_LTLCurrency())
    __swig_destroy__ = _quantlib_risks.delete_LTLCurrency

# Register LTLCurrency in _quantlib_risks:
_quantlib_risks.LTLCurrency_swigregister(LTLCurrency)
class LUFCurrency(Currency):
    r"""Proxy of C++ QuantLib::LUFCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(LUFCurrency self) -> LUFCurrency"""
        _quantlib_risks.LUFCurrency_swiginit(self, _quantlib_risks.new_LUFCurrency())
    __swig_destroy__ = _quantlib_risks.delete_LUFCurrency

# Register LUFCurrency in _quantlib_risks:
_quantlib_risks.LUFCurrency_swigregister(LUFCurrency)
class LVLCurrency(Currency):
    r"""Proxy of C++ QuantLib::LVLCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(LVLCurrency self) -> LVLCurrency"""
        _quantlib_risks.LVLCurrency_swiginit(self, _quantlib_risks.new_LVLCurrency())
    __swig_destroy__ = _quantlib_risks.delete_LVLCurrency

# Register LVLCurrency in _quantlib_risks:
_quantlib_risks.LVLCurrency_swigregister(LVLCurrency)
class MADCurrency(Currency):
    r"""Proxy of C++ QuantLib::MADCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(MADCurrency self) -> MADCurrency"""
        _quantlib_risks.MADCurrency_swiginit(self, _quantlib_risks.new_MADCurrency())
    __swig_destroy__ = _quantlib_risks.delete_MADCurrency

# Register MADCurrency in _quantlib_risks:
_quantlib_risks.MADCurrency_swigregister(MADCurrency)
class MTLCurrency(Currency):
    r"""Proxy of C++ QuantLib::MTLCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(MTLCurrency self) -> MTLCurrency"""
        _quantlib_risks.MTLCurrency_swiginit(self, _quantlib_risks.new_MTLCurrency())
    __swig_destroy__ = _quantlib_risks.delete_MTLCurrency

# Register MTLCurrency in _quantlib_risks:
_quantlib_risks.MTLCurrency_swigregister(MTLCurrency)
class MURCurrency(Currency):
    r"""Proxy of C++ QuantLib::MURCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(MURCurrency self) -> MURCurrency"""
        _quantlib_risks.MURCurrency_swiginit(self, _quantlib_risks.new_MURCurrency())
    __swig_destroy__ = _quantlib_risks.delete_MURCurrency

# Register MURCurrency in _quantlib_risks:
_quantlib_risks.MURCurrency_swigregister(MURCurrency)
class MXNCurrency(Currency):
    r"""Proxy of C++ QuantLib::MXNCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(MXNCurrency self) -> MXNCurrency"""
        _quantlib_risks.MXNCurrency_swiginit(self, _quantlib_risks.new_MXNCurrency())
    __swig_destroy__ = _quantlib_risks.delete_MXNCurrency

# Register MXNCurrency in _quantlib_risks:
_quantlib_risks.MXNCurrency_swigregister(MXNCurrency)
class MXVCurrency(Currency):
    r"""Proxy of C++ QuantLib::MXVCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(MXVCurrency self) -> MXVCurrency"""
        _quantlib_risks.MXVCurrency_swiginit(self, _quantlib_risks.new_MXVCurrency())
    __swig_destroy__ = _quantlib_risks.delete_MXVCurrency

# Register MXVCurrency in _quantlib_risks:
_quantlib_risks.MXVCurrency_swigregister(MXVCurrency)
class MYRCurrency(Currency):
    r"""Proxy of C++ QuantLib::MYRCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(MYRCurrency self) -> MYRCurrency"""
        _quantlib_risks.MYRCurrency_swiginit(self, _quantlib_risks.new_MYRCurrency())
    __swig_destroy__ = _quantlib_risks.delete_MYRCurrency

# Register MYRCurrency in _quantlib_risks:
_quantlib_risks.MYRCurrency_swigregister(MYRCurrency)
class NGNCurrency(Currency):
    r"""Proxy of C++ QuantLib::NGNCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(NGNCurrency self) -> NGNCurrency"""
        _quantlib_risks.NGNCurrency_swiginit(self, _quantlib_risks.new_NGNCurrency())
    __swig_destroy__ = _quantlib_risks.delete_NGNCurrency

# Register NGNCurrency in _quantlib_risks:
_quantlib_risks.NGNCurrency_swigregister(NGNCurrency)
class NLGCurrency(Currency):
    r"""Proxy of C++ QuantLib::NLGCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(NLGCurrency self) -> NLGCurrency"""
        _quantlib_risks.NLGCurrency_swiginit(self, _quantlib_risks.new_NLGCurrency())
    __swig_destroy__ = _quantlib_risks.delete_NLGCurrency

# Register NLGCurrency in _quantlib_risks:
_quantlib_risks.NLGCurrency_swigregister(NLGCurrency)
class NOKCurrency(Currency):
    r"""Proxy of C++ QuantLib::NOKCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(NOKCurrency self) -> NOKCurrency"""
        _quantlib_risks.NOKCurrency_swiginit(self, _quantlib_risks.new_NOKCurrency())
    __swig_destroy__ = _quantlib_risks.delete_NOKCurrency

# Register NOKCurrency in _quantlib_risks:
_quantlib_risks.NOKCurrency_swigregister(NOKCurrency)
class NPRCurrency(Currency):
    r"""Proxy of C++ QuantLib::NPRCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(NPRCurrency self) -> NPRCurrency"""
        _quantlib_risks.NPRCurrency_swiginit(self, _quantlib_risks.new_NPRCurrency())
    __swig_destroy__ = _quantlib_risks.delete_NPRCurrency

# Register NPRCurrency in _quantlib_risks:
_quantlib_risks.NPRCurrency_swigregister(NPRCurrency)
class NZDCurrency(Currency):
    r"""Proxy of C++ QuantLib::NZDCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(NZDCurrency self) -> NZDCurrency"""
        _quantlib_risks.NZDCurrency_swiginit(self, _quantlib_risks.new_NZDCurrency())
    __swig_destroy__ = _quantlib_risks.delete_NZDCurrency

# Register NZDCurrency in _quantlib_risks:
_quantlib_risks.NZDCurrency_swigregister(NZDCurrency)
class OMRCurrency(Currency):
    r"""Proxy of C++ QuantLib::OMRCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(OMRCurrency self) -> OMRCurrency"""
        _quantlib_risks.OMRCurrency_swiginit(self, _quantlib_risks.new_OMRCurrency())
    __swig_destroy__ = _quantlib_risks.delete_OMRCurrency

# Register OMRCurrency in _quantlib_risks:
_quantlib_risks.OMRCurrency_swigregister(OMRCurrency)
class PEHCurrency(Currency):
    r"""Proxy of C++ QuantLib::PEHCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PEHCurrency self) -> PEHCurrency"""
        _quantlib_risks.PEHCurrency_swiginit(self, _quantlib_risks.new_PEHCurrency())
    __swig_destroy__ = _quantlib_risks.delete_PEHCurrency

# Register PEHCurrency in _quantlib_risks:
_quantlib_risks.PEHCurrency_swigregister(PEHCurrency)
class PEICurrency(Currency):
    r"""Proxy of C++ QuantLib::PEICurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PEICurrency self) -> PEICurrency"""
        _quantlib_risks.PEICurrency_swiginit(self, _quantlib_risks.new_PEICurrency())
    __swig_destroy__ = _quantlib_risks.delete_PEICurrency

# Register PEICurrency in _quantlib_risks:
_quantlib_risks.PEICurrency_swigregister(PEICurrency)
class PENCurrency(Currency):
    r"""Proxy of C++ QuantLib::PENCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PENCurrency self) -> PENCurrency"""
        _quantlib_risks.PENCurrency_swiginit(self, _quantlib_risks.new_PENCurrency())
    __swig_destroy__ = _quantlib_risks.delete_PENCurrency

# Register PENCurrency in _quantlib_risks:
_quantlib_risks.PENCurrency_swigregister(PENCurrency)
class PHPCurrency(Currency):
    r"""Proxy of C++ QuantLib::PHPCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PHPCurrency self) -> PHPCurrency"""
        _quantlib_risks.PHPCurrency_swiginit(self, _quantlib_risks.new_PHPCurrency())
    __swig_destroy__ = _quantlib_risks.delete_PHPCurrency

# Register PHPCurrency in _quantlib_risks:
_quantlib_risks.PHPCurrency_swigregister(PHPCurrency)
class PKRCurrency(Currency):
    r"""Proxy of C++ QuantLib::PKRCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PKRCurrency self) -> PKRCurrency"""
        _quantlib_risks.PKRCurrency_swiginit(self, _quantlib_risks.new_PKRCurrency())
    __swig_destroy__ = _quantlib_risks.delete_PKRCurrency

# Register PKRCurrency in _quantlib_risks:
_quantlib_risks.PKRCurrency_swigregister(PKRCurrency)
class PLNCurrency(Currency):
    r"""Proxy of C++ QuantLib::PLNCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PLNCurrency self) -> PLNCurrency"""
        _quantlib_risks.PLNCurrency_swiginit(self, _quantlib_risks.new_PLNCurrency())
    __swig_destroy__ = _quantlib_risks.delete_PLNCurrency

# Register PLNCurrency in _quantlib_risks:
_quantlib_risks.PLNCurrency_swigregister(PLNCurrency)
class PTECurrency(Currency):
    r"""Proxy of C++ QuantLib::PTECurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PTECurrency self) -> PTECurrency"""
        _quantlib_risks.PTECurrency_swiginit(self, _quantlib_risks.new_PTECurrency())
    __swig_destroy__ = _quantlib_risks.delete_PTECurrency

# Register PTECurrency in _quantlib_risks:
_quantlib_risks.PTECurrency_swigregister(PTECurrency)
class QARCurrency(Currency):
    r"""Proxy of C++ QuantLib::QARCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(QARCurrency self) -> QARCurrency"""
        _quantlib_risks.QARCurrency_swiginit(self, _quantlib_risks.new_QARCurrency())
    __swig_destroy__ = _quantlib_risks.delete_QARCurrency

# Register QARCurrency in _quantlib_risks:
_quantlib_risks.QARCurrency_swigregister(QARCurrency)
class ROLCurrency(Currency):
    r"""Proxy of C++ QuantLib::ROLCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ROLCurrency self) -> ROLCurrency"""
        _quantlib_risks.ROLCurrency_swiginit(self, _quantlib_risks.new_ROLCurrency())
    __swig_destroy__ = _quantlib_risks.delete_ROLCurrency

# Register ROLCurrency in _quantlib_risks:
_quantlib_risks.ROLCurrency_swigregister(ROLCurrency)
class RONCurrency(Currency):
    r"""Proxy of C++ QuantLib::RONCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(RONCurrency self) -> RONCurrency"""
        _quantlib_risks.RONCurrency_swiginit(self, _quantlib_risks.new_RONCurrency())
    __swig_destroy__ = _quantlib_risks.delete_RONCurrency

# Register RONCurrency in _quantlib_risks:
_quantlib_risks.RONCurrency_swigregister(RONCurrency)
class RSDCurrency(Currency):
    r"""Proxy of C++ QuantLib::RSDCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(RSDCurrency self) -> RSDCurrency"""
        _quantlib_risks.RSDCurrency_swiginit(self, _quantlib_risks.new_RSDCurrency())
    __swig_destroy__ = _quantlib_risks.delete_RSDCurrency

# Register RSDCurrency in _quantlib_risks:
_quantlib_risks.RSDCurrency_swigregister(RSDCurrency)
class RUBCurrency(Currency):
    r"""Proxy of C++ QuantLib::RUBCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(RUBCurrency self) -> RUBCurrency"""
        _quantlib_risks.RUBCurrency_swiginit(self, _quantlib_risks.new_RUBCurrency())
    __swig_destroy__ = _quantlib_risks.delete_RUBCurrency

# Register RUBCurrency in _quantlib_risks:
_quantlib_risks.RUBCurrency_swigregister(RUBCurrency)
class SARCurrency(Currency):
    r"""Proxy of C++ QuantLib::SARCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SARCurrency self) -> SARCurrency"""
        _quantlib_risks.SARCurrency_swiginit(self, _quantlib_risks.new_SARCurrency())
    __swig_destroy__ = _quantlib_risks.delete_SARCurrency

# Register SARCurrency in _quantlib_risks:
_quantlib_risks.SARCurrency_swigregister(SARCurrency)
class SEKCurrency(Currency):
    r"""Proxy of C++ QuantLib::SEKCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SEKCurrency self) -> SEKCurrency"""
        _quantlib_risks.SEKCurrency_swiginit(self, _quantlib_risks.new_SEKCurrency())
    __swig_destroy__ = _quantlib_risks.delete_SEKCurrency

# Register SEKCurrency in _quantlib_risks:
_quantlib_risks.SEKCurrency_swigregister(SEKCurrency)
class SGDCurrency(Currency):
    r"""Proxy of C++ QuantLib::SGDCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SGDCurrency self) -> SGDCurrency"""
        _quantlib_risks.SGDCurrency_swiginit(self, _quantlib_risks.new_SGDCurrency())
    __swig_destroy__ = _quantlib_risks.delete_SGDCurrency

# Register SGDCurrency in _quantlib_risks:
_quantlib_risks.SGDCurrency_swigregister(SGDCurrency)
class SITCurrency(Currency):
    r"""Proxy of C++ QuantLib::SITCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SITCurrency self) -> SITCurrency"""
        _quantlib_risks.SITCurrency_swiginit(self, _quantlib_risks.new_SITCurrency())
    __swig_destroy__ = _quantlib_risks.delete_SITCurrency

# Register SITCurrency in _quantlib_risks:
_quantlib_risks.SITCurrency_swigregister(SITCurrency)
class SKKCurrency(Currency):
    r"""Proxy of C++ QuantLib::SKKCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SKKCurrency self) -> SKKCurrency"""
        _quantlib_risks.SKKCurrency_swiginit(self, _quantlib_risks.new_SKKCurrency())
    __swig_destroy__ = _quantlib_risks.delete_SKKCurrency

# Register SKKCurrency in _quantlib_risks:
_quantlib_risks.SKKCurrency_swigregister(SKKCurrency)
class THBCurrency(Currency):
    r"""Proxy of C++ QuantLib::THBCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(THBCurrency self) -> THBCurrency"""
        _quantlib_risks.THBCurrency_swiginit(self, _quantlib_risks.new_THBCurrency())
    __swig_destroy__ = _quantlib_risks.delete_THBCurrency

# Register THBCurrency in _quantlib_risks:
_quantlib_risks.THBCurrency_swigregister(THBCurrency)
class TNDCurrency(Currency):
    r"""Proxy of C++ QuantLib::TNDCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TNDCurrency self) -> TNDCurrency"""
        _quantlib_risks.TNDCurrency_swiginit(self, _quantlib_risks.new_TNDCurrency())
    __swig_destroy__ = _quantlib_risks.delete_TNDCurrency

# Register TNDCurrency in _quantlib_risks:
_quantlib_risks.TNDCurrency_swigregister(TNDCurrency)
class TRLCurrency(Currency):
    r"""Proxy of C++ QuantLib::TRLCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TRLCurrency self) -> TRLCurrency"""
        _quantlib_risks.TRLCurrency_swiginit(self, _quantlib_risks.new_TRLCurrency())
    __swig_destroy__ = _quantlib_risks.delete_TRLCurrency

# Register TRLCurrency in _quantlib_risks:
_quantlib_risks.TRLCurrency_swigregister(TRLCurrency)
class TRYCurrency(Currency):
    r"""Proxy of C++ QuantLib::TRYCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TRYCurrency self) -> TRYCurrency"""
        _quantlib_risks.TRYCurrency_swiginit(self, _quantlib_risks.new_TRYCurrency())
    __swig_destroy__ = _quantlib_risks.delete_TRYCurrency

# Register TRYCurrency in _quantlib_risks:
_quantlib_risks.TRYCurrency_swigregister(TRYCurrency)
class TTDCurrency(Currency):
    r"""Proxy of C++ QuantLib::TTDCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TTDCurrency self) -> TTDCurrency"""
        _quantlib_risks.TTDCurrency_swiginit(self, _quantlib_risks.new_TTDCurrency())
    __swig_destroy__ = _quantlib_risks.delete_TTDCurrency

# Register TTDCurrency in _quantlib_risks:
_quantlib_risks.TTDCurrency_swigregister(TTDCurrency)
class TWDCurrency(Currency):
    r"""Proxy of C++ QuantLib::TWDCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TWDCurrency self) -> TWDCurrency"""
        _quantlib_risks.TWDCurrency_swiginit(self, _quantlib_risks.new_TWDCurrency())
    __swig_destroy__ = _quantlib_risks.delete_TWDCurrency

# Register TWDCurrency in _quantlib_risks:
_quantlib_risks.TWDCurrency_swigregister(TWDCurrency)
class UAHCurrency(Currency):
    r"""Proxy of C++ QuantLib::UAHCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(UAHCurrency self) -> UAHCurrency"""
        _quantlib_risks.UAHCurrency_swiginit(self, _quantlib_risks.new_UAHCurrency())
    __swig_destroy__ = _quantlib_risks.delete_UAHCurrency

# Register UAHCurrency in _quantlib_risks:
_quantlib_risks.UAHCurrency_swigregister(UAHCurrency)
class UGXCurrency(Currency):
    r"""Proxy of C++ QuantLib::UGXCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(UGXCurrency self) -> UGXCurrency"""
        _quantlib_risks.UGXCurrency_swiginit(self, _quantlib_risks.new_UGXCurrency())
    __swig_destroy__ = _quantlib_risks.delete_UGXCurrency

# Register UGXCurrency in _quantlib_risks:
_quantlib_risks.UGXCurrency_swigregister(UGXCurrency)
class USDCurrency(Currency):
    r"""Proxy of C++ QuantLib::USDCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(USDCurrency self) -> USDCurrency"""
        _quantlib_risks.USDCurrency_swiginit(self, _quantlib_risks.new_USDCurrency())
    __swig_destroy__ = _quantlib_risks.delete_USDCurrency

# Register USDCurrency in _quantlib_risks:
_quantlib_risks.USDCurrency_swigregister(USDCurrency)
class UYUCurrency(Currency):
    r"""Proxy of C++ QuantLib::UYUCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(UYUCurrency self) -> UYUCurrency"""
        _quantlib_risks.UYUCurrency_swiginit(self, _quantlib_risks.new_UYUCurrency())
    __swig_destroy__ = _quantlib_risks.delete_UYUCurrency

# Register UYUCurrency in _quantlib_risks:
_quantlib_risks.UYUCurrency_swigregister(UYUCurrency)
class VEBCurrency(Currency):
    r"""Proxy of C++ QuantLib::VEBCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(VEBCurrency self) -> VEBCurrency"""
        _quantlib_risks.VEBCurrency_swiginit(self, _quantlib_risks.new_VEBCurrency())
    __swig_destroy__ = _quantlib_risks.delete_VEBCurrency

# Register VEBCurrency in _quantlib_risks:
_quantlib_risks.VEBCurrency_swigregister(VEBCurrency)
class VNDCurrency(Currency):
    r"""Proxy of C++ QuantLib::VNDCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(VNDCurrency self) -> VNDCurrency"""
        _quantlib_risks.VNDCurrency_swiginit(self, _quantlib_risks.new_VNDCurrency())
    __swig_destroy__ = _quantlib_risks.delete_VNDCurrency

# Register VNDCurrency in _quantlib_risks:
_quantlib_risks.VNDCurrency_swigregister(VNDCurrency)
class XOFCurrency(Currency):
    r"""Proxy of C++ QuantLib::XOFCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(XOFCurrency self) -> XOFCurrency"""
        _quantlib_risks.XOFCurrency_swiginit(self, _quantlib_risks.new_XOFCurrency())
    __swig_destroy__ = _quantlib_risks.delete_XOFCurrency

# Register XOFCurrency in _quantlib_risks:
_quantlib_risks.XOFCurrency_swigregister(XOFCurrency)
class ZARCurrency(Currency):
    r"""Proxy of C++ QuantLib::ZARCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ZARCurrency self) -> ZARCurrency"""
        _quantlib_risks.ZARCurrency_swiginit(self, _quantlib_risks.new_ZARCurrency())
    __swig_destroy__ = _quantlib_risks.delete_ZARCurrency

# Register ZARCurrency in _quantlib_risks:
_quantlib_risks.ZARCurrency_swigregister(ZARCurrency)
class ZMWCurrency(Currency):
    r"""Proxy of C++ QuantLib::ZMWCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ZMWCurrency self) -> ZMWCurrency"""
        _quantlib_risks.ZMWCurrency_swiginit(self, _quantlib_risks.new_ZMWCurrency())
    __swig_destroy__ = _quantlib_risks.delete_ZMWCurrency

# Register ZMWCurrency in _quantlib_risks:
_quantlib_risks.ZMWCurrency_swigregister(ZMWCurrency)
class BCHCurrency(Currency):
    r"""Proxy of C++ QuantLib::BCHCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(BCHCurrency self) -> BCHCurrency"""
        _quantlib_risks.BCHCurrency_swiginit(self, _quantlib_risks.new_BCHCurrency())
    __swig_destroy__ = _quantlib_risks.delete_BCHCurrency

# Register BCHCurrency in _quantlib_risks:
_quantlib_risks.BCHCurrency_swigregister(BCHCurrency)
class BTCCurrency(Currency):
    r"""Proxy of C++ QuantLib::BTCCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(BTCCurrency self) -> BTCCurrency"""
        _quantlib_risks.BTCCurrency_swiginit(self, _quantlib_risks.new_BTCCurrency())
    __swig_destroy__ = _quantlib_risks.delete_BTCCurrency

# Register BTCCurrency in _quantlib_risks:
_quantlib_risks.BTCCurrency_swigregister(BTCCurrency)
class DASHCurrency(Currency):
    r"""Proxy of C++ QuantLib::DASHCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DASHCurrency self) -> DASHCurrency"""
        _quantlib_risks.DASHCurrency_swiginit(self, _quantlib_risks.new_DASHCurrency())
    __swig_destroy__ = _quantlib_risks.delete_DASHCurrency

# Register DASHCurrency in _quantlib_risks:
_quantlib_risks.DASHCurrency_swigregister(DASHCurrency)
class ETCCurrency(Currency):
    r"""Proxy of C++ QuantLib::ETCCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ETCCurrency self) -> ETCCurrency"""
        _quantlib_risks.ETCCurrency_swiginit(self, _quantlib_risks.new_ETCCurrency())
    __swig_destroy__ = _quantlib_risks.delete_ETCCurrency

# Register ETCCurrency in _quantlib_risks:
_quantlib_risks.ETCCurrency_swigregister(ETCCurrency)
class ETHCurrency(Currency):
    r"""Proxy of C++ QuantLib::ETHCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ETHCurrency self) -> ETHCurrency"""
        _quantlib_risks.ETHCurrency_swiginit(self, _quantlib_risks.new_ETHCurrency())
    __swig_destroy__ = _quantlib_risks.delete_ETHCurrency

# Register ETHCurrency in _quantlib_risks:
_quantlib_risks.ETHCurrency_swigregister(ETHCurrency)
class LTCCurrency(Currency):
    r"""Proxy of C++ QuantLib::LTCCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(LTCCurrency self) -> LTCCurrency"""
        _quantlib_risks.LTCCurrency_swiginit(self, _quantlib_risks.new_LTCCurrency())
    __swig_destroy__ = _quantlib_risks.delete_LTCCurrency

# Register LTCCurrency in _quantlib_risks:
_quantlib_risks.LTCCurrency_swigregister(LTCCurrency)
class XRPCurrency(Currency):
    r"""Proxy of C++ QuantLib::XRPCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(XRPCurrency self) -> XRPCurrency"""
        _quantlib_risks.XRPCurrency_swiginit(self, _quantlib_risks.new_XRPCurrency())
    __swig_destroy__ = _quantlib_risks.delete_XRPCurrency

# Register XRPCurrency in _quantlib_risks:
_quantlib_risks.XRPCurrency_swigregister(XRPCurrency)
class ZECCurrency(Currency):
    r"""Proxy of C++ QuantLib::ZECCurrency class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ZECCurrency self) -> ZECCurrency"""
        _quantlib_risks.ZECCurrency_swiginit(self, _quantlib_risks.new_ZECCurrency())
    __swig_destroy__ = _quantlib_risks.delete_ZECCurrency

# Register ZECCurrency in _quantlib_risks:
_quantlib_risks.ZECCurrency_swigregister(ZECCurrency)
Simple = _quantlib_risks.Simple

Compounded = _quantlib_risks.Compounded

Continuous = _quantlib_risks.Continuous

SimpleThenCompounded = _quantlib_risks.SimpleThenCompounded

CompoundedThenSimple = _quantlib_risks.CompoundedThenSimple

class InterestRate(object):
    r"""Proxy of C++ InterestRate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InterestRate self) -> InterestRate
        __init__(InterestRate self, Rate r, DayCounter dc, Compounding comp, Frequency freq) -> InterestRate
        """
        _quantlib_risks.InterestRate_swiginit(self, _quantlib_risks.new_InterestRate(*args))

    def rate(self):
        r"""rate(InterestRate self) -> Rate"""
        return _quantlib_risks.InterestRate_rate(self)

    def dayCounter(self):
        r"""dayCounter(InterestRate self) -> DayCounter"""
        return _quantlib_risks.InterestRate_dayCounter(self)

    def compounding(self):
        r"""compounding(InterestRate self) -> Compounding"""
        return _quantlib_risks.InterestRate_compounding(self)

    def frequency(self):
        r"""frequency(InterestRate self) -> Frequency"""
        return _quantlib_risks.InterestRate_frequency(self)

    def discountFactor(self, *args):
        r"""
        discountFactor(InterestRate self, Time t) -> DiscountFactor
        discountFactor(InterestRate self, Date d1, Date d2, Date refStart=Date(), Date refEnd=Date()) -> DiscountFactor
        """
        return _quantlib_risks.InterestRate_discountFactor(self, *args)

    def compoundFactor(self, *args):
        r"""
        compoundFactor(InterestRate self, Time t) -> Real
        compoundFactor(InterestRate self, Date d1, Date d2, Date refStart=Date(), Date refEnd=Date()) -> Real
        """
        return _quantlib_risks.InterestRate_compoundFactor(self, *args)

    @staticmethod
    def impliedRate(*args):
        r"""
        impliedRate(Real compound, DayCounter resultDC, Compounding comp, Frequency freq, Time t) -> InterestRate
        impliedRate(Real compound, DayCounter resultDC, Compounding comp, Frequency freq, Date d1, Date d2, Date refStart=Date(), Date refEnd=Date()) -> InterestRate
        """
        return _quantlib_risks.InterestRate_impliedRate(*args)

    def equivalentRate(self, *args):
        r"""
        equivalentRate(InterestRate self, Compounding comp, Frequency freq, Time t) -> InterestRate
        equivalentRate(InterestRate self, DayCounter resultDayCounter, Compounding comp, Frequency freq, Date d1, Date d2, Date refStart=Date(), Date refEnd=Date()) -> InterestRate
        """
        return _quantlib_risks.InterestRate_equivalentRate(self, *args)

    def __str__(self):
        r"""__str__(InterestRate self) -> std::string"""
        return _quantlib_risks.InterestRate___str__(self)
    __swig_destroy__ = _quantlib_risks.delete_InterestRate

# Register InterestRate in _quantlib_risks:
_quantlib_risks.InterestRate_swigregister(InterestRate)
class InterestRateVector(object):
    r"""Proxy of C++ std::vector< InterestRate > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(InterestRateVector self) -> SwigPyIterator"""
        return _quantlib_risks.InterestRateVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(InterestRateVector self) -> bool"""
        return _quantlib_risks.InterestRateVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(InterestRateVector self) -> bool"""
        return _quantlib_risks.InterestRateVector___bool__(self)

    def __len__(self):
        r"""__len__(InterestRateVector self) -> std::vector< InterestRate >::size_type"""
        return _quantlib_risks.InterestRateVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(InterestRateVector self, std::vector< InterestRate >::difference_type i, std::vector< InterestRate >::difference_type j) -> InterestRateVector"""
        return _quantlib_risks.InterestRateVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(InterestRateVector self, std::vector< InterestRate >::difference_type i, std::vector< InterestRate >::difference_type j)
        __setslice__(InterestRateVector self, std::vector< InterestRate >::difference_type i, std::vector< InterestRate >::difference_type j, InterestRateVector v)
        """
        return _quantlib_risks.InterestRateVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(InterestRateVector self, std::vector< InterestRate >::difference_type i, std::vector< InterestRate >::difference_type j)"""
        return _quantlib_risks.InterestRateVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(InterestRateVector self, std::vector< InterestRate >::difference_type i)
        __delitem__(InterestRateVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.InterestRateVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(InterestRateVector self, SWIGPY_SLICEOBJECT * slice) -> InterestRateVector
        __getitem__(InterestRateVector self, std::vector< InterestRate >::difference_type i) -> InterestRate
        """
        return _quantlib_risks.InterestRateVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(InterestRateVector self, SWIGPY_SLICEOBJECT * slice, InterestRateVector v)
        __setitem__(InterestRateVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(InterestRateVector self, std::vector< InterestRate >::difference_type i, InterestRate x)
        """
        return _quantlib_risks.InterestRateVector___setitem__(self, *args)

    def pop(self):
        r"""pop(InterestRateVector self) -> InterestRate"""
        return _quantlib_risks.InterestRateVector_pop(self)

    def append(self, x):
        r"""append(InterestRateVector self, InterestRate x)"""
        return _quantlib_risks.InterestRateVector_append(self, x)

    def empty(self):
        r"""empty(InterestRateVector self) -> bool"""
        return _quantlib_risks.InterestRateVector_empty(self)

    def size(self):
        r"""size(InterestRateVector self) -> std::vector< InterestRate >::size_type"""
        return _quantlib_risks.InterestRateVector_size(self)

    def swap(self, v):
        r"""swap(InterestRateVector self, InterestRateVector v)"""
        return _quantlib_risks.InterestRateVector_swap(self, v)

    def begin(self):
        r"""begin(InterestRateVector self) -> std::vector< InterestRate >::iterator"""
        return _quantlib_risks.InterestRateVector_begin(self)

    def end(self):
        r"""end(InterestRateVector self) -> std::vector< InterestRate >::iterator"""
        return _quantlib_risks.InterestRateVector_end(self)

    def rbegin(self):
        r"""rbegin(InterestRateVector self) -> std::vector< InterestRate >::reverse_iterator"""
        return _quantlib_risks.InterestRateVector_rbegin(self)

    def rend(self):
        r"""rend(InterestRateVector self) -> std::vector< InterestRate >::reverse_iterator"""
        return _quantlib_risks.InterestRateVector_rend(self)

    def clear(self):
        r"""clear(InterestRateVector self)"""
        return _quantlib_risks.InterestRateVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(InterestRateVector self) -> std::vector< InterestRate >::allocator_type"""
        return _quantlib_risks.InterestRateVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(InterestRateVector self)"""
        return _quantlib_risks.InterestRateVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(InterestRateVector self, std::vector< InterestRate >::iterator pos) -> std::vector< InterestRate >::iterator
        erase(InterestRateVector self, std::vector< InterestRate >::iterator first, std::vector< InterestRate >::iterator last) -> std::vector< InterestRate >::iterator
        """
        return _quantlib_risks.InterestRateVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(InterestRateVector self) -> InterestRateVector
        __init__(InterestRateVector self, InterestRateVector other) -> InterestRateVector
        __init__(InterestRateVector self, std::vector< InterestRate >::size_type size) -> InterestRateVector
        __init__(InterestRateVector self, std::vector< InterestRate >::size_type size, InterestRate value) -> InterestRateVector
        """
        _quantlib_risks.InterestRateVector_swiginit(self, _quantlib_risks.new_InterestRateVector(*args))

    def push_back(self, x):
        r"""push_back(InterestRateVector self, InterestRate x)"""
        return _quantlib_risks.InterestRateVector_push_back(self, x)

    def front(self):
        r"""front(InterestRateVector self) -> InterestRate"""
        return _quantlib_risks.InterestRateVector_front(self)

    def back(self):
        r"""back(InterestRateVector self) -> InterestRate"""
        return _quantlib_risks.InterestRateVector_back(self)

    def assign(self, n, x):
        r"""assign(InterestRateVector self, std::vector< InterestRate >::size_type n, InterestRate x)"""
        return _quantlib_risks.InterestRateVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(InterestRateVector self, std::vector< InterestRate >::size_type new_size)
        resize(InterestRateVector self, std::vector< InterestRate >::size_type new_size, InterestRate x)
        """
        return _quantlib_risks.InterestRateVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(InterestRateVector self, std::vector< InterestRate >::iterator pos, InterestRate x) -> std::vector< InterestRate >::iterator
        insert(InterestRateVector self, std::vector< InterestRate >::iterator pos, std::vector< InterestRate >::size_type n, InterestRate x)
        """
        return _quantlib_risks.InterestRateVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(InterestRateVector self, std::vector< InterestRate >::size_type n)"""
        return _quantlib_risks.InterestRateVector_reserve(self, n)

    def capacity(self):
        r"""capacity(InterestRateVector self) -> std::vector< InterestRate >::size_type"""
        return _quantlib_risks.InterestRateVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_InterestRateVector

# Register InterestRateVector in _quantlib_risks:
_quantlib_risks.InterestRateVector_swigregister(InterestRateVector)
class Observable(object):
    r"""Proxy of C++ Observable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Observable self) -> Observable"""
        _quantlib_risks.Observable_swiginit(self, _quantlib_risks.new_Observable())
    __swig_destroy__ = _quantlib_risks.delete_Observable

# Register Observable in _quantlib_risks:
_quantlib_risks.Observable_swigregister(Observable)
class Observer(object):
    r"""Proxy of C++ PyObserver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, callback):
        r"""__init__(Observer self, PyObject * callback) -> Observer"""
        _quantlib_risks.Observer_swiginit(self, _quantlib_risks.new_Observer(callback))

    def _registerWith(self, arg2):
        r"""_registerWith(Observer self, ext::shared_ptr< Observable > const & arg2)"""
        return _quantlib_risks.Observer__registerWith(self, arg2)

    def _unregisterWith(self, arg2):
        r"""_unregisterWith(Observer self, ext::shared_ptr< Observable > const & arg2)"""
        return _quantlib_risks.Observer__unregisterWith(self, arg2)

    def registerWith(self,x):
        if hasattr(x, "asObservable"):
            self._registerWith(x.asObservable())
        else:
            self._registerWith(x)
    def unregisterWith(self,x):
        if hasattr(x, "asObservable"):
            self._unregisterWith(x.asObservable())
        else:
            self._unregisterWith(x)

    __swig_destroy__ = _quantlib_risks.delete_Observer

# Register Observer in _quantlib_risks:
_quantlib_risks.Observer_swigregister(Observer)
class Array(object):
    r"""Proxy of C++ Array class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Array self) -> Array
        __init__(Array self, Size n, Real fill=0.0) -> Array
        __init__(Array self, Array arg2) -> Array
        """
        _quantlib_risks.Array_swiginit(self, _quantlib_risks.new_Array(*args))

    def __len__(self):
        r"""__len__(Array self) -> Size"""
        return _quantlib_risks.Array___len__(self)

    def __str__(self):
        r"""__str__(Array self) -> std::string"""
        return _quantlib_risks.Array___str__(self)

    def __add__(self, a):
        r"""__add__(Array self, Array a) -> Array"""
        return _quantlib_risks.Array___add__(self, a)

    def __sub__(self, a):
        r"""__sub__(Array self, Array a) -> Array"""
        return _quantlib_risks.Array___sub__(self, a)

    def __mul__(self, *args):
        r"""
        __mul__(Array self, Real a) -> Array
        __mul__(Array self, Array a) -> Real
        __mul__(Array self, Matrix a) -> Array
        """
        return _quantlib_risks.Array___mul__(self, *args)

    def __div__(self, a):
        r"""__div__(Array self, Real a) -> Array"""
        return _quantlib_risks.Array___div__(self, a)

    def __rmul__(self, a):
        r"""__rmul__(Array self, Real a) -> Array"""
        return _quantlib_risks.Array___rmul__(self, a)

    def __getslice__(self, i, j):
        r"""__getslice__(Array self, Integer i, Integer j) -> Array"""
        return _quantlib_risks.Array___getslice__(self, i, j)

    def __setslice__(self, i, j, rhs):
        r"""__setslice__(Array self, Integer i, Integer j, Array rhs)"""
        return _quantlib_risks.Array___setslice__(self, i, j, rhs)

    def __nonzero__(self):
        r"""__nonzero__(Array self) -> bool"""
        return _quantlib_risks.Array___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Array self) -> bool"""
        return _quantlib_risks.Array___bool__(self)

    def __getitem__(self, i):
        r"""__getitem__(Array self, Integer i) -> Real"""
        return _quantlib_risks.Array___getitem__(self, i)

    def __setitem__(self, i, x):
        r"""__setitem__(Array self, Integer i, Real x)"""
        return _quantlib_risks.Array___setitem__(self, i, x)
    __swig_destroy__ = _quantlib_risks.delete_Array

# Register Array in _quantlib_risks:
_quantlib_risks.Array_swigregister(Array)
class MatrixRow(object):
    r"""Proxy of C++ MatrixRow class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __getitem__(self, i):
        r"""__getitem__(MatrixRow self, Integer i) -> Real"""
        return _quantlib_risks.MatrixRow___getitem__(self, i)

    def __setitem__(self, i, x):
        r"""__setitem__(MatrixRow self, Integer i, Real x)"""
        return _quantlib_risks.MatrixRow___setitem__(self, i, x)
    __swig_destroy__ = _quantlib_risks.delete_MatrixRow

# Register MatrixRow in _quantlib_risks:
_quantlib_risks.MatrixRow_swigregister(MatrixRow)
class Matrix(object):
    r"""Proxy of C++ Matrix class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Matrix self) -> Matrix
        __init__(Matrix self, Size rows, Size columns, Real fill=0.0) -> Matrix
        __init__(Matrix self, Matrix arg2) -> Matrix
        """
        _quantlib_risks.Matrix_swiginit(self, _quantlib_risks.new_Matrix(*args))

    def rows(self):
        r"""rows(Matrix self) -> Size"""
        return _quantlib_risks.Matrix_rows(self)

    def columns(self):
        r"""columns(Matrix self) -> Size"""
        return _quantlib_risks.Matrix_columns(self)

    def __str__(self):
        r"""__str__(Matrix self) -> std::string"""
        return _quantlib_risks.Matrix___str__(self)

    def __add__(self, m):
        r"""__add__(Matrix self, Matrix m) -> Matrix"""
        return _quantlib_risks.Matrix___add__(self, m)

    def __sub__(self, m):
        r"""__sub__(Matrix self, Matrix m) -> Matrix"""
        return _quantlib_risks.Matrix___sub__(self, m)

    def __mul__(self, *args):
        r"""
        __mul__(Matrix self, Real x) -> Matrix
        __mul__(Matrix self, Array x) -> Array
        __mul__(Matrix self, Matrix x) -> Matrix
        """
        return _quantlib_risks.Matrix___mul__(self, *args)

    def __div__(self, x):
        r"""__div__(Matrix self, Real x) -> Matrix"""
        return _quantlib_risks.Matrix___div__(self, x)

    def __getitem__(self, i):
        r"""__getitem__(Matrix self, Integer i) -> MatrixRow"""
        return _quantlib_risks.Matrix___getitem__(self, i)

    def __rmul__(self, *args):
        r"""
        __rmul__(Matrix self, Real x) -> Matrix
        __rmul__(Matrix self, Array x) -> Array
        __rmul__(Matrix self, Matrix x) -> Matrix
        """
        return _quantlib_risks.Matrix___rmul__(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_Matrix

# Register Matrix in _quantlib_risks:
_quantlib_risks.Matrix_swigregister(Matrix)
class SalvagingAlgorithm(object):
    r"""Proxy of C++ SalvagingAlgorithm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoAlgorithm = _quantlib_risks.SalvagingAlgorithm_NoAlgorithm
    
    Spectral = _quantlib_risks.SalvagingAlgorithm_Spectral
    

    def __init__(self):
        r"""__init__(SalvagingAlgorithm self) -> SalvagingAlgorithm"""
        _quantlib_risks.SalvagingAlgorithm_swiginit(self, _quantlib_risks.new_SalvagingAlgorithm())
    __swig_destroy__ = _quantlib_risks.delete_SalvagingAlgorithm

# Register SalvagingAlgorithm in _quantlib_risks:
_quantlib_risks.SalvagingAlgorithm_swigregister(SalvagingAlgorithm)

def inverse(m):
    r"""inverse(Matrix m) -> Matrix"""
    return _quantlib_risks.inverse(m)

def transpose(m):
    r"""transpose(Matrix m) -> Matrix"""
    return _quantlib_risks.transpose(m)

def outerProduct(v1, v2):
    r"""outerProduct(Array v1, Array v2) -> Matrix"""
    return _quantlib_risks.outerProduct(v1, v2)

def pseudoSqrt(m, a):
    r"""pseudoSqrt(Matrix m, SalvagingAlgorithm::Type a) -> Matrix"""
    return _quantlib_risks.pseudoSqrt(m, a)
class SVD(object):
    r"""Proxy of C++ SVD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2):
        r"""__init__(SVD self, Matrix arg2) -> SVD"""
        _quantlib_risks.SVD_swiginit(self, _quantlib_risks.new_SVD(arg2))

    def U(self):
        r"""U(SVD self) -> Matrix"""
        return _quantlib_risks.SVD_U(self)

    def V(self):
        r"""V(SVD self) -> Matrix"""
        return _quantlib_risks.SVD_V(self)

    def S(self):
        r"""S(SVD self) -> Matrix"""
        return _quantlib_risks.SVD_S(self)

    def singularValues(self):
        r"""singularValues(SVD self) -> Array"""
        return _quantlib_risks.SVD_singularValues(self)
    __swig_destroy__ = _quantlib_risks.delete_SVD

# Register SVD in _quantlib_risks:
_quantlib_risks.SVD_swigregister(SVD)
class MatrixMultiplicationProxy(object):
    r"""Proxy of C++ MatrixMultiplicationProxy class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, matrixMult):
        r"""__init__(MatrixMultiplicationProxy self, PyObject * matrixMult) -> MatrixMultiplicationProxy"""
        _quantlib_risks.MatrixMultiplicationProxy_swiginit(self, _quantlib_risks.new_MatrixMultiplicationProxy(matrixMult))

    def __call__(self, x):
        r"""__call__(MatrixMultiplicationProxy self, Array x) -> Array"""
        return _quantlib_risks.MatrixMultiplicationProxy___call__(self, x)
    __swig_destroy__ = _quantlib_risks.delete_MatrixMultiplicationProxy

# Register MatrixMultiplicationProxy in _quantlib_risks:
_quantlib_risks.MatrixMultiplicationProxy_swigregister(MatrixMultiplicationProxy)
class BiCGstab(object):
    r"""Proxy of C++ BiCGstab class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def solve(self, *args):
        r"""solve(BiCGstab self, Array b, Array x0=Array()) -> Array"""
        return _quantlib_risks.BiCGstab_solve(self, *args)

    def __init__(self, *args):
        r"""
        __init__(BiCGstab self, MatrixMultiplicationProxy proxy, Size maxIter, Real relTol) -> BiCGstab
        __init__(BiCGstab self, MatrixMultiplicationProxy proxy, Size maxIter, Real relTol, MatrixMultiplicationProxy preconditioner) -> BiCGstab
        """
        _quantlib_risks.BiCGstab_swiginit(self, _quantlib_risks.new_BiCGstab(*args))
    __swig_destroy__ = _quantlib_risks.delete_BiCGstab

# Register BiCGstab in _quantlib_risks:
_quantlib_risks.BiCGstab_swigregister(BiCGstab)
class GMRES(object):
    r"""Proxy of C++ GMRES class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def solve(self, *args):
        r"""solve(GMRES self, Array b, Array x0=Array()) -> Array"""
        return _quantlib_risks.GMRES_solve(self, *args)

    def solveWithRestart(self, *args):
        r"""solveWithRestart(GMRES self, Size restart, Array b, Array x0=Array()) -> Array"""
        return _quantlib_risks.GMRES_solveWithRestart(self, *args)

    def __init__(self, *args):
        r"""
        __init__(GMRES self, MatrixMultiplicationProxy proxy, Size maxIter, Real relTol) -> GMRES
        __init__(GMRES self, MatrixMultiplicationProxy proxy, Size maxIter, Real relTol, MatrixMultiplicationProxy preconditioner) -> GMRES
        """
        _quantlib_risks.GMRES_swiginit(self, _quantlib_risks.new_GMRES(*args))
    __swig_destroy__ = _quantlib_risks.delete_GMRES

# Register GMRES in _quantlib_risks:
_quantlib_risks.GMRES_swigregister(GMRES)

def close(*args):
    r"""
    close(Real x, Real y) -> bool
    close(Real x, Real y, Size n) -> bool
    """
    return _quantlib_risks.close(*args)

def close_enough(*args):
    r"""
    close_enough(Real x, Real y) -> bool
    close_enough(Real x, Real y, Size n) -> bool
    """
    return _quantlib_risks.close_enough(*args)
class Quote(Observable):
    r"""Proxy of C++ Quote class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self):
        r"""value(Quote self) -> Real"""
        return _quantlib_risks.Quote_value(self)

    def isValid(self):
        r"""isValid(Quote self) -> bool"""
        return _quantlib_risks.Quote_isValid(self)
    __swig_destroy__ = _quantlib_risks.delete_Quote

# Register Quote in _quantlib_risks:
_quantlib_risks.Quote_swigregister(Quote)
class QuoteHandle(object):
    r"""Proxy of C++ Handle< Quote > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(QuoteHandle self, ext::shared_ptr< Quote > const & arg2=ext::shared_ptr()) -> QuoteHandle"""
        _quantlib_risks.QuoteHandle_swiginit(self, _quantlib_risks.new_QuoteHandle(*args))

    def __deref__(self):
        r"""__deref__(QuoteHandle self) -> ext::shared_ptr< Quote >"""
        return _quantlib_risks.QuoteHandle___deref__(self)

    def currentLink(self):
        r"""currentLink(QuoteHandle self) -> ext::shared_ptr< Quote >"""
        return _quantlib_risks.QuoteHandle_currentLink(self)

    def __nonzero__(self):
        r"""__nonzero__(QuoteHandle self) -> bool"""
        return _quantlib_risks.QuoteHandle___nonzero__(self)

    def __bool__(self):
        r"""__bool__(QuoteHandle self) -> bool"""
        return _quantlib_risks.QuoteHandle___bool__(self)

    def asObservable(self):
        r"""asObservable(QuoteHandle self) -> ext::shared_ptr< Observable >"""
        return _quantlib_risks.QuoteHandle_asObservable(self)
    __swig_destroy__ = _quantlib_risks.delete_QuoteHandle

    def value(self):
        r"""value(QuoteHandle self) -> Real"""
        return _quantlib_risks.QuoteHandle_value(self)

    def isValid(self):
        r"""isValid(QuoteHandle self) -> bool"""
        return _quantlib_risks.QuoteHandle_isValid(self)

# Register QuoteHandle in _quantlib_risks:
_quantlib_risks.QuoteHandle_swigregister(QuoteHandle)
class RelinkableQuoteHandle(QuoteHandle):
    r"""Proxy of C++ RelinkableHandle< Quote > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(RelinkableQuoteHandle self, ext::shared_ptr< Quote > const & arg2=ext::shared_ptr()) -> RelinkableQuoteHandle"""
        _quantlib_risks.RelinkableQuoteHandle_swiginit(self, _quantlib_risks.new_RelinkableQuoteHandle(*args))

    def linkTo(self, arg2):
        r"""linkTo(RelinkableQuoteHandle self, ext::shared_ptr< Quote > const & arg2)"""
        return _quantlib_risks.RelinkableQuoteHandle_linkTo(self, arg2)

    def reset(self):
        r"""reset(RelinkableQuoteHandle self)"""
        return _quantlib_risks.RelinkableQuoteHandle_reset(self)
    __swig_destroy__ = _quantlib_risks.delete_RelinkableQuoteHandle

# Register RelinkableQuoteHandle in _quantlib_risks:
_quantlib_risks.RelinkableQuoteHandle_swigregister(RelinkableQuoteHandle)
class SimpleQuote(Quote):
    r"""Proxy of C++ SimpleQuote class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value):
        r"""__init__(SimpleQuote self, Real value) -> SimpleQuote"""
        _quantlib_risks.SimpleQuote_swiginit(self, _quantlib_risks.new_SimpleQuote(value))

    def setValue(self, value):
        r"""setValue(SimpleQuote self, Real value)"""
        return _quantlib_risks.SimpleQuote_setValue(self, value)
    __swig_destroy__ = _quantlib_risks.delete_SimpleQuote

# Register SimpleQuote in _quantlib_risks:
_quantlib_risks.SimpleQuote_swigregister(SimpleQuote)
class LastFixingQuote(Quote):
    r"""Proxy of C++ LastFixingQuote class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, index):
        r"""__init__(LastFixingQuote self, ext::shared_ptr< Index > index) -> LastFixingQuote"""
        _quantlib_risks.LastFixingQuote_swiginit(self, _quantlib_risks.new_LastFixingQuote(index))

    def index(self):
        r"""index(LastFixingQuote self) -> ext::shared_ptr< Index >"""
        return _quantlib_risks.LastFixingQuote_index(self)

    def referenceDate(self):
        r"""referenceDate(LastFixingQuote self) -> Date"""
        return _quantlib_risks.LastFixingQuote_referenceDate(self)
    __swig_destroy__ = _quantlib_risks.delete_LastFixingQuote

# Register LastFixingQuote in _quantlib_risks:
_quantlib_risks.LastFixingQuote_swigregister(LastFixingQuote)
class DerivedQuote(Quote):
    r"""
    Proxy of C++ DerivedQuote< UnaryFunction > class.
    Proxy of C++ DerivedQuote< UnaryFunction > class.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, h, function):
        r"""__init__(DerivedQuote self, QuoteHandle h, PyObject * function) -> DerivedQuote"""
        _quantlib_risks.DerivedQuote_swiginit(self, _quantlib_risks.new_DerivedQuote(h, function))
    __swig_destroy__ = _quantlib_risks.delete_DerivedQuote

# Register DerivedQuote in _quantlib_risks:
_quantlib_risks.DerivedQuote_swigregister(DerivedQuote)
class CompositeQuote(Quote):
    r"""
    Proxy of C++ CompositeQuote< BinaryFunction > class.
    Proxy of C++ CompositeQuote< BinaryFunction > class.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, h1, h2, function):
        r"""__init__(CompositeQuote self, QuoteHandle h1, QuoteHandle h2, PyObject * function) -> CompositeQuote"""
        _quantlib_risks.CompositeQuote_swiginit(self, _quantlib_risks.new_CompositeQuote(h1, h2, function))
    __swig_destroy__ = _quantlib_risks.delete_CompositeQuote

# Register CompositeQuote in _quantlib_risks:
_quantlib_risks.CompositeQuote_swigregister(CompositeQuote)
class QuoteVector(object):
    r"""Proxy of C++ std::vector< ext::shared_ptr< Quote > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(QuoteVector self) -> SwigPyIterator"""
        return _quantlib_risks.QuoteVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(QuoteVector self) -> bool"""
        return _quantlib_risks.QuoteVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(QuoteVector self) -> bool"""
        return _quantlib_risks.QuoteVector___bool__(self)

    def __len__(self):
        r"""__len__(QuoteVector self) -> std::vector< ext::shared_ptr< Quote > >::size_type"""
        return _quantlib_risks.QuoteVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(QuoteVector self, std::vector< ext::shared_ptr< Quote > >::difference_type i, std::vector< ext::shared_ptr< Quote > >::difference_type j) -> QuoteVector"""
        return _quantlib_risks.QuoteVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(QuoteVector self, std::vector< ext::shared_ptr< Quote > >::difference_type i, std::vector< ext::shared_ptr< Quote > >::difference_type j)
        __setslice__(QuoteVector self, std::vector< ext::shared_ptr< Quote > >::difference_type i, std::vector< ext::shared_ptr< Quote > >::difference_type j, QuoteVector v)
        """
        return _quantlib_risks.QuoteVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(QuoteVector self, std::vector< ext::shared_ptr< Quote > >::difference_type i, std::vector< ext::shared_ptr< Quote > >::difference_type j)"""
        return _quantlib_risks.QuoteVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(QuoteVector self, std::vector< ext::shared_ptr< Quote > >::difference_type i)
        __delitem__(QuoteVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.QuoteVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(QuoteVector self, SWIGPY_SLICEOBJECT * slice) -> QuoteVector
        __getitem__(QuoteVector self, std::vector< ext::shared_ptr< Quote > >::difference_type i) -> std::vector< ext::shared_ptr< Quote > >::value_type const &
        """
        return _quantlib_risks.QuoteVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(QuoteVector self, SWIGPY_SLICEOBJECT * slice, QuoteVector v)
        __setitem__(QuoteVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(QuoteVector self, std::vector< ext::shared_ptr< Quote > >::difference_type i, std::vector< ext::shared_ptr< Quote > >::value_type const & x)
        """
        return _quantlib_risks.QuoteVector___setitem__(self, *args)

    def pop(self):
        r"""pop(QuoteVector self) -> std::vector< ext::shared_ptr< Quote > >::value_type"""
        return _quantlib_risks.QuoteVector_pop(self)

    def append(self, x):
        r"""append(QuoteVector self, std::vector< ext::shared_ptr< Quote > >::value_type const & x)"""
        return _quantlib_risks.QuoteVector_append(self, x)

    def empty(self):
        r"""empty(QuoteVector self) -> bool"""
        return _quantlib_risks.QuoteVector_empty(self)

    def size(self):
        r"""size(QuoteVector self) -> std::vector< ext::shared_ptr< Quote > >::size_type"""
        return _quantlib_risks.QuoteVector_size(self)

    def swap(self, v):
        r"""swap(QuoteVector self, QuoteVector v)"""
        return _quantlib_risks.QuoteVector_swap(self, v)

    def begin(self):
        r"""begin(QuoteVector self) -> std::vector< ext::shared_ptr< Quote > >::iterator"""
        return _quantlib_risks.QuoteVector_begin(self)

    def end(self):
        r"""end(QuoteVector self) -> std::vector< ext::shared_ptr< Quote > >::iterator"""
        return _quantlib_risks.QuoteVector_end(self)

    def rbegin(self):
        r"""rbegin(QuoteVector self) -> std::vector< ext::shared_ptr< Quote > >::reverse_iterator"""
        return _quantlib_risks.QuoteVector_rbegin(self)

    def rend(self):
        r"""rend(QuoteVector self) -> std::vector< ext::shared_ptr< Quote > >::reverse_iterator"""
        return _quantlib_risks.QuoteVector_rend(self)

    def clear(self):
        r"""clear(QuoteVector self)"""
        return _quantlib_risks.QuoteVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(QuoteVector self) -> std::vector< ext::shared_ptr< Quote > >::allocator_type"""
        return _quantlib_risks.QuoteVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(QuoteVector self)"""
        return _quantlib_risks.QuoteVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(QuoteVector self, std::vector< ext::shared_ptr< Quote > >::iterator pos) -> std::vector< ext::shared_ptr< Quote > >::iterator
        erase(QuoteVector self, std::vector< ext::shared_ptr< Quote > >::iterator first, std::vector< ext::shared_ptr< Quote > >::iterator last) -> std::vector< ext::shared_ptr< Quote > >::iterator
        """
        return _quantlib_risks.QuoteVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(QuoteVector self) -> QuoteVector
        __init__(QuoteVector self, QuoteVector other) -> QuoteVector
        __init__(QuoteVector self, std::vector< ext::shared_ptr< Quote > >::size_type size) -> QuoteVector
        __init__(QuoteVector self, std::vector< ext::shared_ptr< Quote > >::size_type size, std::vector< ext::shared_ptr< Quote > >::value_type const & value) -> QuoteVector
        """
        _quantlib_risks.QuoteVector_swiginit(self, _quantlib_risks.new_QuoteVector(*args))

    def push_back(self, x):
        r"""push_back(QuoteVector self, std::vector< ext::shared_ptr< Quote > >::value_type const & x)"""
        return _quantlib_risks.QuoteVector_push_back(self, x)

    def front(self):
        r"""front(QuoteVector self) -> std::vector< ext::shared_ptr< Quote > >::value_type const &"""
        return _quantlib_risks.QuoteVector_front(self)

    def back(self):
        r"""back(QuoteVector self) -> std::vector< ext::shared_ptr< Quote > >::value_type const &"""
        return _quantlib_risks.QuoteVector_back(self)

    def assign(self, n, x):
        r"""assign(QuoteVector self, std::vector< ext::shared_ptr< Quote > >::size_type n, std::vector< ext::shared_ptr< Quote > >::value_type const & x)"""
        return _quantlib_risks.QuoteVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(QuoteVector self, std::vector< ext::shared_ptr< Quote > >::size_type new_size)
        resize(QuoteVector self, std::vector< ext::shared_ptr< Quote > >::size_type new_size, std::vector< ext::shared_ptr< Quote > >::value_type const & x)
        """
        return _quantlib_risks.QuoteVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(QuoteVector self, std::vector< ext::shared_ptr< Quote > >::iterator pos, std::vector< ext::shared_ptr< Quote > >::value_type const & x) -> std::vector< ext::shared_ptr< Quote > >::iterator
        insert(QuoteVector self, std::vector< ext::shared_ptr< Quote > >::iterator pos, std::vector< ext::shared_ptr< Quote > >::size_type n, std::vector< ext::shared_ptr< Quote > >::value_type const & x)
        """
        return _quantlib_risks.QuoteVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(QuoteVector self, std::vector< ext::shared_ptr< Quote > >::size_type n)"""
        return _quantlib_risks.QuoteVector_reserve(self, n)

    def capacity(self):
        r"""capacity(QuoteVector self) -> std::vector< ext::shared_ptr< Quote > >::size_type"""
        return _quantlib_risks.QuoteVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_QuoteVector

# Register QuoteVector in _quantlib_risks:
_quantlib_risks.QuoteVector_swigregister(QuoteVector)
class QuoteVectorVector(object):
    r"""Proxy of C++ std::vector< std::vector< ext::shared_ptr< Quote > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(QuoteVectorVector self) -> SwigPyIterator"""
        return _quantlib_risks.QuoteVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(QuoteVectorVector self) -> bool"""
        return _quantlib_risks.QuoteVectorVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(QuoteVectorVector self) -> bool"""
        return _quantlib_risks.QuoteVectorVector___bool__(self)

    def __len__(self):
        r"""__len__(QuoteVectorVector self) -> std::vector< std::vector< ext::shared_ptr< Quote > > >::size_type"""
        return _quantlib_risks.QuoteVectorVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(QuoteVectorVector self, std::vector< std::vector< ext::shared_ptr< Quote > > >::difference_type i, std::vector< std::vector< ext::shared_ptr< Quote > > >::difference_type j) -> QuoteVectorVector"""
        return _quantlib_risks.QuoteVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(QuoteVectorVector self, std::vector< std::vector< ext::shared_ptr< Quote > > >::difference_type i, std::vector< std::vector< ext::shared_ptr< Quote > > >::difference_type j)
        __setslice__(QuoteVectorVector self, std::vector< std::vector< ext::shared_ptr< Quote > > >::difference_type i, std::vector< std::vector< ext::shared_ptr< Quote > > >::difference_type j, QuoteVectorVector v)
        """
        return _quantlib_risks.QuoteVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(QuoteVectorVector self, std::vector< std::vector< ext::shared_ptr< Quote > > >::difference_type i, std::vector< std::vector< ext::shared_ptr< Quote > > >::difference_type j)"""
        return _quantlib_risks.QuoteVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(QuoteVectorVector self, std::vector< std::vector< ext::shared_ptr< Quote > > >::difference_type i)
        __delitem__(QuoteVectorVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.QuoteVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(QuoteVectorVector self, SWIGPY_SLICEOBJECT * slice) -> QuoteVectorVector
        __getitem__(QuoteVectorVector self, std::vector< std::vector< ext::shared_ptr< Quote > > >::difference_type i) -> QuoteVector
        """
        return _quantlib_risks.QuoteVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(QuoteVectorVector self, SWIGPY_SLICEOBJECT * slice, QuoteVectorVector v)
        __setitem__(QuoteVectorVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(QuoteVectorVector self, std::vector< std::vector< ext::shared_ptr< Quote > > >::difference_type i, QuoteVector x)
        """
        return _quantlib_risks.QuoteVectorVector___setitem__(self, *args)

    def pop(self):
        r"""pop(QuoteVectorVector self) -> QuoteVector"""
        return _quantlib_risks.QuoteVectorVector_pop(self)

    def append(self, x):
        r"""append(QuoteVectorVector self, QuoteVector x)"""
        return _quantlib_risks.QuoteVectorVector_append(self, x)

    def empty(self):
        r"""empty(QuoteVectorVector self) -> bool"""
        return _quantlib_risks.QuoteVectorVector_empty(self)

    def size(self):
        r"""size(QuoteVectorVector self) -> std::vector< std::vector< ext::shared_ptr< Quote > > >::size_type"""
        return _quantlib_risks.QuoteVectorVector_size(self)

    def swap(self, v):
        r"""swap(QuoteVectorVector self, QuoteVectorVector v)"""
        return _quantlib_risks.QuoteVectorVector_swap(self, v)

    def begin(self):
        r"""begin(QuoteVectorVector self) -> std::vector< std::vector< ext::shared_ptr< Quote > > >::iterator"""
        return _quantlib_risks.QuoteVectorVector_begin(self)

    def end(self):
        r"""end(QuoteVectorVector self) -> std::vector< std::vector< ext::shared_ptr< Quote > > >::iterator"""
        return _quantlib_risks.QuoteVectorVector_end(self)

    def rbegin(self):
        r"""rbegin(QuoteVectorVector self) -> std::vector< std::vector< ext::shared_ptr< Quote > > >::reverse_iterator"""
        return _quantlib_risks.QuoteVectorVector_rbegin(self)

    def rend(self):
        r"""rend(QuoteVectorVector self) -> std::vector< std::vector< ext::shared_ptr< Quote > > >::reverse_iterator"""
        return _quantlib_risks.QuoteVectorVector_rend(self)

    def clear(self):
        r"""clear(QuoteVectorVector self)"""
        return _quantlib_risks.QuoteVectorVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(QuoteVectorVector self) -> std::vector< std::vector< ext::shared_ptr< Quote > > >::allocator_type"""
        return _quantlib_risks.QuoteVectorVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(QuoteVectorVector self)"""
        return _quantlib_risks.QuoteVectorVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(QuoteVectorVector self, std::vector< std::vector< ext::shared_ptr< Quote > > >::iterator pos) -> std::vector< std::vector< ext::shared_ptr< Quote > > >::iterator
        erase(QuoteVectorVector self, std::vector< std::vector< ext::shared_ptr< Quote > > >::iterator first, std::vector< std::vector< ext::shared_ptr< Quote > > >::iterator last) -> std::vector< std::vector< ext::shared_ptr< Quote > > >::iterator
        """
        return _quantlib_risks.QuoteVectorVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(QuoteVectorVector self) -> QuoteVectorVector
        __init__(QuoteVectorVector self, QuoteVectorVector other) -> QuoteVectorVector
        __init__(QuoteVectorVector self, std::vector< std::vector< ext::shared_ptr< Quote > > >::size_type size) -> QuoteVectorVector
        __init__(QuoteVectorVector self, std::vector< std::vector< ext::shared_ptr< Quote > > >::size_type size, QuoteVector value) -> QuoteVectorVector
        """
        _quantlib_risks.QuoteVectorVector_swiginit(self, _quantlib_risks.new_QuoteVectorVector(*args))

    def push_back(self, x):
        r"""push_back(QuoteVectorVector self, QuoteVector x)"""
        return _quantlib_risks.QuoteVectorVector_push_back(self, x)

    def front(self):
        r"""front(QuoteVectorVector self) -> QuoteVector"""
        return _quantlib_risks.QuoteVectorVector_front(self)

    def back(self):
        r"""back(QuoteVectorVector self) -> QuoteVector"""
        return _quantlib_risks.QuoteVectorVector_back(self)

    def assign(self, n, x):
        r"""assign(QuoteVectorVector self, std::vector< std::vector< ext::shared_ptr< Quote > > >::size_type n, QuoteVector x)"""
        return _quantlib_risks.QuoteVectorVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(QuoteVectorVector self, std::vector< std::vector< ext::shared_ptr< Quote > > >::size_type new_size)
        resize(QuoteVectorVector self, std::vector< std::vector< ext::shared_ptr< Quote > > >::size_type new_size, QuoteVector x)
        """
        return _quantlib_risks.QuoteVectorVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(QuoteVectorVector self, std::vector< std::vector< ext::shared_ptr< Quote > > >::iterator pos, QuoteVector x) -> std::vector< std::vector< ext::shared_ptr< Quote > > >::iterator
        insert(QuoteVectorVector self, std::vector< std::vector< ext::shared_ptr< Quote > > >::iterator pos, std::vector< std::vector< ext::shared_ptr< Quote > > >::size_type n, QuoteVector x)
        """
        return _quantlib_risks.QuoteVectorVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(QuoteVectorVector self, std::vector< std::vector< ext::shared_ptr< Quote > > >::size_type n)"""
        return _quantlib_risks.QuoteVectorVector_reserve(self, n)

    def capacity(self):
        r"""capacity(QuoteVectorVector self) -> std::vector< std::vector< ext::shared_ptr< Quote > > >::size_type"""
        return _quantlib_risks.QuoteVectorVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_QuoteVectorVector

# Register QuoteVectorVector in _quantlib_risks:
_quantlib_risks.QuoteVectorVector_swigregister(QuoteVectorVector)
class QuoteHandleVector(object):
    r"""Proxy of C++ std::vector< Handle< Quote > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(QuoteHandleVector self) -> SwigPyIterator"""
        return _quantlib_risks.QuoteHandleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(QuoteHandleVector self) -> bool"""
        return _quantlib_risks.QuoteHandleVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(QuoteHandleVector self) -> bool"""
        return _quantlib_risks.QuoteHandleVector___bool__(self)

    def __len__(self):
        r"""__len__(QuoteHandleVector self) -> std::vector< Handle< Quote > >::size_type"""
        return _quantlib_risks.QuoteHandleVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(QuoteHandleVector self, std::vector< Handle< Quote > >::difference_type i, std::vector< Handle< Quote > >::difference_type j) -> QuoteHandleVector"""
        return _quantlib_risks.QuoteHandleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(QuoteHandleVector self, std::vector< Handle< Quote > >::difference_type i, std::vector< Handle< Quote > >::difference_type j)
        __setslice__(QuoteHandleVector self, std::vector< Handle< Quote > >::difference_type i, std::vector< Handle< Quote > >::difference_type j, QuoteHandleVector v)
        """
        return _quantlib_risks.QuoteHandleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(QuoteHandleVector self, std::vector< Handle< Quote > >::difference_type i, std::vector< Handle< Quote > >::difference_type j)"""
        return _quantlib_risks.QuoteHandleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(QuoteHandleVector self, std::vector< Handle< Quote > >::difference_type i)
        __delitem__(QuoteHandleVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.QuoteHandleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(QuoteHandleVector self, SWIGPY_SLICEOBJECT * slice) -> QuoteHandleVector
        __getitem__(QuoteHandleVector self, std::vector< Handle< Quote > >::difference_type i) -> QuoteHandle
        """
        return _quantlib_risks.QuoteHandleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(QuoteHandleVector self, SWIGPY_SLICEOBJECT * slice, QuoteHandleVector v)
        __setitem__(QuoteHandleVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(QuoteHandleVector self, std::vector< Handle< Quote > >::difference_type i, QuoteHandle x)
        """
        return _quantlib_risks.QuoteHandleVector___setitem__(self, *args)

    def pop(self):
        r"""pop(QuoteHandleVector self) -> QuoteHandle"""
        return _quantlib_risks.QuoteHandleVector_pop(self)

    def append(self, x):
        r"""append(QuoteHandleVector self, QuoteHandle x)"""
        return _quantlib_risks.QuoteHandleVector_append(self, x)

    def empty(self):
        r"""empty(QuoteHandleVector self) -> bool"""
        return _quantlib_risks.QuoteHandleVector_empty(self)

    def size(self):
        r"""size(QuoteHandleVector self) -> std::vector< Handle< Quote > >::size_type"""
        return _quantlib_risks.QuoteHandleVector_size(self)

    def swap(self, v):
        r"""swap(QuoteHandleVector self, QuoteHandleVector v)"""
        return _quantlib_risks.QuoteHandleVector_swap(self, v)

    def begin(self):
        r"""begin(QuoteHandleVector self) -> std::vector< Handle< Quote > >::iterator"""
        return _quantlib_risks.QuoteHandleVector_begin(self)

    def end(self):
        r"""end(QuoteHandleVector self) -> std::vector< Handle< Quote > >::iterator"""
        return _quantlib_risks.QuoteHandleVector_end(self)

    def rbegin(self):
        r"""rbegin(QuoteHandleVector self) -> std::vector< Handle< Quote > >::reverse_iterator"""
        return _quantlib_risks.QuoteHandleVector_rbegin(self)

    def rend(self):
        r"""rend(QuoteHandleVector self) -> std::vector< Handle< Quote > >::reverse_iterator"""
        return _quantlib_risks.QuoteHandleVector_rend(self)

    def clear(self):
        r"""clear(QuoteHandleVector self)"""
        return _quantlib_risks.QuoteHandleVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(QuoteHandleVector self) -> std::vector< Handle< Quote > >::allocator_type"""
        return _quantlib_risks.QuoteHandleVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(QuoteHandleVector self)"""
        return _quantlib_risks.QuoteHandleVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(QuoteHandleVector self, std::vector< Handle< Quote > >::iterator pos) -> std::vector< Handle< Quote > >::iterator
        erase(QuoteHandleVector self, std::vector< Handle< Quote > >::iterator first, std::vector< Handle< Quote > >::iterator last) -> std::vector< Handle< Quote > >::iterator
        """
        return _quantlib_risks.QuoteHandleVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(QuoteHandleVector self) -> QuoteHandleVector
        __init__(QuoteHandleVector self, QuoteHandleVector other) -> QuoteHandleVector
        __init__(QuoteHandleVector self, std::vector< Handle< Quote > >::size_type size) -> QuoteHandleVector
        __init__(QuoteHandleVector self, std::vector< Handle< Quote > >::size_type size, QuoteHandle value) -> QuoteHandleVector
        """
        _quantlib_risks.QuoteHandleVector_swiginit(self, _quantlib_risks.new_QuoteHandleVector(*args))

    def push_back(self, x):
        r"""push_back(QuoteHandleVector self, QuoteHandle x)"""
        return _quantlib_risks.QuoteHandleVector_push_back(self, x)

    def front(self):
        r"""front(QuoteHandleVector self) -> QuoteHandle"""
        return _quantlib_risks.QuoteHandleVector_front(self)

    def back(self):
        r"""back(QuoteHandleVector self) -> QuoteHandle"""
        return _quantlib_risks.QuoteHandleVector_back(self)

    def assign(self, n, x):
        r"""assign(QuoteHandleVector self, std::vector< Handle< Quote > >::size_type n, QuoteHandle x)"""
        return _quantlib_risks.QuoteHandleVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(QuoteHandleVector self, std::vector< Handle< Quote > >::size_type new_size)
        resize(QuoteHandleVector self, std::vector< Handle< Quote > >::size_type new_size, QuoteHandle x)
        """
        return _quantlib_risks.QuoteHandleVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(QuoteHandleVector self, std::vector< Handle< Quote > >::iterator pos, QuoteHandle x) -> std::vector< Handle< Quote > >::iterator
        insert(QuoteHandleVector self, std::vector< Handle< Quote > >::iterator pos, std::vector< Handle< Quote > >::size_type n, QuoteHandle x)
        """
        return _quantlib_risks.QuoteHandleVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(QuoteHandleVector self, std::vector< Handle< Quote > >::size_type n)"""
        return _quantlib_risks.QuoteHandleVector_reserve(self, n)

    def capacity(self):
        r"""capacity(QuoteHandleVector self) -> std::vector< Handle< Quote > >::size_type"""
        return _quantlib_risks.QuoteHandleVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_QuoteHandleVector

# Register QuoteHandleVector in _quantlib_risks:
_quantlib_risks.QuoteHandleVector_swigregister(QuoteHandleVector)
class QuoteHandleVectorVector(object):
    r"""Proxy of C++ std::vector< std::vector< Handle< Quote > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(QuoteHandleVectorVector self) -> SwigPyIterator"""
        return _quantlib_risks.QuoteHandleVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(QuoteHandleVectorVector self) -> bool"""
        return _quantlib_risks.QuoteHandleVectorVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(QuoteHandleVectorVector self) -> bool"""
        return _quantlib_risks.QuoteHandleVectorVector___bool__(self)

    def __len__(self):
        r"""__len__(QuoteHandleVectorVector self) -> std::vector< std::vector< Handle< Quote > > >::size_type"""
        return _quantlib_risks.QuoteHandleVectorVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::difference_type i, std::vector< std::vector< Handle< Quote > > >::difference_type j) -> QuoteHandleVectorVector"""
        return _quantlib_risks.QuoteHandleVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::difference_type i, std::vector< std::vector< Handle< Quote > > >::difference_type j)
        __setslice__(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::difference_type i, std::vector< std::vector< Handle< Quote > > >::difference_type j, QuoteHandleVectorVector v)
        """
        return _quantlib_risks.QuoteHandleVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::difference_type i, std::vector< std::vector< Handle< Quote > > >::difference_type j)"""
        return _quantlib_risks.QuoteHandleVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::difference_type i)
        __delitem__(QuoteHandleVectorVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.QuoteHandleVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(QuoteHandleVectorVector self, SWIGPY_SLICEOBJECT * slice) -> QuoteHandleVectorVector
        __getitem__(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::difference_type i) -> QuoteHandleVector
        """
        return _quantlib_risks.QuoteHandleVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(QuoteHandleVectorVector self, SWIGPY_SLICEOBJECT * slice, QuoteHandleVectorVector v)
        __setitem__(QuoteHandleVectorVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::difference_type i, QuoteHandleVector x)
        """
        return _quantlib_risks.QuoteHandleVectorVector___setitem__(self, *args)

    def pop(self):
        r"""pop(QuoteHandleVectorVector self) -> QuoteHandleVector"""
        return _quantlib_risks.QuoteHandleVectorVector_pop(self)

    def append(self, x):
        r"""append(QuoteHandleVectorVector self, QuoteHandleVector x)"""
        return _quantlib_risks.QuoteHandleVectorVector_append(self, x)

    def empty(self):
        r"""empty(QuoteHandleVectorVector self) -> bool"""
        return _quantlib_risks.QuoteHandleVectorVector_empty(self)

    def size(self):
        r"""size(QuoteHandleVectorVector self) -> std::vector< std::vector< Handle< Quote > > >::size_type"""
        return _quantlib_risks.QuoteHandleVectorVector_size(self)

    def swap(self, v):
        r"""swap(QuoteHandleVectorVector self, QuoteHandleVectorVector v)"""
        return _quantlib_risks.QuoteHandleVectorVector_swap(self, v)

    def begin(self):
        r"""begin(QuoteHandleVectorVector self) -> std::vector< std::vector< Handle< Quote > > >::iterator"""
        return _quantlib_risks.QuoteHandleVectorVector_begin(self)

    def end(self):
        r"""end(QuoteHandleVectorVector self) -> std::vector< std::vector< Handle< Quote > > >::iterator"""
        return _quantlib_risks.QuoteHandleVectorVector_end(self)

    def rbegin(self):
        r"""rbegin(QuoteHandleVectorVector self) -> std::vector< std::vector< Handle< Quote > > >::reverse_iterator"""
        return _quantlib_risks.QuoteHandleVectorVector_rbegin(self)

    def rend(self):
        r"""rend(QuoteHandleVectorVector self) -> std::vector< std::vector< Handle< Quote > > >::reverse_iterator"""
        return _quantlib_risks.QuoteHandleVectorVector_rend(self)

    def clear(self):
        r"""clear(QuoteHandleVectorVector self)"""
        return _quantlib_risks.QuoteHandleVectorVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(QuoteHandleVectorVector self) -> std::vector< std::vector< Handle< Quote > > >::allocator_type"""
        return _quantlib_risks.QuoteHandleVectorVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(QuoteHandleVectorVector self)"""
        return _quantlib_risks.QuoteHandleVectorVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::iterator pos) -> std::vector< std::vector< Handle< Quote > > >::iterator
        erase(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::iterator first, std::vector< std::vector< Handle< Quote > > >::iterator last) -> std::vector< std::vector< Handle< Quote > > >::iterator
        """
        return _quantlib_risks.QuoteHandleVectorVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(QuoteHandleVectorVector self) -> QuoteHandleVectorVector
        __init__(QuoteHandleVectorVector self, QuoteHandleVectorVector other) -> QuoteHandleVectorVector
        __init__(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::size_type size) -> QuoteHandleVectorVector
        __init__(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::size_type size, QuoteHandleVector value) -> QuoteHandleVectorVector
        """
        _quantlib_risks.QuoteHandleVectorVector_swiginit(self, _quantlib_risks.new_QuoteHandleVectorVector(*args))

    def push_back(self, x):
        r"""push_back(QuoteHandleVectorVector self, QuoteHandleVector x)"""
        return _quantlib_risks.QuoteHandleVectorVector_push_back(self, x)

    def front(self):
        r"""front(QuoteHandleVectorVector self) -> QuoteHandleVector"""
        return _quantlib_risks.QuoteHandleVectorVector_front(self)

    def back(self):
        r"""back(QuoteHandleVectorVector self) -> QuoteHandleVector"""
        return _quantlib_risks.QuoteHandleVectorVector_back(self)

    def assign(self, n, x):
        r"""assign(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::size_type n, QuoteHandleVector x)"""
        return _quantlib_risks.QuoteHandleVectorVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::size_type new_size)
        resize(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::size_type new_size, QuoteHandleVector x)
        """
        return _quantlib_risks.QuoteHandleVectorVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::iterator pos, QuoteHandleVector x) -> std::vector< std::vector< Handle< Quote > > >::iterator
        insert(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::iterator pos, std::vector< std::vector< Handle< Quote > > >::size_type n, QuoteHandleVector x)
        """
        return _quantlib_risks.QuoteHandleVectorVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(QuoteHandleVectorVector self, std::vector< std::vector< Handle< Quote > > >::size_type n)"""
        return _quantlib_risks.QuoteHandleVectorVector_reserve(self, n)

    def capacity(self):
        r"""capacity(QuoteHandleVectorVector self) -> std::vector< std::vector< Handle< Quote > > >::size_type"""
        return _quantlib_risks.QuoteHandleVectorVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_QuoteHandleVectorVector

# Register QuoteHandleVectorVector in _quantlib_risks:
_quantlib_risks.QuoteHandleVectorVector_swigregister(QuoteHandleVectorVector)
class RelinkableQuoteHandleVector(object):
    r"""Proxy of C++ std::vector< RelinkableHandle< Quote > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(RelinkableQuoteHandleVector self) -> SwigPyIterator"""
        return _quantlib_risks.RelinkableQuoteHandleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(RelinkableQuoteHandleVector self) -> bool"""
        return _quantlib_risks.RelinkableQuoteHandleVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(RelinkableQuoteHandleVector self) -> bool"""
        return _quantlib_risks.RelinkableQuoteHandleVector___bool__(self)

    def __len__(self):
        r"""__len__(RelinkableQuoteHandleVector self) -> std::vector< RelinkableHandle< Quote > >::size_type"""
        return _quantlib_risks.RelinkableQuoteHandleVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::difference_type i, std::vector< RelinkableHandle< Quote > >::difference_type j) -> RelinkableQuoteHandleVector"""
        return _quantlib_risks.RelinkableQuoteHandleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::difference_type i, std::vector< RelinkableHandle< Quote > >::difference_type j)
        __setslice__(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::difference_type i, std::vector< RelinkableHandle< Quote > >::difference_type j, RelinkableQuoteHandleVector v)
        """
        return _quantlib_risks.RelinkableQuoteHandleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::difference_type i, std::vector< RelinkableHandle< Quote > >::difference_type j)"""
        return _quantlib_risks.RelinkableQuoteHandleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::difference_type i)
        __delitem__(RelinkableQuoteHandleVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.RelinkableQuoteHandleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(RelinkableQuoteHandleVector self, SWIGPY_SLICEOBJECT * slice) -> RelinkableQuoteHandleVector
        __getitem__(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::difference_type i) -> RelinkableQuoteHandle
        """
        return _quantlib_risks.RelinkableQuoteHandleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(RelinkableQuoteHandleVector self, SWIGPY_SLICEOBJECT * slice, RelinkableQuoteHandleVector v)
        __setitem__(RelinkableQuoteHandleVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::difference_type i, RelinkableQuoteHandle x)
        """
        return _quantlib_risks.RelinkableQuoteHandleVector___setitem__(self, *args)

    def pop(self):
        r"""pop(RelinkableQuoteHandleVector self) -> RelinkableQuoteHandle"""
        return _quantlib_risks.RelinkableQuoteHandleVector_pop(self)

    def append(self, x):
        r"""append(RelinkableQuoteHandleVector self, RelinkableQuoteHandle x)"""
        return _quantlib_risks.RelinkableQuoteHandleVector_append(self, x)

    def empty(self):
        r"""empty(RelinkableQuoteHandleVector self) -> bool"""
        return _quantlib_risks.RelinkableQuoteHandleVector_empty(self)

    def size(self):
        r"""size(RelinkableQuoteHandleVector self) -> std::vector< RelinkableHandle< Quote > >::size_type"""
        return _quantlib_risks.RelinkableQuoteHandleVector_size(self)

    def swap(self, v):
        r"""swap(RelinkableQuoteHandleVector self, RelinkableQuoteHandleVector v)"""
        return _quantlib_risks.RelinkableQuoteHandleVector_swap(self, v)

    def begin(self):
        r"""begin(RelinkableQuoteHandleVector self) -> std::vector< RelinkableHandle< Quote > >::iterator"""
        return _quantlib_risks.RelinkableQuoteHandleVector_begin(self)

    def end(self):
        r"""end(RelinkableQuoteHandleVector self) -> std::vector< RelinkableHandle< Quote > >::iterator"""
        return _quantlib_risks.RelinkableQuoteHandleVector_end(self)

    def rbegin(self):
        r"""rbegin(RelinkableQuoteHandleVector self) -> std::vector< RelinkableHandle< Quote > >::reverse_iterator"""
        return _quantlib_risks.RelinkableQuoteHandleVector_rbegin(self)

    def rend(self):
        r"""rend(RelinkableQuoteHandleVector self) -> std::vector< RelinkableHandle< Quote > >::reverse_iterator"""
        return _quantlib_risks.RelinkableQuoteHandleVector_rend(self)

    def clear(self):
        r"""clear(RelinkableQuoteHandleVector self)"""
        return _quantlib_risks.RelinkableQuoteHandleVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(RelinkableQuoteHandleVector self) -> std::vector< RelinkableHandle< Quote > >::allocator_type"""
        return _quantlib_risks.RelinkableQuoteHandleVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(RelinkableQuoteHandleVector self)"""
        return _quantlib_risks.RelinkableQuoteHandleVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::iterator pos) -> std::vector< RelinkableHandle< Quote > >::iterator
        erase(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::iterator first, std::vector< RelinkableHandle< Quote > >::iterator last) -> std::vector< RelinkableHandle< Quote > >::iterator
        """
        return _quantlib_risks.RelinkableQuoteHandleVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(RelinkableQuoteHandleVector self) -> RelinkableQuoteHandleVector
        __init__(RelinkableQuoteHandleVector self, RelinkableQuoteHandleVector other) -> RelinkableQuoteHandleVector
        __init__(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::size_type size) -> RelinkableQuoteHandleVector
        __init__(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::size_type size, RelinkableQuoteHandle value) -> RelinkableQuoteHandleVector
        """
        _quantlib_risks.RelinkableQuoteHandleVector_swiginit(self, _quantlib_risks.new_RelinkableQuoteHandleVector(*args))

    def push_back(self, x):
        r"""push_back(RelinkableQuoteHandleVector self, RelinkableQuoteHandle x)"""
        return _quantlib_risks.RelinkableQuoteHandleVector_push_back(self, x)

    def front(self):
        r"""front(RelinkableQuoteHandleVector self) -> RelinkableQuoteHandle"""
        return _quantlib_risks.RelinkableQuoteHandleVector_front(self)

    def back(self):
        r"""back(RelinkableQuoteHandleVector self) -> RelinkableQuoteHandle"""
        return _quantlib_risks.RelinkableQuoteHandleVector_back(self)

    def assign(self, n, x):
        r"""assign(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::size_type n, RelinkableQuoteHandle x)"""
        return _quantlib_risks.RelinkableQuoteHandleVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::size_type new_size)
        resize(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::size_type new_size, RelinkableQuoteHandle x)
        """
        return _quantlib_risks.RelinkableQuoteHandleVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::iterator pos, RelinkableQuoteHandle x) -> std::vector< RelinkableHandle< Quote > >::iterator
        insert(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::iterator pos, std::vector< RelinkableHandle< Quote > >::size_type n, RelinkableQuoteHandle x)
        """
        return _quantlib_risks.RelinkableQuoteHandleVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(RelinkableQuoteHandleVector self, std::vector< RelinkableHandle< Quote > >::size_type n)"""
        return _quantlib_risks.RelinkableQuoteHandleVector_reserve(self, n)

    def capacity(self):
        r"""capacity(RelinkableQuoteHandleVector self) -> std::vector< RelinkableHandle< Quote > >::size_type"""
        return _quantlib_risks.RelinkableQuoteHandleVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_RelinkableQuoteHandleVector

# Register RelinkableQuoteHandleVector in _quantlib_risks:
_quantlib_risks.RelinkableQuoteHandleVector_swigregister(RelinkableQuoteHandleVector)
class RelinkableQuoteHandleVectorVector(object):
    r"""Proxy of C++ std::vector< std::vector< RelinkableHandle< Quote > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(RelinkableQuoteHandleVectorVector self) -> SwigPyIterator"""
        return _quantlib_risks.RelinkableQuoteHandleVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(RelinkableQuoteHandleVectorVector self) -> bool"""
        return _quantlib_risks.RelinkableQuoteHandleVectorVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(RelinkableQuoteHandleVectorVector self) -> bool"""
        return _quantlib_risks.RelinkableQuoteHandleVectorVector___bool__(self)

    def __len__(self):
        r"""__len__(RelinkableQuoteHandleVectorVector self) -> std::vector< std::vector< RelinkableHandle< Quote > > >::size_type"""
        return _quantlib_risks.RelinkableQuoteHandleVectorVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type i, std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type j) -> RelinkableQuoteHandleVectorVector"""
        return _quantlib_risks.RelinkableQuoteHandleVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type i, std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type j)
        __setslice__(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type i, std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type j, RelinkableQuoteHandleVectorVector v)
        """
        return _quantlib_risks.RelinkableQuoteHandleVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type i, std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type j)"""
        return _quantlib_risks.RelinkableQuoteHandleVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type i)
        __delitem__(RelinkableQuoteHandleVectorVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.RelinkableQuoteHandleVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(RelinkableQuoteHandleVectorVector self, SWIGPY_SLICEOBJECT * slice) -> RelinkableQuoteHandleVectorVector
        __getitem__(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type i) -> RelinkableQuoteHandleVector
        """
        return _quantlib_risks.RelinkableQuoteHandleVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(RelinkableQuoteHandleVectorVector self, SWIGPY_SLICEOBJECT * slice, RelinkableQuoteHandleVectorVector v)
        __setitem__(RelinkableQuoteHandleVectorVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::difference_type i, RelinkableQuoteHandleVector x)
        """
        return _quantlib_risks.RelinkableQuoteHandleVectorVector___setitem__(self, *args)

    def pop(self):
        r"""pop(RelinkableQuoteHandleVectorVector self) -> RelinkableQuoteHandleVector"""
        return _quantlib_risks.RelinkableQuoteHandleVectorVector_pop(self)

    def append(self, x):
        r"""append(RelinkableQuoteHandleVectorVector self, RelinkableQuoteHandleVector x)"""
        return _quantlib_risks.RelinkableQuoteHandleVectorVector_append(self, x)

    def empty(self):
        r"""empty(RelinkableQuoteHandleVectorVector self) -> bool"""
        return _quantlib_risks.RelinkableQuoteHandleVectorVector_empty(self)

    def size(self):
        r"""size(RelinkableQuoteHandleVectorVector self) -> std::vector< std::vector< RelinkableHandle< Quote > > >::size_type"""
        return _quantlib_risks.RelinkableQuoteHandleVectorVector_size(self)

    def swap(self, v):
        r"""swap(RelinkableQuoteHandleVectorVector self, RelinkableQuoteHandleVectorVector v)"""
        return _quantlib_risks.RelinkableQuoteHandleVectorVector_swap(self, v)

    def begin(self):
        r"""begin(RelinkableQuoteHandleVectorVector self) -> std::vector< std::vector< RelinkableHandle< Quote > > >::iterator"""
        return _quantlib_risks.RelinkableQuoteHandleVectorVector_begin(self)

    def end(self):
        r"""end(RelinkableQuoteHandleVectorVector self) -> std::vector< std::vector< RelinkableHandle< Quote > > >::iterator"""
        return _quantlib_risks.RelinkableQuoteHandleVectorVector_end(self)

    def rbegin(self):
        r"""rbegin(RelinkableQuoteHandleVectorVector self) -> std::vector< std::vector< RelinkableHandle< Quote > > >::reverse_iterator"""
        return _quantlib_risks.RelinkableQuoteHandleVectorVector_rbegin(self)

    def rend(self):
        r"""rend(RelinkableQuoteHandleVectorVector self) -> std::vector< std::vector< RelinkableHandle< Quote > > >::reverse_iterator"""
        return _quantlib_risks.RelinkableQuoteHandleVectorVector_rend(self)

    def clear(self):
        r"""clear(RelinkableQuoteHandleVectorVector self)"""
        return _quantlib_risks.RelinkableQuoteHandleVectorVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(RelinkableQuoteHandleVectorVector self) -> std::vector< std::vector< RelinkableHandle< Quote > > >::allocator_type"""
        return _quantlib_risks.RelinkableQuoteHandleVectorVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(RelinkableQuoteHandleVectorVector self)"""
        return _quantlib_risks.RelinkableQuoteHandleVectorVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::iterator pos) -> std::vector< std::vector< RelinkableHandle< Quote > > >::iterator
        erase(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::iterator first, std::vector< std::vector< RelinkableHandle< Quote > > >::iterator last) -> std::vector< std::vector< RelinkableHandle< Quote > > >::iterator
        """
        return _quantlib_risks.RelinkableQuoteHandleVectorVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(RelinkableQuoteHandleVectorVector self) -> RelinkableQuoteHandleVectorVector
        __init__(RelinkableQuoteHandleVectorVector self, RelinkableQuoteHandleVectorVector other) -> RelinkableQuoteHandleVectorVector
        __init__(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::size_type size) -> RelinkableQuoteHandleVectorVector
        __init__(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::size_type size, RelinkableQuoteHandleVector value) -> RelinkableQuoteHandleVectorVector
        """
        _quantlib_risks.RelinkableQuoteHandleVectorVector_swiginit(self, _quantlib_risks.new_RelinkableQuoteHandleVectorVector(*args))

    def push_back(self, x):
        r"""push_back(RelinkableQuoteHandleVectorVector self, RelinkableQuoteHandleVector x)"""
        return _quantlib_risks.RelinkableQuoteHandleVectorVector_push_back(self, x)

    def front(self):
        r"""front(RelinkableQuoteHandleVectorVector self) -> RelinkableQuoteHandleVector"""
        return _quantlib_risks.RelinkableQuoteHandleVectorVector_front(self)

    def back(self):
        r"""back(RelinkableQuoteHandleVectorVector self) -> RelinkableQuoteHandleVector"""
        return _quantlib_risks.RelinkableQuoteHandleVectorVector_back(self)

    def assign(self, n, x):
        r"""assign(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::size_type n, RelinkableQuoteHandleVector x)"""
        return _quantlib_risks.RelinkableQuoteHandleVectorVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::size_type new_size)
        resize(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::size_type new_size, RelinkableQuoteHandleVector x)
        """
        return _quantlib_risks.RelinkableQuoteHandleVectorVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::iterator pos, RelinkableQuoteHandleVector x) -> std::vector< std::vector< RelinkableHandle< Quote > > >::iterator
        insert(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::iterator pos, std::vector< std::vector< RelinkableHandle< Quote > > >::size_type n, RelinkableQuoteHandleVector x)
        """
        return _quantlib_risks.RelinkableQuoteHandleVectorVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(RelinkableQuoteHandleVectorVector self, std::vector< std::vector< RelinkableHandle< Quote > > >::size_type n)"""
        return _quantlib_risks.RelinkableQuoteHandleVectorVector_reserve(self, n)

    def capacity(self):
        r"""capacity(RelinkableQuoteHandleVectorVector self) -> std::vector< std::vector< RelinkableHandle< Quote > > >::size_type"""
        return _quantlib_risks.RelinkableQuoteHandleVectorVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_RelinkableQuoteHandleVectorVector

# Register RelinkableQuoteHandleVectorVector in _quantlib_risks:
_quantlib_risks.RelinkableQuoteHandleVectorVector_swigregister(RelinkableQuoteHandleVectorVector)
class Brent(object):
    r"""Proxy of C++ Brent class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations):
        r"""setMaxEvaluations(Brent self, Size evaluations)"""
        return _quantlib_risks.Brent_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound):
        r"""setLowerBound(Brent self, Real lowerBound)"""
        return _quantlib_risks.Brent_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound):
        r"""setUpperBound(Brent self, Real upperBound)"""
        return _quantlib_risks.Brent_setUpperBound(self, upperBound)

    def solve(self, *args):
        r"""
        solve(Brent self, PyObject * function, Real xAccuracy, Real guess, Real step) -> Real
        solve(Brent self, PyObject * function, Real xAccuracy, Real guess, Real xMin, Real xMax) -> Real
        """
        return _quantlib_risks.Brent_solve(self, *args)

    def __init__(self):
        r"""__init__(Brent self) -> Brent"""
        _quantlib_risks.Brent_swiginit(self, _quantlib_risks.new_Brent())
    __swig_destroy__ = _quantlib_risks.delete_Brent

# Register Brent in _quantlib_risks:
_quantlib_risks.Brent_swigregister(Brent)
class Bisection(object):
    r"""Proxy of C++ Bisection class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations):
        r"""setMaxEvaluations(Bisection self, Size evaluations)"""
        return _quantlib_risks.Bisection_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound):
        r"""setLowerBound(Bisection self, Real lowerBound)"""
        return _quantlib_risks.Bisection_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound):
        r"""setUpperBound(Bisection self, Real upperBound)"""
        return _quantlib_risks.Bisection_setUpperBound(self, upperBound)

    def solve(self, *args):
        r"""
        solve(Bisection self, PyObject * function, Real xAccuracy, Real guess, Real step) -> Real
        solve(Bisection self, PyObject * function, Real xAccuracy, Real guess, Real xMin, Real xMax) -> Real
        """
        return _quantlib_risks.Bisection_solve(self, *args)

    def __init__(self):
        r"""__init__(Bisection self) -> Bisection"""
        _quantlib_risks.Bisection_swiginit(self, _quantlib_risks.new_Bisection())
    __swig_destroy__ = _quantlib_risks.delete_Bisection

# Register Bisection in _quantlib_risks:
_quantlib_risks.Bisection_swigregister(Bisection)
class FalsePosition(object):
    r"""Proxy of C++ FalsePosition class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations):
        r"""setMaxEvaluations(FalsePosition self, Size evaluations)"""
        return _quantlib_risks.FalsePosition_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound):
        r"""setLowerBound(FalsePosition self, Real lowerBound)"""
        return _quantlib_risks.FalsePosition_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound):
        r"""setUpperBound(FalsePosition self, Real upperBound)"""
        return _quantlib_risks.FalsePosition_setUpperBound(self, upperBound)

    def solve(self, *args):
        r"""
        solve(FalsePosition self, PyObject * function, Real xAccuracy, Real guess, Real step) -> Real
        solve(FalsePosition self, PyObject * function, Real xAccuracy, Real guess, Real xMin, Real xMax) -> Real
        """
        return _quantlib_risks.FalsePosition_solve(self, *args)

    def __init__(self):
        r"""__init__(FalsePosition self) -> FalsePosition"""
        _quantlib_risks.FalsePosition_swiginit(self, _quantlib_risks.new_FalsePosition())
    __swig_destroy__ = _quantlib_risks.delete_FalsePosition

# Register FalsePosition in _quantlib_risks:
_quantlib_risks.FalsePosition_swigregister(FalsePosition)
class Ridder(object):
    r"""Proxy of C++ Ridder class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations):
        r"""setMaxEvaluations(Ridder self, Size evaluations)"""
        return _quantlib_risks.Ridder_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound):
        r"""setLowerBound(Ridder self, Real lowerBound)"""
        return _quantlib_risks.Ridder_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound):
        r"""setUpperBound(Ridder self, Real upperBound)"""
        return _quantlib_risks.Ridder_setUpperBound(self, upperBound)

    def solve(self, *args):
        r"""
        solve(Ridder self, PyObject * function, Real xAccuracy, Real guess, Real step) -> Real
        solve(Ridder self, PyObject * function, Real xAccuracy, Real guess, Real xMin, Real xMax) -> Real
        """
        return _quantlib_risks.Ridder_solve(self, *args)

    def __init__(self):
        r"""__init__(Ridder self) -> Ridder"""
        _quantlib_risks.Ridder_swiginit(self, _quantlib_risks.new_Ridder())
    __swig_destroy__ = _quantlib_risks.delete_Ridder

# Register Ridder in _quantlib_risks:
_quantlib_risks.Ridder_swigregister(Ridder)
class Secant(object):
    r"""Proxy of C++ Secant class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations):
        r"""setMaxEvaluations(Secant self, Size evaluations)"""
        return _quantlib_risks.Secant_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound):
        r"""setLowerBound(Secant self, Real lowerBound)"""
        return _quantlib_risks.Secant_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound):
        r"""setUpperBound(Secant self, Real upperBound)"""
        return _quantlib_risks.Secant_setUpperBound(self, upperBound)

    def solve(self, *args):
        r"""
        solve(Secant self, PyObject * function, Real xAccuracy, Real guess, Real step) -> Real
        solve(Secant self, PyObject * function, Real xAccuracy, Real guess, Real xMin, Real xMax) -> Real
        """
        return _quantlib_risks.Secant_solve(self, *args)

    def __init__(self):
        r"""__init__(Secant self) -> Secant"""
        _quantlib_risks.Secant_swiginit(self, _quantlib_risks.new_Secant())
    __swig_destroy__ = _quantlib_risks.delete_Secant

# Register Secant in _quantlib_risks:
_quantlib_risks.Secant_swigregister(Secant)
class Newton(object):
    r"""Proxy of C++ Newton class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations):
        r"""setMaxEvaluations(Newton self, Size evaluations)"""
        return _quantlib_risks.Newton_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound):
        r"""setLowerBound(Newton self, Real lowerBound)"""
        return _quantlib_risks.Newton_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound):
        r"""setUpperBound(Newton self, Real upperBound)"""
        return _quantlib_risks.Newton_setUpperBound(self, upperBound)

    def solve(self, *args):
        r"""
        solve(Newton self, PyObject * function, Real xAccuracy, Real guess, Real step) -> Real
        solve(Newton self, PyObject * function, Real xAccuracy, Real guess, Real xMin, Real xMax) -> Real
        """
        return _quantlib_risks.Newton_solve(self, *args)

    def __init__(self):
        r"""__init__(Newton self) -> Newton"""
        _quantlib_risks.Newton_swiginit(self, _quantlib_risks.new_Newton())
    __swig_destroy__ = _quantlib_risks.delete_Newton

# Register Newton in _quantlib_risks:
_quantlib_risks.Newton_swigregister(Newton)
class NewtonSafe(object):
    r"""Proxy of C++ NewtonSafe class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setMaxEvaluations(self, evaluations):
        r"""setMaxEvaluations(NewtonSafe self, Size evaluations)"""
        return _quantlib_risks.NewtonSafe_setMaxEvaluations(self, evaluations)

    def setLowerBound(self, lowerBound):
        r"""setLowerBound(NewtonSafe self, Real lowerBound)"""
        return _quantlib_risks.NewtonSafe_setLowerBound(self, lowerBound)

    def setUpperBound(self, upperBound):
        r"""setUpperBound(NewtonSafe self, Real upperBound)"""
        return _quantlib_risks.NewtonSafe_setUpperBound(self, upperBound)

    def solve(self, *args):
        r"""
        solve(NewtonSafe self, PyObject * function, Real xAccuracy, Real guess, Real step) -> Real
        solve(NewtonSafe self, PyObject * function, Real xAccuracy, Real guess, Real xMin, Real xMax) -> Real
        """
        return _quantlib_risks.NewtonSafe_solve(self, *args)

    def __init__(self):
        r"""__init__(NewtonSafe self) -> NewtonSafe"""
        _quantlib_risks.NewtonSafe_swiginit(self, _quantlib_risks.new_NewtonSafe())
    __swig_destroy__ = _quantlib_risks.delete_NewtonSafe

# Register NewtonSafe in _quantlib_risks:
_quantlib_risks.NewtonSafe_swigregister(NewtonSafe)
class Constraint(object):
    r"""Proxy of C++ Constraint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _quantlib_risks.delete_Constraint

# Register Constraint in _quantlib_risks:
_quantlib_risks.Constraint_swigregister(Constraint)
class BoundaryConstraint(Constraint):
    r"""Proxy of C++ BoundaryConstraint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lower, upper):
        r"""__init__(BoundaryConstraint self, Real lower, Real upper) -> BoundaryConstraint"""
        _quantlib_risks.BoundaryConstraint_swiginit(self, _quantlib_risks.new_BoundaryConstraint(lower, upper))
    __swig_destroy__ = _quantlib_risks.delete_BoundaryConstraint

# Register BoundaryConstraint in _quantlib_risks:
_quantlib_risks.BoundaryConstraint_swigregister(BoundaryConstraint)
class NoConstraint(Constraint):
    r"""Proxy of C++ NoConstraint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(NoConstraint self) -> NoConstraint"""
        _quantlib_risks.NoConstraint_swiginit(self, _quantlib_risks.new_NoConstraint())
    __swig_destroy__ = _quantlib_risks.delete_NoConstraint

# Register NoConstraint in _quantlib_risks:
_quantlib_risks.NoConstraint_swigregister(NoConstraint)
class PositiveConstraint(Constraint):
    r"""Proxy of C++ PositiveConstraint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PositiveConstraint self) -> PositiveConstraint"""
        _quantlib_risks.PositiveConstraint_swiginit(self, _quantlib_risks.new_PositiveConstraint())
    __swig_destroy__ = _quantlib_risks.delete_PositiveConstraint

# Register PositiveConstraint in _quantlib_risks:
_quantlib_risks.PositiveConstraint_swigregister(PositiveConstraint)
class CompositeConstraint(Constraint):
    r"""Proxy of C++ CompositeConstraint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, c1, c2):
        r"""__init__(CompositeConstraint self, Constraint c1, Constraint c2) -> CompositeConstraint"""
        _quantlib_risks.CompositeConstraint_swiginit(self, _quantlib_risks.new_CompositeConstraint(c1, c2))
    __swig_destroy__ = _quantlib_risks.delete_CompositeConstraint

# Register CompositeConstraint in _quantlib_risks:
_quantlib_risks.CompositeConstraint_swigregister(CompositeConstraint)
class NonhomogeneousBoundaryConstraint(Constraint):
    r"""Proxy of C++ NonhomogeneousBoundaryConstraint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, l, u):
        r"""__init__(NonhomogeneousBoundaryConstraint self, Array l, Array u) -> NonhomogeneousBoundaryConstraint"""
        _quantlib_risks.NonhomogeneousBoundaryConstraint_swiginit(self, _quantlib_risks.new_NonhomogeneousBoundaryConstraint(l, u))
    __swig_destroy__ = _quantlib_risks.delete_NonhomogeneousBoundaryConstraint

# Register NonhomogeneousBoundaryConstraint in _quantlib_risks:
_quantlib_risks.NonhomogeneousBoundaryConstraint_swigregister(NonhomogeneousBoundaryConstraint)
class EndCriteria(object):
    r"""Proxy of C++ EndCriteria class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoCriteria = _quantlib_risks.EndCriteria_NoCriteria
    
    MaxIterations = _quantlib_risks.EndCriteria_MaxIterations
    
    StationaryPoint = _quantlib_risks.EndCriteria_StationaryPoint
    
    StationaryFunctionValue = _quantlib_risks.EndCriteria_StationaryFunctionValue
    
    StationaryFunctionAccuracy = _quantlib_risks.EndCriteria_StationaryFunctionAccuracy
    
    ZeroGradientNorm = _quantlib_risks.EndCriteria_ZeroGradientNorm
    
    Unknown = _quantlib_risks.EndCriteria_Unknown
    

    def __init__(self, maxIteration, maxStationaryStateIterations, rootEpsilon, functionEpsilon, gradientNormEpsilon):
        r"""__init__(EndCriteria self, Size maxIteration, Size maxStationaryStateIterations, Real rootEpsilon, Real functionEpsilon, Real gradientNormEpsilon) -> EndCriteria"""
        _quantlib_risks.EndCriteria_swiginit(self, _quantlib_risks.new_EndCriteria(maxIteration, maxStationaryStateIterations, rootEpsilon, functionEpsilon, gradientNormEpsilon))

    def __call__(self, iteration, statState, positiveOptimization, fold, normgold, fnew, normgnewx, ecType):
        r"""__call__(EndCriteria self, Size iteration, Size & statState, bool const positiveOptimization, Real const fold, Real const normgold, Real const fnew, Real const normgnewx, EndCriteria::Type & ecType) -> bool"""
        return _quantlib_risks.EndCriteria___call__(self, iteration, statState, positiveOptimization, fold, normgold, fnew, normgnewx, ecType)
    __swig_destroy__ = _quantlib_risks.delete_EndCriteria

# Register EndCriteria in _quantlib_risks:
_quantlib_risks.EndCriteria_swigregister(EndCriteria)
class OptimizationMethod(object):
    r"""Proxy of C++ OptimizationMethod class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _quantlib_risks.delete_OptimizationMethod

# Register OptimizationMethod in _quantlib_risks:
_quantlib_risks.OptimizationMethod_swigregister(OptimizationMethod)
class ConjugateGradient(OptimizationMethod):
    r"""Proxy of C++ ConjugateGradient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ConjugateGradient self) -> ConjugateGradient"""
        _quantlib_risks.ConjugateGradient_swiginit(self, _quantlib_risks.new_ConjugateGradient())
    __swig_destroy__ = _quantlib_risks.delete_ConjugateGradient

# Register ConjugateGradient in _quantlib_risks:
_quantlib_risks.ConjugateGradient_swigregister(ConjugateGradient)
class Simplex(OptimizationMethod):
    r"""Proxy of C++ Simplex class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lambda_parameter):
        r"""__init__(Simplex self, Real lambda_parameter) -> Simplex"""
        _quantlib_risks.Simplex_swiginit(self, _quantlib_risks.new_Simplex(lambda_parameter))

    def getLambda(self):
        r"""getLambda(Simplex self) -> Real"""
        return _quantlib_risks.Simplex_getLambda(self)
    __swig_destroy__ = _quantlib_risks.delete_Simplex

# Register Simplex in _quantlib_risks:
_quantlib_risks.Simplex_swigregister(Simplex)
class SteepestDescent(OptimizationMethod):
    r"""Proxy of C++ SteepestDescent class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SteepestDescent self) -> SteepestDescent"""
        _quantlib_risks.SteepestDescent_swiginit(self, _quantlib_risks.new_SteepestDescent())
    __swig_destroy__ = _quantlib_risks.delete_SteepestDescent

# Register SteepestDescent in _quantlib_risks:
_quantlib_risks.SteepestDescent_swigregister(SteepestDescent)
class BFGS(OptimizationMethod):
    r"""Proxy of C++ BFGS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(BFGS self) -> BFGS"""
        _quantlib_risks.BFGS_swiginit(self, _quantlib_risks.new_BFGS())
    __swig_destroy__ = _quantlib_risks.delete_BFGS

# Register BFGS in _quantlib_risks:
_quantlib_risks.BFGS_swigregister(BFGS)
class LevenbergMarquardt(OptimizationMethod):
    r"""Proxy of C++ LevenbergMarquardt class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, epsfcn=1.0e-8, xtol=1.0e-8, gtol=1.0e-8, useCostFunctionsJacobian=False):
        r"""__init__(LevenbergMarquardt self, Real epsfcn=1.0e-8, Real xtol=1.0e-8, Real gtol=1.0e-8, bool useCostFunctionsJacobian=False) -> LevenbergMarquardt"""
        _quantlib_risks.LevenbergMarquardt_swiginit(self, _quantlib_risks.new_LevenbergMarquardt(epsfcn, xtol, gtol, useCostFunctionsJacobian))
    __swig_destroy__ = _quantlib_risks.delete_LevenbergMarquardt

# Register LevenbergMarquardt in _quantlib_risks:
_quantlib_risks.LevenbergMarquardt_swigregister(LevenbergMarquardt)
class DifferentialEvolution(OptimizationMethod):
    r"""Proxy of C++ DifferentialEvolution class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DifferentialEvolution self) -> DifferentialEvolution"""
        _quantlib_risks.DifferentialEvolution_swiginit(self, _quantlib_risks.new_DifferentialEvolution())
    __swig_destroy__ = _quantlib_risks.delete_DifferentialEvolution

# Register DifferentialEvolution in _quantlib_risks:
_quantlib_risks.DifferentialEvolution_swigregister(DifferentialEvolution)
class SamplerGaussian(object):
    r"""Proxy of C++ SamplerGaussian class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        r"""__init__(SamplerGaussian self, unsigned long seed=0) -> SamplerGaussian"""
        _quantlib_risks.SamplerGaussian_swiginit(self, _quantlib_risks.new_SamplerGaussian(seed))
    __swig_destroy__ = _quantlib_risks.delete_SamplerGaussian

# Register SamplerGaussian in _quantlib_risks:
_quantlib_risks.SamplerGaussian_swigregister(SamplerGaussian)
class SamplerLogNormal(object):
    r"""Proxy of C++ SamplerLogNormal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        r"""__init__(SamplerLogNormal self, unsigned long seed=0) -> SamplerLogNormal"""
        _quantlib_risks.SamplerLogNormal_swiginit(self, _quantlib_risks.new_SamplerLogNormal(seed))
    __swig_destroy__ = _quantlib_risks.delete_SamplerLogNormal

# Register SamplerLogNormal in _quantlib_risks:
_quantlib_risks.SamplerLogNormal_swigregister(SamplerLogNormal)
class SamplerMirrorGaussian(object):
    r"""Proxy of C++ SamplerMirrorGaussian class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lower, upper, seed=0):
        r"""__init__(SamplerMirrorGaussian self, Array lower, Array upper, unsigned long seed=0) -> SamplerMirrorGaussian"""
        _quantlib_risks.SamplerMirrorGaussian_swiginit(self, _quantlib_risks.new_SamplerMirrorGaussian(lower, upper, seed))
    __swig_destroy__ = _quantlib_risks.delete_SamplerMirrorGaussian

# Register SamplerMirrorGaussian in _quantlib_risks:
_quantlib_risks.SamplerMirrorGaussian_swigregister(SamplerMirrorGaussian)
class ProbabilityBoltzmannDownhill(object):
    r"""Proxy of C++ ProbabilityBoltzmannDownhill class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        r"""__init__(ProbabilityBoltzmannDownhill self, unsigned long seed=0) -> ProbabilityBoltzmannDownhill"""
        _quantlib_risks.ProbabilityBoltzmannDownhill_swiginit(self, _quantlib_risks.new_ProbabilityBoltzmannDownhill(seed))
    __swig_destroy__ = _quantlib_risks.delete_ProbabilityBoltzmannDownhill

# Register ProbabilityBoltzmannDownhill in _quantlib_risks:
_quantlib_risks.ProbabilityBoltzmannDownhill_swigregister(ProbabilityBoltzmannDownhill)
class TemperatureExponential(object):
    r"""Proxy of C++ TemperatureExponential class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, initialTemp, dimension, power=0.95):
        r"""__init__(TemperatureExponential self, Real initialTemp, Size dimension, Real power=0.95) -> TemperatureExponential"""
        _quantlib_risks.TemperatureExponential_swiginit(self, _quantlib_risks.new_TemperatureExponential(initialTemp, dimension, power))
    __swig_destroy__ = _quantlib_risks.delete_TemperatureExponential

# Register TemperatureExponential in _quantlib_risks:
_quantlib_risks.TemperatureExponential_swigregister(TemperatureExponential)
class ReannealingTrivial(object):
    r"""Proxy of C++ ReannealingTrivial class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ReannealingTrivial self) -> ReannealingTrivial"""
        _quantlib_risks.ReannealingTrivial_swiginit(self, _quantlib_risks.new_ReannealingTrivial())
    __swig_destroy__ = _quantlib_risks.delete_ReannealingTrivial

# Register ReannealingTrivial in _quantlib_risks:
_quantlib_risks.ReannealingTrivial_swigregister(ReannealingTrivial)
class GaussianSimulatedAnnealing(OptimizationMethod):
    r"""Proxy of C++ GaussianSimulatedAnnealing class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoResetScheme = _quantlib_risks.GaussianSimulatedAnnealing_NoResetScheme
    
    ResetToBestPoint = _quantlib_risks.GaussianSimulatedAnnealing_ResetToBestPoint
    
    ResetToOrigin = _quantlib_risks.GaussianSimulatedAnnealing_ResetToOrigin
    

    def __init__(self, *args):
        r"""__init__(GaussianSimulatedAnnealing self, SamplerGaussian sampler, ProbabilityBoltzmannDownhill probability, TemperatureExponential temperature, ReannealingTrivial reannealing=ReannealingTrivial(), Real startTemperature=200.0, Real endTemperature=0.01, Size reAnnealSteps=50, GaussianSimulatedAnnealing::ResetScheme resetScheme=ResetToBestPoint, Size resetSteps=150) -> GaussianSimulatedAnnealing"""
        _quantlib_risks.GaussianSimulatedAnnealing_swiginit(self, _quantlib_risks.new_GaussianSimulatedAnnealing(*args))
    __swig_destroy__ = _quantlib_risks.delete_GaussianSimulatedAnnealing

# Register GaussianSimulatedAnnealing in _quantlib_risks:
_quantlib_risks.GaussianSimulatedAnnealing_swigregister(GaussianSimulatedAnnealing)
class MirrorGaussianSimulatedAnnealing(OptimizationMethod):
    r"""Proxy of C++ MirrorGaussianSimulatedAnnealing class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoResetScheme = _quantlib_risks.MirrorGaussianSimulatedAnnealing_NoResetScheme
    
    ResetToBestPoint = _quantlib_risks.MirrorGaussianSimulatedAnnealing_ResetToBestPoint
    
    ResetToOrigin = _quantlib_risks.MirrorGaussianSimulatedAnnealing_ResetToOrigin
    

    def __init__(self, *args):
        r"""__init__(MirrorGaussianSimulatedAnnealing self, SamplerMirrorGaussian sampler, ProbabilityBoltzmannDownhill probability, TemperatureExponential temperature, ReannealingTrivial reannealing=ReannealingTrivial(), Real startTemperature=200.0, Real endTemperature=0.01, Size reAnnealSteps=50, MirrorGaussianSimulatedAnnealing::ResetScheme resetScheme=ResetToBestPoint, Size resetSteps=150) -> MirrorGaussianSimulatedAnnealing"""
        _quantlib_risks.MirrorGaussianSimulatedAnnealing_swiginit(self, _quantlib_risks.new_MirrorGaussianSimulatedAnnealing(*args))
    __swig_destroy__ = _quantlib_risks.delete_MirrorGaussianSimulatedAnnealing

# Register MirrorGaussianSimulatedAnnealing in _quantlib_risks:
_quantlib_risks.MirrorGaussianSimulatedAnnealing_swigregister(MirrorGaussianSimulatedAnnealing)
class LogNormalSimulatedAnnealing(OptimizationMethod):
    r"""Proxy of C++ LogNormalSimulatedAnnealing class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoResetScheme = _quantlib_risks.LogNormalSimulatedAnnealing_NoResetScheme
    
    ResetToBestPoint = _quantlib_risks.LogNormalSimulatedAnnealing_ResetToBestPoint
    
    ResetToOrigin = _quantlib_risks.LogNormalSimulatedAnnealing_ResetToOrigin
    

    def __init__(self, *args):
        r"""__init__(LogNormalSimulatedAnnealing self, SamplerLogNormal sampler, ProbabilityBoltzmannDownhill probability, TemperatureExponential temperature, ReannealingTrivial reannealing=ReannealingTrivial(), Real startTemperature=10.0, Real endTemperature=0.01, Size reAnnealSteps=50, LogNormalSimulatedAnnealing::ResetScheme resetScheme=ResetToBestPoint, Size resetSteps=150) -> LogNormalSimulatedAnnealing"""
        _quantlib_risks.LogNormalSimulatedAnnealing_swiginit(self, _quantlib_risks.new_LogNormalSimulatedAnnealing(*args))
    __swig_destroy__ = _quantlib_risks.delete_LogNormalSimulatedAnnealing

# Register LogNormalSimulatedAnnealing in _quantlib_risks:
_quantlib_risks.LogNormalSimulatedAnnealing_swigregister(LogNormalSimulatedAnnealing)
class Optimizer(object):
    r"""Proxy of C++ Optimizer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def solve(self, function, c, m, e, iv):
        r"""solve(Optimizer self, PyObject * function, Constraint c, OptimizationMethod m, EndCriteria e, Array iv) -> Array"""
        return _quantlib_risks.Optimizer_solve(self, function, c, m, e, iv)

    def __init__(self):
        r"""__init__(Optimizer self) -> Optimizer"""
        _quantlib_risks.Optimizer_swiginit(self, _quantlib_risks.new_Optimizer())
    __swig_destroy__ = _quantlib_risks.delete_Optimizer

# Register Optimizer in _quantlib_risks:
_quantlib_risks.Optimizer_swigregister(Optimizer)
class LinearInterpolation(object):
    r"""Proxy of C++ SafeLinearInterpolation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        r"""__init__(LinearInterpolation self, Array x, Array y) -> LinearInterpolation"""
        _quantlib_risks.LinearInterpolation_swiginit(self, _quantlib_risks.new_LinearInterpolation(x, y))

    def __call__(self, x, allowExtrapolation=False):
        r"""__call__(LinearInterpolation self, Real x, bool allowExtrapolation=False) -> Real"""
        return _quantlib_risks.LinearInterpolation___call__(self, x, allowExtrapolation)
    __swig_destroy__ = _quantlib_risks.delete_LinearInterpolation

# Register LinearInterpolation in _quantlib_risks:
_quantlib_risks.LinearInterpolation_swigregister(LinearInterpolation)
class LogLinearInterpolation(object):
    r"""Proxy of C++ SafeLogLinearInterpolation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        r"""__init__(LogLinearInterpolation self, Array x, Array y) -> LogLinearInterpolation"""
        _quantlib_risks.LogLinearInterpolation_swiginit(self, _quantlib_risks.new_LogLinearInterpolation(x, y))

    def __call__(self, x, allowExtrapolation=False):
        r"""__call__(LogLinearInterpolation self, Real x, bool allowExtrapolation=False) -> Real"""
        return _quantlib_risks.LogLinearInterpolation___call__(self, x, allowExtrapolation)
    __swig_destroy__ = _quantlib_risks.delete_LogLinearInterpolation

# Register LogLinearInterpolation in _quantlib_risks:
_quantlib_risks.LogLinearInterpolation_swigregister(LogLinearInterpolation)
class BackwardFlatInterpolation(object):
    r"""Proxy of C++ SafeBackwardFlatInterpolation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        r"""__init__(BackwardFlatInterpolation self, Array x, Array y) -> BackwardFlatInterpolation"""
        _quantlib_risks.BackwardFlatInterpolation_swiginit(self, _quantlib_risks.new_BackwardFlatInterpolation(x, y))

    def __call__(self, x, allowExtrapolation=False):
        r"""__call__(BackwardFlatInterpolation self, Real x, bool allowExtrapolation=False) -> Real"""
        return _quantlib_risks.BackwardFlatInterpolation___call__(self, x, allowExtrapolation)
    __swig_destroy__ = _quantlib_risks.delete_BackwardFlatInterpolation

# Register BackwardFlatInterpolation in _quantlib_risks:
_quantlib_risks.BackwardFlatInterpolation_swigregister(BackwardFlatInterpolation)
class ForwardFlatInterpolation(object):
    r"""Proxy of C++ SafeForwardFlatInterpolation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        r"""__init__(ForwardFlatInterpolation self, Array x, Array y) -> ForwardFlatInterpolation"""
        _quantlib_risks.ForwardFlatInterpolation_swiginit(self, _quantlib_risks.new_ForwardFlatInterpolation(x, y))

    def __call__(self, x, allowExtrapolation=False):
        r"""__call__(ForwardFlatInterpolation self, Real x, bool allowExtrapolation=False) -> Real"""
        return _quantlib_risks.ForwardFlatInterpolation___call__(self, x, allowExtrapolation)
    __swig_destroy__ = _quantlib_risks.delete_ForwardFlatInterpolation

# Register ForwardFlatInterpolation in _quantlib_risks:
_quantlib_risks.ForwardFlatInterpolation_swigregister(ForwardFlatInterpolation)
class CubicNaturalSpline(object):
    r"""Proxy of C++ SafeCubicNaturalSpline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        r"""__init__(CubicNaturalSpline self, Array x, Array y) -> CubicNaturalSpline"""
        _quantlib_risks.CubicNaturalSpline_swiginit(self, _quantlib_risks.new_CubicNaturalSpline(x, y))

    def __call__(self, x, allowExtrapolation=False):
        r"""__call__(CubicNaturalSpline self, Real x, bool allowExtrapolation=False) -> Real"""
        return _quantlib_risks.CubicNaturalSpline___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        r"""derivative(CubicNaturalSpline self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.CubicNaturalSpline_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        r"""secondDerivative(CubicNaturalSpline self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.CubicNaturalSpline_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        r"""primitive(CubicNaturalSpline self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.CubicNaturalSpline_primitive(self, x, extrapolate)
    __swig_destroy__ = _quantlib_risks.delete_CubicNaturalSpline

# Register CubicNaturalSpline in _quantlib_risks:
_quantlib_risks.CubicNaturalSpline_swigregister(CubicNaturalSpline)
class LogCubicNaturalSpline(object):
    r"""Proxy of C++ SafeLogCubicNaturalSpline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        r"""__init__(LogCubicNaturalSpline self, Array x, Array y) -> LogCubicNaturalSpline"""
        _quantlib_risks.LogCubicNaturalSpline_swiginit(self, _quantlib_risks.new_LogCubicNaturalSpline(x, y))

    def __call__(self, x, allowExtrapolation=False):
        r"""__call__(LogCubicNaturalSpline self, Real x, bool allowExtrapolation=False) -> Real"""
        return _quantlib_risks.LogCubicNaturalSpline___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        r"""derivative(LogCubicNaturalSpline self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.LogCubicNaturalSpline_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        r"""secondDerivative(LogCubicNaturalSpline self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.LogCubicNaturalSpline_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        r"""primitive(LogCubicNaturalSpline self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.LogCubicNaturalSpline_primitive(self, x, extrapolate)
    __swig_destroy__ = _quantlib_risks.delete_LogCubicNaturalSpline

# Register LogCubicNaturalSpline in _quantlib_risks:
_quantlib_risks.LogCubicNaturalSpline_swigregister(LogCubicNaturalSpline)
class MonotonicCubicNaturalSpline(object):
    r"""Proxy of C++ SafeMonotonicCubicNaturalSpline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        r"""__init__(MonotonicCubicNaturalSpline self, Array x, Array y) -> MonotonicCubicNaturalSpline"""
        _quantlib_risks.MonotonicCubicNaturalSpline_swiginit(self, _quantlib_risks.new_MonotonicCubicNaturalSpline(x, y))

    def __call__(self, x, allowExtrapolation=False):
        r"""__call__(MonotonicCubicNaturalSpline self, Real x, bool allowExtrapolation=False) -> Real"""
        return _quantlib_risks.MonotonicCubicNaturalSpline___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        r"""derivative(MonotonicCubicNaturalSpline self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.MonotonicCubicNaturalSpline_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        r"""secondDerivative(MonotonicCubicNaturalSpline self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.MonotonicCubicNaturalSpline_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        r"""primitive(MonotonicCubicNaturalSpline self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.MonotonicCubicNaturalSpline_primitive(self, x, extrapolate)
    __swig_destroy__ = _quantlib_risks.delete_MonotonicCubicNaturalSpline

# Register MonotonicCubicNaturalSpline in _quantlib_risks:
_quantlib_risks.MonotonicCubicNaturalSpline_swigregister(MonotonicCubicNaturalSpline)
class MonotonicLogCubicNaturalSpline(object):
    r"""Proxy of C++ SafeMonotonicLogCubicNaturalSpline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        r"""__init__(MonotonicLogCubicNaturalSpline self, Array x, Array y) -> MonotonicLogCubicNaturalSpline"""
        _quantlib_risks.MonotonicLogCubicNaturalSpline_swiginit(self, _quantlib_risks.new_MonotonicLogCubicNaturalSpline(x, y))

    def __call__(self, x, allowExtrapolation=False):
        r"""__call__(MonotonicLogCubicNaturalSpline self, Real x, bool allowExtrapolation=False) -> Real"""
        return _quantlib_risks.MonotonicLogCubicNaturalSpline___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        r"""derivative(MonotonicLogCubicNaturalSpline self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.MonotonicLogCubicNaturalSpline_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        r"""secondDerivative(MonotonicLogCubicNaturalSpline self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.MonotonicLogCubicNaturalSpline_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        r"""primitive(MonotonicLogCubicNaturalSpline self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.MonotonicLogCubicNaturalSpline_primitive(self, x, extrapolate)
    __swig_destroy__ = _quantlib_risks.delete_MonotonicLogCubicNaturalSpline

# Register MonotonicLogCubicNaturalSpline in _quantlib_risks:
_quantlib_risks.MonotonicLogCubicNaturalSpline_swigregister(MonotonicLogCubicNaturalSpline)
class KrugerCubic(object):
    r"""Proxy of C++ SafeKrugerCubic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        r"""__init__(KrugerCubic self, Array x, Array y) -> KrugerCubic"""
        _quantlib_risks.KrugerCubic_swiginit(self, _quantlib_risks.new_KrugerCubic(x, y))

    def __call__(self, x, allowExtrapolation=False):
        r"""__call__(KrugerCubic self, Real x, bool allowExtrapolation=False) -> Real"""
        return _quantlib_risks.KrugerCubic___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        r"""derivative(KrugerCubic self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.KrugerCubic_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        r"""secondDerivative(KrugerCubic self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.KrugerCubic_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        r"""primitive(KrugerCubic self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.KrugerCubic_primitive(self, x, extrapolate)
    __swig_destroy__ = _quantlib_risks.delete_KrugerCubic

# Register KrugerCubic in _quantlib_risks:
_quantlib_risks.KrugerCubic_swigregister(KrugerCubic)
class KrugerLogCubic(object):
    r"""Proxy of C++ SafeKrugerLogCubic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        r"""__init__(KrugerLogCubic self, Array x, Array y) -> KrugerLogCubic"""
        _quantlib_risks.KrugerLogCubic_swiginit(self, _quantlib_risks.new_KrugerLogCubic(x, y))

    def __call__(self, x, allowExtrapolation=False):
        r"""__call__(KrugerLogCubic self, Real x, bool allowExtrapolation=False) -> Real"""
        return _quantlib_risks.KrugerLogCubic___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        r"""derivative(KrugerLogCubic self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.KrugerLogCubic_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        r"""secondDerivative(KrugerLogCubic self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.KrugerLogCubic_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        r"""primitive(KrugerLogCubic self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.KrugerLogCubic_primitive(self, x, extrapolate)
    __swig_destroy__ = _quantlib_risks.delete_KrugerLogCubic

# Register KrugerLogCubic in _quantlib_risks:
_quantlib_risks.KrugerLogCubic_swigregister(KrugerLogCubic)
class FritschButlandCubic(object):
    r"""Proxy of C++ SafeFritschButlandCubic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        r"""__init__(FritschButlandCubic self, Array x, Array y) -> FritschButlandCubic"""
        _quantlib_risks.FritschButlandCubic_swiginit(self, _quantlib_risks.new_FritschButlandCubic(x, y))

    def __call__(self, x, allowExtrapolation=False):
        r"""__call__(FritschButlandCubic self, Real x, bool allowExtrapolation=False) -> Real"""
        return _quantlib_risks.FritschButlandCubic___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        r"""derivative(FritschButlandCubic self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.FritschButlandCubic_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        r"""secondDerivative(FritschButlandCubic self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.FritschButlandCubic_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        r"""primitive(FritschButlandCubic self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.FritschButlandCubic_primitive(self, x, extrapolate)
    __swig_destroy__ = _quantlib_risks.delete_FritschButlandCubic

# Register FritschButlandCubic in _quantlib_risks:
_quantlib_risks.FritschButlandCubic_swigregister(FritschButlandCubic)
class FritschButlandLogCubic(object):
    r"""Proxy of C++ SafeFritschButlandLogCubic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        r"""__init__(FritschButlandLogCubic self, Array x, Array y) -> FritschButlandLogCubic"""
        _quantlib_risks.FritschButlandLogCubic_swiginit(self, _quantlib_risks.new_FritschButlandLogCubic(x, y))

    def __call__(self, x, allowExtrapolation=False):
        r"""__call__(FritschButlandLogCubic self, Real x, bool allowExtrapolation=False) -> Real"""
        return _quantlib_risks.FritschButlandLogCubic___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        r"""derivative(FritschButlandLogCubic self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.FritschButlandLogCubic_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        r"""secondDerivative(FritschButlandLogCubic self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.FritschButlandLogCubic_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        r"""primitive(FritschButlandLogCubic self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.FritschButlandLogCubic_primitive(self, x, extrapolate)
    __swig_destroy__ = _quantlib_risks.delete_FritschButlandLogCubic

# Register FritschButlandLogCubic in _quantlib_risks:
_quantlib_risks.FritschButlandLogCubic_swigregister(FritschButlandLogCubic)
class Parabolic(object):
    r"""Proxy of C++ SafeParabolic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        r"""__init__(Parabolic self, Array x, Array y) -> Parabolic"""
        _quantlib_risks.Parabolic_swiginit(self, _quantlib_risks.new_Parabolic(x, y))

    def __call__(self, x, allowExtrapolation=False):
        r"""__call__(Parabolic self, Real x, bool allowExtrapolation=False) -> Real"""
        return _quantlib_risks.Parabolic___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        r"""derivative(Parabolic self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.Parabolic_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        r"""secondDerivative(Parabolic self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.Parabolic_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        r"""primitive(Parabolic self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.Parabolic_primitive(self, x, extrapolate)
    __swig_destroy__ = _quantlib_risks.delete_Parabolic

# Register Parabolic in _quantlib_risks:
_quantlib_risks.Parabolic_swigregister(Parabolic)
class LogParabolic(object):
    r"""Proxy of C++ SafeLogParabolic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        r"""__init__(LogParabolic self, Array x, Array y) -> LogParabolic"""
        _quantlib_risks.LogParabolic_swiginit(self, _quantlib_risks.new_LogParabolic(x, y))

    def __call__(self, x, allowExtrapolation=False):
        r"""__call__(LogParabolic self, Real x, bool allowExtrapolation=False) -> Real"""
        return _quantlib_risks.LogParabolic___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        r"""derivative(LogParabolic self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.LogParabolic_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        r"""secondDerivative(LogParabolic self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.LogParabolic_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        r"""primitive(LogParabolic self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.LogParabolic_primitive(self, x, extrapolate)
    __swig_destroy__ = _quantlib_risks.delete_LogParabolic

# Register LogParabolic in _quantlib_risks:
_quantlib_risks.LogParabolic_swigregister(LogParabolic)
class MonotonicParabolic(object):
    r"""Proxy of C++ SafeMonotonicParabolic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        r"""__init__(MonotonicParabolic self, Array x, Array y) -> MonotonicParabolic"""
        _quantlib_risks.MonotonicParabolic_swiginit(self, _quantlib_risks.new_MonotonicParabolic(x, y))

    def __call__(self, x, allowExtrapolation=False):
        r"""__call__(MonotonicParabolic self, Real x, bool allowExtrapolation=False) -> Real"""
        return _quantlib_risks.MonotonicParabolic___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        r"""derivative(MonotonicParabolic self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.MonotonicParabolic_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        r"""secondDerivative(MonotonicParabolic self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.MonotonicParabolic_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        r"""primitive(MonotonicParabolic self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.MonotonicParabolic_primitive(self, x, extrapolate)
    __swig_destroy__ = _quantlib_risks.delete_MonotonicParabolic

# Register MonotonicParabolic in _quantlib_risks:
_quantlib_risks.MonotonicParabolic_swigregister(MonotonicParabolic)
class MonotonicLogParabolic(object):
    r"""Proxy of C++ SafeMonotonicLogParabolic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        r"""__init__(MonotonicLogParabolic self, Array x, Array y) -> MonotonicLogParabolic"""
        _quantlib_risks.MonotonicLogParabolic_swiginit(self, _quantlib_risks.new_MonotonicLogParabolic(x, y))

    def __call__(self, x, allowExtrapolation=False):
        r"""__call__(MonotonicLogParabolic self, Real x, bool allowExtrapolation=False) -> Real"""
        return _quantlib_risks.MonotonicLogParabolic___call__(self, x, allowExtrapolation)

    def derivative(self, x, extrapolate=False):
        r"""derivative(MonotonicLogParabolic self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.MonotonicLogParabolic_derivative(self, x, extrapolate)

    def secondDerivative(self, x, extrapolate=False):
        r"""secondDerivative(MonotonicLogParabolic self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.MonotonicLogParabolic_secondDerivative(self, x, extrapolate)

    def primitive(self, x, extrapolate=False):
        r"""primitive(MonotonicLogParabolic self, Real x, bool extrapolate=False) -> Real"""
        return _quantlib_risks.MonotonicLogParabolic_primitive(self, x, extrapolate)
    __swig_destroy__ = _quantlib_risks.delete_MonotonicLogParabolic

# Register MonotonicLogParabolic in _quantlib_risks:
_quantlib_risks.MonotonicLogParabolic_swigregister(MonotonicLogParabolic)
class LagrangeInterpolation(object):
    r"""Proxy of C++ SafeLagrangeInterpolation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y):
        r"""__init__(LagrangeInterpolation self, Array x, Array y) -> LagrangeInterpolation"""
        _quantlib_risks.LagrangeInterpolation_swiginit(self, _quantlib_risks.new_LagrangeInterpolation(x, y))

    def __call__(self, x, allowExtrapolation=False):
        r"""__call__(LagrangeInterpolation self, Real x, bool allowExtrapolation=False) -> Real"""
        return _quantlib_risks.LagrangeInterpolation___call__(self, x, allowExtrapolation)
    __swig_destroy__ = _quantlib_risks.delete_LagrangeInterpolation

# Register LagrangeInterpolation in _quantlib_risks:
_quantlib_risks.LagrangeInterpolation_swigregister(LagrangeInterpolation)
class BilinearInterpolation(object):
    r"""Proxy of C++ SafeBilinearInterpolation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y, m):
        r"""__init__(BilinearInterpolation self, Array x, Array y, Matrix m) -> BilinearInterpolation"""
        _quantlib_risks.BilinearInterpolation_swiginit(self, _quantlib_risks.new_BilinearInterpolation(x, y, m))

    def __call__(self, x, y, allowExtrapolation=False):
        r"""__call__(BilinearInterpolation self, Real x, Real y, bool allowExtrapolation=False) -> Real"""
        return _quantlib_risks.BilinearInterpolation___call__(self, x, y, allowExtrapolation)
    __swig_destroy__ = _quantlib_risks.delete_BilinearInterpolation

# Register BilinearInterpolation in _quantlib_risks:
_quantlib_risks.BilinearInterpolation_swigregister(BilinearInterpolation)
class BicubicSpline(object):
    r"""Proxy of C++ SafeBicubicSpline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y, m):
        r"""__init__(BicubicSpline self, Array x, Array y, Matrix m) -> BicubicSpline"""
        _quantlib_risks.BicubicSpline_swiginit(self, _quantlib_risks.new_BicubicSpline(x, y, m))

    def __call__(self, x, y, allowExtrapolation=False):
        r"""__call__(BicubicSpline self, Real x, Real y, bool allowExtrapolation=False) -> Real"""
        return _quantlib_risks.BicubicSpline___call__(self, x, y, allowExtrapolation)
    __swig_destroy__ = _quantlib_risks.delete_BicubicSpline

# Register BicubicSpline in _quantlib_risks:
_quantlib_risks.BicubicSpline_swigregister(BicubicSpline)
class CubicInterpolation(object):
    r"""Proxy of C++ CubicInterpolation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Spline = _quantlib_risks.CubicInterpolation_Spline
    
    SplineOM1 = _quantlib_risks.CubicInterpolation_SplineOM1
    
    SplineOM2 = _quantlib_risks.CubicInterpolation_SplineOM2
    
    FourthOrder = _quantlib_risks.CubicInterpolation_FourthOrder
    
    Parabolic = _quantlib_risks.CubicInterpolation_Parabolic
    
    FritschButland = _quantlib_risks.CubicInterpolation_FritschButland
    
    Akima = _quantlib_risks.CubicInterpolation_Akima
    
    Kruger = _quantlib_risks.CubicInterpolation_Kruger
    
    Harmonic = _quantlib_risks.CubicInterpolation_Harmonic
    
    __swig_destroy__ = _quantlib_risks.delete_CubicInterpolation

# Register CubicInterpolation in _quantlib_risks:
_quantlib_risks.CubicInterpolation_swigregister(CubicInterpolation)
class MixedInterpolation(object):
    r"""Proxy of C++ MixedInterpolation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ShareRanges = _quantlib_risks.MixedInterpolation_ShareRanges
    
    SplitRanges = _quantlib_risks.MixedInterpolation_SplitRanges
    
    __swig_destroy__ = _quantlib_risks.delete_MixedInterpolation

# Register MixedInterpolation in _quantlib_risks:
_quantlib_risks.MixedInterpolation_swigregister(MixedInterpolation)
class BackwardFlat(object):
    r"""Proxy of C++ BackwardFlat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(BackwardFlat self) -> BackwardFlat"""
        _quantlib_risks.BackwardFlat_swiginit(self, _quantlib_risks.new_BackwardFlat())
    __swig_destroy__ = _quantlib_risks.delete_BackwardFlat

# Register BackwardFlat in _quantlib_risks:
_quantlib_risks.BackwardFlat_swigregister(BackwardFlat)
class ForwardFlat(object):
    r"""Proxy of C++ ForwardFlat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ForwardFlat self) -> ForwardFlat"""
        _quantlib_risks.ForwardFlat_swiginit(self, _quantlib_risks.new_ForwardFlat())
    __swig_destroy__ = _quantlib_risks.delete_ForwardFlat

# Register ForwardFlat in _quantlib_risks:
_quantlib_risks.ForwardFlat_swigregister(ForwardFlat)
class Linear(object):
    r"""Proxy of C++ Linear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Linear self) -> Linear"""
        _quantlib_risks.Linear_swiginit(self, _quantlib_risks.new_Linear())
    __swig_destroy__ = _quantlib_risks.delete_Linear

# Register Linear in _quantlib_risks:
_quantlib_risks.Linear_swigregister(Linear)
class LogLinear(object):
    r"""Proxy of C++ LogLinear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(LogLinear self) -> LogLinear"""
        _quantlib_risks.LogLinear_swiginit(self, _quantlib_risks.new_LogLinear())
    __swig_destroy__ = _quantlib_risks.delete_LogLinear

# Register LogLinear in _quantlib_risks:
_quantlib_risks.LogLinear_swigregister(LogLinear)
class Cubic(object):
    r"""Proxy of C++ Cubic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Cubic self) -> Cubic"""
        _quantlib_risks.Cubic_swiginit(self, _quantlib_risks.new_Cubic())
    __swig_destroy__ = _quantlib_risks.delete_Cubic

# Register Cubic in _quantlib_risks:
_quantlib_risks.Cubic_swigregister(Cubic)
class Bicubic(object):
    r"""Proxy of C++ Bicubic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Bicubic self) -> Bicubic"""
        _quantlib_risks.Bicubic_swiginit(self, _quantlib_risks.new_Bicubic())
    __swig_destroy__ = _quantlib_risks.delete_Bicubic

# Register Bicubic in _quantlib_risks:
_quantlib_risks.Bicubic_swigregister(Bicubic)
class MonotonicCubic(object):
    r"""Proxy of C++ MonotonicCubic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(MonotonicCubic self) -> MonotonicCubic"""
        _quantlib_risks.MonotonicCubic_swiginit(self, _quantlib_risks.new_MonotonicCubic())
    __swig_destroy__ = _quantlib_risks.delete_MonotonicCubic

# Register MonotonicCubic in _quantlib_risks:
_quantlib_risks.MonotonicCubic_swigregister(MonotonicCubic)
class DefaultLogCubic(object):
    r"""Proxy of C++ DefaultLogCubic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DefaultLogCubic self) -> DefaultLogCubic"""
        _quantlib_risks.DefaultLogCubic_swiginit(self, _quantlib_risks.new_DefaultLogCubic())
    __swig_destroy__ = _quantlib_risks.delete_DefaultLogCubic

# Register DefaultLogCubic in _quantlib_risks:
_quantlib_risks.DefaultLogCubic_swigregister(DefaultLogCubic)
class MonotonicLogCubic(object):
    r"""Proxy of C++ MonotonicLogCubic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(MonotonicLogCubic self) -> MonotonicLogCubic"""
        _quantlib_risks.MonotonicLogCubic_swiginit(self, _quantlib_risks.new_MonotonicLogCubic())
    __swig_destroy__ = _quantlib_risks.delete_MonotonicLogCubic

# Register MonotonicLogCubic in _quantlib_risks:
_quantlib_risks.MonotonicLogCubic_swigregister(MonotonicLogCubic)
class SplineCubic(object):
    r"""Proxy of C++ SplineCubic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SplineCubic self) -> SplineCubic"""
        _quantlib_risks.SplineCubic_swiginit(self, _quantlib_risks.new_SplineCubic())
    __swig_destroy__ = _quantlib_risks.delete_SplineCubic

# Register SplineCubic in _quantlib_risks:
_quantlib_risks.SplineCubic_swigregister(SplineCubic)
class SplineLogCubic(object):
    r"""Proxy of C++ SplineLogCubic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SplineLogCubic self) -> SplineLogCubic"""
        _quantlib_risks.SplineLogCubic_swiginit(self, _quantlib_risks.new_SplineLogCubic())
    __swig_destroy__ = _quantlib_risks.delete_SplineLogCubic

# Register SplineLogCubic in _quantlib_risks:
_quantlib_risks.SplineLogCubic_swigregister(SplineLogCubic)
class Kruger(object):
    r"""Proxy of C++ Kruger class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Kruger self) -> Kruger"""
        _quantlib_risks.Kruger_swiginit(self, _quantlib_risks.new_Kruger())
    __swig_destroy__ = _quantlib_risks.delete_Kruger

# Register Kruger in _quantlib_risks:
_quantlib_risks.Kruger_swigregister(Kruger)
class KrugerLog(object):
    r"""Proxy of C++ KrugerLog class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(KrugerLog self) -> KrugerLog"""
        _quantlib_risks.KrugerLog_swiginit(self, _quantlib_risks.new_KrugerLog())
    __swig_destroy__ = _quantlib_risks.delete_KrugerLog

# Register KrugerLog in _quantlib_risks:
_quantlib_risks.KrugerLog_swigregister(KrugerLog)
class ConvexMonotone(object):
    r"""Proxy of C++ ConvexMonotone class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, quadraticity=0.3, monotonicity=0.7, forcePositive=True):
        r"""__init__(ConvexMonotone self, Real quadraticity=0.3, Real monotonicity=0.7, bool forcePositive=True) -> ConvexMonotone"""
        _quantlib_risks.ConvexMonotone_swiginit(self, _quantlib_risks.new_ConvexMonotone(quadraticity, monotonicity, forcePositive))
    __swig_destroy__ = _quantlib_risks.delete_ConvexMonotone

# Register ConvexMonotone in _quantlib_risks:
_quantlib_risks.ConvexMonotone_swigregister(ConvexMonotone)
class LogMixedLinearCubic(object):
    r"""Proxy of C++ LogMixedLinearCubic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(LogMixedLinearCubic self, Size n=0, MixedInterpolation::Behavior behavior=ShareRanges, CubicInterpolation::DerivativeApprox da=Spline, bool monotonic=True) -> LogMixedLinearCubic"""
        _quantlib_risks.LogMixedLinearCubic_swiginit(self, _quantlib_risks.new_LogMixedLinearCubic(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_LogMixedLinearCubic

# Register LogMixedLinearCubic in _quantlib_risks:
_quantlib_risks.LogMixedLinearCubic_swigregister(LogMixedLinearCubic)
class SABRInterpolation(object):
    r"""Proxy of C++ SafeSABRInterpolation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(SABRInterpolation self, Array x, Array y, Time t, Real forward, Real alpha, Real beta, Real nu, Real rho, bool alphaIsFixed=False, bool betaIsFixed=False, bool nuIsFixed=False, bool rhoIsFixed=False, bool vegaWeighted=True, ext::shared_ptr< EndCriteria > const & endCriteria=ext::shared_ptr< EndCriteria >(), ext::shared_ptr< OptimizationMethod > const & optMethod=ext::shared_ptr< OptimizationMethod >(), Real const errorAccept=0.0020, bool const useMaxError=False, Size const maxGuesses=50, Real const shift=0.0) -> SABRInterpolation"""
        _quantlib_risks.SABRInterpolation_swiginit(self, _quantlib_risks.new_SABRInterpolation(*args, **kwargs))

    def __call__(self, x, allowExtrapolation=False):
        r"""__call__(SABRInterpolation self, Real x, bool allowExtrapolation=False) -> Real"""
        return _quantlib_risks.SABRInterpolation___call__(self, x, allowExtrapolation)

    def alpha(self):
        r"""alpha(SABRInterpolation self) -> Real"""
        return _quantlib_risks.SABRInterpolation_alpha(self)

    def beta(self):
        r"""beta(SABRInterpolation self) -> Real"""
        return _quantlib_risks.SABRInterpolation_beta(self)

    def rho(self):
        r"""rho(SABRInterpolation self) -> Real"""
        return _quantlib_risks.SABRInterpolation_rho(self)

    def nu(self):
        r"""nu(SABRInterpolation self) -> Real"""
        return _quantlib_risks.SABRInterpolation_nu(self)
    __swig_destroy__ = _quantlib_risks.delete_SABRInterpolation

# Register SABRInterpolation in _quantlib_risks:
_quantlib_risks.SABRInterpolation_swigregister(SABRInterpolation)
class RichardsonExtrapolation(object):
    r"""Proxy of C++ RichardsonExtrapolation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, *args):
        r"""
        __call__(RichardsonExtrapolation self, Real t=2.0) -> Real
        __call__(RichardsonExtrapolation self, Real t, Real s) -> Real
        """
        return _quantlib_risks.RichardsonExtrapolation___call__(self, *args)

    def __init__(self, *args):
        r"""__init__(RichardsonExtrapolation self, PyObject * fct, Real delta_h, Real n=Null< Real >()) -> RichardsonExtrapolation"""
        _quantlib_risks.RichardsonExtrapolation_swiginit(self, _quantlib_risks.new_RichardsonExtrapolation(*args))
    __swig_destroy__ = _quantlib_risks.delete_RichardsonExtrapolation

# Register RichardsonExtrapolation in _quantlib_risks:
_quantlib_risks.RichardsonExtrapolation_swigregister(RichardsonExtrapolation)
class ChebyshevInterpolation(object):
    r"""Proxy of C++ ChebyshevInterpolation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FirstKind = _quantlib_risks.ChebyshevInterpolation_FirstKind
    
    SecondKind = _quantlib_risks.ChebyshevInterpolation_SecondKind
    

    def __init__(self, *args):
        r"""
        __init__(ChebyshevInterpolation self, Array f, ChebyshevInterpolation::PointsType pointsType=SecondKind) -> ChebyshevInterpolation
        __init__(ChebyshevInterpolation self, Size n, PyObject * fct, ChebyshevInterpolation::PointsType pointsType=SecondKind) -> ChebyshevInterpolation
        """
        _quantlib_risks.ChebyshevInterpolation_swiginit(self, _quantlib_risks.new_ChebyshevInterpolation(*args))

    def __call__(self, z, allowExtrapolation=False):
        r"""__call__(ChebyshevInterpolation self, Real z, bool allowExtrapolation=False) -> Real"""
        return _quantlib_risks.ChebyshevInterpolation___call__(self, z, allowExtrapolation)

    @staticmethod
    def nodes(n, pointsType):
        r"""nodes(Size n, ChebyshevInterpolation::PointsType pointsType) -> Array"""
        return _quantlib_risks.ChebyshevInterpolation_nodes(n, pointsType)
    __swig_destroy__ = _quantlib_risks.delete_ChebyshevInterpolation

# Register ChebyshevInterpolation in _quantlib_risks:
_quantlib_risks.ChebyshevInterpolation_swigregister(ChebyshevInterpolation)
class ConvexMonotoneInterpolation(object):
    r"""Proxy of C++ SafeConvexMonotoneInterpolation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x, y, quadraticity=0.3, monotonicity=0.7, forcePositive=True):
        r"""__init__(ConvexMonotoneInterpolation self, Array x, Array y, Real quadraticity=0.3, Real monotonicity=0.7, bool forcePositive=True) -> ConvexMonotoneInterpolation"""
        _quantlib_risks.ConvexMonotoneInterpolation_swiginit(self, _quantlib_risks.new_ConvexMonotoneInterpolation(x, y, quadraticity, monotonicity, forcePositive))

    def __call__(self, x, allowExtrapolation=False):
        r"""__call__(ConvexMonotoneInterpolation self, Real x, bool allowExtrapolation=False) -> Real"""
        return _quantlib_risks.ConvexMonotoneInterpolation___call__(self, x, allowExtrapolation)
    __swig_destroy__ = _quantlib_risks.delete_ConvexMonotoneInterpolation

# Register ConvexMonotoneInterpolation in _quantlib_risks:
_quantlib_risks.ConvexMonotoneInterpolation_swigregister(ConvexMonotoneInterpolation)
class TermStructure(Observable):
    r"""Proxy of C++ TermStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def dayCounter(self):
        r"""dayCounter(TermStructure self) -> DayCounter"""
        return _quantlib_risks.TermStructure_dayCounter(self)

    def timeFromReference(self, date):
        r"""timeFromReference(TermStructure self, Date date) -> Time"""
        return _quantlib_risks.TermStructure_timeFromReference(self, date)

    def calendar(self):
        r"""calendar(TermStructure self) -> Calendar"""
        return _quantlib_risks.TermStructure_calendar(self)

    def referenceDate(self):
        r"""referenceDate(TermStructure self) -> Date"""
        return _quantlib_risks.TermStructure_referenceDate(self)

    def maxDate(self):
        r"""maxDate(TermStructure self) -> Date"""
        return _quantlib_risks.TermStructure_maxDate(self)

    def maxTime(self):
        r"""maxTime(TermStructure self) -> Time"""
        return _quantlib_risks.TermStructure_maxTime(self)

    def enableExtrapolation(self):
        r"""enableExtrapolation(TermStructure self)"""
        return _quantlib_risks.TermStructure_enableExtrapolation(self)

    def disableExtrapolation(self):
        r"""disableExtrapolation(TermStructure self)"""
        return _quantlib_risks.TermStructure_disableExtrapolation(self)

    def allowsExtrapolation(self):
        r"""allowsExtrapolation(TermStructure self) -> bool"""
        return _quantlib_risks.TermStructure_allowsExtrapolation(self)
    __swig_destroy__ = _quantlib_risks.delete_TermStructure

# Register TermStructure in _quantlib_risks:
_quantlib_risks.TermStructure_swigregister(TermStructure)
class YieldTermStructure(TermStructure):
    r"""Proxy of C++ YieldTermStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def discount(self, *args):
        r"""
        discount(YieldTermStructure self, Date arg2, bool extrapolate=False) -> DiscountFactor
        discount(YieldTermStructure self, Time arg2, bool extrapolate=False) -> DiscountFactor
        """
        return _quantlib_risks.YieldTermStructure_discount(self, *args)

    def zeroRate(self, *args):
        r"""
        zeroRate(YieldTermStructure self, Date d, DayCounter arg3, Compounding arg4, Frequency f=Annual, bool extrapolate=False) -> InterestRate
        zeroRate(YieldTermStructure self, Time t, Compounding arg3, Frequency f=Annual, bool extrapolate=False) -> InterestRate
        """
        return _quantlib_risks.YieldTermStructure_zeroRate(self, *args)

    def forwardRate(self, *args):
        r"""
        forwardRate(YieldTermStructure self, Date d1, Date d2, DayCounter arg4, Compounding arg5, Frequency f=Annual, bool extrapolate=False) -> InterestRate
        forwardRate(YieldTermStructure self, Time t1, Time t2, Compounding arg4, Frequency f=Annual, bool extrapolate=False) -> InterestRate
        """
        return _quantlib_risks.YieldTermStructure_forwardRate(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_YieldTermStructure

# Register YieldTermStructure in _quantlib_risks:
_quantlib_risks.YieldTermStructure_swigregister(YieldTermStructure)
class YieldTermStructureHandle(object):
    r"""Proxy of C++ Handle< YieldTermStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(YieldTermStructureHandle self, ext::shared_ptr< YieldTermStructure > const & arg2=ext::shared_ptr()) -> YieldTermStructureHandle"""
        _quantlib_risks.YieldTermStructureHandle_swiginit(self, _quantlib_risks.new_YieldTermStructureHandle(*args))

    def __deref__(self):
        r"""__deref__(YieldTermStructureHandle self) -> ext::shared_ptr< YieldTermStructure >"""
        return _quantlib_risks.YieldTermStructureHandle___deref__(self)

    def currentLink(self):
        r"""currentLink(YieldTermStructureHandle self) -> ext::shared_ptr< YieldTermStructure >"""
        return _quantlib_risks.YieldTermStructureHandle_currentLink(self)

    def __nonzero__(self):
        r"""__nonzero__(YieldTermStructureHandle self) -> bool"""
        return _quantlib_risks.YieldTermStructureHandle___nonzero__(self)

    def __bool__(self):
        r"""__bool__(YieldTermStructureHandle self) -> bool"""
        return _quantlib_risks.YieldTermStructureHandle___bool__(self)

    def asObservable(self):
        r"""asObservable(YieldTermStructureHandle self) -> ext::shared_ptr< Observable >"""
        return _quantlib_risks.YieldTermStructureHandle_asObservable(self)
    __swig_destroy__ = _quantlib_risks.delete_YieldTermStructureHandle

    def discount(self, *args):
        r"""
        discount(YieldTermStructureHandle self, Date arg2, bool extrapolate=False) -> DiscountFactor
        discount(YieldTermStructureHandle self, Time arg2, bool extrapolate=False) -> DiscountFactor
        """
        return _quantlib_risks.YieldTermStructureHandle_discount(self, *args)

    def zeroRate(self, *args):
        r"""
        zeroRate(YieldTermStructureHandle self, Date d, DayCounter arg3, Compounding arg4, Frequency f=Annual, bool extrapolate=False) -> InterestRate
        zeroRate(YieldTermStructureHandle self, Time t, Compounding arg3, Frequency f=Annual, bool extrapolate=False) -> InterestRate
        """
        return _quantlib_risks.YieldTermStructureHandle_zeroRate(self, *args)

    def forwardRate(self, *args):
        r"""
        forwardRate(YieldTermStructureHandle self, Date d1, Date d2, DayCounter arg4, Compounding arg5, Frequency f=Annual, bool extrapolate=False) -> InterestRate
        forwardRate(YieldTermStructureHandle self, Time t1, Time t2, Compounding arg4, Frequency f=Annual, bool extrapolate=False) -> InterestRate
        """
        return _quantlib_risks.YieldTermStructureHandle_forwardRate(self, *args)

    def dayCounter(self):
        r"""dayCounter(YieldTermStructureHandle self) -> DayCounter"""
        return _quantlib_risks.YieldTermStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        r"""timeFromReference(YieldTermStructureHandle self, Date date) -> Time"""
        return _quantlib_risks.YieldTermStructureHandle_timeFromReference(self, date)

    def calendar(self):
        r"""calendar(YieldTermStructureHandle self) -> Calendar"""
        return _quantlib_risks.YieldTermStructureHandle_calendar(self)

    def referenceDate(self):
        r"""referenceDate(YieldTermStructureHandle self) -> Date"""
        return _quantlib_risks.YieldTermStructureHandle_referenceDate(self)

    def maxDate(self):
        r"""maxDate(YieldTermStructureHandle self) -> Date"""
        return _quantlib_risks.YieldTermStructureHandle_maxDate(self)

    def maxTime(self):
        r"""maxTime(YieldTermStructureHandle self) -> Time"""
        return _quantlib_risks.YieldTermStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        r"""enableExtrapolation(YieldTermStructureHandle self)"""
        return _quantlib_risks.YieldTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        r"""disableExtrapolation(YieldTermStructureHandle self)"""
        return _quantlib_risks.YieldTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        r"""allowsExtrapolation(YieldTermStructureHandle self) -> bool"""
        return _quantlib_risks.YieldTermStructureHandle_allowsExtrapolation(self)

# Register YieldTermStructureHandle in _quantlib_risks:
_quantlib_risks.YieldTermStructureHandle_swigregister(YieldTermStructureHandle)
class RelinkableYieldTermStructureHandle(YieldTermStructureHandle):
    r"""Proxy of C++ RelinkableHandle< YieldTermStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(RelinkableYieldTermStructureHandle self, ext::shared_ptr< YieldTermStructure > const & arg2=ext::shared_ptr()) -> RelinkableYieldTermStructureHandle"""
        _quantlib_risks.RelinkableYieldTermStructureHandle_swiginit(self, _quantlib_risks.new_RelinkableYieldTermStructureHandle(*args))

    def linkTo(self, arg2):
        r"""linkTo(RelinkableYieldTermStructureHandle self, ext::shared_ptr< YieldTermStructure > const & arg2)"""
        return _quantlib_risks.RelinkableYieldTermStructureHandle_linkTo(self, arg2)

    def reset(self):
        r"""reset(RelinkableYieldTermStructureHandle self)"""
        return _quantlib_risks.RelinkableYieldTermStructureHandle_reset(self)
    __swig_destroy__ = _quantlib_risks.delete_RelinkableYieldTermStructureHandle

# Register RelinkableYieldTermStructureHandle in _quantlib_risks:
_quantlib_risks.RelinkableYieldTermStructureHandle_swigregister(RelinkableYieldTermStructureHandle)
class ImpliedTermStructure(YieldTermStructure):
    r"""Proxy of C++ ImpliedTermStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, curveHandle, referenceDate):
        r"""__init__(ImpliedTermStructure self, YieldTermStructureHandle curveHandle, Date referenceDate) -> ImpliedTermStructure"""
        _quantlib_risks.ImpliedTermStructure_swiginit(self, _quantlib_risks.new_ImpliedTermStructure(curveHandle, referenceDate))
    __swig_destroy__ = _quantlib_risks.delete_ImpliedTermStructure

# Register ImpliedTermStructure in _quantlib_risks:
_quantlib_risks.ImpliedTermStructure_swigregister(ImpliedTermStructure)
class ZeroSpreadedTermStructure(YieldTermStructure):
    r"""Proxy of C++ ZeroSpreadedTermStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ZeroSpreadedTermStructure self, YieldTermStructureHandle curveHandle, QuoteHandle spreadHandle, Compounding comp=QuantLib::Continuous, Frequency freq=QuantLib::NoFrequency, DayCounter dc=DayCounter()) -> ZeroSpreadedTermStructure"""
        _quantlib_risks.ZeroSpreadedTermStructure_swiginit(self, _quantlib_risks.new_ZeroSpreadedTermStructure(*args))
    __swig_destroy__ = _quantlib_risks.delete_ZeroSpreadedTermStructure

# Register ZeroSpreadedTermStructure in _quantlib_risks:
_quantlib_risks.ZeroSpreadedTermStructure_swigregister(ZeroSpreadedTermStructure)
class ForwardSpreadedTermStructure(YieldTermStructure):
    r"""Proxy of C++ ForwardSpreadedTermStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, curveHandle, spreadHandle):
        r"""__init__(ForwardSpreadedTermStructure self, YieldTermStructureHandle curveHandle, QuoteHandle spreadHandle) -> ForwardSpreadedTermStructure"""
        _quantlib_risks.ForwardSpreadedTermStructure_swiginit(self, _quantlib_risks.new_ForwardSpreadedTermStructure(curveHandle, spreadHandle))
    __swig_destroy__ = _quantlib_risks.delete_ForwardSpreadedTermStructure

# Register ForwardSpreadedTermStructure in _quantlib_risks:
_quantlib_risks.ForwardSpreadedTermStructure_swigregister(ForwardSpreadedTermStructure)
class PiecewiseZeroSpreadedTermStructure(YieldTermStructure):
    r"""Proxy of C++ PiecewiseZeroSpreadedTermStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(PiecewiseZeroSpreadedTermStructure self, YieldTermStructureHandle curveHandle, QuoteHandleVector spreadHandles, DateVector dates, Compounding comp=QuantLib::Continuous, Frequency freq=QuantLib::NoFrequency, DayCounter dc=DayCounter(), Linear factory=Linear()) -> PiecewiseZeroSpreadedTermStructure"""
        _quantlib_risks.PiecewiseZeroSpreadedTermStructure_swiginit(self, _quantlib_risks.new_PiecewiseZeroSpreadedTermStructure(*args))
    __swig_destroy__ = _quantlib_risks.delete_PiecewiseZeroSpreadedTermStructure

# Register PiecewiseZeroSpreadedTermStructure in _quantlib_risks:
_quantlib_risks.PiecewiseZeroSpreadedTermStructure_swigregister(PiecewiseZeroSpreadedTermStructure)
class SpreadedLinearZeroInterpolatedTermStructure(YieldTermStructure):
    r"""Proxy of C++ SpreadedLinearZeroInterpolatedTermStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(SpreadedLinearZeroInterpolatedTermStructure self, YieldTermStructureHandle curveHandle, QuoteHandleVector spreadHandles, DateVector dates, Compounding comp=QuantLib::Continuous, Frequency freq=QuantLib::NoFrequency, DayCounter dc=DayCounter(), Linear factory=Linear()) -> SpreadedLinearZeroInterpolatedTermStructure"""
        _quantlib_risks.SpreadedLinearZeroInterpolatedTermStructure_swiginit(self, _quantlib_risks.new_SpreadedLinearZeroInterpolatedTermStructure(*args))
    __swig_destroy__ = _quantlib_risks.delete_SpreadedLinearZeroInterpolatedTermStructure

# Register SpreadedLinearZeroInterpolatedTermStructure in _quantlib_risks:
_quantlib_risks.SpreadedLinearZeroInterpolatedTermStructure_swigregister(SpreadedLinearZeroInterpolatedTermStructure)
class SpreadedBackwardFlatZeroInterpolatedTermStructure(YieldTermStructure):
    r"""Proxy of C++ SpreadedBackwardFlatZeroInterpolatedTermStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(SpreadedBackwardFlatZeroInterpolatedTermStructure self, YieldTermStructureHandle curveHandle, QuoteHandleVector spreadHandles, DateVector dates, Compounding comp=QuantLib::Continuous, Frequency freq=QuantLib::NoFrequency, DayCounter dc=DayCounter(), BackwardFlat factory=BackwardFlat()) -> SpreadedBackwardFlatZeroInterpolatedTermStructure"""
        _quantlib_risks.SpreadedBackwardFlatZeroInterpolatedTermStructure_swiginit(self, _quantlib_risks.new_SpreadedBackwardFlatZeroInterpolatedTermStructure(*args))
    __swig_destroy__ = _quantlib_risks.delete_SpreadedBackwardFlatZeroInterpolatedTermStructure

# Register SpreadedBackwardFlatZeroInterpolatedTermStructure in _quantlib_risks:
_quantlib_risks.SpreadedBackwardFlatZeroInterpolatedTermStructure_swigregister(SpreadedBackwardFlatZeroInterpolatedTermStructure)
class FlatForward(YieldTermStructure):
    r"""Proxy of C++ FlatForward class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FlatForward self, Date referenceDate, QuoteHandle forward, DayCounter dayCounter, Compounding compounding=QuantLib::Continuous, Frequency frequency=QuantLib::Annual) -> FlatForward
        __init__(FlatForward self, Date referenceDate, Rate forward, DayCounter dayCounter, Compounding compounding=QuantLib::Continuous, Frequency frequency=QuantLib::Annual) -> FlatForward
        __init__(FlatForward self, Integer settlementDays, Calendar calendar, QuoteHandle forward, DayCounter dayCounter, Compounding compounding=QuantLib::Continuous, Frequency frequency=QuantLib::Annual) -> FlatForward
        __init__(FlatForward self, Integer settlementDays, Calendar calendar, Rate forward, DayCounter dayCounter, Compounding compounding=QuantLib::Continuous, Frequency frequency=QuantLib::Annual) -> FlatForward
        """
        _quantlib_risks.FlatForward_swiginit(self, _quantlib_risks.new_FlatForward(*args))
    __swig_destroy__ = _quantlib_risks.delete_FlatForward

# Register FlatForward in _quantlib_risks:
_quantlib_risks.FlatForward_swigregister(FlatForward)
class UltimateForwardTermStructure(YieldTermStructure):
    r"""Proxy of C++ UltimateForwardTermStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, curveHandle, lastLiquidForwardRate, ultimateForwardRate, firstSmoothingPoint, alpha):
        r"""__init__(UltimateForwardTermStructure self, YieldTermStructureHandle curveHandle, QuoteHandle lastLiquidForwardRate, QuoteHandle ultimateForwardRate, Period firstSmoothingPoint, Real alpha) -> UltimateForwardTermStructure"""
        _quantlib_risks.UltimateForwardTermStructure_swiginit(self, _quantlib_risks.new_UltimateForwardTermStructure(curveHandle, lastLiquidForwardRate, ultimateForwardRate, firstSmoothingPoint, alpha))
    __swig_destroy__ = _quantlib_risks.delete_UltimateForwardTermStructure

# Register UltimateForwardTermStructure in _quantlib_risks:
_quantlib_risks.UltimateForwardTermStructure_swigregister(UltimateForwardTermStructure)
class CompositeZeroYieldStructure(YieldTermStructure):
    r"""
    Proxy of C++ CompositeZeroYieldStructure< BinaryFunction > class.
    Proxy of C++ CompositeZeroYieldStructure< BinaryFunction > class.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(CompositeZeroYieldStructure self, YieldTermStructureHandle h1, YieldTermStructureHandle h2, PyObject * function, Compounding comp=QuantLib::Continuous, Frequency freq=QuantLib::NoFrequency) -> CompositeZeroYieldStructure"""
        _quantlib_risks.CompositeZeroYieldStructure_swiginit(self, _quantlib_risks.new_CompositeZeroYieldStructure(*args))
    __swig_destroy__ = _quantlib_risks.delete_CompositeZeroYieldStructure

# Register CompositeZeroYieldStructure in _quantlib_risks:
_quantlib_risks.CompositeZeroYieldStructure_swigregister(CompositeZeroYieldStructure)
class QuantoTermStructure(YieldTermStructure):
    r"""Proxy of C++ QuantoTermStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, underlyingDividendTS, riskFreeTS, foreignRiskFreeTS, underlyingBlackVolTS, strike, exchRateBlackVolTS, exchRateATMlevel, underlyingExchRateCorrelation):
        r"""__init__(QuantoTermStructure self, YieldTermStructureHandle underlyingDividendTS, YieldTermStructureHandle riskFreeTS, YieldTermStructureHandle foreignRiskFreeTS, BlackVolTermStructureHandle underlyingBlackVolTS, Real strike, BlackVolTermStructureHandle exchRateBlackVolTS, Real exchRateATMlevel, Real underlyingExchRateCorrelation) -> QuantoTermStructure"""
        _quantlib_risks.QuantoTermStructure_swiginit(self, _quantlib_risks.new_QuantoTermStructure(underlyingDividendTS, riskFreeTS, foreignRiskFreeTS, underlyingBlackVolTS, strike, exchRateBlackVolTS, exchRateATMlevel, underlyingExchRateCorrelation))
    __swig_destroy__ = _quantlib_risks.delete_QuantoTermStructure

# Register QuantoTermStructure in _quantlib_risks:
_quantlib_risks.QuantoTermStructure_swigregister(QuantoTermStructure)
class RealTimeSeries(object):
    r"""Proxy of C++ TimeSeries< Real > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RealTimeSeries self) -> RealTimeSeries
        __init__(RealTimeSeries self, DateVector d, std::vector< xad::AReal< double >,std::allocator< xad::AReal< double > > > const & v) -> RealTimeSeries
        """
        _quantlib_risks.RealTimeSeries_swiginit(self, _quantlib_risks.new_RealTimeSeries(*args))

    def dates(self):
        r"""dates(RealTimeSeries self) -> DateVector"""
        return _quantlib_risks.RealTimeSeries_dates(self)

    def values(self):
        r"""values(RealTimeSeries self) -> std::vector< xad::AReal< double >,std::allocator< xad::AReal< double > > >"""
        return _quantlib_risks.RealTimeSeries_values(self)

    def __len__(self):
        r"""__len__(RealTimeSeries self) -> Size"""
        return _quantlib_risks.RealTimeSeries___len__(self)

    def __getitem__(self, d):
        r"""__getitem__(RealTimeSeries self, Date d) -> xad::AReal< double >"""
        return _quantlib_risks.RealTimeSeries___getitem__(self, d)

    def __setitem__(self, d, value):
        r"""__setitem__(RealTimeSeries self, Date d, xad::AReal< double > const & value)"""
        return _quantlib_risks.RealTimeSeries___setitem__(self, d, value)
    __swig_destroy__ = _quantlib_risks.delete_RealTimeSeries

# Register RealTimeSeries in _quantlib_risks:
_quantlib_risks.RealTimeSeries_swigregister(RealTimeSeries)
class IntervalPriceTimeSeries(object):
    r"""Proxy of C++ TimeSeries< IntervalPrice > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(IntervalPriceTimeSeries self) -> IntervalPriceTimeSeries
        __init__(IntervalPriceTimeSeries self, DateVector d, IntervalPriceVector v) -> IntervalPriceTimeSeries
        """
        _quantlib_risks.IntervalPriceTimeSeries_swiginit(self, _quantlib_risks.new_IntervalPriceTimeSeries(*args))

    def dates(self):
        r"""dates(IntervalPriceTimeSeries self) -> DateVector"""
        return _quantlib_risks.IntervalPriceTimeSeries_dates(self)

    def values(self):
        r"""values(IntervalPriceTimeSeries self) -> IntervalPriceVector"""
        return _quantlib_risks.IntervalPriceTimeSeries_values(self)

    def __len__(self):
        r"""__len__(IntervalPriceTimeSeries self) -> Size"""
        return _quantlib_risks.IntervalPriceTimeSeries___len__(self)

    def __getitem__(self, d):
        r"""__getitem__(IntervalPriceTimeSeries self, Date d) -> IntervalPrice"""
        return _quantlib_risks.IntervalPriceTimeSeries___getitem__(self, d)

    def __setitem__(self, d, value):
        r"""__setitem__(IntervalPriceTimeSeries self, Date d, IntervalPrice value)"""
        return _quantlib_risks.IntervalPriceTimeSeries___setitem__(self, d, value)
    __swig_destroy__ = _quantlib_risks.delete_IntervalPriceTimeSeries

# Register IntervalPriceTimeSeries in _quantlib_risks:
_quantlib_risks.IntervalPriceTimeSeries_swigregister(IntervalPriceTimeSeries)
class IntervalPriceVector(object):
    r"""Proxy of C++ std::vector< IntervalPrice > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(IntervalPriceVector self) -> SwigPyIterator"""
        return _quantlib_risks.IntervalPriceVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(IntervalPriceVector self) -> bool"""
        return _quantlib_risks.IntervalPriceVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(IntervalPriceVector self) -> bool"""
        return _quantlib_risks.IntervalPriceVector___bool__(self)

    def __len__(self):
        r"""__len__(IntervalPriceVector self) -> std::vector< IntervalPrice >::size_type"""
        return _quantlib_risks.IntervalPriceVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(IntervalPriceVector self, std::vector< IntervalPrice >::difference_type i, std::vector< IntervalPrice >::difference_type j) -> IntervalPriceVector"""
        return _quantlib_risks.IntervalPriceVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(IntervalPriceVector self, std::vector< IntervalPrice >::difference_type i, std::vector< IntervalPrice >::difference_type j)
        __setslice__(IntervalPriceVector self, std::vector< IntervalPrice >::difference_type i, std::vector< IntervalPrice >::difference_type j, IntervalPriceVector v)
        """
        return _quantlib_risks.IntervalPriceVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(IntervalPriceVector self, std::vector< IntervalPrice >::difference_type i, std::vector< IntervalPrice >::difference_type j)"""
        return _quantlib_risks.IntervalPriceVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(IntervalPriceVector self, std::vector< IntervalPrice >::difference_type i)
        __delitem__(IntervalPriceVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.IntervalPriceVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(IntervalPriceVector self, SWIGPY_SLICEOBJECT * slice) -> IntervalPriceVector
        __getitem__(IntervalPriceVector self, std::vector< IntervalPrice >::difference_type i) -> IntervalPrice
        """
        return _quantlib_risks.IntervalPriceVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(IntervalPriceVector self, SWIGPY_SLICEOBJECT * slice, IntervalPriceVector v)
        __setitem__(IntervalPriceVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(IntervalPriceVector self, std::vector< IntervalPrice >::difference_type i, IntervalPrice x)
        """
        return _quantlib_risks.IntervalPriceVector___setitem__(self, *args)

    def pop(self):
        r"""pop(IntervalPriceVector self) -> IntervalPrice"""
        return _quantlib_risks.IntervalPriceVector_pop(self)

    def append(self, x):
        r"""append(IntervalPriceVector self, IntervalPrice x)"""
        return _quantlib_risks.IntervalPriceVector_append(self, x)

    def empty(self):
        r"""empty(IntervalPriceVector self) -> bool"""
        return _quantlib_risks.IntervalPriceVector_empty(self)

    def size(self):
        r"""size(IntervalPriceVector self) -> std::vector< IntervalPrice >::size_type"""
        return _quantlib_risks.IntervalPriceVector_size(self)

    def swap(self, v):
        r"""swap(IntervalPriceVector self, IntervalPriceVector v)"""
        return _quantlib_risks.IntervalPriceVector_swap(self, v)

    def begin(self):
        r"""begin(IntervalPriceVector self) -> std::vector< IntervalPrice >::iterator"""
        return _quantlib_risks.IntervalPriceVector_begin(self)

    def end(self):
        r"""end(IntervalPriceVector self) -> std::vector< IntervalPrice >::iterator"""
        return _quantlib_risks.IntervalPriceVector_end(self)

    def rbegin(self):
        r"""rbegin(IntervalPriceVector self) -> std::vector< IntervalPrice >::reverse_iterator"""
        return _quantlib_risks.IntervalPriceVector_rbegin(self)

    def rend(self):
        r"""rend(IntervalPriceVector self) -> std::vector< IntervalPrice >::reverse_iterator"""
        return _quantlib_risks.IntervalPriceVector_rend(self)

    def clear(self):
        r"""clear(IntervalPriceVector self)"""
        return _quantlib_risks.IntervalPriceVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(IntervalPriceVector self) -> std::vector< IntervalPrice >::allocator_type"""
        return _quantlib_risks.IntervalPriceVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(IntervalPriceVector self)"""
        return _quantlib_risks.IntervalPriceVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(IntervalPriceVector self, std::vector< IntervalPrice >::iterator pos) -> std::vector< IntervalPrice >::iterator
        erase(IntervalPriceVector self, std::vector< IntervalPrice >::iterator first, std::vector< IntervalPrice >::iterator last) -> std::vector< IntervalPrice >::iterator
        """
        return _quantlib_risks.IntervalPriceVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(IntervalPriceVector self) -> IntervalPriceVector
        __init__(IntervalPriceVector self, IntervalPriceVector other) -> IntervalPriceVector
        __init__(IntervalPriceVector self, std::vector< IntervalPrice >::size_type size) -> IntervalPriceVector
        __init__(IntervalPriceVector self, std::vector< IntervalPrice >::size_type size, IntervalPrice value) -> IntervalPriceVector
        """
        _quantlib_risks.IntervalPriceVector_swiginit(self, _quantlib_risks.new_IntervalPriceVector(*args))

    def push_back(self, x):
        r"""push_back(IntervalPriceVector self, IntervalPrice x)"""
        return _quantlib_risks.IntervalPriceVector_push_back(self, x)

    def front(self):
        r"""front(IntervalPriceVector self) -> IntervalPrice"""
        return _quantlib_risks.IntervalPriceVector_front(self)

    def back(self):
        r"""back(IntervalPriceVector self) -> IntervalPrice"""
        return _quantlib_risks.IntervalPriceVector_back(self)

    def assign(self, n, x):
        r"""assign(IntervalPriceVector self, std::vector< IntervalPrice >::size_type n, IntervalPrice x)"""
        return _quantlib_risks.IntervalPriceVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(IntervalPriceVector self, std::vector< IntervalPrice >::size_type new_size)
        resize(IntervalPriceVector self, std::vector< IntervalPrice >::size_type new_size, IntervalPrice x)
        """
        return _quantlib_risks.IntervalPriceVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(IntervalPriceVector self, std::vector< IntervalPrice >::iterator pos, IntervalPrice x) -> std::vector< IntervalPrice >::iterator
        insert(IntervalPriceVector self, std::vector< IntervalPrice >::iterator pos, std::vector< IntervalPrice >::size_type n, IntervalPrice x)
        """
        return _quantlib_risks.IntervalPriceVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(IntervalPriceVector self, std::vector< IntervalPrice >::size_type n)"""
        return _quantlib_risks.IntervalPriceVector_reserve(self, n)

    def capacity(self):
        r"""capacity(IntervalPriceVector self) -> std::vector< IntervalPrice >::size_type"""
        return _quantlib_risks.IntervalPriceVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_IntervalPriceVector

# Register IntervalPriceVector in _quantlib_risks:
_quantlib_risks.IntervalPriceVector_swigregister(IntervalPriceVector)
class IntervalPrice(object):
    r"""Proxy of C++ IntervalPrice class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Open = _quantlib_risks.IntervalPrice_Open
    
    Close = _quantlib_risks.IntervalPrice_Close
    
    High = _quantlib_risks.IntervalPrice_High
    
    Low = _quantlib_risks.IntervalPrice_Low
    

    def __init__(self, arg2, arg3, arg4, arg5):
        r"""__init__(IntervalPrice self, Real arg2, Real arg3, Real arg4, Real arg5) -> IntervalPrice"""
        _quantlib_risks.IntervalPrice_swiginit(self, _quantlib_risks.new_IntervalPrice(arg2, arg3, arg4, arg5))

    def setValue(self, arg2, arg3):
        r"""setValue(IntervalPrice self, Real arg2, IntervalPrice::Type arg3)"""
        return _quantlib_risks.IntervalPrice_setValue(self, arg2, arg3)

    def setValues(self, arg2, arg3, arg4, arg5):
        r"""setValues(IntervalPrice self, Real arg2, Real arg3, Real arg4, Real arg5)"""
        return _quantlib_risks.IntervalPrice_setValues(self, arg2, arg3, arg4, arg5)

    def value(self, t):
        r"""value(IntervalPrice self, IntervalPrice::Type t) -> Real"""
        return _quantlib_risks.IntervalPrice_value(self, t)

    def open(self):
        r"""open(IntervalPrice self) -> Real"""
        return _quantlib_risks.IntervalPrice_open(self)

    def close(self):
        r"""close(IntervalPrice self) -> Real"""
        return _quantlib_risks.IntervalPrice_close(self)

    def high(self):
        r"""high(IntervalPrice self) -> Real"""
        return _quantlib_risks.IntervalPrice_high(self)

    def low(self):
        r"""low(IntervalPrice self) -> Real"""
        return _quantlib_risks.IntervalPrice_low(self)

    @staticmethod
    def makeSeries(d, open, close, high, low):
        r"""makeSeries(DateVector d, std::vector< Real,std::allocator< Real > > const & open, std::vector< Real,std::allocator< Real > > const & close, std::vector< Real,std::allocator< Real > > const & high, std::vector< Real,std::allocator< Real > > const & low) -> IntervalPriceTimeSeries"""
        return _quantlib_risks.IntervalPrice_makeSeries(d, open, close, high, low)

    @staticmethod
    def extractValues(arg1, t):
        r"""extractValues(IntervalPriceTimeSeries arg1, IntervalPrice::Type t) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.IntervalPrice_extractValues(arg1, t)

    @staticmethod
    def extractComponent(arg1, t):
        r"""extractComponent(IntervalPriceTimeSeries arg1, IntervalPrice::Type t) -> RealTimeSeries"""
        return _quantlib_risks.IntervalPrice_extractComponent(arg1, t)
    __swig_destroy__ = _quantlib_risks.delete_IntervalPrice

# Register IntervalPrice in _quantlib_risks:
_quantlib_risks.IntervalPrice_swigregister(IntervalPrice)
class IndexManager(object):
    r"""Proxy of C++ IndexManager class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def instance():
        r"""instance() -> IndexManager"""
        return _quantlib_risks.IndexManager_instance()

    def setHistory(self, name, fixings):
        r"""setHistory(IndexManager self, std::string const & name, RealTimeSeries fixings)"""
        return _quantlib_risks.IndexManager_setHistory(self, name, fixings)

    def getHistory(self, name):
        r"""getHistory(IndexManager self, std::string const & name) -> RealTimeSeries"""
        return _quantlib_risks.IndexManager_getHistory(self, name)

    def hasHistory(self, name):
        r"""hasHistory(IndexManager self, std::string const & name) -> bool"""
        return _quantlib_risks.IndexManager_hasHistory(self, name)

    def histories(self):
        r"""histories(IndexManager self) -> StrVector"""
        return _quantlib_risks.IndexManager_histories(self)

    def clearHistory(self, name):
        r"""clearHistory(IndexManager self, std::string const & name)"""
        return _quantlib_risks.IndexManager_clearHistory(self, name)

    def clearHistories(self):
        r"""clearHistories(IndexManager self)"""
        return _quantlib_risks.IndexManager_clearHistories(self)

    def hasHistoricalFixing(self, name, fixingDate):
        r"""hasHistoricalFixing(IndexManager self, std::string const & name, Date fixingDate) -> bool"""
        return _quantlib_risks.IndexManager_hasHistoricalFixing(self, name, fixingDate)
    __swig_destroy__ = _quantlib_risks.delete_IndexManager

# Register IndexManager in _quantlib_risks:
_quantlib_risks.IndexManager_swigregister(IndexManager)
class Index(Observable):
    r"""Proxy of C++ Index class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def name(self):
        r"""name(Index self) -> std::string"""
        return _quantlib_risks.Index_name(self)

    def fixingCalendar(self):
        r"""fixingCalendar(Index self) -> Calendar"""
        return _quantlib_risks.Index_fixingCalendar(self)

    def isValidFixingDate(self, fixingDate):
        r"""isValidFixingDate(Index self, Date fixingDate) -> bool"""
        return _quantlib_risks.Index_isValidFixingDate(self, fixingDate)

    def hasHistoricalFixing(self, fixingDate):
        r"""hasHistoricalFixing(Index self, Date fixingDate) -> bool"""
        return _quantlib_risks.Index_hasHistoricalFixing(self, fixingDate)

    def fixing(self, fixingDate, forecastTodaysFixing=False):
        r"""fixing(Index self, Date fixingDate, bool forecastTodaysFixing=False) -> Real"""
        return _quantlib_risks.Index_fixing(self, fixingDate, forecastTodaysFixing)

    def addFixing(self, fixingDate, fixing, forceOverwrite=False):
        r"""addFixing(Index self, Date fixingDate, Rate fixing, bool forceOverwrite=False)"""
        return _quantlib_risks.Index_addFixing(self, fixingDate, fixing, forceOverwrite)

    def timeSeries(self):
        r"""timeSeries(Index self) -> RealTimeSeries"""
        return _quantlib_risks.Index_timeSeries(self)

    def clearFixings(self):
        r"""clearFixings(Index self)"""
        return _quantlib_risks.Index_clearFixings(self)

    def addFixings(self, fixingDates, fixings, forceOverwrite=False):
        r"""addFixings(Index self, DateVector fixingDates, std::vector< Rate,std::allocator< Rate > > const & fixings, bool forceOverwrite=False)"""
        return _quantlib_risks.Index_addFixings(self, fixingDates, fixings, forceOverwrite)

    def __str__(self):
        r"""__str__(Index self) -> std::string"""
        return _quantlib_risks.Index___str__(self)
    __swig_destroy__ = _quantlib_risks.delete_Index

# Register Index in _quantlib_risks:
_quantlib_risks.Index_swigregister(Index)
class InterestRateIndex(Index):
    r"""Proxy of C++ InterestRateIndex class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def familyName(self):
        r"""familyName(InterestRateIndex self) -> std::string"""
        return _quantlib_risks.InterestRateIndex_familyName(self)

    def tenor(self):
        r"""tenor(InterestRateIndex self) -> Period"""
        return _quantlib_risks.InterestRateIndex_tenor(self)

    def fixingDays(self):
        r"""fixingDays(InterestRateIndex self) -> Natural"""
        return _quantlib_risks.InterestRateIndex_fixingDays(self)

    def fixingDate(self, valueDate):
        r"""fixingDate(InterestRateIndex self, Date valueDate) -> Date"""
        return _quantlib_risks.InterestRateIndex_fixingDate(self, valueDate)

    def currency(self):
        r"""currency(InterestRateIndex self) -> Currency"""
        return _quantlib_risks.InterestRateIndex_currency(self)

    def dayCounter(self):
        r"""dayCounter(InterestRateIndex self) -> DayCounter"""
        return _quantlib_risks.InterestRateIndex_dayCounter(self)

    def maturityDate(self, valueDate):
        r"""maturityDate(InterestRateIndex self, Date valueDate) -> Date"""
        return _quantlib_risks.InterestRateIndex_maturityDate(self, valueDate)

    def valueDate(self, fixingDate):
        r"""valueDate(InterestRateIndex self, Date fixingDate) -> Date"""
        return _quantlib_risks.InterestRateIndex_valueDate(self, fixingDate)
    __swig_destroy__ = _quantlib_risks.delete_InterestRateIndex

# Register InterestRateIndex in _quantlib_risks:
_quantlib_risks.InterestRateIndex_swigregister(InterestRateIndex)
class IborIndex(InterestRateIndex):
    r"""Proxy of C++ IborIndex class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(IborIndex self, std::string const & familyName, Period tenor, Integer settlementDays, Currency currency, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, DayCounter dayCounter, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> IborIndex"""
        _quantlib_risks.IborIndex_swiginit(self, _quantlib_risks.new_IborIndex(*args))

    def businessDayConvention(self):
        r"""businessDayConvention(IborIndex self) -> BusinessDayConvention"""
        return _quantlib_risks.IborIndex_businessDayConvention(self)

    def endOfMonth(self):
        r"""endOfMonth(IborIndex self) -> bool"""
        return _quantlib_risks.IborIndex_endOfMonth(self)

    def forwardingTermStructure(self):
        r"""forwardingTermStructure(IborIndex self) -> YieldTermStructureHandle"""
        return _quantlib_risks.IborIndex_forwardingTermStructure(self)

    def clone(self, arg2):
        r"""clone(IborIndex self, YieldTermStructureHandle arg2) -> ext::shared_ptr< IborIndex >"""
        return _quantlib_risks.IborIndex_clone(self, arg2)
    __swig_destroy__ = _quantlib_risks.delete_IborIndex

# Register IborIndex in _quantlib_risks:
_quantlib_risks.IborIndex_swigregister(IborIndex)

def as_iborindex(index):
    r"""as_iborindex(ext::shared_ptr< InterestRateIndex > const & index) -> ext::shared_ptr< IborIndex >"""
    return _quantlib_risks.as_iborindex(index)
class OvernightIndex(IborIndex):
    r"""Proxy of C++ OvernightIndex class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(OvernightIndex self, std::string const & familyName, Integer settlementDays, Currency currency, Calendar calendar, DayCounter dayCounter, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> OvernightIndex"""
        _quantlib_risks.OvernightIndex_swiginit(self, _quantlib_risks.new_OvernightIndex(*args))

    def clone(self, h):
        r"""clone(OvernightIndex self, YieldTermStructureHandle h) -> ext::shared_ptr< OvernightIndex >"""
        return _quantlib_risks.OvernightIndex_clone(self, h)
    __swig_destroy__ = _quantlib_risks.delete_OvernightIndex

# Register OvernightIndex in _quantlib_risks:
_quantlib_risks.OvernightIndex_swigregister(OvernightIndex)
class Libor(IborIndex):
    r"""Proxy of C++ Libor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Libor self, std::string const & familyName, Period tenor, Natural settlementDays, Currency currency, Calendar financialCenterCalendar, DayCounter dayCounter, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Libor"""
        _quantlib_risks.Libor_swiginit(self, _quantlib_risks.new_Libor(*args))
    __swig_destroy__ = _quantlib_risks.delete_Libor

# Register Libor in _quantlib_risks:
_quantlib_risks.Libor_swigregister(Libor)
class DailyTenorLibor(IborIndex):
    r"""Proxy of C++ DailyTenorLibor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(DailyTenorLibor self, std::string const & familyName, Natural settlementDays, Currency currency, Calendar financialCenterCalendar, DayCounter dayCounter, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> DailyTenorLibor"""
        _quantlib_risks.DailyTenorLibor_swiginit(self, _quantlib_risks.new_DailyTenorLibor(*args))
    __swig_destroy__ = _quantlib_risks.delete_DailyTenorLibor

# Register DailyTenorLibor in _quantlib_risks:
_quantlib_risks.DailyTenorLibor_swigregister(DailyTenorLibor)
class SwapIndex(InterestRateIndex):
    r"""Proxy of C++ SwapIndex class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SwapIndex self, std::string const & familyName, Period tenor, Integer settlementDays, Currency currency, Calendar calendar, Period fixedLegTenor, BusinessDayConvention fixedLegConvention, DayCounter fixedLegDayCounter, ext::shared_ptr< IborIndex > const & iborIndex) -> SwapIndex
        __init__(SwapIndex self, std::string const & familyName, Period tenor, Integer settlementDays, Currency currency, Calendar calendar, Period fixedLegTenor, BusinessDayConvention fixedLegConvention, DayCounter fixedLegDayCounter, ext::shared_ptr< IborIndex > const & iborIndex, YieldTermStructureHandle discountCurve) -> SwapIndex
        """
        _quantlib_risks.SwapIndex_swiginit(self, _quantlib_risks.new_SwapIndex(*args))

    def fixedLegTenor(self):
        r"""fixedLegTenor(SwapIndex self) -> Period"""
        return _quantlib_risks.SwapIndex_fixedLegTenor(self)

    def fixedLegConvention(self):
        r"""fixedLegConvention(SwapIndex self) -> BusinessDayConvention"""
        return _quantlib_risks.SwapIndex_fixedLegConvention(self)

    def iborIndex(self):
        r"""iborIndex(SwapIndex self) -> ext::shared_ptr< IborIndex >"""
        return _quantlib_risks.SwapIndex_iborIndex(self)

    def forwardingTermStructure(self):
        r"""forwardingTermStructure(SwapIndex self) -> YieldTermStructureHandle"""
        return _quantlib_risks.SwapIndex_forwardingTermStructure(self)

    def discountingTermStructure(self):
        r"""discountingTermStructure(SwapIndex self) -> YieldTermStructureHandle"""
        return _quantlib_risks.SwapIndex_discountingTermStructure(self)

    def clone(self, *args):
        r"""
        clone(SwapIndex self, YieldTermStructureHandle h) -> ext::shared_ptr< SwapIndex >
        clone(SwapIndex self, YieldTermStructureHandle forwarding, YieldTermStructureHandle discounting) -> ext::shared_ptr< SwapIndex >
        clone(SwapIndex self, Period tenor) -> ext::shared_ptr< SwapIndex >
        """
        return _quantlib_risks.SwapIndex_clone(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_SwapIndex

# Register SwapIndex in _quantlib_risks:
_quantlib_risks.SwapIndex_swigregister(SwapIndex)
class SwapIndexVector(object):
    r"""Proxy of C++ std::vector< ext::shared_ptr< SwapIndex > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(SwapIndexVector self) -> SwigPyIterator"""
        return _quantlib_risks.SwapIndexVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(SwapIndexVector self) -> bool"""
        return _quantlib_risks.SwapIndexVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(SwapIndexVector self) -> bool"""
        return _quantlib_risks.SwapIndexVector___bool__(self)

    def __len__(self):
        r"""__len__(SwapIndexVector self) -> std::vector< ext::shared_ptr< SwapIndex > >::size_type"""
        return _quantlib_risks.SwapIndexVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(SwapIndexVector self, std::vector< ext::shared_ptr< SwapIndex > >::difference_type i, std::vector< ext::shared_ptr< SwapIndex > >::difference_type j) -> SwapIndexVector"""
        return _quantlib_risks.SwapIndexVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(SwapIndexVector self, std::vector< ext::shared_ptr< SwapIndex > >::difference_type i, std::vector< ext::shared_ptr< SwapIndex > >::difference_type j)
        __setslice__(SwapIndexVector self, std::vector< ext::shared_ptr< SwapIndex > >::difference_type i, std::vector< ext::shared_ptr< SwapIndex > >::difference_type j, SwapIndexVector v)
        """
        return _quantlib_risks.SwapIndexVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(SwapIndexVector self, std::vector< ext::shared_ptr< SwapIndex > >::difference_type i, std::vector< ext::shared_ptr< SwapIndex > >::difference_type j)"""
        return _quantlib_risks.SwapIndexVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(SwapIndexVector self, std::vector< ext::shared_ptr< SwapIndex > >::difference_type i)
        __delitem__(SwapIndexVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.SwapIndexVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(SwapIndexVector self, SWIGPY_SLICEOBJECT * slice) -> SwapIndexVector
        __getitem__(SwapIndexVector self, std::vector< ext::shared_ptr< SwapIndex > >::difference_type i) -> std::vector< ext::shared_ptr< SwapIndex > >::value_type const &
        """
        return _quantlib_risks.SwapIndexVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(SwapIndexVector self, SWIGPY_SLICEOBJECT * slice, SwapIndexVector v)
        __setitem__(SwapIndexVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(SwapIndexVector self, std::vector< ext::shared_ptr< SwapIndex > >::difference_type i, std::vector< ext::shared_ptr< SwapIndex > >::value_type const & x)
        """
        return _quantlib_risks.SwapIndexVector___setitem__(self, *args)

    def pop(self):
        r"""pop(SwapIndexVector self) -> std::vector< ext::shared_ptr< SwapIndex > >::value_type"""
        return _quantlib_risks.SwapIndexVector_pop(self)

    def append(self, x):
        r"""append(SwapIndexVector self, std::vector< ext::shared_ptr< SwapIndex > >::value_type const & x)"""
        return _quantlib_risks.SwapIndexVector_append(self, x)

    def empty(self):
        r"""empty(SwapIndexVector self) -> bool"""
        return _quantlib_risks.SwapIndexVector_empty(self)

    def size(self):
        r"""size(SwapIndexVector self) -> std::vector< ext::shared_ptr< SwapIndex > >::size_type"""
        return _quantlib_risks.SwapIndexVector_size(self)

    def swap(self, v):
        r"""swap(SwapIndexVector self, SwapIndexVector v)"""
        return _quantlib_risks.SwapIndexVector_swap(self, v)

    def begin(self):
        r"""begin(SwapIndexVector self) -> std::vector< ext::shared_ptr< SwapIndex > >::iterator"""
        return _quantlib_risks.SwapIndexVector_begin(self)

    def end(self):
        r"""end(SwapIndexVector self) -> std::vector< ext::shared_ptr< SwapIndex > >::iterator"""
        return _quantlib_risks.SwapIndexVector_end(self)

    def rbegin(self):
        r"""rbegin(SwapIndexVector self) -> std::vector< ext::shared_ptr< SwapIndex > >::reverse_iterator"""
        return _quantlib_risks.SwapIndexVector_rbegin(self)

    def rend(self):
        r"""rend(SwapIndexVector self) -> std::vector< ext::shared_ptr< SwapIndex > >::reverse_iterator"""
        return _quantlib_risks.SwapIndexVector_rend(self)

    def clear(self):
        r"""clear(SwapIndexVector self)"""
        return _quantlib_risks.SwapIndexVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(SwapIndexVector self) -> std::vector< ext::shared_ptr< SwapIndex > >::allocator_type"""
        return _quantlib_risks.SwapIndexVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(SwapIndexVector self)"""
        return _quantlib_risks.SwapIndexVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(SwapIndexVector self, std::vector< ext::shared_ptr< SwapIndex > >::iterator pos) -> std::vector< ext::shared_ptr< SwapIndex > >::iterator
        erase(SwapIndexVector self, std::vector< ext::shared_ptr< SwapIndex > >::iterator first, std::vector< ext::shared_ptr< SwapIndex > >::iterator last) -> std::vector< ext::shared_ptr< SwapIndex > >::iterator
        """
        return _quantlib_risks.SwapIndexVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(SwapIndexVector self) -> SwapIndexVector
        __init__(SwapIndexVector self, SwapIndexVector other) -> SwapIndexVector
        __init__(SwapIndexVector self, std::vector< ext::shared_ptr< SwapIndex > >::size_type size) -> SwapIndexVector
        __init__(SwapIndexVector self, std::vector< ext::shared_ptr< SwapIndex > >::size_type size, std::vector< ext::shared_ptr< SwapIndex > >::value_type const & value) -> SwapIndexVector
        """
        _quantlib_risks.SwapIndexVector_swiginit(self, _quantlib_risks.new_SwapIndexVector(*args))

    def push_back(self, x):
        r"""push_back(SwapIndexVector self, std::vector< ext::shared_ptr< SwapIndex > >::value_type const & x)"""
        return _quantlib_risks.SwapIndexVector_push_back(self, x)

    def front(self):
        r"""front(SwapIndexVector self) -> std::vector< ext::shared_ptr< SwapIndex > >::value_type const &"""
        return _quantlib_risks.SwapIndexVector_front(self)

    def back(self):
        r"""back(SwapIndexVector self) -> std::vector< ext::shared_ptr< SwapIndex > >::value_type const &"""
        return _quantlib_risks.SwapIndexVector_back(self)

    def assign(self, n, x):
        r"""assign(SwapIndexVector self, std::vector< ext::shared_ptr< SwapIndex > >::size_type n, std::vector< ext::shared_ptr< SwapIndex > >::value_type const & x)"""
        return _quantlib_risks.SwapIndexVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(SwapIndexVector self, std::vector< ext::shared_ptr< SwapIndex > >::size_type new_size)
        resize(SwapIndexVector self, std::vector< ext::shared_ptr< SwapIndex > >::size_type new_size, std::vector< ext::shared_ptr< SwapIndex > >::value_type const & x)
        """
        return _quantlib_risks.SwapIndexVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(SwapIndexVector self, std::vector< ext::shared_ptr< SwapIndex > >::iterator pos, std::vector< ext::shared_ptr< SwapIndex > >::value_type const & x) -> std::vector< ext::shared_ptr< SwapIndex > >::iterator
        insert(SwapIndexVector self, std::vector< ext::shared_ptr< SwapIndex > >::iterator pos, std::vector< ext::shared_ptr< SwapIndex > >::size_type n, std::vector< ext::shared_ptr< SwapIndex > >::value_type const & x)
        """
        return _quantlib_risks.SwapIndexVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(SwapIndexVector self, std::vector< ext::shared_ptr< SwapIndex > >::size_type n)"""
        return _quantlib_risks.SwapIndexVector_reserve(self, n)

    def capacity(self):
        r"""capacity(SwapIndexVector self) -> std::vector< ext::shared_ptr< SwapIndex > >::size_type"""
        return _quantlib_risks.SwapIndexVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_SwapIndexVector

# Register SwapIndexVector in _quantlib_risks:
_quantlib_risks.SwapIndexVector_swigregister(SwapIndexVector)

def as_swap_index(index):
    r"""as_swap_index(ext::shared_ptr< InterestRateIndex > const & index) -> ext::shared_ptr< SwapIndex >"""
    return _quantlib_risks.as_swap_index(index)
class SwapSpreadIndex(InterestRateIndex):
    r"""Proxy of C++ SwapSpreadIndex class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, familyName, swapIndex1, swapIndex2, gearing1=1.0, gearing2=-1.0):
        r"""__init__(SwapSpreadIndex self, std::string const & familyName, ext::shared_ptr< SwapIndex > const & swapIndex1, ext::shared_ptr< SwapIndex > const & swapIndex2, Real const gearing1=1.0, Real const gearing2=-1.0) -> SwapSpreadIndex"""
        _quantlib_risks.SwapSpreadIndex_swiginit(self, _quantlib_risks.new_SwapSpreadIndex(familyName, swapIndex1, swapIndex2, gearing1, gearing2))

    def forecastFixing(self, fixingDate):
        r"""forecastFixing(SwapSpreadIndex self, Date fixingDate) -> Rate"""
        return _quantlib_risks.SwapSpreadIndex_forecastFixing(self, fixingDate)

    def pastFixing(self, fixingDate):
        r"""pastFixing(SwapSpreadIndex self, Date fixingDate) -> Rate"""
        return _quantlib_risks.SwapSpreadIndex_pastFixing(self, fixingDate)

    def swapIndex1(self):
        r"""swapIndex1(SwapSpreadIndex self) -> ext::shared_ptr< SwapIndex >"""
        return _quantlib_risks.SwapSpreadIndex_swapIndex1(self)

    def swapIndex2(self):
        r"""swapIndex2(SwapSpreadIndex self) -> ext::shared_ptr< SwapIndex >"""
        return _quantlib_risks.SwapSpreadIndex_swapIndex2(self)

    def gearing1(self):
        r"""gearing1(SwapSpreadIndex self) -> Real"""
        return _quantlib_risks.SwapSpreadIndex_gearing1(self)

    def gearing2(self):
        r"""gearing2(SwapSpreadIndex self) -> Real"""
        return _quantlib_risks.SwapSpreadIndex_gearing2(self)
    __swig_destroy__ = _quantlib_risks.delete_SwapSpreadIndex

# Register SwapSpreadIndex in _quantlib_risks:
_quantlib_risks.SwapSpreadIndex_swigregister(SwapSpreadIndex)
class EquityIndex(Index):
    r"""Proxy of C++ EquityIndex class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(EquityIndex self, std::string name, Calendar fixingCalendar, YieldTermStructureHandle interest={}, YieldTermStructureHandle dividend={}, QuoteHandle spot={}) -> EquityIndex"""
        _quantlib_risks.EquityIndex_swiginit(self, _quantlib_risks.new_EquityIndex(*args))

    def equityInterestRateCurve(self):
        r"""equityInterestRateCurve(EquityIndex self) -> YieldTermStructureHandle"""
        return _quantlib_risks.EquityIndex_equityInterestRateCurve(self)

    def equityDividendCurve(self):
        r"""equityDividendCurve(EquityIndex self) -> YieldTermStructureHandle"""
        return _quantlib_risks.EquityIndex_equityDividendCurve(self)

    def spot(self):
        r"""spot(EquityIndex self) -> QuoteHandle"""
        return _quantlib_risks.EquityIndex_spot(self)

    def clone(self, interest, dividend, spot):
        r"""clone(EquityIndex self, YieldTermStructureHandle interest, YieldTermStructureHandle dividend, QuoteHandle spot) -> ext::shared_ptr< EquityIndex >"""
        return _quantlib_risks.EquityIndex_clone(self, interest, dividend, spot)
    __swig_destroy__ = _quantlib_risks.delete_EquityIndex

# Register EquityIndex in _quantlib_risks:
_quantlib_risks.EquityIndex_swigregister(EquityIndex)
class AUDLibor(IborIndex):
    r"""Proxy of C++ AUDLibor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(AUDLibor self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> AUDLibor"""
        _quantlib_risks.AUDLibor_swiginit(self, _quantlib_risks.new_AUDLibor(*args))
    __swig_destroy__ = _quantlib_risks.delete_AUDLibor

# Register AUDLibor in _quantlib_risks:
_quantlib_risks.AUDLibor_swigregister(AUDLibor)
class CADLibor(IborIndex):
    r"""Proxy of C++ CADLibor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(CADLibor self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> CADLibor"""
        _quantlib_risks.CADLibor_swiginit(self, _quantlib_risks.new_CADLibor(*args))
    __swig_destroy__ = _quantlib_risks.delete_CADLibor

# Register CADLibor in _quantlib_risks:
_quantlib_risks.CADLibor_swigregister(CADLibor)
class CADLiborON(DailyTenorLibor):
    r"""Proxy of C++ CADLiborON class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(CADLiborON self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> CADLiborON"""
        _quantlib_risks.CADLiborON_swiginit(self, _quantlib_risks.new_CADLiborON(*args))
    __swig_destroy__ = _quantlib_risks.delete_CADLiborON

# Register CADLiborON in _quantlib_risks:
_quantlib_risks.CADLiborON_swigregister(CADLiborON)
class Cdor(IborIndex):
    r"""Proxy of C++ Cdor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Cdor self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Cdor"""
        _quantlib_risks.Cdor_swiginit(self, _quantlib_risks.new_Cdor(*args))
    __swig_destroy__ = _quantlib_risks.delete_Cdor

# Register Cdor in _quantlib_risks:
_quantlib_risks.Cdor_swigregister(Cdor)
class CHFLibor(IborIndex):
    r"""Proxy of C++ CHFLibor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(CHFLibor self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> CHFLibor"""
        _quantlib_risks.CHFLibor_swiginit(self, _quantlib_risks.new_CHFLibor(*args))
    __swig_destroy__ = _quantlib_risks.delete_CHFLibor

# Register CHFLibor in _quantlib_risks:
_quantlib_risks.CHFLibor_swigregister(CHFLibor)
class DKKLibor(IborIndex):
    r"""Proxy of C++ DKKLibor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(DKKLibor self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> DKKLibor"""
        _quantlib_risks.DKKLibor_swiginit(self, _quantlib_risks.new_DKKLibor(*args))
    __swig_destroy__ = _quantlib_risks.delete_DKKLibor

# Register DKKLibor in _quantlib_risks:
_quantlib_risks.DKKLibor_swigregister(DKKLibor)
class Bbsw(IborIndex):
    r"""Proxy of C++ Bbsw class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Bbsw self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Bbsw"""
        _quantlib_risks.Bbsw_swiginit(self, _quantlib_risks.new_Bbsw(*args))
    __swig_destroy__ = _quantlib_risks.delete_Bbsw

# Register Bbsw in _quantlib_risks:
_quantlib_risks.Bbsw_swigregister(Bbsw)
class Bbsw1M(Bbsw):
    r"""Proxy of C++ Bbsw1M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Bbsw1M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Bbsw1M"""
        _quantlib_risks.Bbsw1M_swiginit(self, _quantlib_risks.new_Bbsw1M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Bbsw1M

# Register Bbsw1M in _quantlib_risks:
_quantlib_risks.Bbsw1M_swigregister(Bbsw1M)
class Bbsw2M(Bbsw):
    r"""Proxy of C++ Bbsw2M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Bbsw2M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Bbsw2M"""
        _quantlib_risks.Bbsw2M_swiginit(self, _quantlib_risks.new_Bbsw2M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Bbsw2M

# Register Bbsw2M in _quantlib_risks:
_quantlib_risks.Bbsw2M_swigregister(Bbsw2M)
class Bbsw3M(Bbsw):
    r"""Proxy of C++ Bbsw3M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Bbsw3M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Bbsw3M"""
        _quantlib_risks.Bbsw3M_swiginit(self, _quantlib_risks.new_Bbsw3M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Bbsw3M

# Register Bbsw3M in _quantlib_risks:
_quantlib_risks.Bbsw3M_swigregister(Bbsw3M)
class Bbsw4M(Bbsw):
    r"""Proxy of C++ Bbsw4M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Bbsw4M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Bbsw4M"""
        _quantlib_risks.Bbsw4M_swiginit(self, _quantlib_risks.new_Bbsw4M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Bbsw4M

# Register Bbsw4M in _quantlib_risks:
_quantlib_risks.Bbsw4M_swigregister(Bbsw4M)
class Bbsw5M(Bbsw):
    r"""Proxy of C++ Bbsw5M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Bbsw5M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Bbsw5M"""
        _quantlib_risks.Bbsw5M_swiginit(self, _quantlib_risks.new_Bbsw5M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Bbsw5M

# Register Bbsw5M in _quantlib_risks:
_quantlib_risks.Bbsw5M_swigregister(Bbsw5M)
class Bbsw6M(Bbsw):
    r"""Proxy of C++ Bbsw6M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Bbsw6M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Bbsw6M"""
        _quantlib_risks.Bbsw6M_swiginit(self, _quantlib_risks.new_Bbsw6M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Bbsw6M

# Register Bbsw6M in _quantlib_risks:
_quantlib_risks.Bbsw6M_swigregister(Bbsw6M)
class Bkbm(IborIndex):
    r"""Proxy of C++ Bkbm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Bkbm self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Bkbm"""
        _quantlib_risks.Bkbm_swiginit(self, _quantlib_risks.new_Bkbm(*args))
    __swig_destroy__ = _quantlib_risks.delete_Bkbm

# Register Bkbm in _quantlib_risks:
_quantlib_risks.Bkbm_swigregister(Bkbm)
class Bkbm1M(Bkbm):
    r"""Proxy of C++ Bkbm1M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Bkbm1M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Bkbm1M"""
        _quantlib_risks.Bkbm1M_swiginit(self, _quantlib_risks.new_Bkbm1M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Bkbm1M

# Register Bkbm1M in _quantlib_risks:
_quantlib_risks.Bkbm1M_swigregister(Bkbm1M)
class Bkbm2M(Bkbm):
    r"""Proxy of C++ Bkbm2M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Bkbm2M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Bkbm2M"""
        _quantlib_risks.Bkbm2M_swiginit(self, _quantlib_risks.new_Bkbm2M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Bkbm2M

# Register Bkbm2M in _quantlib_risks:
_quantlib_risks.Bkbm2M_swigregister(Bkbm2M)
class Bkbm3M(Bkbm):
    r"""Proxy of C++ Bkbm3M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Bkbm3M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Bkbm3M"""
        _quantlib_risks.Bkbm3M_swiginit(self, _quantlib_risks.new_Bkbm3M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Bkbm3M

# Register Bkbm3M in _quantlib_risks:
_quantlib_risks.Bkbm3M_swigregister(Bkbm3M)
class Bkbm4M(Bkbm):
    r"""Proxy of C++ Bkbm4M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Bkbm4M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Bkbm4M"""
        _quantlib_risks.Bkbm4M_swiginit(self, _quantlib_risks.new_Bkbm4M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Bkbm4M

# Register Bkbm4M in _quantlib_risks:
_quantlib_risks.Bkbm4M_swigregister(Bkbm4M)
class Bkbm5M(Bkbm):
    r"""Proxy of C++ Bkbm5M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Bkbm5M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Bkbm5M"""
        _quantlib_risks.Bkbm5M_swiginit(self, _quantlib_risks.new_Bkbm5M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Bkbm5M

# Register Bkbm5M in _quantlib_risks:
_quantlib_risks.Bkbm5M_swigregister(Bkbm5M)
class Bkbm6M(Bkbm):
    r"""Proxy of C++ Bkbm6M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Bkbm6M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Bkbm6M"""
        _quantlib_risks.Bkbm6M_swiginit(self, _quantlib_risks.new_Bkbm6M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Bkbm6M

# Register Bkbm6M in _quantlib_risks:
_quantlib_risks.Bkbm6M_swigregister(Bkbm6M)
class Euribor(IborIndex):
    r"""Proxy of C++ Euribor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor"""
        _quantlib_risks.Euribor_swiginit(self, _quantlib_risks.new_Euribor(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor

# Register Euribor in _quantlib_risks:
_quantlib_risks.Euribor_swigregister(Euribor)
class EuriborSW(Euribor):
    r"""Proxy of C++ EuriborSW class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(EuriborSW self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> EuriborSW"""
        _quantlib_risks.EuriborSW_swiginit(self, _quantlib_risks.new_EuriborSW(*args))
    __swig_destroy__ = _quantlib_risks.delete_EuriborSW

# Register EuriborSW in _quantlib_risks:
_quantlib_risks.EuriborSW_swigregister(EuriborSW)
class Euribor2W(Euribor):
    r"""Proxy of C++ Euribor2W class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor2W self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor2W"""
        _quantlib_risks.Euribor2W_swiginit(self, _quantlib_risks.new_Euribor2W(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor2W

# Register Euribor2W in _quantlib_risks:
_quantlib_risks.Euribor2W_swigregister(Euribor2W)
class Euribor3W(Euribor):
    r"""Proxy of C++ Euribor3W class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor3W self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor3W"""
        _quantlib_risks.Euribor3W_swiginit(self, _quantlib_risks.new_Euribor3W(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor3W

# Register Euribor3W in _quantlib_risks:
_quantlib_risks.Euribor3W_swigregister(Euribor3W)
class Euribor1M(Euribor):
    r"""Proxy of C++ Euribor1M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor1M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor1M"""
        _quantlib_risks.Euribor1M_swiginit(self, _quantlib_risks.new_Euribor1M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor1M

# Register Euribor1M in _quantlib_risks:
_quantlib_risks.Euribor1M_swigregister(Euribor1M)
class Euribor2M(Euribor):
    r"""Proxy of C++ Euribor2M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor2M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor2M"""
        _quantlib_risks.Euribor2M_swiginit(self, _quantlib_risks.new_Euribor2M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor2M

# Register Euribor2M in _quantlib_risks:
_quantlib_risks.Euribor2M_swigregister(Euribor2M)
class Euribor3M(Euribor):
    r"""Proxy of C++ Euribor3M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor3M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor3M"""
        _quantlib_risks.Euribor3M_swiginit(self, _quantlib_risks.new_Euribor3M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor3M

# Register Euribor3M in _quantlib_risks:
_quantlib_risks.Euribor3M_swigregister(Euribor3M)
class Euribor4M(Euribor):
    r"""Proxy of C++ Euribor4M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor4M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor4M"""
        _quantlib_risks.Euribor4M_swiginit(self, _quantlib_risks.new_Euribor4M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor4M

# Register Euribor4M in _quantlib_risks:
_quantlib_risks.Euribor4M_swigregister(Euribor4M)
class Euribor5M(Euribor):
    r"""Proxy of C++ Euribor5M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor5M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor5M"""
        _quantlib_risks.Euribor5M_swiginit(self, _quantlib_risks.new_Euribor5M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor5M

# Register Euribor5M in _quantlib_risks:
_quantlib_risks.Euribor5M_swigregister(Euribor5M)
class Euribor6M(Euribor):
    r"""Proxy of C++ Euribor6M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor6M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor6M"""
        _quantlib_risks.Euribor6M_swiginit(self, _quantlib_risks.new_Euribor6M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor6M

# Register Euribor6M in _quantlib_risks:
_quantlib_risks.Euribor6M_swigregister(Euribor6M)
class Euribor7M(Euribor):
    r"""Proxy of C++ Euribor7M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor7M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor7M"""
        _quantlib_risks.Euribor7M_swiginit(self, _quantlib_risks.new_Euribor7M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor7M

# Register Euribor7M in _quantlib_risks:
_quantlib_risks.Euribor7M_swigregister(Euribor7M)
class Euribor8M(Euribor):
    r"""Proxy of C++ Euribor8M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor8M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor8M"""
        _quantlib_risks.Euribor8M_swiginit(self, _quantlib_risks.new_Euribor8M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor8M

# Register Euribor8M in _quantlib_risks:
_quantlib_risks.Euribor8M_swigregister(Euribor8M)
class Euribor9M(Euribor):
    r"""Proxy of C++ Euribor9M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor9M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor9M"""
        _quantlib_risks.Euribor9M_swiginit(self, _quantlib_risks.new_Euribor9M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor9M

# Register Euribor9M in _quantlib_risks:
_quantlib_risks.Euribor9M_swigregister(Euribor9M)
class Euribor10M(Euribor):
    r"""Proxy of C++ Euribor10M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor10M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor10M"""
        _quantlib_risks.Euribor10M_swiginit(self, _quantlib_risks.new_Euribor10M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor10M

# Register Euribor10M in _quantlib_risks:
_quantlib_risks.Euribor10M_swigregister(Euribor10M)
class Euribor11M(Euribor):
    r"""Proxy of C++ Euribor11M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor11M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor11M"""
        _quantlib_risks.Euribor11M_swiginit(self, _quantlib_risks.new_Euribor11M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor11M

# Register Euribor11M in _quantlib_risks:
_quantlib_risks.Euribor11M_swigregister(Euribor11M)
class Euribor1Y(Euribor):
    r"""Proxy of C++ Euribor1Y class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor1Y self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor1Y"""
        _quantlib_risks.Euribor1Y_swiginit(self, _quantlib_risks.new_Euribor1Y(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor1Y

# Register Euribor1Y in _quantlib_risks:
_quantlib_risks.Euribor1Y_swigregister(Euribor1Y)
class Euribor365(IborIndex):
    r"""Proxy of C++ Euribor365 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor365 self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor365"""
        _quantlib_risks.Euribor365_swiginit(self, _quantlib_risks.new_Euribor365(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor365

# Register Euribor365 in _quantlib_risks:
_quantlib_risks.Euribor365_swigregister(Euribor365)
class Euribor365_SW(Euribor365):
    r"""Proxy of C++ Euribor365_SW class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor365_SW self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor365_SW"""
        _quantlib_risks.Euribor365_SW_swiginit(self, _quantlib_risks.new_Euribor365_SW(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor365_SW

# Register Euribor365_SW in _quantlib_risks:
_quantlib_risks.Euribor365_SW_swigregister(Euribor365_SW)
class Euribor365_2W(Euribor365):
    r"""Proxy of C++ Euribor365_2W class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor365_2W self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor365_2W"""
        _quantlib_risks.Euribor365_2W_swiginit(self, _quantlib_risks.new_Euribor365_2W(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor365_2W

# Register Euribor365_2W in _quantlib_risks:
_quantlib_risks.Euribor365_2W_swigregister(Euribor365_2W)
class Euribor365_3W(Euribor365):
    r"""Proxy of C++ Euribor365_3W class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor365_3W self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor365_3W"""
        _quantlib_risks.Euribor365_3W_swiginit(self, _quantlib_risks.new_Euribor365_3W(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor365_3W

# Register Euribor365_3W in _quantlib_risks:
_quantlib_risks.Euribor365_3W_swigregister(Euribor365_3W)
class Euribor365_1M(Euribor365):
    r"""Proxy of C++ Euribor365_1M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor365_1M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor365_1M"""
        _quantlib_risks.Euribor365_1M_swiginit(self, _quantlib_risks.new_Euribor365_1M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor365_1M

# Register Euribor365_1M in _quantlib_risks:
_quantlib_risks.Euribor365_1M_swigregister(Euribor365_1M)
class Euribor365_2M(Euribor365):
    r"""Proxy of C++ Euribor365_2M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor365_2M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor365_2M"""
        _quantlib_risks.Euribor365_2M_swiginit(self, _quantlib_risks.new_Euribor365_2M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor365_2M

# Register Euribor365_2M in _quantlib_risks:
_quantlib_risks.Euribor365_2M_swigregister(Euribor365_2M)
class Euribor365_3M(Euribor365):
    r"""Proxy of C++ Euribor365_3M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor365_3M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor365_3M"""
        _quantlib_risks.Euribor365_3M_swiginit(self, _quantlib_risks.new_Euribor365_3M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor365_3M

# Register Euribor365_3M in _quantlib_risks:
_quantlib_risks.Euribor365_3M_swigregister(Euribor365_3M)
class Euribor365_4M(Euribor365):
    r"""Proxy of C++ Euribor365_4M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor365_4M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor365_4M"""
        _quantlib_risks.Euribor365_4M_swiginit(self, _quantlib_risks.new_Euribor365_4M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor365_4M

# Register Euribor365_4M in _quantlib_risks:
_quantlib_risks.Euribor365_4M_swigregister(Euribor365_4M)
class Euribor365_5M(Euribor365):
    r"""Proxy of C++ Euribor365_5M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor365_5M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor365_5M"""
        _quantlib_risks.Euribor365_5M_swiginit(self, _quantlib_risks.new_Euribor365_5M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor365_5M

# Register Euribor365_5M in _quantlib_risks:
_quantlib_risks.Euribor365_5M_swigregister(Euribor365_5M)
class Euribor365_6M(Euribor365):
    r"""Proxy of C++ Euribor365_6M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor365_6M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor365_6M"""
        _quantlib_risks.Euribor365_6M_swiginit(self, _quantlib_risks.new_Euribor365_6M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor365_6M

# Register Euribor365_6M in _quantlib_risks:
_quantlib_risks.Euribor365_6M_swigregister(Euribor365_6M)
class Euribor365_7M(Euribor365):
    r"""Proxy of C++ Euribor365_7M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor365_7M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor365_7M"""
        _quantlib_risks.Euribor365_7M_swiginit(self, _quantlib_risks.new_Euribor365_7M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor365_7M

# Register Euribor365_7M in _quantlib_risks:
_quantlib_risks.Euribor365_7M_swigregister(Euribor365_7M)
class Euribor365_8M(Euribor365):
    r"""Proxy of C++ Euribor365_8M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor365_8M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor365_8M"""
        _quantlib_risks.Euribor365_8M_swiginit(self, _quantlib_risks.new_Euribor365_8M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor365_8M

# Register Euribor365_8M in _quantlib_risks:
_quantlib_risks.Euribor365_8M_swigregister(Euribor365_8M)
class Euribor365_9M(Euribor365):
    r"""Proxy of C++ Euribor365_9M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor365_9M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor365_9M"""
        _quantlib_risks.Euribor365_9M_swiginit(self, _quantlib_risks.new_Euribor365_9M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor365_9M

# Register Euribor365_9M in _quantlib_risks:
_quantlib_risks.Euribor365_9M_swigregister(Euribor365_9M)
class Euribor365_10M(Euribor365):
    r"""Proxy of C++ Euribor365_10M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor365_10M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor365_10M"""
        _quantlib_risks.Euribor365_10M_swiginit(self, _quantlib_risks.new_Euribor365_10M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor365_10M

# Register Euribor365_10M in _quantlib_risks:
_quantlib_risks.Euribor365_10M_swigregister(Euribor365_10M)
class Euribor365_11M(Euribor365):
    r"""Proxy of C++ Euribor365_11M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor365_11M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor365_11M"""
        _quantlib_risks.Euribor365_11M_swiginit(self, _quantlib_risks.new_Euribor365_11M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor365_11M

# Register Euribor365_11M in _quantlib_risks:
_quantlib_risks.Euribor365_11M_swigregister(Euribor365_11M)
class Euribor365_1Y(Euribor365):
    r"""Proxy of C++ Euribor365_1Y class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Euribor365_1Y self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Euribor365_1Y"""
        _quantlib_risks.Euribor365_1Y_swiginit(self, _quantlib_risks.new_Euribor365_1Y(*args))
    __swig_destroy__ = _quantlib_risks.delete_Euribor365_1Y

# Register Euribor365_1Y in _quantlib_risks:
_quantlib_risks.Euribor365_1Y_swigregister(Euribor365_1Y)
class EURLibor(IborIndex):
    r"""Proxy of C++ EURLibor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(EURLibor self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> EURLibor"""
        _quantlib_risks.EURLibor_swiginit(self, _quantlib_risks.new_EURLibor(*args))
    __swig_destroy__ = _quantlib_risks.delete_EURLibor

# Register EURLibor in _quantlib_risks:
_quantlib_risks.EURLibor_swigregister(EURLibor)
class EURLiborSW(EURLibor):
    r"""Proxy of C++ EURLiborSW class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(EURLiborSW self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> EURLiborSW"""
        _quantlib_risks.EURLiborSW_swiginit(self, _quantlib_risks.new_EURLiborSW(*args))
    __swig_destroy__ = _quantlib_risks.delete_EURLiborSW

# Register EURLiborSW in _quantlib_risks:
_quantlib_risks.EURLiborSW_swigregister(EURLiborSW)
class EURLibor2W(EURLibor):
    r"""Proxy of C++ EURLibor2W class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(EURLibor2W self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> EURLibor2W"""
        _quantlib_risks.EURLibor2W_swiginit(self, _quantlib_risks.new_EURLibor2W(*args))
    __swig_destroy__ = _quantlib_risks.delete_EURLibor2W

# Register EURLibor2W in _quantlib_risks:
_quantlib_risks.EURLibor2W_swigregister(EURLibor2W)
class EURLibor1M(EURLibor):
    r"""Proxy of C++ EURLibor1M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(EURLibor1M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> EURLibor1M"""
        _quantlib_risks.EURLibor1M_swiginit(self, _quantlib_risks.new_EURLibor1M(*args))
    __swig_destroy__ = _quantlib_risks.delete_EURLibor1M

# Register EURLibor1M in _quantlib_risks:
_quantlib_risks.EURLibor1M_swigregister(EURLibor1M)
class EURLibor2M(EURLibor):
    r"""Proxy of C++ EURLibor2M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(EURLibor2M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> EURLibor2M"""
        _quantlib_risks.EURLibor2M_swiginit(self, _quantlib_risks.new_EURLibor2M(*args))
    __swig_destroy__ = _quantlib_risks.delete_EURLibor2M

# Register EURLibor2M in _quantlib_risks:
_quantlib_risks.EURLibor2M_swigregister(EURLibor2M)
class EURLibor3M(EURLibor):
    r"""Proxy of C++ EURLibor3M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(EURLibor3M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> EURLibor3M"""
        _quantlib_risks.EURLibor3M_swiginit(self, _quantlib_risks.new_EURLibor3M(*args))
    __swig_destroy__ = _quantlib_risks.delete_EURLibor3M

# Register EURLibor3M in _quantlib_risks:
_quantlib_risks.EURLibor3M_swigregister(EURLibor3M)
class EURLibor4M(EURLibor):
    r"""Proxy of C++ EURLibor4M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(EURLibor4M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> EURLibor4M"""
        _quantlib_risks.EURLibor4M_swiginit(self, _quantlib_risks.new_EURLibor4M(*args))
    __swig_destroy__ = _quantlib_risks.delete_EURLibor4M

# Register EURLibor4M in _quantlib_risks:
_quantlib_risks.EURLibor4M_swigregister(EURLibor4M)
class EURLibor5M(EURLibor):
    r"""Proxy of C++ EURLibor5M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(EURLibor5M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> EURLibor5M"""
        _quantlib_risks.EURLibor5M_swiginit(self, _quantlib_risks.new_EURLibor5M(*args))
    __swig_destroy__ = _quantlib_risks.delete_EURLibor5M

# Register EURLibor5M in _quantlib_risks:
_quantlib_risks.EURLibor5M_swigregister(EURLibor5M)
class EURLibor6M(EURLibor):
    r"""Proxy of C++ EURLibor6M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(EURLibor6M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> EURLibor6M"""
        _quantlib_risks.EURLibor6M_swiginit(self, _quantlib_risks.new_EURLibor6M(*args))
    __swig_destroy__ = _quantlib_risks.delete_EURLibor6M

# Register EURLibor6M in _quantlib_risks:
_quantlib_risks.EURLibor6M_swigregister(EURLibor6M)
class EURLibor7M(EURLibor):
    r"""Proxy of C++ EURLibor7M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(EURLibor7M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> EURLibor7M"""
        _quantlib_risks.EURLibor7M_swiginit(self, _quantlib_risks.new_EURLibor7M(*args))
    __swig_destroy__ = _quantlib_risks.delete_EURLibor7M

# Register EURLibor7M in _quantlib_risks:
_quantlib_risks.EURLibor7M_swigregister(EURLibor7M)
class EURLibor8M(EURLibor):
    r"""Proxy of C++ EURLibor8M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(EURLibor8M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> EURLibor8M"""
        _quantlib_risks.EURLibor8M_swiginit(self, _quantlib_risks.new_EURLibor8M(*args))
    __swig_destroy__ = _quantlib_risks.delete_EURLibor8M

# Register EURLibor8M in _quantlib_risks:
_quantlib_risks.EURLibor8M_swigregister(EURLibor8M)
class EURLibor9M(EURLibor):
    r"""Proxy of C++ EURLibor9M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(EURLibor9M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> EURLibor9M"""
        _quantlib_risks.EURLibor9M_swiginit(self, _quantlib_risks.new_EURLibor9M(*args))
    __swig_destroy__ = _quantlib_risks.delete_EURLibor9M

# Register EURLibor9M in _quantlib_risks:
_quantlib_risks.EURLibor9M_swigregister(EURLibor9M)
class EURLibor10M(EURLibor):
    r"""Proxy of C++ EURLibor10M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(EURLibor10M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> EURLibor10M"""
        _quantlib_risks.EURLibor10M_swiginit(self, _quantlib_risks.new_EURLibor10M(*args))
    __swig_destroy__ = _quantlib_risks.delete_EURLibor10M

# Register EURLibor10M in _quantlib_risks:
_quantlib_risks.EURLibor10M_swigregister(EURLibor10M)
class EURLibor11M(EURLibor):
    r"""Proxy of C++ EURLibor11M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(EURLibor11M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> EURLibor11M"""
        _quantlib_risks.EURLibor11M_swiginit(self, _quantlib_risks.new_EURLibor11M(*args))
    __swig_destroy__ = _quantlib_risks.delete_EURLibor11M

# Register EURLibor11M in _quantlib_risks:
_quantlib_risks.EURLibor11M_swigregister(EURLibor11M)
class EURLibor1Y(EURLibor):
    r"""Proxy of C++ EURLibor1Y class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(EURLibor1Y self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> EURLibor1Y"""
        _quantlib_risks.EURLibor1Y_swiginit(self, _quantlib_risks.new_EURLibor1Y(*args))
    __swig_destroy__ = _quantlib_risks.delete_EURLibor1Y

# Register EURLibor1Y in _quantlib_risks:
_quantlib_risks.EURLibor1Y_swigregister(EURLibor1Y)
class GBPLibor(IborIndex):
    r"""Proxy of C++ GBPLibor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(GBPLibor self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> GBPLibor"""
        _quantlib_risks.GBPLibor_swiginit(self, _quantlib_risks.new_GBPLibor(*args))
    __swig_destroy__ = _quantlib_risks.delete_GBPLibor

# Register GBPLibor in _quantlib_risks:
_quantlib_risks.GBPLibor_swigregister(GBPLibor)
class GBPLiborON(DailyTenorLibor):
    r"""Proxy of C++ GBPLiborON class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(GBPLiborON self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> GBPLiborON"""
        _quantlib_risks.GBPLiborON_swiginit(self, _quantlib_risks.new_GBPLiborON(*args))
    __swig_destroy__ = _quantlib_risks.delete_GBPLiborON

# Register GBPLiborON in _quantlib_risks:
_quantlib_risks.GBPLiborON_swigregister(GBPLiborON)
class Jibar(IborIndex):
    r"""Proxy of C++ Jibar class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Jibar self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Jibar"""
        _quantlib_risks.Jibar_swiginit(self, _quantlib_risks.new_Jibar(*args))
    __swig_destroy__ = _quantlib_risks.delete_Jibar

# Register Jibar in _quantlib_risks:
_quantlib_risks.Jibar_swigregister(Jibar)
class JPYLibor(IborIndex):
    r"""Proxy of C++ JPYLibor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(JPYLibor self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> JPYLibor"""
        _quantlib_risks.JPYLibor_swiginit(self, _quantlib_risks.new_JPYLibor(*args))
    __swig_destroy__ = _quantlib_risks.delete_JPYLibor

# Register JPYLibor in _quantlib_risks:
_quantlib_risks.JPYLibor_swigregister(JPYLibor)
class Mosprime(IborIndex):
    r"""Proxy of C++ Mosprime class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Mosprime self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Mosprime"""
        _quantlib_risks.Mosprime_swiginit(self, _quantlib_risks.new_Mosprime(*args))
    __swig_destroy__ = _quantlib_risks.delete_Mosprime

# Register Mosprime in _quantlib_risks:
_quantlib_risks.Mosprime_swigregister(Mosprime)
class NZDLibor(IborIndex):
    r"""Proxy of C++ NZDLibor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(NZDLibor self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> NZDLibor"""
        _quantlib_risks.NZDLibor_swiginit(self, _quantlib_risks.new_NZDLibor(*args))
    __swig_destroy__ = _quantlib_risks.delete_NZDLibor

# Register NZDLibor in _quantlib_risks:
_quantlib_risks.NZDLibor_swigregister(NZDLibor)
class Pribor(IborIndex):
    r"""Proxy of C++ Pribor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Pribor self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Pribor"""
        _quantlib_risks.Pribor_swiginit(self, _quantlib_risks.new_Pribor(*args))
    __swig_destroy__ = _quantlib_risks.delete_Pribor

# Register Pribor in _quantlib_risks:
_quantlib_risks.Pribor_swigregister(Pribor)
class Robor(IborIndex):
    r"""Proxy of C++ Robor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Robor self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Robor"""
        _quantlib_risks.Robor_swiginit(self, _quantlib_risks.new_Robor(*args))
    __swig_destroy__ = _quantlib_risks.delete_Robor

# Register Robor in _quantlib_risks:
_quantlib_risks.Robor_swigregister(Robor)
class SEKLibor(IborIndex):
    r"""Proxy of C++ SEKLibor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(SEKLibor self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> SEKLibor"""
        _quantlib_risks.SEKLibor_swiginit(self, _quantlib_risks.new_SEKLibor(*args))
    __swig_destroy__ = _quantlib_risks.delete_SEKLibor

# Register SEKLibor in _quantlib_risks:
_quantlib_risks.SEKLibor_swigregister(SEKLibor)
class Shibor(IborIndex):
    r"""Proxy of C++ Shibor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Shibor self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Shibor"""
        _quantlib_risks.Shibor_swiginit(self, _quantlib_risks.new_Shibor(*args))
    __swig_destroy__ = _quantlib_risks.delete_Shibor

# Register Shibor in _quantlib_risks:
_quantlib_risks.Shibor_swigregister(Shibor)
class Tibor(IborIndex):
    r"""Proxy of C++ Tibor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Tibor self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Tibor"""
        _quantlib_risks.Tibor_swiginit(self, _quantlib_risks.new_Tibor(*args))
    __swig_destroy__ = _quantlib_risks.delete_Tibor

# Register Tibor in _quantlib_risks:
_quantlib_risks.Tibor_swigregister(Tibor)
class THBFIX(IborIndex):
    r"""Proxy of C++ THBFIX class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(THBFIX self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> THBFIX"""
        _quantlib_risks.THBFIX_swiginit(self, _quantlib_risks.new_THBFIX(*args))
    __swig_destroy__ = _quantlib_risks.delete_THBFIX

# Register THBFIX in _quantlib_risks:
_quantlib_risks.THBFIX_swigregister(THBFIX)
class TRLibor(IborIndex):
    r"""Proxy of C++ TRLibor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(TRLibor self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> TRLibor"""
        _quantlib_risks.TRLibor_swiginit(self, _quantlib_risks.new_TRLibor(*args))
    __swig_destroy__ = _quantlib_risks.delete_TRLibor

# Register TRLibor in _quantlib_risks:
_quantlib_risks.TRLibor_swigregister(TRLibor)
class USDLibor(IborIndex):
    r"""Proxy of C++ USDLibor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(USDLibor self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> USDLibor"""
        _quantlib_risks.USDLibor_swiginit(self, _quantlib_risks.new_USDLibor(*args))
    __swig_destroy__ = _quantlib_risks.delete_USDLibor

# Register USDLibor in _quantlib_risks:
_quantlib_risks.USDLibor_swigregister(USDLibor)
class USDLiborON(DailyTenorLibor):
    r"""Proxy of C++ USDLiborON class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(USDLiborON self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> USDLiborON"""
        _quantlib_risks.USDLiborON_swiginit(self, _quantlib_risks.new_USDLiborON(*args))
    __swig_destroy__ = _quantlib_risks.delete_USDLiborON

# Register USDLiborON in _quantlib_risks:
_quantlib_risks.USDLiborON_swigregister(USDLiborON)
class Wibor(IborIndex):
    r"""Proxy of C++ Wibor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Wibor self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Wibor"""
        _quantlib_risks.Wibor_swiginit(self, _quantlib_risks.new_Wibor(*args))
    __swig_destroy__ = _quantlib_risks.delete_Wibor

# Register Wibor in _quantlib_risks:
_quantlib_risks.Wibor_swigregister(Wibor)
class Zibor(IborIndex):
    r"""Proxy of C++ Zibor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Zibor self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Zibor"""
        _quantlib_risks.Zibor_swiginit(self, _quantlib_risks.new_Zibor(*args))
    __swig_destroy__ = _quantlib_risks.delete_Zibor

# Register Zibor in _quantlib_risks:
_quantlib_risks.Zibor_swigregister(Zibor)
class Aonia(OvernightIndex):
    r"""Proxy of C++ Aonia class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Aonia self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Aonia"""
        _quantlib_risks.Aonia_swiginit(self, _quantlib_risks.new_Aonia(*args))
    __swig_destroy__ = _quantlib_risks.delete_Aonia

# Register Aonia in _quantlib_risks:
_quantlib_risks.Aonia_swigregister(Aonia)
class Corra(OvernightIndex):
    r"""Proxy of C++ Corra class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Corra self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Corra"""
        _quantlib_risks.Corra_swiginit(self, _quantlib_risks.new_Corra(*args))
    __swig_destroy__ = _quantlib_risks.delete_Corra

# Register Corra in _quantlib_risks:
_quantlib_risks.Corra_swigregister(Corra)
class Destr(OvernightIndex):
    r"""Proxy of C++ Destr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Destr self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Destr"""
        _quantlib_risks.Destr_swiginit(self, _quantlib_risks.new_Destr(*args))
    __swig_destroy__ = _quantlib_risks.delete_Destr

# Register Destr in _quantlib_risks:
_quantlib_risks.Destr_swigregister(Destr)
class Eonia(OvernightIndex):
    r"""Proxy of C++ Eonia class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Eonia self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Eonia"""
        _quantlib_risks.Eonia_swiginit(self, _quantlib_risks.new_Eonia(*args))
    __swig_destroy__ = _quantlib_risks.delete_Eonia

# Register Eonia in _quantlib_risks:
_quantlib_risks.Eonia_swigregister(Eonia)
class Estr(OvernightIndex):
    r"""Proxy of C++ Estr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Estr self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Estr"""
        _quantlib_risks.Estr_swiginit(self, _quantlib_risks.new_Estr(*args))
    __swig_destroy__ = _quantlib_risks.delete_Estr

# Register Estr in _quantlib_risks:
_quantlib_risks.Estr_swigregister(Estr)
class FedFunds(OvernightIndex):
    r"""Proxy of C++ FedFunds class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(FedFunds self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> FedFunds"""
        _quantlib_risks.FedFunds_swiginit(self, _quantlib_risks.new_FedFunds(*args))
    __swig_destroy__ = _quantlib_risks.delete_FedFunds

# Register FedFunds in _quantlib_risks:
_quantlib_risks.FedFunds_swigregister(FedFunds)
class Nzocr(OvernightIndex):
    r"""Proxy of C++ Nzocr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Nzocr self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Nzocr"""
        _quantlib_risks.Nzocr_swiginit(self, _quantlib_risks.new_Nzocr(*args))
    __swig_destroy__ = _quantlib_risks.delete_Nzocr

# Register Nzocr in _quantlib_risks:
_quantlib_risks.Nzocr_swigregister(Nzocr)
class Sofr(OvernightIndex):
    r"""Proxy of C++ Sofr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Sofr self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Sofr"""
        _quantlib_risks.Sofr_swiginit(self, _quantlib_risks.new_Sofr(*args))
    __swig_destroy__ = _quantlib_risks.delete_Sofr

# Register Sofr in _quantlib_risks:
_quantlib_risks.Sofr_swigregister(Sofr)
class Sonia(OvernightIndex):
    r"""Proxy of C++ Sonia class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Sonia self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Sonia"""
        _quantlib_risks.Sonia_swiginit(self, _quantlib_risks.new_Sonia(*args))
    __swig_destroy__ = _quantlib_risks.delete_Sonia

# Register Sonia in _quantlib_risks:
_quantlib_risks.Sonia_swigregister(Sonia)
class Swestr(OvernightIndex):
    r"""Proxy of C++ Swestr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Swestr self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Swestr"""
        _quantlib_risks.Swestr_swiginit(self, _quantlib_risks.new_Swestr(*args))
    __swig_destroy__ = _quantlib_risks.delete_Swestr

# Register Swestr in _quantlib_risks:
_quantlib_risks.Swestr_swigregister(Swestr)
class EuriborSwapIsdaFixA(SwapIndex):
    r"""Proxy of C++ EuriborSwapIsdaFixA class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(EuriborSwapIsdaFixA self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> EuriborSwapIsdaFixA
        __init__(EuriborSwapIsdaFixA self, Period tenor, YieldTermStructureHandle h1, YieldTermStructureHandle h2) -> EuriborSwapIsdaFixA
        """
        _quantlib_risks.EuriborSwapIsdaFixA_swiginit(self, _quantlib_risks.new_EuriborSwapIsdaFixA(*args))
    __swig_destroy__ = _quantlib_risks.delete_EuriborSwapIsdaFixA

# Register EuriborSwapIsdaFixA in _quantlib_risks:
_quantlib_risks.EuriborSwapIsdaFixA_swigregister(EuriborSwapIsdaFixA)
class EuriborSwapIsdaFixB(SwapIndex):
    r"""Proxy of C++ EuriborSwapIsdaFixB class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(EuriborSwapIsdaFixB self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> EuriborSwapIsdaFixB
        __init__(EuriborSwapIsdaFixB self, Period tenor, YieldTermStructureHandle h1, YieldTermStructureHandle h2) -> EuriborSwapIsdaFixB
        """
        _quantlib_risks.EuriborSwapIsdaFixB_swiginit(self, _quantlib_risks.new_EuriborSwapIsdaFixB(*args))
    __swig_destroy__ = _quantlib_risks.delete_EuriborSwapIsdaFixB

# Register EuriborSwapIsdaFixB in _quantlib_risks:
_quantlib_risks.EuriborSwapIsdaFixB_swigregister(EuriborSwapIsdaFixB)
class EuriborSwapIfrFix(SwapIndex):
    r"""Proxy of C++ EuriborSwapIfrFix class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(EuriborSwapIfrFix self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> EuriborSwapIfrFix
        __init__(EuriborSwapIfrFix self, Period tenor, YieldTermStructureHandle h1, YieldTermStructureHandle h2) -> EuriborSwapIfrFix
        """
        _quantlib_risks.EuriborSwapIfrFix_swiginit(self, _quantlib_risks.new_EuriborSwapIfrFix(*args))
    __swig_destroy__ = _quantlib_risks.delete_EuriborSwapIfrFix

# Register EuriborSwapIfrFix in _quantlib_risks:
_quantlib_risks.EuriborSwapIfrFix_swigregister(EuriborSwapIfrFix)
class EurLiborSwapIsdaFixA(SwapIndex):
    r"""Proxy of C++ EurLiborSwapIsdaFixA class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(EurLiborSwapIsdaFixA self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> EurLiborSwapIsdaFixA
        __init__(EurLiborSwapIsdaFixA self, Period tenor, YieldTermStructureHandle h1, YieldTermStructureHandle h2) -> EurLiborSwapIsdaFixA
        """
        _quantlib_risks.EurLiborSwapIsdaFixA_swiginit(self, _quantlib_risks.new_EurLiborSwapIsdaFixA(*args))
    __swig_destroy__ = _quantlib_risks.delete_EurLiborSwapIsdaFixA

# Register EurLiborSwapIsdaFixA in _quantlib_risks:
_quantlib_risks.EurLiborSwapIsdaFixA_swigregister(EurLiborSwapIsdaFixA)
class EurLiborSwapIsdaFixB(SwapIndex):
    r"""Proxy of C++ EurLiborSwapIsdaFixB class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(EurLiborSwapIsdaFixB self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> EurLiborSwapIsdaFixB
        __init__(EurLiborSwapIsdaFixB self, Period tenor, YieldTermStructureHandle h1, YieldTermStructureHandle h2) -> EurLiborSwapIsdaFixB
        """
        _quantlib_risks.EurLiborSwapIsdaFixB_swiginit(self, _quantlib_risks.new_EurLiborSwapIsdaFixB(*args))
    __swig_destroy__ = _quantlib_risks.delete_EurLiborSwapIsdaFixB

# Register EurLiborSwapIsdaFixB in _quantlib_risks:
_quantlib_risks.EurLiborSwapIsdaFixB_swigregister(EurLiborSwapIsdaFixB)
class EurLiborSwapIfrFix(SwapIndex):
    r"""Proxy of C++ EurLiborSwapIfrFix class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(EurLiborSwapIfrFix self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> EurLiborSwapIfrFix
        __init__(EurLiborSwapIfrFix self, Period tenor, YieldTermStructureHandle h1, YieldTermStructureHandle h2) -> EurLiborSwapIfrFix
        """
        _quantlib_risks.EurLiborSwapIfrFix_swiginit(self, _quantlib_risks.new_EurLiborSwapIfrFix(*args))
    __swig_destroy__ = _quantlib_risks.delete_EurLiborSwapIfrFix

# Register EurLiborSwapIfrFix in _quantlib_risks:
_quantlib_risks.EurLiborSwapIfrFix_swigregister(EurLiborSwapIfrFix)
class ChfLiborSwapIsdaFix(SwapIndex):
    r"""Proxy of C++ ChfLiborSwapIsdaFix class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChfLiborSwapIsdaFix self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> ChfLiborSwapIsdaFix
        __init__(ChfLiborSwapIsdaFix self, Period tenor, YieldTermStructureHandle h1, YieldTermStructureHandle h2) -> ChfLiborSwapIsdaFix
        """
        _quantlib_risks.ChfLiborSwapIsdaFix_swiginit(self, _quantlib_risks.new_ChfLiborSwapIsdaFix(*args))
    __swig_destroy__ = _quantlib_risks.delete_ChfLiborSwapIsdaFix

# Register ChfLiborSwapIsdaFix in _quantlib_risks:
_quantlib_risks.ChfLiborSwapIsdaFix_swigregister(ChfLiborSwapIsdaFix)
class GbpLiborSwapIsdaFix(SwapIndex):
    r"""Proxy of C++ GbpLiborSwapIsdaFix class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GbpLiborSwapIsdaFix self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> GbpLiborSwapIsdaFix
        __init__(GbpLiborSwapIsdaFix self, Period tenor, YieldTermStructureHandle h1, YieldTermStructureHandle h2) -> GbpLiborSwapIsdaFix
        """
        _quantlib_risks.GbpLiborSwapIsdaFix_swiginit(self, _quantlib_risks.new_GbpLiborSwapIsdaFix(*args))
    __swig_destroy__ = _quantlib_risks.delete_GbpLiborSwapIsdaFix

# Register GbpLiborSwapIsdaFix in _quantlib_risks:
_quantlib_risks.GbpLiborSwapIsdaFix_swigregister(GbpLiborSwapIsdaFix)
class JpyLiborSwapIsdaFixAm(SwapIndex):
    r"""Proxy of C++ JpyLiborSwapIsdaFixAm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(JpyLiborSwapIsdaFixAm self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> JpyLiborSwapIsdaFixAm
        __init__(JpyLiborSwapIsdaFixAm self, Period tenor, YieldTermStructureHandle h1, YieldTermStructureHandle h2) -> JpyLiborSwapIsdaFixAm
        """
        _quantlib_risks.JpyLiborSwapIsdaFixAm_swiginit(self, _quantlib_risks.new_JpyLiborSwapIsdaFixAm(*args))
    __swig_destroy__ = _quantlib_risks.delete_JpyLiborSwapIsdaFixAm

# Register JpyLiborSwapIsdaFixAm in _quantlib_risks:
_quantlib_risks.JpyLiborSwapIsdaFixAm_swigregister(JpyLiborSwapIsdaFixAm)
class JpyLiborSwapIsdaFixPm(SwapIndex):
    r"""Proxy of C++ JpyLiborSwapIsdaFixPm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(JpyLiborSwapIsdaFixPm self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> JpyLiborSwapIsdaFixPm
        __init__(JpyLiborSwapIsdaFixPm self, Period tenor, YieldTermStructureHandle h1, YieldTermStructureHandle h2) -> JpyLiborSwapIsdaFixPm
        """
        _quantlib_risks.JpyLiborSwapIsdaFixPm_swiginit(self, _quantlib_risks.new_JpyLiborSwapIsdaFixPm(*args))
    __swig_destroy__ = _quantlib_risks.delete_JpyLiborSwapIsdaFixPm

# Register JpyLiborSwapIsdaFixPm in _quantlib_risks:
_quantlib_risks.JpyLiborSwapIsdaFixPm_swigregister(JpyLiborSwapIsdaFixPm)
class UsdLiborSwapIsdaFixAm(SwapIndex):
    r"""Proxy of C++ UsdLiborSwapIsdaFixAm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(UsdLiborSwapIsdaFixAm self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> UsdLiborSwapIsdaFixAm
        __init__(UsdLiborSwapIsdaFixAm self, Period tenor, YieldTermStructureHandle h1, YieldTermStructureHandle h2) -> UsdLiborSwapIsdaFixAm
        """
        _quantlib_risks.UsdLiborSwapIsdaFixAm_swiginit(self, _quantlib_risks.new_UsdLiborSwapIsdaFixAm(*args))
    __swig_destroy__ = _quantlib_risks.delete_UsdLiborSwapIsdaFixAm

# Register UsdLiborSwapIsdaFixAm in _quantlib_risks:
_quantlib_risks.UsdLiborSwapIsdaFixAm_swigregister(UsdLiborSwapIsdaFixAm)
class UsdLiborSwapIsdaFixPm(SwapIndex):
    r"""Proxy of C++ UsdLiborSwapIsdaFixPm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(UsdLiborSwapIsdaFixPm self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> UsdLiborSwapIsdaFixPm
        __init__(UsdLiborSwapIsdaFixPm self, Period tenor, YieldTermStructureHandle h1, YieldTermStructureHandle h2) -> UsdLiborSwapIsdaFixPm
        """
        _quantlib_risks.UsdLiborSwapIsdaFixPm_swiginit(self, _quantlib_risks.new_UsdLiborSwapIsdaFixPm(*args))
    __swig_destroy__ = _quantlib_risks.delete_UsdLiborSwapIsdaFixPm

# Register UsdLiborSwapIsdaFixPm in _quantlib_risks:
_quantlib_risks.UsdLiborSwapIsdaFixPm_swigregister(UsdLiborSwapIsdaFixPm)
class Bibor(IborIndex):
    r"""Proxy of C++ Bibor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Bibor self, Period tenor, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Bibor"""
        _quantlib_risks.Bibor_swiginit(self, _quantlib_risks.new_Bibor(*args))
    __swig_destroy__ = _quantlib_risks.delete_Bibor

# Register Bibor in _quantlib_risks:
_quantlib_risks.Bibor_swigregister(Bibor)
class BiborSW(Bibor):
    r"""Proxy of C++ BiborSW class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(BiborSW self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> BiborSW"""
        _quantlib_risks.BiborSW_swiginit(self, _quantlib_risks.new_BiborSW(*args))
    __swig_destroy__ = _quantlib_risks.delete_BiborSW

# Register BiborSW in _quantlib_risks:
_quantlib_risks.BiborSW_swigregister(BiborSW)
class Bibor1M(Bibor):
    r"""Proxy of C++ Bibor1M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Bibor1M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Bibor1M"""
        _quantlib_risks.Bibor1M_swiginit(self, _quantlib_risks.new_Bibor1M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Bibor1M

# Register Bibor1M in _quantlib_risks:
_quantlib_risks.Bibor1M_swigregister(Bibor1M)
class Bibor2M(Bibor):
    r"""Proxy of C++ Bibor2M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Bibor2M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Bibor2M"""
        _quantlib_risks.Bibor2M_swiginit(self, _quantlib_risks.new_Bibor2M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Bibor2M

# Register Bibor2M in _quantlib_risks:
_quantlib_risks.Bibor2M_swigregister(Bibor2M)
class Bibor3M(Bibor):
    r"""Proxy of C++ Bibor3M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Bibor3M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Bibor3M"""
        _quantlib_risks.Bibor3M_swiginit(self, _quantlib_risks.new_Bibor3M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Bibor3M

# Register Bibor3M in _quantlib_risks:
_quantlib_risks.Bibor3M_swigregister(Bibor3M)
class Bibor6M(Bibor):
    r"""Proxy of C++ Bibor6M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Bibor6M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Bibor6M"""
        _quantlib_risks.Bibor6M_swiginit(self, _quantlib_risks.new_Bibor6M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Bibor6M

# Register Bibor6M in _quantlib_risks:
_quantlib_risks.Bibor6M_swigregister(Bibor6M)
class Bibor9M(Bibor):
    r"""Proxy of C++ Bibor9M class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Bibor9M self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Bibor9M"""
        _quantlib_risks.Bibor9M_swiginit(self, _quantlib_risks.new_Bibor9M(*args))
    __swig_destroy__ = _quantlib_risks.delete_Bibor9M

# Register Bibor9M in _quantlib_risks:
_quantlib_risks.Bibor9M_swigregister(Bibor9M)
class Bibor1Y(Bibor):
    r"""Proxy of C++ Bibor1Y class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Bibor1Y self, YieldTermStructureHandle h=Handle< YieldTermStructure >()) -> Bibor1Y"""
        _quantlib_risks.Bibor1Y_swiginit(self, _quantlib_risks.new_Bibor1Y(*args))
    __swig_destroy__ = _quantlib_risks.delete_Bibor1Y

# Register Bibor1Y in _quantlib_risks:
_quantlib_risks.Bibor1Y_swigregister(Bibor1Y)
class DateGeneration(object):
    r"""Proxy of C++ DateGeneration class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Backward = _quantlib_risks.DateGeneration_Backward
    
    Forward = _quantlib_risks.DateGeneration_Forward
    
    Zero = _quantlib_risks.DateGeneration_Zero
    
    ThirdWednesday = _quantlib_risks.DateGeneration_ThirdWednesday
    
    ThirdWednesdayInclusive = _quantlib_risks.DateGeneration_ThirdWednesdayInclusive
    
    Twentieth = _quantlib_risks.DateGeneration_Twentieth
    
    TwentiethIMM = _quantlib_risks.DateGeneration_TwentiethIMM
    
    OldCDS = _quantlib_risks.DateGeneration_OldCDS
    
    CDS = _quantlib_risks.DateGeneration_CDS
    
    CDS2015 = _quantlib_risks.DateGeneration_CDS2015
    

    def __init__(self):
        r"""__init__(DateGeneration self) -> DateGeneration"""
        _quantlib_risks.DateGeneration_swiginit(self, _quantlib_risks.new_DateGeneration())
    __swig_destroy__ = _quantlib_risks.delete_DateGeneration

# Register DateGeneration in _quantlib_risks:
_quantlib_risks.DateGeneration_swigregister(DateGeneration)
class Schedule(object):
    r"""Proxy of C++ Schedule class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Schedule self, DateVector arg2, Calendar calendar=NullCalendar(), BusinessDayConvention const convention=Unadjusted, ext::optional< BusinessDayConvention > terminationDateConvention=ext::nullopt, ext::optional< Period > tenor=ext::nullopt, ext::optional< DateGeneration::Rule > rule=ext::nullopt, ext::optional< bool > endOfMonth=ext::nullopt, BoolVector isRegular=std::vector< bool >(0)) -> Schedule
        __init__(Schedule self, Date effectiveDate, Date terminationDate, Period tenor, Calendar calendar, BusinessDayConvention convention, BusinessDayConvention terminationDateConvention, DateGeneration::Rule rule, bool endOfMonth, Date firstDate=Date(), Date nextToLastDate=Date()) -> Schedule
        __init__(Schedule self) -> Schedule
        """
        _quantlib_risks.Schedule_swiginit(self, _quantlib_risks.new_Schedule(*args))

    def __len__(self):
        r"""__len__(Schedule self) -> Size"""
        return _quantlib_risks.Schedule___len__(self)

    def previousDate(self, refDate):
        r"""previousDate(Schedule self, Date refDate) -> Date"""
        return _quantlib_risks.Schedule_previousDate(self, refDate)

    def nextDate(self, refDate):
        r"""nextDate(Schedule self, Date refDate) -> Date"""
        return _quantlib_risks.Schedule_nextDate(self, refDate)

    def dates(self):
        r"""dates(Schedule self) -> DateVector"""
        return _quantlib_risks.Schedule_dates(self)

    def hasIsRegular(self):
        r"""hasIsRegular(Schedule self) -> bool"""
        return _quantlib_risks.Schedule_hasIsRegular(self)

    def isRegular(self, *args):
        r"""
        isRegular(Schedule self, Size i) -> bool
        isRegular(Schedule self) -> BoolVector
        """
        return _quantlib_risks.Schedule_isRegular(self, *args)

    def calendar(self):
        r"""calendar(Schedule self) -> Calendar"""
        return _quantlib_risks.Schedule_calendar(self)

    def startDate(self):
        r"""startDate(Schedule self) -> Date"""
        return _quantlib_risks.Schedule_startDate(self)

    def endDate(self):
        r"""endDate(Schedule self) -> Date"""
        return _quantlib_risks.Schedule_endDate(self)

    def hasTenor(self):
        r"""hasTenor(Schedule self) -> bool"""
        return _quantlib_risks.Schedule_hasTenor(self)

    def tenor(self):
        r"""tenor(Schedule self) -> Period"""
        return _quantlib_risks.Schedule_tenor(self)

    def businessDayConvention(self):
        r"""businessDayConvention(Schedule self) -> BusinessDayConvention"""
        return _quantlib_risks.Schedule_businessDayConvention(self)

    def hasTerminationDateBusinessDayConvention(self):
        r"""hasTerminationDateBusinessDayConvention(Schedule self) -> bool"""
        return _quantlib_risks.Schedule_hasTerminationDateBusinessDayConvention(self)

    def terminationDateBusinessDayConvention(self):
        r"""terminationDateBusinessDayConvention(Schedule self) -> BusinessDayConvention"""
        return _quantlib_risks.Schedule_terminationDateBusinessDayConvention(self)

    def hasRule(self):
        r"""hasRule(Schedule self) -> bool"""
        return _quantlib_risks.Schedule_hasRule(self)

    def rule(self):
        r"""rule(Schedule self) -> DateGeneration::Rule"""
        return _quantlib_risks.Schedule_rule(self)

    def hasEndOfMonth(self):
        r"""hasEndOfMonth(Schedule self) -> bool"""
        return _quantlib_risks.Schedule_hasEndOfMonth(self)

    def endOfMonth(self):
        r"""endOfMonth(Schedule self) -> bool"""
        return _quantlib_risks.Schedule_endOfMonth(self)

    def after(self, truncationDate):
        r"""after(Schedule self, Date truncationDate) -> Schedule"""
        return _quantlib_risks.Schedule_after(self, truncationDate)

    def until(self, truncationDate):
        r"""until(Schedule self, Date truncationDate) -> Schedule"""
        return _quantlib_risks.Schedule_until(self, truncationDate)

    def __getitem__(self, i):
        r"""__getitem__(Schedule self, Integer i) -> Date"""
        return _quantlib_risks.Schedule___getitem__(self, i)
    __swig_destroy__ = _quantlib_risks.delete_Schedule

# Register Schedule in _quantlib_risks:
_quantlib_risks.Schedule_swigregister(Schedule)
class _MakeSchedule(object):
    r"""Proxy of C++ MakeSchedule class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(_MakeSchedule self) -> _MakeSchedule"""
        _quantlib_risks._MakeSchedule_swiginit(self, _quantlib_risks.new__MakeSchedule())

    def fromDate(self, effectiveDate):
        r"""fromDate(_MakeSchedule self, Date effectiveDate) -> _MakeSchedule"""
        return _quantlib_risks._MakeSchedule_fromDate(self, effectiveDate)

    def to(self, terminationDate):
        r"""to(_MakeSchedule self, Date terminationDate) -> _MakeSchedule"""
        return _quantlib_risks._MakeSchedule_to(self, terminationDate)

    def withTenor(self, arg2):
        r"""withTenor(_MakeSchedule self, Period arg2) -> _MakeSchedule"""
        return _quantlib_risks._MakeSchedule_withTenor(self, arg2)

    def withFrequency(self, arg2):
        r"""withFrequency(_MakeSchedule self, Frequency arg2) -> _MakeSchedule"""
        return _quantlib_risks._MakeSchedule_withFrequency(self, arg2)

    def withCalendar(self, arg2):
        r"""withCalendar(_MakeSchedule self, Calendar arg2) -> _MakeSchedule"""
        return _quantlib_risks._MakeSchedule_withCalendar(self, arg2)

    def withConvention(self, arg2):
        r"""withConvention(_MakeSchedule self, BusinessDayConvention arg2) -> _MakeSchedule"""
        return _quantlib_risks._MakeSchedule_withConvention(self, arg2)

    def withTerminationDateConvention(self, arg2):
        r"""withTerminationDateConvention(_MakeSchedule self, BusinessDayConvention arg2) -> _MakeSchedule"""
        return _quantlib_risks._MakeSchedule_withTerminationDateConvention(self, arg2)

    def withRule(self, arg2):
        r"""withRule(_MakeSchedule self, DateGeneration::Rule arg2) -> _MakeSchedule"""
        return _quantlib_risks._MakeSchedule_withRule(self, arg2)

    def forwards(self):
        r"""forwards(_MakeSchedule self) -> _MakeSchedule"""
        return _quantlib_risks._MakeSchedule_forwards(self)

    def backwards(self):
        r"""backwards(_MakeSchedule self) -> _MakeSchedule"""
        return _quantlib_risks._MakeSchedule_backwards(self)

    def endOfMonth(self, flag=True):
        r"""endOfMonth(_MakeSchedule self, bool flag=True) -> _MakeSchedule"""
        return _quantlib_risks._MakeSchedule_endOfMonth(self, flag)

    def withFirstDate(self, d):
        r"""withFirstDate(_MakeSchedule self, Date d) -> _MakeSchedule"""
        return _quantlib_risks._MakeSchedule_withFirstDate(self, d)

    def withNextToLastDate(self, d):
        r"""withNextToLastDate(_MakeSchedule self, Date d) -> _MakeSchedule"""
        return _quantlib_risks._MakeSchedule_withNextToLastDate(self, d)

    def schedule(self):
        r"""schedule(_MakeSchedule self) -> Schedule"""
        return _quantlib_risks._MakeSchedule_schedule(self)
    __swig_destroy__ = _quantlib_risks.delete__MakeSchedule

# Register _MakeSchedule in _quantlib_risks:
_quantlib_risks._MakeSchedule_swigregister(_MakeSchedule)

def MakeSchedule(effectiveDate=None,terminationDate=None,tenor=None,
    frequency=None,calendar=None,convention=None,terminalDateConvention=None,
    rule=None,forwards=False,backwards=False,
    endOfMonth=None,firstDate=None,nextToLastDate=None):
    ms = _MakeSchedule()
    if effectiveDate is not None:
        ms.fromDate(effectiveDate)
    if terminationDate is not None:
        ms.to(terminationDate)
    if tenor is not None:
        ms.withTenor(tenor)
    if frequency is not None:
        ms.withFrequency(frequency)
    if calendar is not None:
        ms.withCalendar(calendar)
    if convention is not None:
        ms.withConvention(convention)
    if terminalDateConvention is not None:
        ms.withTerminationDateConvention(terminalDateConvention)
    if rule is not None:
        ms.withRule(rule)
    if forwards:
        ms.forwards()
    if backwards:
        ms.backwards()
    if endOfMonth is not None:
        ms.endOfMonth(endOfMonth)
    if firstDate is not None:
        ms.withFirstDate(firstDate)
    if nextToLastDate is not None:
        ms.withNextToLastDate(nextToLastDate)
    return ms.schedule()

ShiftedLognormal = _quantlib_risks.ShiftedLognormal

Normal = _quantlib_risks.Normal

class VolatilityTermStructure(TermStructure):
    r"""Proxy of C++ VolatilityTermStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def minStrike(self):
        r"""minStrike(VolatilityTermStructure self) -> Real"""
        return _quantlib_risks.VolatilityTermStructure_minStrike(self)

    def maxStrike(self):
        r"""maxStrike(VolatilityTermStructure self) -> Real"""
        return _quantlib_risks.VolatilityTermStructure_maxStrike(self)
    __swig_destroy__ = _quantlib_risks.delete_VolatilityTermStructure

# Register VolatilityTermStructure in _quantlib_risks:
_quantlib_risks.VolatilityTermStructure_swigregister(VolatilityTermStructure)
class BlackVolTermStructure(VolatilityTermStructure):
    r"""Proxy of C++ BlackVolTermStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def blackVol(self, *args):
        r"""
        blackVol(BlackVolTermStructure self, Date arg2, Real strike, bool extrapolate=False) -> Volatility
        blackVol(BlackVolTermStructure self, Time arg2, Real strike, bool extrapolate=False) -> Volatility
        """
        return _quantlib_risks.BlackVolTermStructure_blackVol(self, *args)

    def blackVariance(self, *args):
        r"""
        blackVariance(BlackVolTermStructure self, Date arg2, Real strike, bool extrapolate=False) -> Real
        blackVariance(BlackVolTermStructure self, Time arg2, Real strike, bool extrapolate=False) -> Real
        """
        return _quantlib_risks.BlackVolTermStructure_blackVariance(self, *args)

    def blackForwardVol(self, *args):
        r"""
        blackForwardVol(BlackVolTermStructure self, Date arg2, Date arg3, Real strike, bool extrapolate=False) -> Volatility
        blackForwardVol(BlackVolTermStructure self, Time arg2, Time arg3, Real strike, bool extrapolate=False) -> Volatility
        """
        return _quantlib_risks.BlackVolTermStructure_blackForwardVol(self, *args)

    def blackForwardVariance(self, *args):
        r"""
        blackForwardVariance(BlackVolTermStructure self, Date arg2, Date arg3, Real strike, bool extrapolate=False) -> Real
        blackForwardVariance(BlackVolTermStructure self, Time arg2, Time arg3, Real strike, bool extrapolate=False) -> Real
        """
        return _quantlib_risks.BlackVolTermStructure_blackForwardVariance(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_BlackVolTermStructure

# Register BlackVolTermStructure in _quantlib_risks:
_quantlib_risks.BlackVolTermStructure_swigregister(BlackVolTermStructure)
class BlackVolTermStructureHandle(object):
    r"""Proxy of C++ Handle< BlackVolTermStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(BlackVolTermStructureHandle self, ext::shared_ptr< BlackVolTermStructure > const & arg2=ext::shared_ptr()) -> BlackVolTermStructureHandle"""
        _quantlib_risks.BlackVolTermStructureHandle_swiginit(self, _quantlib_risks.new_BlackVolTermStructureHandle(*args))

    def __deref__(self):
        r"""__deref__(BlackVolTermStructureHandle self) -> ext::shared_ptr< BlackVolTermStructure >"""
        return _quantlib_risks.BlackVolTermStructureHandle___deref__(self)

    def currentLink(self):
        r"""currentLink(BlackVolTermStructureHandle self) -> ext::shared_ptr< BlackVolTermStructure >"""
        return _quantlib_risks.BlackVolTermStructureHandle_currentLink(self)

    def __nonzero__(self):
        r"""__nonzero__(BlackVolTermStructureHandle self) -> bool"""
        return _quantlib_risks.BlackVolTermStructureHandle___nonzero__(self)

    def __bool__(self):
        r"""__bool__(BlackVolTermStructureHandle self) -> bool"""
        return _quantlib_risks.BlackVolTermStructureHandle___bool__(self)

    def asObservable(self):
        r"""asObservable(BlackVolTermStructureHandle self) -> ext::shared_ptr< Observable >"""
        return _quantlib_risks.BlackVolTermStructureHandle_asObservable(self)
    __swig_destroy__ = _quantlib_risks.delete_BlackVolTermStructureHandle

    def blackVol(self, *args):
        r"""
        blackVol(BlackVolTermStructureHandle self, Date arg2, Real strike, bool extrapolate=False) -> Volatility
        blackVol(BlackVolTermStructureHandle self, Time arg2, Real strike, bool extrapolate=False) -> Volatility
        """
        return _quantlib_risks.BlackVolTermStructureHandle_blackVol(self, *args)

    def blackVariance(self, *args):
        r"""
        blackVariance(BlackVolTermStructureHandle self, Date arg2, Real strike, bool extrapolate=False) -> Real
        blackVariance(BlackVolTermStructureHandle self, Time arg2, Real strike, bool extrapolate=False) -> Real
        """
        return _quantlib_risks.BlackVolTermStructureHandle_blackVariance(self, *args)

    def blackForwardVol(self, *args):
        r"""
        blackForwardVol(BlackVolTermStructureHandle self, Date arg2, Date arg3, Real strike, bool extrapolate=False) -> Volatility
        blackForwardVol(BlackVolTermStructureHandle self, Time arg2, Time arg3, Real strike, bool extrapolate=False) -> Volatility
        """
        return _quantlib_risks.BlackVolTermStructureHandle_blackForwardVol(self, *args)

    def blackForwardVariance(self, *args):
        r"""
        blackForwardVariance(BlackVolTermStructureHandle self, Date arg2, Date arg3, Real strike, bool extrapolate=False) -> Real
        blackForwardVariance(BlackVolTermStructureHandle self, Time arg2, Time arg3, Real strike, bool extrapolate=False) -> Real
        """
        return _quantlib_risks.BlackVolTermStructureHandle_blackForwardVariance(self, *args)

    def minStrike(self):
        r"""minStrike(BlackVolTermStructureHandle self) -> Real"""
        return _quantlib_risks.BlackVolTermStructureHandle_minStrike(self)

    def maxStrike(self):
        r"""maxStrike(BlackVolTermStructureHandle self) -> Real"""
        return _quantlib_risks.BlackVolTermStructureHandle_maxStrike(self)

    def dayCounter(self):
        r"""dayCounter(BlackVolTermStructureHandle self) -> DayCounter"""
        return _quantlib_risks.BlackVolTermStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        r"""timeFromReference(BlackVolTermStructureHandle self, Date date) -> Time"""
        return _quantlib_risks.BlackVolTermStructureHandle_timeFromReference(self, date)

    def calendar(self):
        r"""calendar(BlackVolTermStructureHandle self) -> Calendar"""
        return _quantlib_risks.BlackVolTermStructureHandle_calendar(self)

    def referenceDate(self):
        r"""referenceDate(BlackVolTermStructureHandle self) -> Date"""
        return _quantlib_risks.BlackVolTermStructureHandle_referenceDate(self)

    def maxDate(self):
        r"""maxDate(BlackVolTermStructureHandle self) -> Date"""
        return _quantlib_risks.BlackVolTermStructureHandle_maxDate(self)

    def maxTime(self):
        r"""maxTime(BlackVolTermStructureHandle self) -> Time"""
        return _quantlib_risks.BlackVolTermStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        r"""enableExtrapolation(BlackVolTermStructureHandle self)"""
        return _quantlib_risks.BlackVolTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        r"""disableExtrapolation(BlackVolTermStructureHandle self)"""
        return _quantlib_risks.BlackVolTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        r"""allowsExtrapolation(BlackVolTermStructureHandle self) -> bool"""
        return _quantlib_risks.BlackVolTermStructureHandle_allowsExtrapolation(self)

# Register BlackVolTermStructureHandle in _quantlib_risks:
_quantlib_risks.BlackVolTermStructureHandle_swigregister(BlackVolTermStructureHandle)
class RelinkableBlackVolTermStructureHandle(BlackVolTermStructureHandle):
    r"""Proxy of C++ RelinkableHandle< BlackVolTermStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(RelinkableBlackVolTermStructureHandle self, ext::shared_ptr< BlackVolTermStructure > const & arg2=ext::shared_ptr()) -> RelinkableBlackVolTermStructureHandle"""
        _quantlib_risks.RelinkableBlackVolTermStructureHandle_swiginit(self, _quantlib_risks.new_RelinkableBlackVolTermStructureHandle(*args))

    def linkTo(self, arg2):
        r"""linkTo(RelinkableBlackVolTermStructureHandle self, ext::shared_ptr< BlackVolTermStructure > const & arg2)"""
        return _quantlib_risks.RelinkableBlackVolTermStructureHandle_linkTo(self, arg2)

    def reset(self):
        r"""reset(RelinkableBlackVolTermStructureHandle self)"""
        return _quantlib_risks.RelinkableBlackVolTermStructureHandle_reset(self)
    __swig_destroy__ = _quantlib_risks.delete_RelinkableBlackVolTermStructureHandle

# Register RelinkableBlackVolTermStructureHandle in _quantlib_risks:
_quantlib_risks.RelinkableBlackVolTermStructureHandle_swigregister(RelinkableBlackVolTermStructureHandle)
class LocalVolTermStructure(VolatilityTermStructure):
    r"""Proxy of C++ LocalVolTermStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def localVol(self, *args):
        r"""
        localVol(LocalVolTermStructure self, Date arg2, Real u, bool extrapolate=False) -> Volatility
        localVol(LocalVolTermStructure self, Time arg2, Real u, bool extrapolate=False) -> Volatility
        """
        return _quantlib_risks.LocalVolTermStructure_localVol(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_LocalVolTermStructure

# Register LocalVolTermStructure in _quantlib_risks:
_quantlib_risks.LocalVolTermStructure_swigregister(LocalVolTermStructure)
class LocalVolTermStructureHandle(object):
    r"""Proxy of C++ Handle< LocalVolTermStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(LocalVolTermStructureHandle self, ext::shared_ptr< LocalVolTermStructure > const & arg2=ext::shared_ptr()) -> LocalVolTermStructureHandle"""
        _quantlib_risks.LocalVolTermStructureHandle_swiginit(self, _quantlib_risks.new_LocalVolTermStructureHandle(*args))

    def __deref__(self):
        r"""__deref__(LocalVolTermStructureHandle self) -> ext::shared_ptr< LocalVolTermStructure >"""
        return _quantlib_risks.LocalVolTermStructureHandle___deref__(self)

    def currentLink(self):
        r"""currentLink(LocalVolTermStructureHandle self) -> ext::shared_ptr< LocalVolTermStructure >"""
        return _quantlib_risks.LocalVolTermStructureHandle_currentLink(self)

    def __nonzero__(self):
        r"""__nonzero__(LocalVolTermStructureHandle self) -> bool"""
        return _quantlib_risks.LocalVolTermStructureHandle___nonzero__(self)

    def __bool__(self):
        r"""__bool__(LocalVolTermStructureHandle self) -> bool"""
        return _quantlib_risks.LocalVolTermStructureHandle___bool__(self)

    def asObservable(self):
        r"""asObservable(LocalVolTermStructureHandle self) -> ext::shared_ptr< Observable >"""
        return _quantlib_risks.LocalVolTermStructureHandle_asObservable(self)
    __swig_destroy__ = _quantlib_risks.delete_LocalVolTermStructureHandle

    def localVol(self, *args):
        r"""
        localVol(LocalVolTermStructureHandle self, Date arg2, Real u, bool extrapolate=False) -> Volatility
        localVol(LocalVolTermStructureHandle self, Time arg2, Real u, bool extrapolate=False) -> Volatility
        """
        return _quantlib_risks.LocalVolTermStructureHandle_localVol(self, *args)

    def minStrike(self):
        r"""minStrike(LocalVolTermStructureHandle self) -> Real"""
        return _quantlib_risks.LocalVolTermStructureHandle_minStrike(self)

    def maxStrike(self):
        r"""maxStrike(LocalVolTermStructureHandle self) -> Real"""
        return _quantlib_risks.LocalVolTermStructureHandle_maxStrike(self)

    def dayCounter(self):
        r"""dayCounter(LocalVolTermStructureHandle self) -> DayCounter"""
        return _quantlib_risks.LocalVolTermStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        r"""timeFromReference(LocalVolTermStructureHandle self, Date date) -> Time"""
        return _quantlib_risks.LocalVolTermStructureHandle_timeFromReference(self, date)

    def calendar(self):
        r"""calendar(LocalVolTermStructureHandle self) -> Calendar"""
        return _quantlib_risks.LocalVolTermStructureHandle_calendar(self)

    def referenceDate(self):
        r"""referenceDate(LocalVolTermStructureHandle self) -> Date"""
        return _quantlib_risks.LocalVolTermStructureHandle_referenceDate(self)

    def maxDate(self):
        r"""maxDate(LocalVolTermStructureHandle self) -> Date"""
        return _quantlib_risks.LocalVolTermStructureHandle_maxDate(self)

    def maxTime(self):
        r"""maxTime(LocalVolTermStructureHandle self) -> Time"""
        return _quantlib_risks.LocalVolTermStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        r"""enableExtrapolation(LocalVolTermStructureHandle self)"""
        return _quantlib_risks.LocalVolTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        r"""disableExtrapolation(LocalVolTermStructureHandle self)"""
        return _quantlib_risks.LocalVolTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        r"""allowsExtrapolation(LocalVolTermStructureHandle self) -> bool"""
        return _quantlib_risks.LocalVolTermStructureHandle_allowsExtrapolation(self)

# Register LocalVolTermStructureHandle in _quantlib_risks:
_quantlib_risks.LocalVolTermStructureHandle_swigregister(LocalVolTermStructureHandle)
class RelinkableLocalVolTermStructureHandle(LocalVolTermStructureHandle):
    r"""Proxy of C++ RelinkableHandle< LocalVolTermStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(RelinkableLocalVolTermStructureHandle self, ext::shared_ptr< LocalVolTermStructure > const & arg2=ext::shared_ptr()) -> RelinkableLocalVolTermStructureHandle"""
        _quantlib_risks.RelinkableLocalVolTermStructureHandle_swiginit(self, _quantlib_risks.new_RelinkableLocalVolTermStructureHandle(*args))

    def linkTo(self, arg2):
        r"""linkTo(RelinkableLocalVolTermStructureHandle self, ext::shared_ptr< LocalVolTermStructure > const & arg2)"""
        return _quantlib_risks.RelinkableLocalVolTermStructureHandle_linkTo(self, arg2)

    def reset(self):
        r"""reset(RelinkableLocalVolTermStructureHandle self)"""
        return _quantlib_risks.RelinkableLocalVolTermStructureHandle_reset(self)
    __swig_destroy__ = _quantlib_risks.delete_RelinkableLocalVolTermStructureHandle

# Register RelinkableLocalVolTermStructureHandle in _quantlib_risks:
_quantlib_risks.RelinkableLocalVolTermStructureHandle_swigregister(RelinkableLocalVolTermStructureHandle)
class OptionletVolatilityStructure(VolatilityTermStructure):
    r"""Proxy of C++ OptionletVolatilityStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def volatility(self, *args):
        r"""
        volatility(OptionletVolatilityStructure self, Date arg2, Real strike, bool extrapolate=False) -> Volatility
        volatility(OptionletVolatilityStructure self, Time arg2, Real strike, bool extrapolate=False) -> Volatility
        """
        return _quantlib_risks.OptionletVolatilityStructure_volatility(self, *args)

    def blackVariance(self, *args):
        r"""
        blackVariance(OptionletVolatilityStructure self, Date arg2, Rate strike, bool extrapolate=False) -> Real
        blackVariance(OptionletVolatilityStructure self, Time arg2, Rate strike, bool extrapolate=False) -> Real
        """
        return _quantlib_risks.OptionletVolatilityStructure_blackVariance(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_OptionletVolatilityStructure

# Register OptionletVolatilityStructure in _quantlib_risks:
_quantlib_risks.OptionletVolatilityStructure_swigregister(OptionletVolatilityStructure)
class OptionletVolatilityStructureHandle(object):
    r"""Proxy of C++ Handle< OptionletVolatilityStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(OptionletVolatilityStructureHandle self, ext::shared_ptr< OptionletVolatilityStructure > const & arg2=ext::shared_ptr()) -> OptionletVolatilityStructureHandle"""
        _quantlib_risks.OptionletVolatilityStructureHandle_swiginit(self, _quantlib_risks.new_OptionletVolatilityStructureHandle(*args))

    def __deref__(self):
        r"""__deref__(OptionletVolatilityStructureHandle self) -> ext::shared_ptr< OptionletVolatilityStructure >"""
        return _quantlib_risks.OptionletVolatilityStructureHandle___deref__(self)

    def currentLink(self):
        r"""currentLink(OptionletVolatilityStructureHandle self) -> ext::shared_ptr< OptionletVolatilityStructure >"""
        return _quantlib_risks.OptionletVolatilityStructureHandle_currentLink(self)

    def __nonzero__(self):
        r"""__nonzero__(OptionletVolatilityStructureHandle self) -> bool"""
        return _quantlib_risks.OptionletVolatilityStructureHandle___nonzero__(self)

    def __bool__(self):
        r"""__bool__(OptionletVolatilityStructureHandle self) -> bool"""
        return _quantlib_risks.OptionletVolatilityStructureHandle___bool__(self)

    def asObservable(self):
        r"""asObservable(OptionletVolatilityStructureHandle self) -> ext::shared_ptr< Observable >"""
        return _quantlib_risks.OptionletVolatilityStructureHandle_asObservable(self)
    __swig_destroy__ = _quantlib_risks.delete_OptionletVolatilityStructureHandle

    def volatility(self, *args):
        r"""
        volatility(OptionletVolatilityStructureHandle self, Date arg2, Real strike, bool extrapolate=False) -> Volatility
        volatility(OptionletVolatilityStructureHandle self, Time arg2, Real strike, bool extrapolate=False) -> Volatility
        """
        return _quantlib_risks.OptionletVolatilityStructureHandle_volatility(self, *args)

    def blackVariance(self, *args):
        r"""
        blackVariance(OptionletVolatilityStructureHandle self, Date arg2, Rate strike, bool extrapolate=False) -> Real
        blackVariance(OptionletVolatilityStructureHandle self, Time arg2, Rate strike, bool extrapolate=False) -> Real
        """
        return _quantlib_risks.OptionletVolatilityStructureHandle_blackVariance(self, *args)

    def minStrike(self):
        r"""minStrike(OptionletVolatilityStructureHandle self) -> Real"""
        return _quantlib_risks.OptionletVolatilityStructureHandle_minStrike(self)

    def maxStrike(self):
        r"""maxStrike(OptionletVolatilityStructureHandle self) -> Real"""
        return _quantlib_risks.OptionletVolatilityStructureHandle_maxStrike(self)

    def dayCounter(self):
        r"""dayCounter(OptionletVolatilityStructureHandle self) -> DayCounter"""
        return _quantlib_risks.OptionletVolatilityStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        r"""timeFromReference(OptionletVolatilityStructureHandle self, Date date) -> Time"""
        return _quantlib_risks.OptionletVolatilityStructureHandle_timeFromReference(self, date)

    def calendar(self):
        r"""calendar(OptionletVolatilityStructureHandle self) -> Calendar"""
        return _quantlib_risks.OptionletVolatilityStructureHandle_calendar(self)

    def referenceDate(self):
        r"""referenceDate(OptionletVolatilityStructureHandle self) -> Date"""
        return _quantlib_risks.OptionletVolatilityStructureHandle_referenceDate(self)

    def maxDate(self):
        r"""maxDate(OptionletVolatilityStructureHandle self) -> Date"""
        return _quantlib_risks.OptionletVolatilityStructureHandle_maxDate(self)

    def maxTime(self):
        r"""maxTime(OptionletVolatilityStructureHandle self) -> Time"""
        return _quantlib_risks.OptionletVolatilityStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        r"""enableExtrapolation(OptionletVolatilityStructureHandle self)"""
        return _quantlib_risks.OptionletVolatilityStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        r"""disableExtrapolation(OptionletVolatilityStructureHandle self)"""
        return _quantlib_risks.OptionletVolatilityStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        r"""allowsExtrapolation(OptionletVolatilityStructureHandle self) -> bool"""
        return _quantlib_risks.OptionletVolatilityStructureHandle_allowsExtrapolation(self)

# Register OptionletVolatilityStructureHandle in _quantlib_risks:
_quantlib_risks.OptionletVolatilityStructureHandle_swigregister(OptionletVolatilityStructureHandle)
class RelinkableOptionletVolatilityStructureHandle(OptionletVolatilityStructureHandle):
    r"""Proxy of C++ RelinkableHandle< OptionletVolatilityStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(RelinkableOptionletVolatilityStructureHandle self, ext::shared_ptr< OptionletVolatilityStructure > const & arg2=ext::shared_ptr()) -> RelinkableOptionletVolatilityStructureHandle"""
        _quantlib_risks.RelinkableOptionletVolatilityStructureHandle_swiginit(self, _quantlib_risks.new_RelinkableOptionletVolatilityStructureHandle(*args))

    def linkTo(self, arg2):
        r"""linkTo(RelinkableOptionletVolatilityStructureHandle self, ext::shared_ptr< OptionletVolatilityStructure > const & arg2)"""
        return _quantlib_risks.RelinkableOptionletVolatilityStructureHandle_linkTo(self, arg2)

    def reset(self):
        r"""reset(RelinkableOptionletVolatilityStructureHandle self)"""
        return _quantlib_risks.RelinkableOptionletVolatilityStructureHandle_reset(self)
    __swig_destroy__ = _quantlib_risks.delete_RelinkableOptionletVolatilityStructureHandle

# Register RelinkableOptionletVolatilityStructureHandle in _quantlib_risks:
_quantlib_risks.RelinkableOptionletVolatilityStructureHandle_swigregister(RelinkableOptionletVolatilityStructureHandle)
class YoYOptionletVolatilitySurface(VolatilityTermStructure):
    r"""Proxy of C++ YoYOptionletVolatilitySurface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def observationLag(self):
        r"""observationLag(YoYOptionletVolatilitySurface self) -> Period"""
        return _quantlib_risks.YoYOptionletVolatilitySurface_observationLag(self)

    def frequency(self):
        r"""frequency(YoYOptionletVolatilitySurface self) -> Real"""
        return _quantlib_risks.YoYOptionletVolatilitySurface_frequency(self)

    def indexIsInterpolated(self):
        r"""indexIsInterpolated(YoYOptionletVolatilitySurface self) -> bool"""
        return _quantlib_risks.YoYOptionletVolatilitySurface_indexIsInterpolated(self)

    def baseDate(self):
        r"""baseDate(YoYOptionletVolatilitySurface self) -> Date"""
        return _quantlib_risks.YoYOptionletVolatilitySurface_baseDate(self)

    def timeFromBase(self, *args):
        r"""timeFromBase(YoYOptionletVolatilitySurface self, Date date, Period obsLag=Period(-1,Days)) -> Time"""
        return _quantlib_risks.YoYOptionletVolatilitySurface_timeFromBase(self, *args)

    def minStrike(self):
        r"""minStrike(YoYOptionletVolatilitySurface self) -> Real"""
        return _quantlib_risks.YoYOptionletVolatilitySurface_minStrike(self)

    def maxStrike(self):
        r"""maxStrike(YoYOptionletVolatilitySurface self) -> Real"""
        return _quantlib_risks.YoYOptionletVolatilitySurface_maxStrike(self)

    def baseLevel(self):
        r"""baseLevel(YoYOptionletVolatilitySurface self) -> Volatility"""
        return _quantlib_risks.YoYOptionletVolatilitySurface_baseLevel(self)

    def volatility(self, *args):
        r"""
        volatility(YoYOptionletVolatilitySurface self, Date maturityDate, Real strike, Period obsLag=Period(-1,Days), bool extrapolate=False) -> Volatility
        volatility(YoYOptionletVolatilitySurface self, Period optionTenor, Real strike, Period obsLag=Period(-1,Days), bool extrapolate=False) -> Volatility
        """
        return _quantlib_risks.YoYOptionletVolatilitySurface_volatility(self, *args)

    def totalVariance(self, *args):
        r"""
        totalVariance(YoYOptionletVolatilitySurface self, Date exerciseDate, Rate strike, Period obsLag=Period(-1,Days), bool extrapolate=False) -> Real
        totalVariance(YoYOptionletVolatilitySurface self, Period optionTenor, Rate strike, Period obsLag=Period(-1,Days), bool extrapolate=False) -> Real
        """
        return _quantlib_risks.YoYOptionletVolatilitySurface_totalVariance(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_YoYOptionletVolatilitySurface

# Register YoYOptionletVolatilitySurface in _quantlib_risks:
_quantlib_risks.YoYOptionletVolatilitySurface_swigregister(YoYOptionletVolatilitySurface)
class YoYOptionletVolatilitySurfaceHandle(object):
    r"""Proxy of C++ Handle< YoYOptionletVolatilitySurface > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(YoYOptionletVolatilitySurfaceHandle self, ext::shared_ptr< YoYOptionletVolatilitySurface > const & arg2=ext::shared_ptr()) -> YoYOptionletVolatilitySurfaceHandle"""
        _quantlib_risks.YoYOptionletVolatilitySurfaceHandle_swiginit(self, _quantlib_risks.new_YoYOptionletVolatilitySurfaceHandle(*args))

    def __deref__(self):
        r"""__deref__(YoYOptionletVolatilitySurfaceHandle self) -> ext::shared_ptr< YoYOptionletVolatilitySurface >"""
        return _quantlib_risks.YoYOptionletVolatilitySurfaceHandle___deref__(self)

    def currentLink(self):
        r"""currentLink(YoYOptionletVolatilitySurfaceHandle self) -> ext::shared_ptr< YoYOptionletVolatilitySurface >"""
        return _quantlib_risks.YoYOptionletVolatilitySurfaceHandle_currentLink(self)

    def __nonzero__(self):
        r"""__nonzero__(YoYOptionletVolatilitySurfaceHandle self) -> bool"""
        return _quantlib_risks.YoYOptionletVolatilitySurfaceHandle___nonzero__(self)

    def __bool__(self):
        r"""__bool__(YoYOptionletVolatilitySurfaceHandle self) -> bool"""
        return _quantlib_risks.YoYOptionletVolatilitySurfaceHandle___bool__(self)

    def asObservable(self):
        r"""asObservable(YoYOptionletVolatilitySurfaceHandle self) -> ext::shared_ptr< Observable >"""
        return _quantlib_risks.YoYOptionletVolatilitySurfaceHandle_asObservable(self)
    __swig_destroy__ = _quantlib_risks.delete_YoYOptionletVolatilitySurfaceHandle

    def observationLag(self):
        r"""observationLag(YoYOptionletVolatilitySurfaceHandle self) -> Period"""
        return _quantlib_risks.YoYOptionletVolatilitySurfaceHandle_observationLag(self)

    def frequency(self):
        r"""frequency(YoYOptionletVolatilitySurfaceHandle self) -> Real"""
        return _quantlib_risks.YoYOptionletVolatilitySurfaceHandle_frequency(self)

    def indexIsInterpolated(self):
        r"""indexIsInterpolated(YoYOptionletVolatilitySurfaceHandle self) -> bool"""
        return _quantlib_risks.YoYOptionletVolatilitySurfaceHandle_indexIsInterpolated(self)

    def baseDate(self):
        r"""baseDate(YoYOptionletVolatilitySurfaceHandle self) -> Date"""
        return _quantlib_risks.YoYOptionletVolatilitySurfaceHandle_baseDate(self)

    def timeFromBase(self, *args):
        r"""timeFromBase(YoYOptionletVolatilitySurfaceHandle self, Date date, Period obsLag=Period(-1,Days)) -> Time"""
        return _quantlib_risks.YoYOptionletVolatilitySurfaceHandle_timeFromBase(self, *args)

    def minStrike(self):
        r"""minStrike(YoYOptionletVolatilitySurfaceHandle self) -> Real"""
        return _quantlib_risks.YoYOptionletVolatilitySurfaceHandle_minStrike(self)

    def maxStrike(self):
        r"""maxStrike(YoYOptionletVolatilitySurfaceHandle self) -> Real"""
        return _quantlib_risks.YoYOptionletVolatilitySurfaceHandle_maxStrike(self)

    def baseLevel(self):
        r"""baseLevel(YoYOptionletVolatilitySurfaceHandle self) -> Volatility"""
        return _quantlib_risks.YoYOptionletVolatilitySurfaceHandle_baseLevel(self)

    def volatility(self, *args):
        r"""
        volatility(YoYOptionletVolatilitySurfaceHandle self, Date maturityDate, Real strike, Period obsLag=Period(-1,Days), bool extrapolate=False) -> Volatility
        volatility(YoYOptionletVolatilitySurfaceHandle self, Period optionTenor, Real strike, Period obsLag=Period(-1,Days), bool extrapolate=False) -> Volatility
        """
        return _quantlib_risks.YoYOptionletVolatilitySurfaceHandle_volatility(self, *args)

    def totalVariance(self, *args):
        r"""
        totalVariance(YoYOptionletVolatilitySurfaceHandle self, Date exerciseDate, Rate strike, Period obsLag=Period(-1,Days), bool extrapolate=False) -> Real
        totalVariance(YoYOptionletVolatilitySurfaceHandle self, Period optionTenor, Rate strike, Period obsLag=Period(-1,Days), bool extrapolate=False) -> Real
        """
        return _quantlib_risks.YoYOptionletVolatilitySurfaceHandle_totalVariance(self, *args)

    def dayCounter(self):
        r"""dayCounter(YoYOptionletVolatilitySurfaceHandle self) -> DayCounter"""
        return _quantlib_risks.YoYOptionletVolatilitySurfaceHandle_dayCounter(self)

    def timeFromReference(self, date):
        r"""timeFromReference(YoYOptionletVolatilitySurfaceHandle self, Date date) -> Time"""
        return _quantlib_risks.YoYOptionletVolatilitySurfaceHandle_timeFromReference(self, date)

    def calendar(self):
        r"""calendar(YoYOptionletVolatilitySurfaceHandle self) -> Calendar"""
        return _quantlib_risks.YoYOptionletVolatilitySurfaceHandle_calendar(self)

    def referenceDate(self):
        r"""referenceDate(YoYOptionletVolatilitySurfaceHandle self) -> Date"""
        return _quantlib_risks.YoYOptionletVolatilitySurfaceHandle_referenceDate(self)

    def maxDate(self):
        r"""maxDate(YoYOptionletVolatilitySurfaceHandle self) -> Date"""
        return _quantlib_risks.YoYOptionletVolatilitySurfaceHandle_maxDate(self)

    def maxTime(self):
        r"""maxTime(YoYOptionletVolatilitySurfaceHandle self) -> Time"""
        return _quantlib_risks.YoYOptionletVolatilitySurfaceHandle_maxTime(self)

    def enableExtrapolation(self):
        r"""enableExtrapolation(YoYOptionletVolatilitySurfaceHandle self)"""
        return _quantlib_risks.YoYOptionletVolatilitySurfaceHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        r"""disableExtrapolation(YoYOptionletVolatilitySurfaceHandle self)"""
        return _quantlib_risks.YoYOptionletVolatilitySurfaceHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        r"""allowsExtrapolation(YoYOptionletVolatilitySurfaceHandle self) -> bool"""
        return _quantlib_risks.YoYOptionletVolatilitySurfaceHandle_allowsExtrapolation(self)

# Register YoYOptionletVolatilitySurfaceHandle in _quantlib_risks:
_quantlib_risks.YoYOptionletVolatilitySurfaceHandle_swigregister(YoYOptionletVolatilitySurfaceHandle)
class RelinkableYoYOptionletVolatilitySurfaceHandle(YoYOptionletVolatilitySurfaceHandle):
    r"""Proxy of C++ RelinkableHandle< YoYOptionletVolatilitySurface > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(RelinkableYoYOptionletVolatilitySurfaceHandle self, ext::shared_ptr< YoYOptionletVolatilitySurface > const & arg2=ext::shared_ptr()) -> RelinkableYoYOptionletVolatilitySurfaceHandle"""
        _quantlib_risks.RelinkableYoYOptionletVolatilitySurfaceHandle_swiginit(self, _quantlib_risks.new_RelinkableYoYOptionletVolatilitySurfaceHandle(*args))

    def linkTo(self, arg2):
        r"""linkTo(RelinkableYoYOptionletVolatilitySurfaceHandle self, ext::shared_ptr< YoYOptionletVolatilitySurface > const & arg2)"""
        return _quantlib_risks.RelinkableYoYOptionletVolatilitySurfaceHandle_linkTo(self, arg2)

    def reset(self):
        r"""reset(RelinkableYoYOptionletVolatilitySurfaceHandle self)"""
        return _quantlib_risks.RelinkableYoYOptionletVolatilitySurfaceHandle_reset(self)
    __swig_destroy__ = _quantlib_risks.delete_RelinkableYoYOptionletVolatilitySurfaceHandle

# Register RelinkableYoYOptionletVolatilitySurfaceHandle in _quantlib_risks:
_quantlib_risks.RelinkableYoYOptionletVolatilitySurfaceHandle_swigregister(RelinkableYoYOptionletVolatilitySurfaceHandle)

def RelinkableYoYOptionletVolatilitySurface(*args, **kwargs):
    from warnings import warn
    warn('%s is deprecated; use %s' % (RelinkableYoYOptionletVolatilitySurface.__name__, RelinkableYoYOptionletVolatilitySurfaceHandle.__name__))
    return RelinkableYoYOptionletVolatilitySurfaceHandle(*args, **kwargs)

class SmileSection(Observable):
    r"""Proxy of C++ SmileSection class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def minStrike(self):
        r"""minStrike(SmileSection self) -> Real"""
        return _quantlib_risks.SmileSection_minStrike(self)

    def maxStrike(self):
        r"""maxStrike(SmileSection self) -> Real"""
        return _quantlib_risks.SmileSection_maxStrike(self)

    def atmLevel(self):
        r"""atmLevel(SmileSection self) -> Real"""
        return _quantlib_risks.SmileSection_atmLevel(self)

    def variance(self, strike):
        r"""variance(SmileSection self, Rate strike) -> Real"""
        return _quantlib_risks.SmileSection_variance(self, strike)

    def exerciseDate(self):
        r"""exerciseDate(SmileSection self) -> Date"""
        return _quantlib_risks.SmileSection_exerciseDate(self)

    def volatilityType(self):
        r"""volatilityType(SmileSection self) -> VolatilityType"""
        return _quantlib_risks.SmileSection_volatilityType(self)

    def shift(self):
        r"""shift(SmileSection self) -> Rate"""
        return _quantlib_risks.SmileSection_shift(self)

    def referenceDate(self):
        r"""referenceDate(SmileSection self) -> Date"""
        return _quantlib_risks.SmileSection_referenceDate(self)

    def exerciseTime(self):
        r"""exerciseTime(SmileSection self) -> Time"""
        return _quantlib_risks.SmileSection_exerciseTime(self)

    def dayCounter(self):
        r"""dayCounter(SmileSection self) -> DayCounter"""
        return _quantlib_risks.SmileSection_dayCounter(self)

    def optionPrice(self, *args):
        r"""optionPrice(SmileSection self, Rate strike, Option::Type type=Call, Real discount=1.0) -> Real"""
        return _quantlib_risks.SmileSection_optionPrice(self, *args)

    def digitalOptionPrice(self, *args):
        r"""digitalOptionPrice(SmileSection self, Rate strike, Option::Type type=Call, Real discount=1.0, Real gap=1.0e-5) -> Real"""
        return _quantlib_risks.SmileSection_digitalOptionPrice(self, *args)

    def vega(self, strike, discount=1.0):
        r"""vega(SmileSection self, Rate strike, Real discount=1.0) -> Real"""
        return _quantlib_risks.SmileSection_vega(self, strike, discount)

    def density(self, strike, discount=1.0, gap=1.0E-4):
        r"""density(SmileSection self, Rate strike, Real discount=1.0, Real gap=1.0E-4) -> Real"""
        return _quantlib_risks.SmileSection_density(self, strike, discount, gap)

    def volatility(self, *args):
        r"""
        volatility(SmileSection self, Rate strike) -> Volatility
        volatility(SmileSection self, Rate strike, VolatilityType type, Real shift=0.0) -> Volatility
        """
        return _quantlib_risks.SmileSection_volatility(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_SmileSection

# Register SmileSection in _quantlib_risks:
_quantlib_risks.SmileSection_swigregister(SmileSection)
class SmileSectionVector(object):
    r"""Proxy of C++ std::vector< ext::shared_ptr< SmileSection > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(SmileSectionVector self) -> SwigPyIterator"""
        return _quantlib_risks.SmileSectionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(SmileSectionVector self) -> bool"""
        return _quantlib_risks.SmileSectionVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(SmileSectionVector self) -> bool"""
        return _quantlib_risks.SmileSectionVector___bool__(self)

    def __len__(self):
        r"""__len__(SmileSectionVector self) -> std::vector< ext::shared_ptr< SmileSection > >::size_type"""
        return _quantlib_risks.SmileSectionVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(SmileSectionVector self, std::vector< ext::shared_ptr< SmileSection > >::difference_type i, std::vector< ext::shared_ptr< SmileSection > >::difference_type j) -> SmileSectionVector"""
        return _quantlib_risks.SmileSectionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(SmileSectionVector self, std::vector< ext::shared_ptr< SmileSection > >::difference_type i, std::vector< ext::shared_ptr< SmileSection > >::difference_type j)
        __setslice__(SmileSectionVector self, std::vector< ext::shared_ptr< SmileSection > >::difference_type i, std::vector< ext::shared_ptr< SmileSection > >::difference_type j, SmileSectionVector v)
        """
        return _quantlib_risks.SmileSectionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(SmileSectionVector self, std::vector< ext::shared_ptr< SmileSection > >::difference_type i, std::vector< ext::shared_ptr< SmileSection > >::difference_type j)"""
        return _quantlib_risks.SmileSectionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(SmileSectionVector self, std::vector< ext::shared_ptr< SmileSection > >::difference_type i)
        __delitem__(SmileSectionVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.SmileSectionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(SmileSectionVector self, SWIGPY_SLICEOBJECT * slice) -> SmileSectionVector
        __getitem__(SmileSectionVector self, std::vector< ext::shared_ptr< SmileSection > >::difference_type i) -> std::vector< ext::shared_ptr< SmileSection > >::value_type const &
        """
        return _quantlib_risks.SmileSectionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(SmileSectionVector self, SWIGPY_SLICEOBJECT * slice, SmileSectionVector v)
        __setitem__(SmileSectionVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(SmileSectionVector self, std::vector< ext::shared_ptr< SmileSection > >::difference_type i, std::vector< ext::shared_ptr< SmileSection > >::value_type const & x)
        """
        return _quantlib_risks.SmileSectionVector___setitem__(self, *args)

    def pop(self):
        r"""pop(SmileSectionVector self) -> std::vector< ext::shared_ptr< SmileSection > >::value_type"""
        return _quantlib_risks.SmileSectionVector_pop(self)

    def append(self, x):
        r"""append(SmileSectionVector self, std::vector< ext::shared_ptr< SmileSection > >::value_type const & x)"""
        return _quantlib_risks.SmileSectionVector_append(self, x)

    def empty(self):
        r"""empty(SmileSectionVector self) -> bool"""
        return _quantlib_risks.SmileSectionVector_empty(self)

    def size(self):
        r"""size(SmileSectionVector self) -> std::vector< ext::shared_ptr< SmileSection > >::size_type"""
        return _quantlib_risks.SmileSectionVector_size(self)

    def swap(self, v):
        r"""swap(SmileSectionVector self, SmileSectionVector v)"""
        return _quantlib_risks.SmileSectionVector_swap(self, v)

    def begin(self):
        r"""begin(SmileSectionVector self) -> std::vector< ext::shared_ptr< SmileSection > >::iterator"""
        return _quantlib_risks.SmileSectionVector_begin(self)

    def end(self):
        r"""end(SmileSectionVector self) -> std::vector< ext::shared_ptr< SmileSection > >::iterator"""
        return _quantlib_risks.SmileSectionVector_end(self)

    def rbegin(self):
        r"""rbegin(SmileSectionVector self) -> std::vector< ext::shared_ptr< SmileSection > >::reverse_iterator"""
        return _quantlib_risks.SmileSectionVector_rbegin(self)

    def rend(self):
        r"""rend(SmileSectionVector self) -> std::vector< ext::shared_ptr< SmileSection > >::reverse_iterator"""
        return _quantlib_risks.SmileSectionVector_rend(self)

    def clear(self):
        r"""clear(SmileSectionVector self)"""
        return _quantlib_risks.SmileSectionVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(SmileSectionVector self) -> std::vector< ext::shared_ptr< SmileSection > >::allocator_type"""
        return _quantlib_risks.SmileSectionVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(SmileSectionVector self)"""
        return _quantlib_risks.SmileSectionVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(SmileSectionVector self, std::vector< ext::shared_ptr< SmileSection > >::iterator pos) -> std::vector< ext::shared_ptr< SmileSection > >::iterator
        erase(SmileSectionVector self, std::vector< ext::shared_ptr< SmileSection > >::iterator first, std::vector< ext::shared_ptr< SmileSection > >::iterator last) -> std::vector< ext::shared_ptr< SmileSection > >::iterator
        """
        return _quantlib_risks.SmileSectionVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(SmileSectionVector self) -> SmileSectionVector
        __init__(SmileSectionVector self, SmileSectionVector other) -> SmileSectionVector
        __init__(SmileSectionVector self, std::vector< ext::shared_ptr< SmileSection > >::size_type size) -> SmileSectionVector
        __init__(SmileSectionVector self, std::vector< ext::shared_ptr< SmileSection > >::size_type size, std::vector< ext::shared_ptr< SmileSection > >::value_type const & value) -> SmileSectionVector
        """
        _quantlib_risks.SmileSectionVector_swiginit(self, _quantlib_risks.new_SmileSectionVector(*args))

    def push_back(self, x):
        r"""push_back(SmileSectionVector self, std::vector< ext::shared_ptr< SmileSection > >::value_type const & x)"""
        return _quantlib_risks.SmileSectionVector_push_back(self, x)

    def front(self):
        r"""front(SmileSectionVector self) -> std::vector< ext::shared_ptr< SmileSection > >::value_type const &"""
        return _quantlib_risks.SmileSectionVector_front(self)

    def back(self):
        r"""back(SmileSectionVector self) -> std::vector< ext::shared_ptr< SmileSection > >::value_type const &"""
        return _quantlib_risks.SmileSectionVector_back(self)

    def assign(self, n, x):
        r"""assign(SmileSectionVector self, std::vector< ext::shared_ptr< SmileSection > >::size_type n, std::vector< ext::shared_ptr< SmileSection > >::value_type const & x)"""
        return _quantlib_risks.SmileSectionVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(SmileSectionVector self, std::vector< ext::shared_ptr< SmileSection > >::size_type new_size)
        resize(SmileSectionVector self, std::vector< ext::shared_ptr< SmileSection > >::size_type new_size, std::vector< ext::shared_ptr< SmileSection > >::value_type const & x)
        """
        return _quantlib_risks.SmileSectionVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(SmileSectionVector self, std::vector< ext::shared_ptr< SmileSection > >::iterator pos, std::vector< ext::shared_ptr< SmileSection > >::value_type const & x) -> std::vector< ext::shared_ptr< SmileSection > >::iterator
        insert(SmileSectionVector self, std::vector< ext::shared_ptr< SmileSection > >::iterator pos, std::vector< ext::shared_ptr< SmileSection > >::size_type n, std::vector< ext::shared_ptr< SmileSection > >::value_type const & x)
        """
        return _quantlib_risks.SmileSectionVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(SmileSectionVector self, std::vector< ext::shared_ptr< SmileSection > >::size_type n)"""
        return _quantlib_risks.SmileSectionVector_reserve(self, n)

    def capacity(self):
        r"""capacity(SmileSectionVector self) -> std::vector< ext::shared_ptr< SmileSection > >::size_type"""
        return _quantlib_risks.SmileSectionVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_SmileSectionVector

# Register SmileSectionVector in _quantlib_risks:
_quantlib_risks.SmileSectionVector_swigregister(SmileSectionVector)
class SwaptionVolatilityStructure(VolatilityTermStructure):
    r"""Proxy of C++ SwaptionVolatilityStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def volatility(self, *args):
        r"""
        volatility(SwaptionVolatilityStructure self, Date start, Period length, Rate strike, bool extrapolate=False) -> Volatility
        volatility(SwaptionVolatilityStructure self, Time start, Time length, Rate strike, bool extrapolate=False) -> Volatility
        """
        return _quantlib_risks.SwaptionVolatilityStructure_volatility(self, *args)

    def blackVariance(self, *args):
        r"""
        blackVariance(SwaptionVolatilityStructure self, Date start, Period length, Rate strike, bool extrapolate=False) -> Real
        blackVariance(SwaptionVolatilityStructure self, Time start, Time length, Rate strike, bool extrapolate=False) -> Real
        """
        return _quantlib_risks.SwaptionVolatilityStructure_blackVariance(self, *args)

    def optionDateFromTenor(self, p):
        r"""optionDateFromTenor(SwaptionVolatilityStructure self, Period p) -> Date"""
        return _quantlib_risks.SwaptionVolatilityStructure_optionDateFromTenor(self, p)

    def shift(self, *args):
        r"""
        shift(SwaptionVolatilityStructure self, Period optionTenor, Period swapTenor, bool extrapolate=False) -> Real
        shift(SwaptionVolatilityStructure self, Date optionDate, Period swapTenor, bool extrapolate=False) -> Real
        shift(SwaptionVolatilityStructure self, Time optionTime, Period swapTenor, bool extrapolate=False) -> Real
        shift(SwaptionVolatilityStructure self, Period optionTenor, Time swapLength, bool extrapolate=False) -> Real
        shift(SwaptionVolatilityStructure self, Date optionDate, Time swapLength, bool extrapolate=False) -> Real
        shift(SwaptionVolatilityStructure self, Time optionTime, Time swapLength, bool extrapolate=False) -> Real
        """
        return _quantlib_risks.SwaptionVolatilityStructure_shift(self, *args)

    def smileSection(self, *args):
        r"""
        smileSection(SwaptionVolatilityStructure self, Period optionTenor, Period swapTenor, bool extr=False) -> ext::shared_ptr< SmileSection >
        smileSection(SwaptionVolatilityStructure self, Date optionDate, Period swapTenor, bool extr=False) -> ext::shared_ptr< SmileSection >
        smileSection(SwaptionVolatilityStructure self, Time optionTime, Period swapTenor, bool extr=False) -> ext::shared_ptr< SmileSection >
        smileSection(SwaptionVolatilityStructure self, Period optionTenor, Time swapLength, bool extr=False) -> ext::shared_ptr< SmileSection >
        smileSection(SwaptionVolatilityStructure self, Date optionDate, Time swapLength, bool extr=False) -> ext::shared_ptr< SmileSection >
        smileSection(SwaptionVolatilityStructure self, Time optionTime, Time swapLength, bool extr=False) -> ext::shared_ptr< SmileSection >
        """
        return _quantlib_risks.SwaptionVolatilityStructure_smileSection(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_SwaptionVolatilityStructure

# Register SwaptionVolatilityStructure in _quantlib_risks:
_quantlib_risks.SwaptionVolatilityStructure_swigregister(SwaptionVolatilityStructure)
class SwaptionVolatilityStructureHandle(object):
    r"""Proxy of C++ Handle< SwaptionVolatilityStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(SwaptionVolatilityStructureHandle self, ext::shared_ptr< SwaptionVolatilityStructure > const & arg2=ext::shared_ptr()) -> SwaptionVolatilityStructureHandle"""
        _quantlib_risks.SwaptionVolatilityStructureHandle_swiginit(self, _quantlib_risks.new_SwaptionVolatilityStructureHandle(*args))

    def __deref__(self):
        r"""__deref__(SwaptionVolatilityStructureHandle self) -> ext::shared_ptr< SwaptionVolatilityStructure >"""
        return _quantlib_risks.SwaptionVolatilityStructureHandle___deref__(self)

    def currentLink(self):
        r"""currentLink(SwaptionVolatilityStructureHandle self) -> ext::shared_ptr< SwaptionVolatilityStructure >"""
        return _quantlib_risks.SwaptionVolatilityStructureHandle_currentLink(self)

    def __nonzero__(self):
        r"""__nonzero__(SwaptionVolatilityStructureHandle self) -> bool"""
        return _quantlib_risks.SwaptionVolatilityStructureHandle___nonzero__(self)

    def __bool__(self):
        r"""__bool__(SwaptionVolatilityStructureHandle self) -> bool"""
        return _quantlib_risks.SwaptionVolatilityStructureHandle___bool__(self)

    def asObservable(self):
        r"""asObservable(SwaptionVolatilityStructureHandle self) -> ext::shared_ptr< Observable >"""
        return _quantlib_risks.SwaptionVolatilityStructureHandle_asObservable(self)
    __swig_destroy__ = _quantlib_risks.delete_SwaptionVolatilityStructureHandle

    def volatility(self, *args):
        r"""
        volatility(SwaptionVolatilityStructureHandle self, Date start, Period length, Rate strike, bool extrapolate=False) -> Volatility
        volatility(SwaptionVolatilityStructureHandle self, Time start, Time length, Rate strike, bool extrapolate=False) -> Volatility
        """
        return _quantlib_risks.SwaptionVolatilityStructureHandle_volatility(self, *args)

    def blackVariance(self, *args):
        r"""
        blackVariance(SwaptionVolatilityStructureHandle self, Date start, Period length, Rate strike, bool extrapolate=False) -> Real
        blackVariance(SwaptionVolatilityStructureHandle self, Time start, Time length, Rate strike, bool extrapolate=False) -> Real
        """
        return _quantlib_risks.SwaptionVolatilityStructureHandle_blackVariance(self, *args)

    def optionDateFromTenor(self, p):
        r"""optionDateFromTenor(SwaptionVolatilityStructureHandle self, Period p) -> Date"""
        return _quantlib_risks.SwaptionVolatilityStructureHandle_optionDateFromTenor(self, p)

    def shift(self, *args):
        r"""
        shift(SwaptionVolatilityStructureHandle self, Period optionTenor, Period swapTenor, bool extrapolate=False) -> Real
        shift(SwaptionVolatilityStructureHandle self, Date optionDate, Period swapTenor, bool extrapolate=False) -> Real
        shift(SwaptionVolatilityStructureHandle self, Time optionTime, Period swapTenor, bool extrapolate=False) -> Real
        shift(SwaptionVolatilityStructureHandle self, Period optionTenor, Time swapLength, bool extrapolate=False) -> Real
        shift(SwaptionVolatilityStructureHandle self, Date optionDate, Time swapLength, bool extrapolate=False) -> Real
        shift(SwaptionVolatilityStructureHandle self, Time optionTime, Time swapLength, bool extrapolate=False) -> Real
        """
        return _quantlib_risks.SwaptionVolatilityStructureHandle_shift(self, *args)

    def smileSection(self, *args):
        r"""
        smileSection(SwaptionVolatilityStructureHandle self, Period optionTenor, Period swapTenor, bool extr=False) -> ext::shared_ptr< SmileSection >
        smileSection(SwaptionVolatilityStructureHandle self, Date optionDate, Period swapTenor, bool extr=False) -> ext::shared_ptr< SmileSection >
        smileSection(SwaptionVolatilityStructureHandle self, Time optionTime, Period swapTenor, bool extr=False) -> ext::shared_ptr< SmileSection >
        smileSection(SwaptionVolatilityStructureHandle self, Period optionTenor, Time swapLength, bool extr=False) -> ext::shared_ptr< SmileSection >
        smileSection(SwaptionVolatilityStructureHandle self, Date optionDate, Time swapLength, bool extr=False) -> ext::shared_ptr< SmileSection >
        smileSection(SwaptionVolatilityStructureHandle self, Time optionTime, Time swapLength, bool extr=False) -> ext::shared_ptr< SmileSection >
        """
        return _quantlib_risks.SwaptionVolatilityStructureHandle_smileSection(self, *args)

    def minStrike(self):
        r"""minStrike(SwaptionVolatilityStructureHandle self) -> Real"""
        return _quantlib_risks.SwaptionVolatilityStructureHandle_minStrike(self)

    def maxStrike(self):
        r"""maxStrike(SwaptionVolatilityStructureHandle self) -> Real"""
        return _quantlib_risks.SwaptionVolatilityStructureHandle_maxStrike(self)

    def dayCounter(self):
        r"""dayCounter(SwaptionVolatilityStructureHandle self) -> DayCounter"""
        return _quantlib_risks.SwaptionVolatilityStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        r"""timeFromReference(SwaptionVolatilityStructureHandle self, Date date) -> Time"""
        return _quantlib_risks.SwaptionVolatilityStructureHandle_timeFromReference(self, date)

    def calendar(self):
        r"""calendar(SwaptionVolatilityStructureHandle self) -> Calendar"""
        return _quantlib_risks.SwaptionVolatilityStructureHandle_calendar(self)

    def referenceDate(self):
        r"""referenceDate(SwaptionVolatilityStructureHandle self) -> Date"""
        return _quantlib_risks.SwaptionVolatilityStructureHandle_referenceDate(self)

    def maxDate(self):
        r"""maxDate(SwaptionVolatilityStructureHandle self) -> Date"""
        return _quantlib_risks.SwaptionVolatilityStructureHandle_maxDate(self)

    def maxTime(self):
        r"""maxTime(SwaptionVolatilityStructureHandle self) -> Time"""
        return _quantlib_risks.SwaptionVolatilityStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        r"""enableExtrapolation(SwaptionVolatilityStructureHandle self)"""
        return _quantlib_risks.SwaptionVolatilityStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        r"""disableExtrapolation(SwaptionVolatilityStructureHandle self)"""
        return _quantlib_risks.SwaptionVolatilityStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        r"""allowsExtrapolation(SwaptionVolatilityStructureHandle self) -> bool"""
        return _quantlib_risks.SwaptionVolatilityStructureHandle_allowsExtrapolation(self)

# Register SwaptionVolatilityStructureHandle in _quantlib_risks:
_quantlib_risks.SwaptionVolatilityStructureHandle_swigregister(SwaptionVolatilityStructureHandle)
class RelinkableSwaptionVolatilityStructureHandle(SwaptionVolatilityStructureHandle):
    r"""Proxy of C++ RelinkableHandle< SwaptionVolatilityStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(RelinkableSwaptionVolatilityStructureHandle self, ext::shared_ptr< SwaptionVolatilityStructure > const & arg2=ext::shared_ptr()) -> RelinkableSwaptionVolatilityStructureHandle"""
        _quantlib_risks.RelinkableSwaptionVolatilityStructureHandle_swiginit(self, _quantlib_risks.new_RelinkableSwaptionVolatilityStructureHandle(*args))

    def linkTo(self, arg2):
        r"""linkTo(RelinkableSwaptionVolatilityStructureHandle self, ext::shared_ptr< SwaptionVolatilityStructure > const & arg2)"""
        return _quantlib_risks.RelinkableSwaptionVolatilityStructureHandle_linkTo(self, arg2)

    def reset(self):
        r"""reset(RelinkableSwaptionVolatilityStructureHandle self)"""
        return _quantlib_risks.RelinkableSwaptionVolatilityStructureHandle_reset(self)
    __swig_destroy__ = _quantlib_risks.delete_RelinkableSwaptionVolatilityStructureHandle

# Register RelinkableSwaptionVolatilityStructureHandle in _quantlib_risks:
_quantlib_risks.RelinkableSwaptionVolatilityStructureHandle_swigregister(RelinkableSwaptionVolatilityStructureHandle)
class BlackConstantVol(BlackVolTermStructure):
    r"""Proxy of C++ BlackConstantVol class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BlackConstantVol self, Date referenceDate, Calendar c, Volatility volatility, DayCounter dayCounter) -> BlackConstantVol
        __init__(BlackConstantVol self, Date referenceDate, Calendar c, QuoteHandle volatility, DayCounter dayCounter) -> BlackConstantVol
        __init__(BlackConstantVol self, Natural settlementDays, Calendar calendar, Volatility volatility, DayCounter dayCounter) -> BlackConstantVol
        __init__(BlackConstantVol self, Natural settlementDays, Calendar calendar, QuoteHandle volatility, DayCounter dayCounter) -> BlackConstantVol
        """
        _quantlib_risks.BlackConstantVol_swiginit(self, _quantlib_risks.new_BlackConstantVol(*args))
    __swig_destroy__ = _quantlib_risks.delete_BlackConstantVol

# Register BlackConstantVol in _quantlib_risks:
_quantlib_risks.BlackConstantVol_swigregister(BlackConstantVol)
class BlackVarianceCurve(BlackVolTermStructure):
    r"""Proxy of C++ BlackVarianceCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, referenceDate, dates, volatilities, dayCounter, forceMonotoneVariance=True):
        r"""__init__(BlackVarianceCurve self, Date referenceDate, DateVector dates, std::vector< Real,std::allocator< Real > > const & volatilities, DayCounter dayCounter, bool forceMonotoneVariance=True) -> BlackVarianceCurve"""
        _quantlib_risks.BlackVarianceCurve_swiginit(self, _quantlib_risks.new_BlackVarianceCurve(referenceDate, dates, volatilities, dayCounter, forceMonotoneVariance))
    __swig_destroy__ = _quantlib_risks.delete_BlackVarianceCurve

# Register BlackVarianceCurve in _quantlib_risks:
_quantlib_risks.BlackVarianceCurve_swigregister(BlackVarianceCurve)
class BlackVarianceSurface(BlackVolTermStructure):
    r"""Proxy of C++ BlackVarianceSurface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ConstantExtrapolation = _quantlib_risks.BlackVarianceSurface_ConstantExtrapolation
    
    InterpolatorDefaultExtrapolation = _quantlib_risks.BlackVarianceSurface_InterpolatorDefaultExtrapolation
    

    def __init__(self, *args, **kwargs):
        r"""__init__(BlackVarianceSurface self, Date referenceDate, Calendar cal, DateVector dates, std::vector< Real,std::allocator< Real > > const & strikes, Matrix blackVols, DayCounter dayCounter, BlackVarianceSurface::Extrapolation lower=InterpolatorDefaultExtrapolation, BlackVarianceSurface::Extrapolation upper=InterpolatorDefaultExtrapolation, std::string const & interpolator="") -> BlackVarianceSurface"""
        _quantlib_risks.BlackVarianceSurface_swiginit(self, _quantlib_risks.new_BlackVarianceSurface(*args, **kwargs))

    def setInterpolation(self, *args):
        r"""setInterpolation(BlackVarianceSurface self, std::string const & interpolator="")"""
        return _quantlib_risks.BlackVarianceSurface_setInterpolation(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_BlackVarianceSurface

# Register BlackVarianceSurface in _quantlib_risks:
_quantlib_risks.BlackVarianceSurface_swigregister(BlackVarianceSurface)
class ConstantOptionletVolatility(OptionletVolatilityStructure):
    r"""Proxy of C++ ConstantOptionletVolatility class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ConstantOptionletVolatility self, Date referenceDate, Calendar cal, BusinessDayConvention bdc, Volatility volatility, DayCounter dayCounter, VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> ConstantOptionletVolatility
        __init__(ConstantOptionletVolatility self, Date referenceDate, Calendar cal, BusinessDayConvention bdc, QuoteHandle volatility, DayCounter dayCounter, VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> ConstantOptionletVolatility
        __init__(ConstantOptionletVolatility self, Natural settlementDays, Calendar cal, BusinessDayConvention bdc, Volatility volatility, DayCounter dayCounter, VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> ConstantOptionletVolatility
        __init__(ConstantOptionletVolatility self, Natural settlementDays, Calendar cal, BusinessDayConvention bdc, QuoteHandle volatility, DayCounter dayCounter, VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> ConstantOptionletVolatility
        """
        _quantlib_risks.ConstantOptionletVolatility_swiginit(self, _quantlib_risks.new_ConstantOptionletVolatility(*args))
    __swig_destroy__ = _quantlib_risks.delete_ConstantOptionletVolatility

# Register ConstantOptionletVolatility in _quantlib_risks:
_quantlib_risks.ConstantOptionletVolatility_swigregister(ConstantOptionletVolatility)
class ConstantSwaptionVolatility(SwaptionVolatilityStructure):
    r"""Proxy of C++ ConstantSwaptionVolatility class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ConstantSwaptionVolatility self, Natural settlementDays, Calendar cal, BusinessDayConvention bdc, QuoteHandle volatility, DayCounter dc, VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> ConstantSwaptionVolatility
        __init__(ConstantSwaptionVolatility self, Date referenceDate, Calendar cal, BusinessDayConvention bdc, QuoteHandle volatility, DayCounter dc, VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> ConstantSwaptionVolatility
        __init__(ConstantSwaptionVolatility self, Natural settlementDays, Calendar cal, BusinessDayConvention bdc, Volatility volatility, DayCounter dc, VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> ConstantSwaptionVolatility
        __init__(ConstantSwaptionVolatility self, Date referenceDate, Calendar cal, BusinessDayConvention bdc, Volatility volatility, DayCounter dc, VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> ConstantSwaptionVolatility
        """
        _quantlib_risks.ConstantSwaptionVolatility_swiginit(self, _quantlib_risks.new_ConstantSwaptionVolatility(*args))
    __swig_destroy__ = _quantlib_risks.delete_ConstantSwaptionVolatility

# Register ConstantSwaptionVolatility in _quantlib_risks:
_quantlib_risks.ConstantSwaptionVolatility_swigregister(ConstantSwaptionVolatility)
class SwaptionVolatilityDiscrete(SwaptionVolatilityStructure):
    r"""Proxy of C++ SwaptionVolatilityDiscrete class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def optionTenors(self):
        r"""optionTenors(SwaptionVolatilityDiscrete self) -> PeriodVector"""
        return _quantlib_risks.SwaptionVolatilityDiscrete_optionTenors(self)

    def optionDates(self):
        r"""optionDates(SwaptionVolatilityDiscrete self) -> DateVector"""
        return _quantlib_risks.SwaptionVolatilityDiscrete_optionDates(self)

    def optionTimes(self):
        r"""optionTimes(SwaptionVolatilityDiscrete self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.SwaptionVolatilityDiscrete_optionTimes(self)

    def swapTenors(self):
        r"""swapTenors(SwaptionVolatilityDiscrete self) -> PeriodVector"""
        return _quantlib_risks.SwaptionVolatilityDiscrete_swapTenors(self)

    def swapLengths(self):
        r"""swapLengths(SwaptionVolatilityDiscrete self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.SwaptionVolatilityDiscrete_swapLengths(self)

    def optionDateFromTime(self, optionTime):
        r"""optionDateFromTime(SwaptionVolatilityDiscrete self, Time optionTime) -> Date"""
        return _quantlib_risks.SwaptionVolatilityDiscrete_optionDateFromTime(self, optionTime)
    __swig_destroy__ = _quantlib_risks.delete_SwaptionVolatilityDiscrete

# Register SwaptionVolatilityDiscrete in _quantlib_risks:
_quantlib_risks.SwaptionVolatilityDiscrete_swigregister(SwaptionVolatilityDiscrete)
class SwaptionVolatilityMatrix(SwaptionVolatilityDiscrete):
    r"""Proxy of C++ SwaptionVolatilityMatrix class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SwaptionVolatilityMatrix self, Date referenceDate, Calendar calendar, BusinessDayConvention bdc, DateVector dates, PeriodVector lengths, Matrix vols, DayCounter dayCounter, bool const flatExtrapolation=False, VolatilityType const type=ShiftedLognormal, Matrix shifts=Matrix()) -> SwaptionVolatilityMatrix
        __init__(SwaptionVolatilityMatrix self, Calendar calendar, BusinessDayConvention bdc, PeriodVector optionTenors, PeriodVector swapTenors, QuoteHandleVectorVector vols, DayCounter dayCounter, bool const flatExtrapolation=False, VolatilityType const type=ShiftedLognormal, std::vector< std::vector< Real,std::allocator< Real > >,std::allocator< std::vector< Real,std::allocator< Real > > > > const & shifts=std::vector< std::vector< Real > >()) -> SwaptionVolatilityMatrix
        __init__(SwaptionVolatilityMatrix self, Calendar calendar, BusinessDayConvention bdc, PeriodVector optionTenors, PeriodVector swapTenors, Matrix vols, DayCounter dayCounter, bool const flatExtrapolation=False, VolatilityType const type=ShiftedLognormal, Matrix shifts=Matrix()) -> SwaptionVolatilityMatrix
        __init__(SwaptionVolatilityMatrix self, Date referenceDate, DateVector dates, PeriodVector lengths, Matrix vols, DayCounter dayCounter, bool const flatExtrapolation=False, VolatilityType const type=ShiftedLognormal, Matrix shifts=Matrix()) -> SwaptionVolatilityMatrix
        """
        _quantlib_risks.SwaptionVolatilityMatrix_swiginit(self, _quantlib_risks.new_SwaptionVolatilityMatrix(*args))

    def locate(self, *args):
        r"""
        locate(SwaptionVolatilityMatrix self, Date optionDate, Period swapTenor) -> UnsignedIntPair
        locate(SwaptionVolatilityMatrix self, Time optionTime, Time swapLength) -> UnsignedIntPair
        """
        return _quantlib_risks.SwaptionVolatilityMatrix_locate(self, *args)

    def volatilityType(self):
        r"""volatilityType(SwaptionVolatilityMatrix self) -> VolatilityType"""
        return _quantlib_risks.SwaptionVolatilityMatrix_volatilityType(self)
    __swig_destroy__ = _quantlib_risks.delete_SwaptionVolatilityMatrix

# Register SwaptionVolatilityMatrix in _quantlib_risks:
_quantlib_risks.SwaptionVolatilityMatrix_swigregister(SwaptionVolatilityMatrix)
class SabrSmileSection(SmileSection):
    r"""Proxy of C++ SabrSmileSection class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SabrSmileSection self, Date d, Rate forward, std::vector< Real,std::allocator< Real > > const & sabrParameters, Date referenceDate=Date(), DayCounter dc=Actual365Fixed(), Real shift=0.0, VolatilityType volatilityType=VolatilityType::ShiftedLognormal) -> SabrSmileSection
        __init__(SabrSmileSection self, Time timeToExpiry, Rate forward, std::vector< Real,std::allocator< Real > > const & sabrParameters, Real shift=0.0, VolatilityType volatilityType=VolatilityType::ShiftedLognormal) -> SabrSmileSection
        """
        _quantlib_risks.SabrSmileSection_swiginit(self, _quantlib_risks.new_SabrSmileSection(*args))

    def alpha(self):
        r"""alpha(SabrSmileSection self) -> Real"""
        return _quantlib_risks.SabrSmileSection_alpha(self)

    def beta(self):
        r"""beta(SabrSmileSection self) -> Real"""
        return _quantlib_risks.SabrSmileSection_beta(self)

    def nu(self):
        r"""nu(SabrSmileSection self) -> Real"""
        return _quantlib_risks.SabrSmileSection_nu(self)

    def rho(self):
        r"""rho(SabrSmileSection self) -> Real"""
        return _quantlib_risks.SabrSmileSection_rho(self)
    __swig_destroy__ = _quantlib_risks.delete_SabrSmileSection

# Register SabrSmileSection in _quantlib_risks:
_quantlib_risks.SabrSmileSection_swigregister(SabrSmileSection)
class SviSmileSection(SmileSection):
    r"""Proxy of C++ SviSmileSection class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SviSmileSection self, Time timeToExpiry, Rate forward, std::vector< Real,std::allocator< Real > > sviParameters) -> SviSmileSection
        __init__(SviSmileSection self, Date d, Rate forward, std::vector< Real,std::allocator< Real > > sviParameters, DayCounter dc=Actual365Fixed()) -> SviSmileSection
        """
        _quantlib_risks.SviSmileSection_swiginit(self, _quantlib_risks.new_SviSmileSection(*args))
    __swig_destroy__ = _quantlib_risks.delete_SviSmileSection

# Register SviSmileSection in _quantlib_risks:
_quantlib_risks.SviSmileSection_swigregister(SviSmileSection)
class SviInterpolatedSmileSection(SmileSection):
    r"""Proxy of C++ SviInterpolatedSmileSection class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SviInterpolatedSmileSection self, Date optionDate, QuoteHandle forward, std::vector< Rate,std::allocator< Rate > > const & strikes, bool hasFloatingStrikes, QuoteHandle atmVolatility, QuoteHandleVector volHandles, Real a, Real b, Real sigma, Real rho, Real m, bool aIsFixed, bool bIsFixed, bool sigmaIsFixed, bool rhoIsFixed, bool mIsFixed, bool vegaWeighted=True, ext::shared_ptr< EndCriteria > endCriteria=ext::shared_ptr< EndCriteria >(), ext::shared_ptr< OptimizationMethod > method=ext::shared_ptr< OptimizationMethod >(), DayCounter dc=Actual365Fixed()) -> SviInterpolatedSmileSection
        __init__(SviInterpolatedSmileSection self, Date optionDate, Rate const & forward, std::vector< Rate,std::allocator< Rate > > const & strikes, bool hasFloatingStrikes, Volatility const & atmVolatility, std::vector< Volatility,std::allocator< Volatility > > const & vols, Real a, Real b, Real sigma, Real rho, Real m, bool isAFixed, bool isBFixed, bool isSigmaFixed, bool isRhoFixed, bool isMFixed, bool vegaWeighted=True, ext::shared_ptr< EndCriteria > endCriteria=ext::shared_ptr< EndCriteria >(), ext::shared_ptr< OptimizationMethod > method=ext::shared_ptr< OptimizationMethod >(), DayCounter dc=Actual365Fixed()) -> SviInterpolatedSmileSection
        """
        _quantlib_risks.SviInterpolatedSmileSection_swiginit(self, _quantlib_risks.new_SviInterpolatedSmileSection(*args))

    def a(self):
        r"""a(SviInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.SviInterpolatedSmileSection_a(self)

    def b(self):
        r"""b(SviInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.SviInterpolatedSmileSection_b(self)

    def sigma(self):
        r"""sigma(SviInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.SviInterpolatedSmileSection_sigma(self)

    def rho(self):
        r"""rho(SviInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.SviInterpolatedSmileSection_rho(self)

    def m(self):
        r"""m(SviInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.SviInterpolatedSmileSection_m(self)

    def rmsError(self):
        r"""rmsError(SviInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.SviInterpolatedSmileSection_rmsError(self)

    def maxError(self):
        r"""maxError(SviInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.SviInterpolatedSmileSection_maxError(self)

    def endCriteria(self):
        r"""endCriteria(SviInterpolatedSmileSection self) -> EndCriteria::Type"""
        return _quantlib_risks.SviInterpolatedSmileSection_endCriteria(self)
    __swig_destroy__ = _quantlib_risks.delete_SviInterpolatedSmileSection

# Register SviInterpolatedSmileSection in _quantlib_risks:
_quantlib_risks.SviInterpolatedSmileSection_swigregister(SviInterpolatedSmileSection)
class SwaptionVolatilityCube(SwaptionVolatilityDiscrete):
    r"""Proxy of C++ SwaptionVolatilityCube class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def atmStrike(self, optionDate, swapTenor):
        r"""atmStrike(SwaptionVolatilityCube self, Date optionDate, Period swapTenor) -> Rate"""
        return _quantlib_risks.SwaptionVolatilityCube_atmStrike(self, optionDate, swapTenor)
    __swig_destroy__ = _quantlib_risks.delete_SwaptionVolatilityCube

# Register SwaptionVolatilityCube in _quantlib_risks:
_quantlib_risks.SwaptionVolatilityCube_swigregister(SwaptionVolatilityCube)
class SabrSwaptionVolatilityCube(SwaptionVolatilityCube):
    r"""Proxy of C++ SabrSwaptionVolatilityCube class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(SabrSwaptionVolatilityCube self, SwaptionVolatilityStructureHandle atmVolStructure, PeriodVector optionTenors, PeriodVector swapTenors, std::vector< Spread,std::allocator< Spread > > const & strikeSpreads, QuoteHandleVectorVector volSpreads, ext::shared_ptr< SwapIndex > const & swapIndex, ext::shared_ptr< SwapIndex > const & shortSwapIndex, bool vegaWeightedSmileFit, QuoteHandleVectorVector parametersGuess, BoolVector isParameterFixed, bool isAtmCalibrated, ext::shared_ptr< EndCriteria > const & endCriteria=ext::shared_ptr< EndCriteria >(), Real maxErrorTolerance=Null< Real >(), ext::shared_ptr< OptimizationMethod > const & optMethod=ext::shared_ptr< OptimizationMethod >(), Real const errorAccept=Null< Real >(), bool const useMaxError=False, Size const maxGuesses=50, bool const backwardFlat=False, Real const cutoffStrike=0.0001) -> SabrSwaptionVolatilityCube"""
        _quantlib_risks.SabrSwaptionVolatilityCube_swiginit(self, _quantlib_risks.new_SabrSwaptionVolatilityCube(*args))

    def sparseSabrParameters(self):
        r"""sparseSabrParameters(SabrSwaptionVolatilityCube self) -> Matrix"""
        return _quantlib_risks.SabrSwaptionVolatilityCube_sparseSabrParameters(self)

    def denseSabrParameters(self):
        r"""denseSabrParameters(SabrSwaptionVolatilityCube self) -> Matrix"""
        return _quantlib_risks.SabrSwaptionVolatilityCube_denseSabrParameters(self)

    def marketVolCube(self):
        r"""marketVolCube(SabrSwaptionVolatilityCube self) -> Matrix"""
        return _quantlib_risks.SabrSwaptionVolatilityCube_marketVolCube(self)

    def volCubeAtmCalibrated(self):
        r"""volCubeAtmCalibrated(SabrSwaptionVolatilityCube self) -> Matrix"""
        return _quantlib_risks.SabrSwaptionVolatilityCube_volCubeAtmCalibrated(self)

    def smileSection(self, *args):
        r"""
        smileSection(SabrSwaptionVolatilityCube self, Time optionTime, Time swapLength, bool extr=False) -> ext::shared_ptr< SabrSmileSection >
        smileSection(SabrSwaptionVolatilityCube self, Period optionTenor, Period swapTenor, bool extr=False) -> ext::shared_ptr< SabrSmileSection >
        """
        return _quantlib_risks.SabrSwaptionVolatilityCube_smileSection(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_SabrSwaptionVolatilityCube

# Register SabrSwaptionVolatilityCube in _quantlib_risks:
_quantlib_risks.SabrSwaptionVolatilityCube_swigregister(SabrSwaptionVolatilityCube)

def SwaptionVolCube1(*args, **kwargs):
    from warnings import warn
    warn('%s is deprecated; use %s' % (SwaptionVolCube1.__name__, SabrSwaptionVolatilityCube.__name__))
    return SabrSwaptionVolatilityCube(*args, **kwargs)

class InterpolatedSwaptionVolatilityCube(SwaptionVolatilityCube):
    r"""Proxy of C++ InterpolatedSwaptionVolatilityCube class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, atmVolStructure, optionTenors, swapTenors, strikeSpreads, volSpreads, swapIndex, shortSwapIndex, vegaWeightedSmileFit):
        r"""__init__(InterpolatedSwaptionVolatilityCube self, SwaptionVolatilityStructureHandle atmVolStructure, PeriodVector optionTenors, PeriodVector swapTenors, std::vector< Spread,std::allocator< Spread > > const & strikeSpreads, QuoteHandleVectorVector volSpreads, ext::shared_ptr< SwapIndex > const & swapIndex, ext::shared_ptr< SwapIndex > const & shortSwapIndex, bool vegaWeightedSmileFit) -> InterpolatedSwaptionVolatilityCube"""
        _quantlib_risks.InterpolatedSwaptionVolatilityCube_swiginit(self, _quantlib_risks.new_InterpolatedSwaptionVolatilityCube(atmVolStructure, optionTenors, swapTenors, strikeSpreads, volSpreads, swapIndex, shortSwapIndex, vegaWeightedSmileFit))
    __swig_destroy__ = _quantlib_risks.delete_InterpolatedSwaptionVolatilityCube

# Register InterpolatedSwaptionVolatilityCube in _quantlib_risks:
_quantlib_risks.InterpolatedSwaptionVolatilityCube_swigregister(InterpolatedSwaptionVolatilityCube)

def SwaptionVolCube2(*args, **kwargs):
    from warnings import warn
    warn('%s is deprecated; use %s' % (SwaptionVolCube2.__name__, InterpolatedSwaptionVolatilityCube.__name__))
    return InterpolatedSwaptionVolatilityCube(*args, **kwargs)

class ConstantYoYOptionletVolatility(YoYOptionletVolatilitySurface):
    r"""Proxy of C++ ConstantYoYOptionletVolatility class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, volatility, settlementDays, cal, bdc, dc, observationLag, frequency, indexIsInterpolated, minStrike=-1.0, maxStrike=100.0):
        r"""__init__(ConstantYoYOptionletVolatility self, Volatility volatility, Natural settlementDays, Calendar cal, BusinessDayConvention bdc, DayCounter dc, Period observationLag, Frequency frequency, bool indexIsInterpolated, Real minStrike=-1.0, Real maxStrike=100.0) -> ConstantYoYOptionletVolatility"""
        _quantlib_risks.ConstantYoYOptionletVolatility_swiginit(self, _quantlib_risks.new_ConstantYoYOptionletVolatility(volatility, settlementDays, cal, bdc, dc, observationLag, frequency, indexIsInterpolated, minStrike, maxStrike))
    __swig_destroy__ = _quantlib_risks.delete_ConstantYoYOptionletVolatility

# Register ConstantYoYOptionletVolatility in _quantlib_risks:
_quantlib_risks.ConstantYoYOptionletVolatility_swigregister(ConstantYoYOptionletVolatility)
class FlatSmileSection(SmileSection):
    r"""Proxy of C++ FlatSmileSection class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FlatSmileSection self, Date d, Volatility vol, DayCounter dc, Date referenceDate=Date(), Real atmLevel=Null< Rate >(), VolatilityType type=ShiftedLognormal, Real shift=0.0) -> FlatSmileSection
        __init__(FlatSmileSection self, Time exerciseTime, Volatility vol, DayCounter dc, Real atmLevel=Null< Rate >(), VolatilityType type=ShiftedLognormal, Real shift=0.0) -> FlatSmileSection
        """
        _quantlib_risks.FlatSmileSection_swiginit(self, _quantlib_risks.new_FlatSmileSection(*args))
    __swig_destroy__ = _quantlib_risks.delete_FlatSmileSection

# Register FlatSmileSection in _quantlib_risks:
_quantlib_risks.FlatSmileSection_swigregister(FlatSmileSection)
class LinearInterpolatedSmileSection(SmileSection):
    r"""Proxy of C++ InterpolatedSmileSection< Linear > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(LinearInterpolatedSmileSection self, Time expiryTime, std::vector< Rate,std::allocator< Rate > > const & strikes, QuoteHandleVector stdDevHandles, QuoteHandle atmLevel, Linear interpolator=Linear(), DayCounter dc=Actual365Fixed(), VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> LinearInterpolatedSmileSection
        __init__(LinearInterpolatedSmileSection self, Time expiryTime, std::vector< Rate,std::allocator< Rate > > const & strikes, std::vector< Real,std::allocator< Real > > const & stdDevs, Real atmLevel, Linear interpolator=Linear(), DayCounter dc=Actual365Fixed(), VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> LinearInterpolatedSmileSection
        __init__(LinearInterpolatedSmileSection self, Date d, std::vector< Rate,std::allocator< Rate > > const & strikes, QuoteHandleVector stdDevHandles, QuoteHandle atmLevel, DayCounter dc=Actual365Fixed(), Linear interpolator=Linear(), Date referenceDate=Date(), VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> LinearInterpolatedSmileSection
        __init__(LinearInterpolatedSmileSection self, Date d, std::vector< Rate,std::allocator< Rate > > const & strikes, std::vector< Real,std::allocator< Real > > const & stdDevs, Real atmLevel, DayCounter dc=Actual365Fixed(), Linear interpolator=Linear(), Date referenceDate=Date(), VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> LinearInterpolatedSmileSection
        """
        _quantlib_risks.LinearInterpolatedSmileSection_swiginit(self, _quantlib_risks.new_LinearInterpolatedSmileSection(*args))
    __swig_destroy__ = _quantlib_risks.delete_LinearInterpolatedSmileSection

# Register LinearInterpolatedSmileSection in _quantlib_risks:
_quantlib_risks.LinearInterpolatedSmileSection_swigregister(LinearInterpolatedSmileSection)
class CubicInterpolatedSmileSection(SmileSection):
    r"""Proxy of C++ InterpolatedSmileSection< Cubic > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CubicInterpolatedSmileSection self, Time expiryTime, std::vector< Rate,std::allocator< Rate > > const & strikes, QuoteHandleVector stdDevHandles, QuoteHandle atmLevel, Cubic interpolator=Cubic(), DayCounter dc=Actual365Fixed(), VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> CubicInterpolatedSmileSection
        __init__(CubicInterpolatedSmileSection self, Time expiryTime, std::vector< Rate,std::allocator< Rate > > const & strikes, std::vector< Real,std::allocator< Real > > const & stdDevs, Real atmLevel, Cubic interpolator=Cubic(), DayCounter dc=Actual365Fixed(), VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> CubicInterpolatedSmileSection
        __init__(CubicInterpolatedSmileSection self, Date d, std::vector< Rate,std::allocator< Rate > > const & strikes, QuoteHandleVector stdDevHandles, QuoteHandle atmLevel, DayCounter dc=Actual365Fixed(), Cubic interpolator=Cubic(), Date referenceDate=Date(), VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> CubicInterpolatedSmileSection
        __init__(CubicInterpolatedSmileSection self, Date d, std::vector< Rate,std::allocator< Rate > > const & strikes, std::vector< Real,std::allocator< Real > > const & stdDevs, Real atmLevel, DayCounter dc=Actual365Fixed(), Cubic interpolator=Cubic(), Date referenceDate=Date(), VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> CubicInterpolatedSmileSection
        """
        _quantlib_risks.CubicInterpolatedSmileSection_swiginit(self, _quantlib_risks.new_CubicInterpolatedSmileSection(*args))
    __swig_destroy__ = _quantlib_risks.delete_CubicInterpolatedSmileSection

# Register CubicInterpolatedSmileSection in _quantlib_risks:
_quantlib_risks.CubicInterpolatedSmileSection_swigregister(CubicInterpolatedSmileSection)
class MonotonicCubicInterpolatedSmileSection(SmileSection):
    r"""Proxy of C++ InterpolatedSmileSection< MonotonicCubic > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MonotonicCubicInterpolatedSmileSection self, Time expiryTime, std::vector< Rate,std::allocator< Rate > > const & strikes, QuoteHandleVector stdDevHandles, QuoteHandle atmLevel, MonotonicCubic interpolator=MonotonicCubic(), DayCounter dc=Actual365Fixed(), VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> MonotonicCubicInterpolatedSmileSection
        __init__(MonotonicCubicInterpolatedSmileSection self, Time expiryTime, std::vector< Rate,std::allocator< Rate > > const & strikes, std::vector< Real,std::allocator< Real > > const & stdDevs, Real atmLevel, MonotonicCubic interpolator=MonotonicCubic(), DayCounter dc=Actual365Fixed(), VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> MonotonicCubicInterpolatedSmileSection
        __init__(MonotonicCubicInterpolatedSmileSection self, Date d, std::vector< Rate,std::allocator< Rate > > const & strikes, QuoteHandleVector stdDevHandles, QuoteHandle atmLevel, DayCounter dc=Actual365Fixed(), MonotonicCubic interpolator=MonotonicCubic(), Date referenceDate=Date(), VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> MonotonicCubicInterpolatedSmileSection
        __init__(MonotonicCubicInterpolatedSmileSection self, Date d, std::vector< Rate,std::allocator< Rate > > const & strikes, std::vector< Real,std::allocator< Real > > const & stdDevs, Real atmLevel, DayCounter dc=Actual365Fixed(), MonotonicCubic interpolator=MonotonicCubic(), Date referenceDate=Date(), VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> MonotonicCubicInterpolatedSmileSection
        """
        _quantlib_risks.MonotonicCubicInterpolatedSmileSection_swiginit(self, _quantlib_risks.new_MonotonicCubicInterpolatedSmileSection(*args))
    __swig_destroy__ = _quantlib_risks.delete_MonotonicCubicInterpolatedSmileSection

# Register MonotonicCubicInterpolatedSmileSection in _quantlib_risks:
_quantlib_risks.MonotonicCubicInterpolatedSmileSection_swigregister(MonotonicCubicInterpolatedSmileSection)
class SplineCubicInterpolatedSmileSection(SmileSection):
    r"""Proxy of C++ InterpolatedSmileSection< SplineCubic > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SplineCubicInterpolatedSmileSection self, Time expiryTime, std::vector< Rate,std::allocator< Rate > > const & strikes, QuoteHandleVector stdDevHandles, QuoteHandle atmLevel, SplineCubic interpolator=SplineCubic(), DayCounter dc=Actual365Fixed(), VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> SplineCubicInterpolatedSmileSection
        __init__(SplineCubicInterpolatedSmileSection self, Time expiryTime, std::vector< Rate,std::allocator< Rate > > const & strikes, std::vector< Real,std::allocator< Real > > const & stdDevs, Real atmLevel, SplineCubic interpolator=SplineCubic(), DayCounter dc=Actual365Fixed(), VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> SplineCubicInterpolatedSmileSection
        __init__(SplineCubicInterpolatedSmileSection self, Date d, std::vector< Rate,std::allocator< Rate > > const & strikes, QuoteHandleVector stdDevHandles, QuoteHandle atmLevel, DayCounter dc=Actual365Fixed(), SplineCubic interpolator=SplineCubic(), Date referenceDate=Date(), VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> SplineCubicInterpolatedSmileSection
        __init__(SplineCubicInterpolatedSmileSection self, Date d, std::vector< Rate,std::allocator< Rate > > const & strikes, std::vector< Real,std::allocator< Real > > const & stdDevs, Real atmLevel, DayCounter dc=Actual365Fixed(), SplineCubic interpolator=SplineCubic(), Date referenceDate=Date(), VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> SplineCubicInterpolatedSmileSection
        """
        _quantlib_risks.SplineCubicInterpolatedSmileSection_swiginit(self, _quantlib_risks.new_SplineCubicInterpolatedSmileSection(*args))
    __swig_destroy__ = _quantlib_risks.delete_SplineCubicInterpolatedSmileSection

# Register SplineCubicInterpolatedSmileSection in _quantlib_risks:
_quantlib_risks.SplineCubicInterpolatedSmileSection_swigregister(SplineCubicInterpolatedSmileSection)
class KahaleSmileSection(SmileSection):
    r"""Proxy of C++ KahaleSmileSection class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(KahaleSmileSection self, ext::shared_ptr< SmileSection > const source, Real const atm=Null< Real >(), bool const interpolate=False, bool const exponentialExtrapolation=False, bool const deleteArbitragePoints=False, std::vector< Real,std::allocator< Real > > const & moneynessGrid=std::vector< Real >(), Real const gap=1.0E-5, int const forcedLeftIndex=-1, int const forcedRightIndex=QL_MAX_INTEGER) -> KahaleSmileSection"""
        _quantlib_risks.KahaleSmileSection_swiginit(self, _quantlib_risks.new_KahaleSmileSection(*args))
    __swig_destroy__ = _quantlib_risks.delete_KahaleSmileSection

# Register KahaleSmileSection in _quantlib_risks:
_quantlib_risks.KahaleSmileSection_swigregister(KahaleSmileSection)
class ZabrShortMaturityLognormal(object):
    r"""Proxy of C++ ZabrShortMaturityLognormal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ZabrShortMaturityLognormal self) -> ZabrShortMaturityLognormal"""
        _quantlib_risks.ZabrShortMaturityLognormal_swiginit(self, _quantlib_risks.new_ZabrShortMaturityLognormal())
    __swig_destroy__ = _quantlib_risks.delete_ZabrShortMaturityLognormal

# Register ZabrShortMaturityLognormal in _quantlib_risks:
_quantlib_risks.ZabrShortMaturityLognormal_swigregister(ZabrShortMaturityLognormal)
class ZabrShortMaturityNormal(object):
    r"""Proxy of C++ ZabrShortMaturityNormal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ZabrShortMaturityNormal self) -> ZabrShortMaturityNormal"""
        _quantlib_risks.ZabrShortMaturityNormal_swiginit(self, _quantlib_risks.new_ZabrShortMaturityNormal())
    __swig_destroy__ = _quantlib_risks.delete_ZabrShortMaturityNormal

# Register ZabrShortMaturityNormal in _quantlib_risks:
_quantlib_risks.ZabrShortMaturityNormal_swigregister(ZabrShortMaturityNormal)
class ZabrLocalVolatility(object):
    r"""Proxy of C++ ZabrLocalVolatility class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ZabrLocalVolatility self) -> ZabrLocalVolatility"""
        _quantlib_risks.ZabrLocalVolatility_swiginit(self, _quantlib_risks.new_ZabrLocalVolatility())
    __swig_destroy__ = _quantlib_risks.delete_ZabrLocalVolatility

# Register ZabrLocalVolatility in _quantlib_risks:
_quantlib_risks.ZabrLocalVolatility_swigregister(ZabrLocalVolatility)
class ZabrFullFd(object):
    r"""Proxy of C++ ZabrFullFd class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ZabrFullFd self) -> ZabrFullFd"""
        _quantlib_risks.ZabrFullFd_swiginit(self, _quantlib_risks.new_ZabrFullFd())
    __swig_destroy__ = _quantlib_risks.delete_ZabrFullFd

# Register ZabrFullFd in _quantlib_risks:
_quantlib_risks.ZabrFullFd_swigregister(ZabrFullFd)
class ZabrShortMaturityLognormalSmileSection(SmileSection):
    r"""Proxy of C++ ZabrSmileSection< ZabrShortMaturityLognormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ZabrShortMaturityLognormalSmileSection self, Time timeToExpiry, Rate forward, std::vector< Real,std::allocator< Real > > const & zabrParameters, std::vector< Real,std::allocator< Real > > const & moneyness=std::vector< Real >(), Size const fdRefinement=5) -> ZabrShortMaturityLognormalSmileSection
        __init__(ZabrShortMaturityLognormalSmileSection self, Date d, Rate forward, std::vector< Real,std::allocator< Real > > const & zabrParameters, DayCounter dc=Actual365Fixed(), std::vector< Real,std::allocator< Real > > const & moneyness=std::vector< Real >(), Size const fdRefinement=5) -> ZabrShortMaturityLognormalSmileSection
        """
        _quantlib_risks.ZabrShortMaturityLognormalSmileSection_swiginit(self, _quantlib_risks.new_ZabrShortMaturityLognormalSmileSection(*args))
    __swig_destroy__ = _quantlib_risks.delete_ZabrShortMaturityLognormalSmileSection

# Register ZabrShortMaturityLognormalSmileSection in _quantlib_risks:
_quantlib_risks.ZabrShortMaturityLognormalSmileSection_swigregister(ZabrShortMaturityLognormalSmileSection)
class ZabrShortMaturityNormalSmileSection(SmileSection):
    r"""Proxy of C++ ZabrSmileSection< ZabrShortMaturityNormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ZabrShortMaturityNormalSmileSection self, Time timeToExpiry, Rate forward, std::vector< Real,std::allocator< Real > > const & zabrParameters, std::vector< Real,std::allocator< Real > > const & moneyness=std::vector< Real >(), Size const fdRefinement=5) -> ZabrShortMaturityNormalSmileSection
        __init__(ZabrShortMaturityNormalSmileSection self, Date d, Rate forward, std::vector< Real,std::allocator< Real > > const & zabrParameters, DayCounter dc=Actual365Fixed(), std::vector< Real,std::allocator< Real > > const & moneyness=std::vector< Real >(), Size const fdRefinement=5) -> ZabrShortMaturityNormalSmileSection
        """
        _quantlib_risks.ZabrShortMaturityNormalSmileSection_swiginit(self, _quantlib_risks.new_ZabrShortMaturityNormalSmileSection(*args))
    __swig_destroy__ = _quantlib_risks.delete_ZabrShortMaturityNormalSmileSection

# Register ZabrShortMaturityNormalSmileSection in _quantlib_risks:
_quantlib_risks.ZabrShortMaturityNormalSmileSection_swigregister(ZabrShortMaturityNormalSmileSection)
class ZabrLocalVolatilitySmileSection(SmileSection):
    r"""Proxy of C++ ZabrSmileSection< ZabrLocalVolatility > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ZabrLocalVolatilitySmileSection self, Time timeToExpiry, Rate forward, std::vector< Real,std::allocator< Real > > const & zabrParameters, std::vector< Real,std::allocator< Real > > const & moneyness=std::vector< Real >(), Size const fdRefinement=5) -> ZabrLocalVolatilitySmileSection
        __init__(ZabrLocalVolatilitySmileSection self, Date d, Rate forward, std::vector< Real,std::allocator< Real > > const & zabrParameters, DayCounter dc=Actual365Fixed(), std::vector< Real,std::allocator< Real > > const & moneyness=std::vector< Real >(), Size const fdRefinement=5) -> ZabrLocalVolatilitySmileSection
        """
        _quantlib_risks.ZabrLocalVolatilitySmileSection_swiginit(self, _quantlib_risks.new_ZabrLocalVolatilitySmileSection(*args))
    __swig_destroy__ = _quantlib_risks.delete_ZabrLocalVolatilitySmileSection

# Register ZabrLocalVolatilitySmileSection in _quantlib_risks:
_quantlib_risks.ZabrLocalVolatilitySmileSection_swigregister(ZabrLocalVolatilitySmileSection)
class ZabrFullFdSmileSection(SmileSection):
    r"""Proxy of C++ ZabrSmileSection< ZabrFullFd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ZabrFullFdSmileSection self, Time timeToExpiry, Rate forward, std::vector< Real,std::allocator< Real > > const & zabrParameters, std::vector< Real,std::allocator< Real > > const & moneyness=std::vector< Real >(), Size const fdRefinement=5) -> ZabrFullFdSmileSection
        __init__(ZabrFullFdSmileSection self, Date d, Rate forward, std::vector< Real,std::allocator< Real > > const & zabrParameters, DayCounter dc=Actual365Fixed(), std::vector< Real,std::allocator< Real > > const & moneyness=std::vector< Real >(), Size const fdRefinement=5) -> ZabrFullFdSmileSection
        """
        _quantlib_risks.ZabrFullFdSmileSection_swiginit(self, _quantlib_risks.new_ZabrFullFdSmileSection(*args))
    __swig_destroy__ = _quantlib_risks.delete_ZabrFullFdSmileSection

# Register ZabrFullFdSmileSection in _quantlib_risks:
_quantlib_risks.ZabrFullFdSmileSection_swigregister(ZabrFullFdSmileSection)
class ZabrShortMaturityLognormalInterpolatedSmileSection(SmileSection):
    r"""Proxy of C++ ZabrInterpolatedSmileSection< ZabrShortMaturityLognormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ZabrShortMaturityLognormalInterpolatedSmileSection self, Date optionDate, QuoteHandle forward, std::vector< Rate,std::allocator< Rate > > const & strikes, bool hasFloatingStrikes, QuoteHandle atmVolatility, QuoteHandleVector volHandles, Real alpha, Real beta, Real nu, Real rho, Real gamma, bool isAlphaFixed=False, bool isBetaFixed=False, bool isNuFixed=False, bool isRhoFixed=False, bool isGammaFixed=False, bool vegaWeighted=True, ext::shared_ptr< EndCriteria > const & endCriteria=ext::shared_ptr< EndCriteria >(), ext::shared_ptr< OptimizationMethod > const & method=ext::shared_ptr< OptimizationMethod >(), DayCounter dc=Actual365Fixed()) -> ZabrShortMaturityLognormalInterpolatedSmileSection
        __init__(ZabrShortMaturityLognormalInterpolatedSmileSection self, Date optionDate, Rate const & forward, std::vector< Rate,std::allocator< Rate > > const & strikes, bool hasFloatingStrikes, Volatility const & atmVolatility, std::vector< Volatility,std::allocator< Volatility > > const & vols, Real alpha, Real beta, Real nu, Real rho, Real gamma, bool isAlphaFixed=False, bool isBetaFixed=False, bool isNuFixed=False, bool isRhoFixed=False, bool isGammaFixed=False, bool vegaWeighted=True, ext::shared_ptr< EndCriteria > const & endCriteria=ext::shared_ptr< EndCriteria >(), ext::shared_ptr< OptimizationMethod > const & method=ext::shared_ptr< OptimizationMethod >(), DayCounter dc=Actual365Fixed()) -> ZabrShortMaturityLognormalInterpolatedSmileSection
        """
        _quantlib_risks.ZabrShortMaturityLognormalInterpolatedSmileSection_swiginit(self, _quantlib_risks.new_ZabrShortMaturityLognormalInterpolatedSmileSection(*args))

    def alpha(self):
        r"""alpha(ZabrShortMaturityLognormalInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.ZabrShortMaturityLognormalInterpolatedSmileSection_alpha(self)

    def beta(self):
        r"""beta(ZabrShortMaturityLognormalInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.ZabrShortMaturityLognormalInterpolatedSmileSection_beta(self)

    def nu(self):
        r"""nu(ZabrShortMaturityLognormalInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.ZabrShortMaturityLognormalInterpolatedSmileSection_nu(self)

    def rho(self):
        r"""rho(ZabrShortMaturityLognormalInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.ZabrShortMaturityLognormalInterpolatedSmileSection_rho(self)

    def rmsError(self):
        r"""rmsError(ZabrShortMaturityLognormalInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.ZabrShortMaturityLognormalInterpolatedSmileSection_rmsError(self)

    def maxError(self):
        r"""maxError(ZabrShortMaturityLognormalInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.ZabrShortMaturityLognormalInterpolatedSmileSection_maxError(self)

    def endCriteria(self):
        r"""endCriteria(ZabrShortMaturityLognormalInterpolatedSmileSection self) -> EndCriteria::Type"""
        return _quantlib_risks.ZabrShortMaturityLognormalInterpolatedSmileSection_endCriteria(self)
    __swig_destroy__ = _quantlib_risks.delete_ZabrShortMaturityLognormalInterpolatedSmileSection

# Register ZabrShortMaturityLognormalInterpolatedSmileSection in _quantlib_risks:
_quantlib_risks.ZabrShortMaturityLognormalInterpolatedSmileSection_swigregister(ZabrShortMaturityLognormalInterpolatedSmileSection)
class ZabrShortMaturityNormalInterpolatedSmileSection(SmileSection):
    r"""Proxy of C++ ZabrInterpolatedSmileSection< ZabrShortMaturityNormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ZabrShortMaturityNormalInterpolatedSmileSection self, Date optionDate, QuoteHandle forward, std::vector< Rate,std::allocator< Rate > > const & strikes, bool hasFloatingStrikes, QuoteHandle atmVolatility, QuoteHandleVector volHandles, Real alpha, Real beta, Real nu, Real rho, Real gamma, bool isAlphaFixed=False, bool isBetaFixed=False, bool isNuFixed=False, bool isRhoFixed=False, bool isGammaFixed=False, bool vegaWeighted=True, ext::shared_ptr< EndCriteria > const & endCriteria=ext::shared_ptr< EndCriteria >(), ext::shared_ptr< OptimizationMethod > const & method=ext::shared_ptr< OptimizationMethod >(), DayCounter dc=Actual365Fixed()) -> ZabrShortMaturityNormalInterpolatedSmileSection
        __init__(ZabrShortMaturityNormalInterpolatedSmileSection self, Date optionDate, Rate const & forward, std::vector< Rate,std::allocator< Rate > > const & strikes, bool hasFloatingStrikes, Volatility const & atmVolatility, std::vector< Volatility,std::allocator< Volatility > > const & vols, Real alpha, Real beta, Real nu, Real rho, Real gamma, bool isAlphaFixed=False, bool isBetaFixed=False, bool isNuFixed=False, bool isRhoFixed=False, bool isGammaFixed=False, bool vegaWeighted=True, ext::shared_ptr< EndCriteria > const & endCriteria=ext::shared_ptr< EndCriteria >(), ext::shared_ptr< OptimizationMethod > const & method=ext::shared_ptr< OptimizationMethod >(), DayCounter dc=Actual365Fixed()) -> ZabrShortMaturityNormalInterpolatedSmileSection
        """
        _quantlib_risks.ZabrShortMaturityNormalInterpolatedSmileSection_swiginit(self, _quantlib_risks.new_ZabrShortMaturityNormalInterpolatedSmileSection(*args))

    def alpha(self):
        r"""alpha(ZabrShortMaturityNormalInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.ZabrShortMaturityNormalInterpolatedSmileSection_alpha(self)

    def beta(self):
        r"""beta(ZabrShortMaturityNormalInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.ZabrShortMaturityNormalInterpolatedSmileSection_beta(self)

    def nu(self):
        r"""nu(ZabrShortMaturityNormalInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.ZabrShortMaturityNormalInterpolatedSmileSection_nu(self)

    def rho(self):
        r"""rho(ZabrShortMaturityNormalInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.ZabrShortMaturityNormalInterpolatedSmileSection_rho(self)

    def rmsError(self):
        r"""rmsError(ZabrShortMaturityNormalInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.ZabrShortMaturityNormalInterpolatedSmileSection_rmsError(self)

    def maxError(self):
        r"""maxError(ZabrShortMaturityNormalInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.ZabrShortMaturityNormalInterpolatedSmileSection_maxError(self)

    def endCriteria(self):
        r"""endCriteria(ZabrShortMaturityNormalInterpolatedSmileSection self) -> EndCriteria::Type"""
        return _quantlib_risks.ZabrShortMaturityNormalInterpolatedSmileSection_endCriteria(self)
    __swig_destroy__ = _quantlib_risks.delete_ZabrShortMaturityNormalInterpolatedSmileSection

# Register ZabrShortMaturityNormalInterpolatedSmileSection in _quantlib_risks:
_quantlib_risks.ZabrShortMaturityNormalInterpolatedSmileSection_swigregister(ZabrShortMaturityNormalInterpolatedSmileSection)
class ZabrLocalVolatilityInterpolatedSmileSection(SmileSection):
    r"""Proxy of C++ ZabrInterpolatedSmileSection< ZabrLocalVolatility > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ZabrLocalVolatilityInterpolatedSmileSection self, Date optionDate, QuoteHandle forward, std::vector< Rate,std::allocator< Rate > > const & strikes, bool hasFloatingStrikes, QuoteHandle atmVolatility, QuoteHandleVector volHandles, Real alpha, Real beta, Real nu, Real rho, Real gamma, bool isAlphaFixed=False, bool isBetaFixed=False, bool isNuFixed=False, bool isRhoFixed=False, bool isGammaFixed=False, bool vegaWeighted=True, ext::shared_ptr< EndCriteria > const & endCriteria=ext::shared_ptr< EndCriteria >(), ext::shared_ptr< OptimizationMethod > const & method=ext::shared_ptr< OptimizationMethod >(), DayCounter dc=Actual365Fixed()) -> ZabrLocalVolatilityInterpolatedSmileSection
        __init__(ZabrLocalVolatilityInterpolatedSmileSection self, Date optionDate, Rate const & forward, std::vector< Rate,std::allocator< Rate > > const & strikes, bool hasFloatingStrikes, Volatility const & atmVolatility, std::vector< Volatility,std::allocator< Volatility > > const & vols, Real alpha, Real beta, Real nu, Real rho, Real gamma, bool isAlphaFixed=False, bool isBetaFixed=False, bool isNuFixed=False, bool isRhoFixed=False, bool isGammaFixed=False, bool vegaWeighted=True, ext::shared_ptr< EndCriteria > const & endCriteria=ext::shared_ptr< EndCriteria >(), ext::shared_ptr< OptimizationMethod > const & method=ext::shared_ptr< OptimizationMethod >(), DayCounter dc=Actual365Fixed()) -> ZabrLocalVolatilityInterpolatedSmileSection
        """
        _quantlib_risks.ZabrLocalVolatilityInterpolatedSmileSection_swiginit(self, _quantlib_risks.new_ZabrLocalVolatilityInterpolatedSmileSection(*args))

    def alpha(self):
        r"""alpha(ZabrLocalVolatilityInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.ZabrLocalVolatilityInterpolatedSmileSection_alpha(self)

    def beta(self):
        r"""beta(ZabrLocalVolatilityInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.ZabrLocalVolatilityInterpolatedSmileSection_beta(self)

    def nu(self):
        r"""nu(ZabrLocalVolatilityInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.ZabrLocalVolatilityInterpolatedSmileSection_nu(self)

    def rho(self):
        r"""rho(ZabrLocalVolatilityInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.ZabrLocalVolatilityInterpolatedSmileSection_rho(self)

    def rmsError(self):
        r"""rmsError(ZabrLocalVolatilityInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.ZabrLocalVolatilityInterpolatedSmileSection_rmsError(self)

    def maxError(self):
        r"""maxError(ZabrLocalVolatilityInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.ZabrLocalVolatilityInterpolatedSmileSection_maxError(self)

    def endCriteria(self):
        r"""endCriteria(ZabrLocalVolatilityInterpolatedSmileSection self) -> EndCriteria::Type"""
        return _quantlib_risks.ZabrLocalVolatilityInterpolatedSmileSection_endCriteria(self)
    __swig_destroy__ = _quantlib_risks.delete_ZabrLocalVolatilityInterpolatedSmileSection

# Register ZabrLocalVolatilityInterpolatedSmileSection in _quantlib_risks:
_quantlib_risks.ZabrLocalVolatilityInterpolatedSmileSection_swigregister(ZabrLocalVolatilityInterpolatedSmileSection)
class ZabrFullFdInterpolatedSmileSection(SmileSection):
    r"""Proxy of C++ ZabrInterpolatedSmileSection< ZabrFullFd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ZabrFullFdInterpolatedSmileSection self, Date optionDate, QuoteHandle forward, std::vector< Rate,std::allocator< Rate > > const & strikes, bool hasFloatingStrikes, QuoteHandle atmVolatility, QuoteHandleVector volHandles, Real alpha, Real beta, Real nu, Real rho, Real gamma, bool isAlphaFixed=False, bool isBetaFixed=False, bool isNuFixed=False, bool isRhoFixed=False, bool isGammaFixed=False, bool vegaWeighted=True, ext::shared_ptr< EndCriteria > const & endCriteria=ext::shared_ptr< EndCriteria >(), ext::shared_ptr< OptimizationMethod > const & method=ext::shared_ptr< OptimizationMethod >(), DayCounter dc=Actual365Fixed()) -> ZabrFullFdInterpolatedSmileSection
        __init__(ZabrFullFdInterpolatedSmileSection self, Date optionDate, Rate const & forward, std::vector< Rate,std::allocator< Rate > > const & strikes, bool hasFloatingStrikes, Volatility const & atmVolatility, std::vector< Volatility,std::allocator< Volatility > > const & vols, Real alpha, Real beta, Real nu, Real rho, Real gamma, bool isAlphaFixed=False, bool isBetaFixed=False, bool isNuFixed=False, bool isRhoFixed=False, bool isGammaFixed=False, bool vegaWeighted=True, ext::shared_ptr< EndCriteria > const & endCriteria=ext::shared_ptr< EndCriteria >(), ext::shared_ptr< OptimizationMethod > const & method=ext::shared_ptr< OptimizationMethod >(), DayCounter dc=Actual365Fixed()) -> ZabrFullFdInterpolatedSmileSection
        """
        _quantlib_risks.ZabrFullFdInterpolatedSmileSection_swiginit(self, _quantlib_risks.new_ZabrFullFdInterpolatedSmileSection(*args))

    def alpha(self):
        r"""alpha(ZabrFullFdInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.ZabrFullFdInterpolatedSmileSection_alpha(self)

    def beta(self):
        r"""beta(ZabrFullFdInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.ZabrFullFdInterpolatedSmileSection_beta(self)

    def nu(self):
        r"""nu(ZabrFullFdInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.ZabrFullFdInterpolatedSmileSection_nu(self)

    def rho(self):
        r"""rho(ZabrFullFdInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.ZabrFullFdInterpolatedSmileSection_rho(self)

    def rmsError(self):
        r"""rmsError(ZabrFullFdInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.ZabrFullFdInterpolatedSmileSection_rmsError(self)

    def maxError(self):
        r"""maxError(ZabrFullFdInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.ZabrFullFdInterpolatedSmileSection_maxError(self)

    def endCriteria(self):
        r"""endCriteria(ZabrFullFdInterpolatedSmileSection self) -> EndCriteria::Type"""
        return _quantlib_risks.ZabrFullFdInterpolatedSmileSection_endCriteria(self)
    __swig_destroy__ = _quantlib_risks.delete_ZabrFullFdInterpolatedSmileSection

# Register ZabrFullFdInterpolatedSmileSection in _quantlib_risks:
_quantlib_risks.ZabrFullFdInterpolatedSmileSection_swigregister(ZabrFullFdInterpolatedSmileSection)
class NoArbSabrSmileSection(SmileSection):
    r"""Proxy of C++ NoArbSabrSmileSection class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(NoArbSabrSmileSection self, Time timeToExpiry, Rate forward, std::vector< Real,std::allocator< Real > > const & sabrParameters, Real const shift=0.0, VolatilityType volatilityType=VolatilityType::ShiftedLognormal) -> NoArbSabrSmileSection
        __init__(NoArbSabrSmileSection self, Date d, Rate forward, std::vector< Real,std::allocator< Real > > const & sabrParameters, DayCounter dc=Actual365Fixed(), Real const shift=0.0, VolatilityType volatilityType=VolatilityType::ShiftedLognormal) -> NoArbSabrSmileSection
        """
        _quantlib_risks.NoArbSabrSmileSection_swiginit(self, _quantlib_risks.new_NoArbSabrSmileSection(*args))
    __swig_destroy__ = _quantlib_risks.delete_NoArbSabrSmileSection

# Register NoArbSabrSmileSection in _quantlib_risks:
_quantlib_risks.NoArbSabrSmileSection_swigregister(NoArbSabrSmileSection)
class NoArbSabrInterpolatedSmileSection(SmileSection):
    r"""Proxy of C++ NoArbSabrInterpolatedSmileSection class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(NoArbSabrInterpolatedSmileSection self, Date optionDate, QuoteHandle forward, std::vector< Rate,std::allocator< Rate > > const & strikes, bool hasFloatingStrikes, QuoteHandle atmVolatility, QuoteHandleVector volHandles, Real alpha, Real beta, Real nu, Real rho, bool isAlphaFixed=False, bool isBetaFixed=False, bool isNuFixed=False, bool isRhoFixed=False, bool vegaWeighted=True, ext::shared_ptr< EndCriteria > const & endCriteria=ext::shared_ptr< EndCriteria >(), ext::shared_ptr< OptimizationMethod > const & method=ext::shared_ptr< OptimizationMethod >(), DayCounter dc=Actual365Fixed()) -> NoArbSabrInterpolatedSmileSection
        __init__(NoArbSabrInterpolatedSmileSection self, Date optionDate, Rate const & forward, std::vector< Rate,std::allocator< Rate > > const & strikes, bool hasFloatingStrikes, Volatility const & atmVolatility, std::vector< Volatility,std::allocator< Volatility > > const & vols, Real alpha, Real beta, Real nu, Real rho, bool isAlphaFixed=False, bool isBetaFixed=False, bool isNuFixed=False, bool isRhoFixed=False, bool vegaWeighted=True, ext::shared_ptr< EndCriteria > const & endCriteria=ext::shared_ptr< EndCriteria >(), ext::shared_ptr< OptimizationMethod > const & method=ext::shared_ptr< OptimizationMethod >(), DayCounter dc=Actual365Fixed()) -> NoArbSabrInterpolatedSmileSection
        """
        _quantlib_risks.NoArbSabrInterpolatedSmileSection_swiginit(self, _quantlib_risks.new_NoArbSabrInterpolatedSmileSection(*args))

    def alpha(self):
        r"""alpha(NoArbSabrInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.NoArbSabrInterpolatedSmileSection_alpha(self)

    def beta(self):
        r"""beta(NoArbSabrInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.NoArbSabrInterpolatedSmileSection_beta(self)

    def nu(self):
        r"""nu(NoArbSabrInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.NoArbSabrInterpolatedSmileSection_nu(self)

    def rho(self):
        r"""rho(NoArbSabrInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.NoArbSabrInterpolatedSmileSection_rho(self)

    def rmsError(self):
        r"""rmsError(NoArbSabrInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.NoArbSabrInterpolatedSmileSection_rmsError(self)

    def maxError(self):
        r"""maxError(NoArbSabrInterpolatedSmileSection self) -> Real"""
        return _quantlib_risks.NoArbSabrInterpolatedSmileSection_maxError(self)

    def endCriteria(self):
        r"""endCriteria(NoArbSabrInterpolatedSmileSection self) -> EndCriteria::Type"""
        return _quantlib_risks.NoArbSabrInterpolatedSmileSection_endCriteria(self)
    __swig_destroy__ = _quantlib_risks.delete_NoArbSabrInterpolatedSmileSection

# Register NoArbSabrInterpolatedSmileSection in _quantlib_risks:
_quantlib_risks.NoArbSabrInterpolatedSmileSection_swigregister(NoArbSabrInterpolatedSmileSection)

def sabrVolatility(*args):
    r"""sabrVolatility(Rate strike, Rate forward, Time expiryTime, Real alpha, Real beta, Real nu, Real rho, VolatilityType volatilityType=VolatilityType::ShiftedLognormal) -> Real"""
    return _quantlib_risks.sabrVolatility(*args)

def shiftedSabrVolatility(*args):
    r"""shiftedSabrVolatility(Rate strike, Rate forward, Time expiryTime, Real alpha, Real beta, Real nu, Real rho, Real shift, VolatilityType volatilityType=VolatilityType::ShiftedLognormal) -> Real"""
    return _quantlib_risks.shiftedSabrVolatility(*args)

def sabrFlochKennedyVolatility(strike, forward, expiryTime, alpha, beta, nu, rho):
    r"""sabrFlochKennedyVolatility(Rate strike, Rate forward, Time expiryTime, Real alpha, Real beta, Real nu, Real rho) -> Real"""
    return _quantlib_risks.sabrFlochKennedyVolatility(strike, forward, expiryTime, alpha, beta, nu, rho)
class CalibrationErrorTuple(object):
    r"""Proxy of C++ ext::tuple< Real,Real,Real > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3, arg4):
        r"""__init__(CalibrationErrorTuple self, xad::AReal< double > arg2, xad::AReal< double > arg3, xad::AReal< double > arg4) -> CalibrationErrorTuple"""
        _quantlib_risks.CalibrationErrorTuple_swiginit(self, _quantlib_risks.new_CalibrationErrorTuple(arg2, arg3, arg4))

    def first(self):
        r"""first(CalibrationErrorTuple self) -> xad::AReal< double >"""
        return _quantlib_risks.CalibrationErrorTuple_first(self)

    def second(self):
        r"""second(CalibrationErrorTuple self) -> xad::AReal< double >"""
        return _quantlib_risks.CalibrationErrorTuple_second(self)

    def third(self):
        r"""third(CalibrationErrorTuple self) -> xad::AReal< double >"""
        return _quantlib_risks.CalibrationErrorTuple_third(self)
    __swig_destroy__ = _quantlib_risks.delete_CalibrationErrorTuple

# Register CalibrationErrorTuple in _quantlib_risks:
_quantlib_risks.CalibrationErrorTuple_swigregister(CalibrationErrorTuple)
class AndreasenHugeVolatilityInterpl(Observable):
    r"""Proxy of C++ AndreasenHugeVolatilityInterpl class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PiecewiseConstant = _quantlib_risks.AndreasenHugeVolatilityInterpl_PiecewiseConstant
    
    Linear = _quantlib_risks.AndreasenHugeVolatilityInterpl_Linear
    
    CubicSpline = _quantlib_risks.AndreasenHugeVolatilityInterpl_CubicSpline
    
    Call = _quantlib_risks.AndreasenHugeVolatilityInterpl_Call
    
    Put = _quantlib_risks.AndreasenHugeVolatilityInterpl_Put
    
    CallPut = _quantlib_risks.AndreasenHugeVolatilityInterpl_CallPut
    

    def __init__(self, *args):
        r"""__init__(AndreasenHugeVolatilityInterpl self, CalibrationSet calibrationSet, QuoteHandle spot, YieldTermStructureHandle rTS, YieldTermStructureHandle qTS, AndreasenHugeVolatilityInterpl::InterpolationType interpolationType=CubicSpline, AndreasenHugeVolatilityInterpl::CalibrationType calibrationType=Call, Size nGridPoints=500, Real minStrike=Null< Real >(), Real maxStrike=Null< Real >(), ext::shared_ptr< OptimizationMethod > const & optimizationMethod=ext::shared_ptr< OptimizationMethod >(new LevenbergMarquardt), EndCriteria endCriteria=EndCriteria(500, 100, 1e-12, 1e-10, 1e-10)) -> AndreasenHugeVolatilityInterpl"""
        _quantlib_risks.AndreasenHugeVolatilityInterpl_swiginit(self, _quantlib_risks.new_AndreasenHugeVolatilityInterpl(*args))

    def maxDate(self):
        r"""maxDate(AndreasenHugeVolatilityInterpl self) -> Date"""
        return _quantlib_risks.AndreasenHugeVolatilityInterpl_maxDate(self)

    def minStrike(self):
        r"""minStrike(AndreasenHugeVolatilityInterpl self) -> Real"""
        return _quantlib_risks.AndreasenHugeVolatilityInterpl_minStrike(self)

    def maxStrike(self):
        r"""maxStrike(AndreasenHugeVolatilityInterpl self) -> Real"""
        return _quantlib_risks.AndreasenHugeVolatilityInterpl_maxStrike(self)

    def fwd(self, t):
        r"""fwd(AndreasenHugeVolatilityInterpl self, Time t) -> Real"""
        return _quantlib_risks.AndreasenHugeVolatilityInterpl_fwd(self, t)

    def riskFreeRate(self):
        r"""riskFreeRate(AndreasenHugeVolatilityInterpl self) -> YieldTermStructureHandle"""
        return _quantlib_risks.AndreasenHugeVolatilityInterpl_riskFreeRate(self)

    def calibrationError(self):
        r"""calibrationError(AndreasenHugeVolatilityInterpl self) -> CalibrationErrorTuple"""
        return _quantlib_risks.AndreasenHugeVolatilityInterpl_calibrationError(self)

    def optionPrice(self, t, strike, optionType):
        r"""optionPrice(AndreasenHugeVolatilityInterpl self, Time t, Real strike, Option::Type optionType) -> Real"""
        return _quantlib_risks.AndreasenHugeVolatilityInterpl_optionPrice(self, t, strike, optionType)

    def localVol(self, t, strike):
        r"""localVol(AndreasenHugeVolatilityInterpl self, Time t, Real strike) -> Volatility"""
        return _quantlib_risks.AndreasenHugeVolatilityInterpl_localVol(self, t, strike)
    __swig_destroy__ = _quantlib_risks.delete_AndreasenHugeVolatilityInterpl

# Register AndreasenHugeVolatilityInterpl in _quantlib_risks:
_quantlib_risks.AndreasenHugeVolatilityInterpl_swigregister(AndreasenHugeVolatilityInterpl)
class AndreasenHugeVolatilityAdapter(BlackVolTermStructure):
    r"""Proxy of C++ AndreasenHugeVolatilityAdapter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, volInterpl, eps=1e-6):
        r"""__init__(AndreasenHugeVolatilityAdapter self, ext::shared_ptr< AndreasenHugeVolatilityInterpl > const & volInterpl, Real eps=1e-6) -> AndreasenHugeVolatilityAdapter"""
        _quantlib_risks.AndreasenHugeVolatilityAdapter_swiginit(self, _quantlib_risks.new_AndreasenHugeVolatilityAdapter(volInterpl, eps))
    __swig_destroy__ = _quantlib_risks.delete_AndreasenHugeVolatilityAdapter

# Register AndreasenHugeVolatilityAdapter in _quantlib_risks:
_quantlib_risks.AndreasenHugeVolatilityAdapter_swigregister(AndreasenHugeVolatilityAdapter)
class AndreasenHugeLocalVolAdapter(LocalVolTermStructure):
    r"""Proxy of C++ AndreasenHugeLocalVolAdapter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, localVol):
        r"""__init__(AndreasenHugeLocalVolAdapter self, ext::shared_ptr< AndreasenHugeVolatilityInterpl > const & localVol) -> AndreasenHugeLocalVolAdapter"""
        _quantlib_risks.AndreasenHugeLocalVolAdapter_swiginit(self, _quantlib_risks.new_AndreasenHugeLocalVolAdapter(localVol))
    __swig_destroy__ = _quantlib_risks.delete_AndreasenHugeLocalVolAdapter

# Register AndreasenHugeLocalVolAdapter in _quantlib_risks:
_quantlib_risks.AndreasenHugeLocalVolAdapter_swigregister(AndreasenHugeLocalVolAdapter)
class HestonBlackVolSurface(BlackVolTermStructure):
    r"""Proxy of C++ HestonBlackVolSurface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(HestonBlackVolSurface self, HestonModelHandle hestonModel, AnalyticHestonEngine::ComplexLogFormula const cpxLogFormula=Gatheral, AnalyticHestonEngine_Integration integration=AnalyticHestonEngine::Integration::gaussLaguerre(164)) -> HestonBlackVolSurface"""
        _quantlib_risks.HestonBlackVolSurface_swiginit(self, _quantlib_risks.new_HestonBlackVolSurface(*args))
    __swig_destroy__ = _quantlib_risks.delete_HestonBlackVolSurface

# Register HestonBlackVolSurface in _quantlib_risks:
_quantlib_risks.HestonBlackVolSurface_swigregister(HestonBlackVolSurface)
class CmsMarket(object):
    r"""Proxy of C++ CmsMarket class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, swapLengths, swapIndexes, iborIndex, bidAskSpreads, pricers, discountingTS):
        r"""__init__(CmsMarket self, PeriodVector swapLengths, SwapIndexVector swapIndexes, ext::shared_ptr< IborIndex > const & iborIndex, QuoteHandleVectorVector bidAskSpreads, CmsCouponPricerVector pricers, YieldTermStructureHandle discountingTS) -> CmsMarket"""
        _quantlib_risks.CmsMarket_swiginit(self, _quantlib_risks.new_CmsMarket(swapLengths, swapIndexes, iborIndex, bidAskSpreads, pricers, discountingTS))

    def reprice(self, volStructure, meanReversion):
        r"""reprice(CmsMarket self, SwaptionVolatilityStructureHandle volStructure, Real meanReversion)"""
        return _quantlib_risks.CmsMarket_reprice(self, volStructure, meanReversion)

    def swapTenors(self):
        r"""swapTenors(CmsMarket self) -> PeriodVector"""
        return _quantlib_risks.CmsMarket_swapTenors(self)

    def swapLengths(self):
        r"""swapLengths(CmsMarket self) -> PeriodVector"""
        return _quantlib_risks.CmsMarket_swapLengths(self)

    def impliedCmsSpreads(self):
        r"""impliedCmsSpreads(CmsMarket self) -> Matrix"""
        return _quantlib_risks.CmsMarket_impliedCmsSpreads(self)

    def spreadErrors(self):
        r"""spreadErrors(CmsMarket self) -> Matrix"""
        return _quantlib_risks.CmsMarket_spreadErrors(self)

    def browse(self):
        r"""browse(CmsMarket self) -> Matrix"""
        return _quantlib_risks.CmsMarket_browse(self)

    def weightedSpreadError(self, weights):
        r"""weightedSpreadError(CmsMarket self, Matrix weights) -> Real"""
        return _quantlib_risks.CmsMarket_weightedSpreadError(self, weights)

    def weightedSpotNpvError(self, weights):
        r"""weightedSpotNpvError(CmsMarket self, Matrix weights) -> Real"""
        return _quantlib_risks.CmsMarket_weightedSpotNpvError(self, weights)

    def weightedFwdNpvError(self, weights):
        r"""weightedFwdNpvError(CmsMarket self, Matrix weights) -> Real"""
        return _quantlib_risks.CmsMarket_weightedFwdNpvError(self, weights)

    def weightedSpreadErrors(self, weights):
        r"""weightedSpreadErrors(CmsMarket self, Matrix weights) -> Array"""
        return _quantlib_risks.CmsMarket_weightedSpreadErrors(self, weights)

    def weightedSpotNpvErrors(self, weights):
        r"""weightedSpotNpvErrors(CmsMarket self, Matrix weights) -> Array"""
        return _quantlib_risks.CmsMarket_weightedSpotNpvErrors(self, weights)

    def weightedFwdNpvErrors(self, weights):
        r"""weightedFwdNpvErrors(CmsMarket self, Matrix weights) -> Array"""
        return _quantlib_risks.CmsMarket_weightedFwdNpvErrors(self, weights)
    __swig_destroy__ = _quantlib_risks.delete_CmsMarket

# Register CmsMarket in _quantlib_risks:
_quantlib_risks.CmsMarket_swigregister(CmsMarket)
class CmsMarketCalibration(object):
    r"""Proxy of C++ CmsMarketCalibration class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    OnSpread = _quantlib_risks.CmsMarketCalibration_OnSpread
    
    OnPrice = _quantlib_risks.CmsMarketCalibration_OnPrice
    
    OnForwardCmsPrice = _quantlib_risks.CmsMarketCalibration_OnForwardCmsPrice
    

    def __init__(self, volCube, cmsMarket, weights, calibrationType):
        r"""__init__(CmsMarketCalibration self, SwaptionVolatilityStructureHandle volCube, ext::shared_ptr< CmsMarket > & cmsMarket, Matrix weights, CmsMarketCalibration::CalibrationType calibrationType) -> CmsMarketCalibration"""
        _quantlib_risks.CmsMarketCalibration_swiginit(self, _quantlib_risks.new_CmsMarketCalibration(volCube, cmsMarket, weights, calibrationType))

    def compute(self, *args):
        r"""
        compute(CmsMarketCalibration self, ext::shared_ptr< EndCriteria > const & endCriteria, ext::shared_ptr< OptimizationMethod > const & method, Array guess, bool isMeanReversionFixed) -> Array
        compute(CmsMarketCalibration self, ext::shared_ptr< EndCriteria > const & endCriteria, ext::shared_ptr< OptimizationMethod > const & method, Matrix guess, bool isMeanReversionFixed, Real const meanReversionGuess=Null< Real >()) -> Matrix
        """
        return _quantlib_risks.CmsMarketCalibration_compute(self, *args)

    def computeParametric(self, *args):
        r"""computeParametric(CmsMarketCalibration self, ext::shared_ptr< EndCriteria > const & endCriteria, ext::shared_ptr< OptimizationMethod > const & method, Matrix guess, bool isMeanReversionFixed, Real const meanReversionGuess=Null< Real >()) -> Matrix"""
        return _quantlib_risks.CmsMarketCalibration_computeParametric(self, *args)

    def error(self):
        r"""error(CmsMarketCalibration self) -> Real"""
        return _quantlib_risks.CmsMarketCalibration_error(self)

    def endCriteria(self):
        r"""endCriteria(CmsMarketCalibration self) -> EndCriteria::Type"""
        return _quantlib_risks.CmsMarketCalibration_endCriteria(self)
    __swig_destroy__ = _quantlib_risks.delete_CmsMarketCalibration

# Register CmsMarketCalibration in _quantlib_risks:
_quantlib_risks.CmsMarketCalibration_swigregister(CmsMarketCalibration)
class CashFlow(Observable):
    r"""Proxy of C++ CashFlow class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def amount(self):
        r"""amount(CashFlow self) -> Real"""
        return _quantlib_risks.CashFlow_amount(self)

    def date(self):
        r"""date(CashFlow self) -> Date"""
        return _quantlib_risks.CashFlow_date(self)

    def hasOccurred(self, *args):
        r"""hasOccurred(CashFlow self, Date refDate=Date()) -> bool"""
        return _quantlib_risks.CashFlow_hasOccurred(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_CashFlow

# Register CashFlow in _quantlib_risks:
_quantlib_risks.CashFlow_swigregister(CashFlow)
class Leg(object):
    r"""Proxy of C++ std::vector< ext::shared_ptr< CashFlow > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Leg self) -> SwigPyIterator"""
        return _quantlib_risks.Leg_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Leg self) -> bool"""
        return _quantlib_risks.Leg___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Leg self) -> bool"""
        return _quantlib_risks.Leg___bool__(self)

    def __len__(self):
        r"""__len__(Leg self) -> std::vector< ext::shared_ptr< CashFlow > >::size_type"""
        return _quantlib_risks.Leg___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(Leg self, std::vector< ext::shared_ptr< CashFlow > >::difference_type i, std::vector< ext::shared_ptr< CashFlow > >::difference_type j) -> Leg"""
        return _quantlib_risks.Leg___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Leg self, std::vector< ext::shared_ptr< CashFlow > >::difference_type i, std::vector< ext::shared_ptr< CashFlow > >::difference_type j)
        __setslice__(Leg self, std::vector< ext::shared_ptr< CashFlow > >::difference_type i, std::vector< ext::shared_ptr< CashFlow > >::difference_type j, Leg v)
        """
        return _quantlib_risks.Leg___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(Leg self, std::vector< ext::shared_ptr< CashFlow > >::difference_type i, std::vector< ext::shared_ptr< CashFlow > >::difference_type j)"""
        return _quantlib_risks.Leg___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Leg self, std::vector< ext::shared_ptr< CashFlow > >::difference_type i)
        __delitem__(Leg self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.Leg___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Leg self, SWIGPY_SLICEOBJECT * slice) -> Leg
        __getitem__(Leg self, std::vector< ext::shared_ptr< CashFlow > >::difference_type i) -> std::vector< ext::shared_ptr< CashFlow > >::value_type const &
        """
        return _quantlib_risks.Leg___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Leg self, SWIGPY_SLICEOBJECT * slice, Leg v)
        __setitem__(Leg self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(Leg self, std::vector< ext::shared_ptr< CashFlow > >::difference_type i, std::vector< ext::shared_ptr< CashFlow > >::value_type const & x)
        """
        return _quantlib_risks.Leg___setitem__(self, *args)

    def pop(self):
        r"""pop(Leg self) -> std::vector< ext::shared_ptr< CashFlow > >::value_type"""
        return _quantlib_risks.Leg_pop(self)

    def append(self, x):
        r"""append(Leg self, std::vector< ext::shared_ptr< CashFlow > >::value_type const & x)"""
        return _quantlib_risks.Leg_append(self, x)

    def empty(self):
        r"""empty(Leg self) -> bool"""
        return _quantlib_risks.Leg_empty(self)

    def size(self):
        r"""size(Leg self) -> std::vector< ext::shared_ptr< CashFlow > >::size_type"""
        return _quantlib_risks.Leg_size(self)

    def swap(self, v):
        r"""swap(Leg self, Leg v)"""
        return _quantlib_risks.Leg_swap(self, v)

    def begin(self):
        r"""begin(Leg self) -> std::vector< ext::shared_ptr< CashFlow > >::iterator"""
        return _quantlib_risks.Leg_begin(self)

    def end(self):
        r"""end(Leg self) -> std::vector< ext::shared_ptr< CashFlow > >::iterator"""
        return _quantlib_risks.Leg_end(self)

    def rbegin(self):
        r"""rbegin(Leg self) -> std::vector< ext::shared_ptr< CashFlow > >::reverse_iterator"""
        return _quantlib_risks.Leg_rbegin(self)

    def rend(self):
        r"""rend(Leg self) -> std::vector< ext::shared_ptr< CashFlow > >::reverse_iterator"""
        return _quantlib_risks.Leg_rend(self)

    def clear(self):
        r"""clear(Leg self)"""
        return _quantlib_risks.Leg_clear(self)

    def get_allocator(self):
        r"""get_allocator(Leg self) -> std::vector< ext::shared_ptr< CashFlow > >::allocator_type"""
        return _quantlib_risks.Leg_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Leg self)"""
        return _quantlib_risks.Leg_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Leg self, std::vector< ext::shared_ptr< CashFlow > >::iterator pos) -> std::vector< ext::shared_ptr< CashFlow > >::iterator
        erase(Leg self, std::vector< ext::shared_ptr< CashFlow > >::iterator first, std::vector< ext::shared_ptr< CashFlow > >::iterator last) -> std::vector< ext::shared_ptr< CashFlow > >::iterator
        """
        return _quantlib_risks.Leg_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Leg self) -> Leg
        __init__(Leg self, Leg other) -> Leg
        __init__(Leg self, std::vector< ext::shared_ptr< CashFlow > >::size_type size) -> Leg
        __init__(Leg self, std::vector< ext::shared_ptr< CashFlow > >::size_type size, std::vector< ext::shared_ptr< CashFlow > >::value_type const & value) -> Leg
        """
        _quantlib_risks.Leg_swiginit(self, _quantlib_risks.new_Leg(*args))

    def push_back(self, x):
        r"""push_back(Leg self, std::vector< ext::shared_ptr< CashFlow > >::value_type const & x)"""
        return _quantlib_risks.Leg_push_back(self, x)

    def front(self):
        r"""front(Leg self) -> std::vector< ext::shared_ptr< CashFlow > >::value_type const &"""
        return _quantlib_risks.Leg_front(self)

    def back(self):
        r"""back(Leg self) -> std::vector< ext::shared_ptr< CashFlow > >::value_type const &"""
        return _quantlib_risks.Leg_back(self)

    def assign(self, n, x):
        r"""assign(Leg self, std::vector< ext::shared_ptr< CashFlow > >::size_type n, std::vector< ext::shared_ptr< CashFlow > >::value_type const & x)"""
        return _quantlib_risks.Leg_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Leg self, std::vector< ext::shared_ptr< CashFlow > >::size_type new_size)
        resize(Leg self, std::vector< ext::shared_ptr< CashFlow > >::size_type new_size, std::vector< ext::shared_ptr< CashFlow > >::value_type const & x)
        """
        return _quantlib_risks.Leg_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Leg self, std::vector< ext::shared_ptr< CashFlow > >::iterator pos, std::vector< ext::shared_ptr< CashFlow > >::value_type const & x) -> std::vector< ext::shared_ptr< CashFlow > >::iterator
        insert(Leg self, std::vector< ext::shared_ptr< CashFlow > >::iterator pos, std::vector< ext::shared_ptr< CashFlow > >::size_type n, std::vector< ext::shared_ptr< CashFlow > >::value_type const & x)
        """
        return _quantlib_risks.Leg_insert(self, *args)

    def reserve(self, n):
        r"""reserve(Leg self, std::vector< ext::shared_ptr< CashFlow > >::size_type n)"""
        return _quantlib_risks.Leg_reserve(self, n)

    def capacity(self):
        r"""capacity(Leg self) -> std::vector< ext::shared_ptr< CashFlow > >::size_type"""
        return _quantlib_risks.Leg_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_Leg

# Register Leg in _quantlib_risks:
_quantlib_risks.Leg_swigregister(Leg)
class LegVector(object):
    r"""Proxy of C++ std::vector< Leg > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(LegVector self) -> SwigPyIterator"""
        return _quantlib_risks.LegVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(LegVector self) -> bool"""
        return _quantlib_risks.LegVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(LegVector self) -> bool"""
        return _quantlib_risks.LegVector___bool__(self)

    def __len__(self):
        r"""__len__(LegVector self) -> std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::size_type"""
        return _quantlib_risks.LegVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(LegVector self, std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::difference_type i, std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::difference_type j) -> LegVector"""
        return _quantlib_risks.LegVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(LegVector self, std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::difference_type i, std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::difference_type j)
        __setslice__(LegVector self, std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::difference_type i, std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::difference_type j, LegVector v)
        """
        return _quantlib_risks.LegVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(LegVector self, std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::difference_type i, std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::difference_type j)"""
        return _quantlib_risks.LegVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(LegVector self, std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::difference_type i)
        __delitem__(LegVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.LegVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(LegVector self, SWIGPY_SLICEOBJECT * slice) -> LegVector
        __getitem__(LegVector self, std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::difference_type i) -> Leg
        """
        return _quantlib_risks.LegVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(LegVector self, SWIGPY_SLICEOBJECT * slice, LegVector v)
        __setitem__(LegVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(LegVector self, std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::difference_type i, Leg x)
        """
        return _quantlib_risks.LegVector___setitem__(self, *args)

    def pop(self):
        r"""pop(LegVector self) -> Leg"""
        return _quantlib_risks.LegVector_pop(self)

    def append(self, x):
        r"""append(LegVector self, Leg x)"""
        return _quantlib_risks.LegVector_append(self, x)

    def empty(self):
        r"""empty(LegVector self) -> bool"""
        return _quantlib_risks.LegVector_empty(self)

    def size(self):
        r"""size(LegVector self) -> std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::size_type"""
        return _quantlib_risks.LegVector_size(self)

    def swap(self, v):
        r"""swap(LegVector self, LegVector v)"""
        return _quantlib_risks.LegVector_swap(self, v)

    def begin(self):
        r"""begin(LegVector self) -> std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::iterator"""
        return _quantlib_risks.LegVector_begin(self)

    def end(self):
        r"""end(LegVector self) -> std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::iterator"""
        return _quantlib_risks.LegVector_end(self)

    def rbegin(self):
        r"""rbegin(LegVector self) -> std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::reverse_iterator"""
        return _quantlib_risks.LegVector_rbegin(self)

    def rend(self):
        r"""rend(LegVector self) -> std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::reverse_iterator"""
        return _quantlib_risks.LegVector_rend(self)

    def clear(self):
        r"""clear(LegVector self)"""
        return _quantlib_risks.LegVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(LegVector self) -> std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::allocator_type"""
        return _quantlib_risks.LegVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(LegVector self)"""
        return _quantlib_risks.LegVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(LegVector self, std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::iterator pos) -> std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::iterator
        erase(LegVector self, std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::iterator first, std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::iterator last) -> std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::iterator
        """
        return _quantlib_risks.LegVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(LegVector self) -> LegVector
        __init__(LegVector self, LegVector other) -> LegVector
        __init__(LegVector self, std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::size_type size) -> LegVector
        __init__(LegVector self, std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::size_type size, Leg value) -> LegVector
        """
        _quantlib_risks.LegVector_swiginit(self, _quantlib_risks.new_LegVector(*args))

    def push_back(self, x):
        r"""push_back(LegVector self, Leg x)"""
        return _quantlib_risks.LegVector_push_back(self, x)

    def front(self):
        r"""front(LegVector self) -> Leg"""
        return _quantlib_risks.LegVector_front(self)

    def back(self):
        r"""back(LegVector self) -> Leg"""
        return _quantlib_risks.LegVector_back(self)

    def assign(self, n, x):
        r"""assign(LegVector self, std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::size_type n, Leg x)"""
        return _quantlib_risks.LegVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(LegVector self, std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::size_type new_size)
        resize(LegVector self, std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::size_type new_size, Leg x)
        """
        return _quantlib_risks.LegVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(LegVector self, std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::iterator pos, Leg x) -> std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::iterator
        insert(LegVector self, std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::iterator pos, std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::size_type n, Leg x)
        """
        return _quantlib_risks.LegVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(LegVector self, std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::size_type n)"""
        return _quantlib_risks.LegVector_reserve(self, n)

    def capacity(self):
        r"""capacity(LegVector self) -> std::vector< std::vector< ext::shared_ptr< CashFlow >,std::allocator< ext::shared_ptr< CashFlow > > > >::size_type"""
        return _quantlib_risks.LegVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_LegVector

# Register LegVector in _quantlib_risks:
_quantlib_risks.LegVector_swigregister(LegVector)
class SimpleCashFlow(CashFlow):
    r"""Proxy of C++ SimpleCashFlow class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, amount, date):
        r"""__init__(SimpleCashFlow self, Real amount, Date date) -> SimpleCashFlow"""
        _quantlib_risks.SimpleCashFlow_swiginit(self, _quantlib_risks.new_SimpleCashFlow(amount, date))
    __swig_destroy__ = _quantlib_risks.delete_SimpleCashFlow

# Register SimpleCashFlow in _quantlib_risks:
_quantlib_risks.SimpleCashFlow_swigregister(SimpleCashFlow)
class Redemption(CashFlow):
    r"""Proxy of C++ Redemption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, amount, date):
        r"""__init__(Redemption self, Real amount, Date date) -> Redemption"""
        _quantlib_risks.Redemption_swiginit(self, _quantlib_risks.new_Redemption(amount, date))
    __swig_destroy__ = _quantlib_risks.delete_Redemption

# Register Redemption in _quantlib_risks:
_quantlib_risks.Redemption_swigregister(Redemption)
class AmortizingPayment(CashFlow):
    r"""Proxy of C++ AmortizingPayment class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, amount, date):
        r"""__init__(AmortizingPayment self, Real amount, Date date) -> AmortizingPayment"""
        _quantlib_risks.AmortizingPayment_swiginit(self, _quantlib_risks.new_AmortizingPayment(amount, date))
    __swig_destroy__ = _quantlib_risks.delete_AmortizingPayment

# Register AmortizingPayment in _quantlib_risks:
_quantlib_risks.AmortizingPayment_swigregister(AmortizingPayment)
class IndexedCashFlow(CashFlow):
    r"""Proxy of C++ IndexedCashFlow class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, notional, index, baseDate, fixingDate, paymentDate, growthOnly=False):
        r"""__init__(IndexedCashFlow self, Real notional, ext::shared_ptr< Index > const & index, Date baseDate, Date fixingDate, Date paymentDate, bool growthOnly=False) -> IndexedCashFlow"""
        _quantlib_risks.IndexedCashFlow_swiginit(self, _quantlib_risks.new_IndexedCashFlow(notional, index, baseDate, fixingDate, paymentDate, growthOnly))

    def notional(self):
        r"""notional(IndexedCashFlow self) -> Real"""
        return _quantlib_risks.IndexedCashFlow_notional(self)

    def baseDate(self):
        r"""baseDate(IndexedCashFlow self) -> Date"""
        return _quantlib_risks.IndexedCashFlow_baseDate(self)

    def fixingDate(self):
        r"""fixingDate(IndexedCashFlow self) -> Date"""
        return _quantlib_risks.IndexedCashFlow_fixingDate(self)

    def baseFixing(self):
        r"""baseFixing(IndexedCashFlow self) -> Real"""
        return _quantlib_risks.IndexedCashFlow_baseFixing(self)

    def indexFixing(self):
        r"""indexFixing(IndexedCashFlow self) -> Real"""
        return _quantlib_risks.IndexedCashFlow_indexFixing(self)

    def index(self):
        r"""index(IndexedCashFlow self) -> ext::shared_ptr< Index >"""
        return _quantlib_risks.IndexedCashFlow_index(self)

    def growthOnly(self):
        r"""growthOnly(IndexedCashFlow self) -> bool"""
        return _quantlib_risks.IndexedCashFlow_growthOnly(self)
    __swig_destroy__ = _quantlib_risks.delete_IndexedCashFlow

# Register IndexedCashFlow in _quantlib_risks:
_quantlib_risks.IndexedCashFlow_swigregister(IndexedCashFlow)

def as_indexed_cashflow(cf):
    r"""as_indexed_cashflow(ext::shared_ptr< CashFlow > const & cf) -> ext::shared_ptr< IndexedCashFlow >"""
    return _quantlib_risks.as_indexed_cashflow(cf)
class Coupon(CashFlow):
    r"""Proxy of C++ Coupon class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def nominal(self):
        r"""nominal(Coupon self) -> Real"""
        return _quantlib_risks.Coupon_nominal(self)

    def accrualStartDate(self):
        r"""accrualStartDate(Coupon self) -> Date"""
        return _quantlib_risks.Coupon_accrualStartDate(self)

    def accrualEndDate(self):
        r"""accrualEndDate(Coupon self) -> Date"""
        return _quantlib_risks.Coupon_accrualEndDate(self)

    def referencePeriodStart(self):
        r"""referencePeriodStart(Coupon self) -> Date"""
        return _quantlib_risks.Coupon_referencePeriodStart(self)

    def referencePeriodEnd(self):
        r"""referencePeriodEnd(Coupon self) -> Date"""
        return _quantlib_risks.Coupon_referencePeriodEnd(self)

    def exCouponDate(self):
        r"""exCouponDate(Coupon self) -> Date"""
        return _quantlib_risks.Coupon_exCouponDate(self)

    def rate(self):
        r"""rate(Coupon self) -> Real"""
        return _quantlib_risks.Coupon_rate(self)

    def accrualPeriod(self):
        r"""accrualPeriod(Coupon self) -> Time"""
        return _quantlib_risks.Coupon_accrualPeriod(self)

    def accrualDays(self):
        r"""accrualDays(Coupon self) -> BigInteger"""
        return _quantlib_risks.Coupon_accrualDays(self)

    def dayCounter(self):
        r"""dayCounter(Coupon self) -> DayCounter"""
        return _quantlib_risks.Coupon_dayCounter(self)

    def accruedAmount(self, date):
        r"""accruedAmount(Coupon self, Date date) -> Real"""
        return _quantlib_risks.Coupon_accruedAmount(self, date)
    __swig_destroy__ = _quantlib_risks.delete_Coupon

# Register Coupon in _quantlib_risks:
_quantlib_risks.Coupon_swigregister(Coupon)

def as_coupon(cf):
    r"""as_coupon(ext::shared_ptr< CashFlow > const & cf) -> ext::shared_ptr< Coupon >"""
    return _quantlib_risks.as_coupon(cf)
class FixedRateCoupon(Coupon):
    r"""Proxy of C++ FixedRateCoupon class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(FixedRateCoupon self, Date paymentDate, Real nominal, Rate rate, DayCounter dayCounter, Date startDate, Date endDate, Date refPeriodStart=Date(), Date refPeriodEnd=Date(), Date exCouponDate=Date()) -> FixedRateCoupon"""
        _quantlib_risks.FixedRateCoupon_swiginit(self, _quantlib_risks.new_FixedRateCoupon(*args, **kwargs))

    def interestRate(self):
        r"""interestRate(FixedRateCoupon self) -> InterestRate"""
        return _quantlib_risks.FixedRateCoupon_interestRate(self)
    __swig_destroy__ = _quantlib_risks.delete_FixedRateCoupon

# Register FixedRateCoupon in _quantlib_risks:
_quantlib_risks.FixedRateCoupon_swigregister(FixedRateCoupon)

def as_fixed_rate_coupon(cf):
    r"""as_fixed_rate_coupon(ext::shared_ptr< CashFlow > const & cf) -> ext::shared_ptr< FixedRateCoupon >"""
    return _quantlib_risks.as_fixed_rate_coupon(cf)
class FloatingRateCouponPricer(object):
    r"""Proxy of C++ FloatingRateCouponPricer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def swapletPrice(self):
        r"""swapletPrice(FloatingRateCouponPricer self) -> Real"""
        return _quantlib_risks.FloatingRateCouponPricer_swapletPrice(self)

    def swapletRate(self):
        r"""swapletRate(FloatingRateCouponPricer self) -> Rate"""
        return _quantlib_risks.FloatingRateCouponPricer_swapletRate(self)

    def capletPrice(self, effectiveCap):
        r"""capletPrice(FloatingRateCouponPricer self, Rate effectiveCap) -> Real"""
        return _quantlib_risks.FloatingRateCouponPricer_capletPrice(self, effectiveCap)

    def capletRate(self, effectiveCap):
        r"""capletRate(FloatingRateCouponPricer self, Rate effectiveCap) -> Rate"""
        return _quantlib_risks.FloatingRateCouponPricer_capletRate(self, effectiveCap)

    def floorletPrice(self, effectiveFloor):
        r"""floorletPrice(FloatingRateCouponPricer self, Rate effectiveFloor) -> Real"""
        return _quantlib_risks.FloatingRateCouponPricer_floorletPrice(self, effectiveFloor)

    def floorletRate(self, effectiveFloor):
        r"""floorletRate(FloatingRateCouponPricer self, Rate effectiveFloor) -> Rate"""
        return _quantlib_risks.FloatingRateCouponPricer_floorletRate(self, effectiveFloor)
    __swig_destroy__ = _quantlib_risks.delete_FloatingRateCouponPricer

# Register FloatingRateCouponPricer in _quantlib_risks:
_quantlib_risks.FloatingRateCouponPricer_swigregister(FloatingRateCouponPricer)
class FloatingRateCoupon(Coupon):
    r"""Proxy of C++ FloatingRateCoupon class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def fixingDate(self):
        r"""fixingDate(FloatingRateCoupon self) -> Date"""
        return _quantlib_risks.FloatingRateCoupon_fixingDate(self)

    def fixingDays(self):
        r"""fixingDays(FloatingRateCoupon self) -> Integer"""
        return _quantlib_risks.FloatingRateCoupon_fixingDays(self)

    def isInArrears(self):
        r"""isInArrears(FloatingRateCoupon self) -> bool"""
        return _quantlib_risks.FloatingRateCoupon_isInArrears(self)

    def gearing(self):
        r"""gearing(FloatingRateCoupon self) -> Real"""
        return _quantlib_risks.FloatingRateCoupon_gearing(self)

    def spread(self):
        r"""spread(FloatingRateCoupon self) -> Rate"""
        return _quantlib_risks.FloatingRateCoupon_spread(self)

    def indexFixing(self):
        r"""indexFixing(FloatingRateCoupon self) -> Rate"""
        return _quantlib_risks.FloatingRateCoupon_indexFixing(self)

    def adjustedFixing(self):
        r"""adjustedFixing(FloatingRateCoupon self) -> Rate"""
        return _quantlib_risks.FloatingRateCoupon_adjustedFixing(self)

    def convexityAdjustment(self):
        r"""convexityAdjustment(FloatingRateCoupon self) -> Rate"""
        return _quantlib_risks.FloatingRateCoupon_convexityAdjustment(self)

    def price(self, discountCurve):
        r"""price(FloatingRateCoupon self, YieldTermStructureHandle discountCurve) -> Real"""
        return _quantlib_risks.FloatingRateCoupon_price(self, discountCurve)

    def index(self):
        r"""index(FloatingRateCoupon self) -> ext::shared_ptr< InterestRateIndex >"""
        return _quantlib_risks.FloatingRateCoupon_index(self)

    def setPricer(self, p):
        r"""setPricer(FloatingRateCoupon self, ext::shared_ptr< FloatingRateCouponPricer > const & p)"""
        return _quantlib_risks.FloatingRateCoupon_setPricer(self, p)
    __swig_destroy__ = _quantlib_risks.delete_FloatingRateCoupon

# Register FloatingRateCoupon in _quantlib_risks:
_quantlib_risks.FloatingRateCoupon_swigregister(FloatingRateCoupon)

def as_floating_rate_coupon(cf):
    r"""as_floating_rate_coupon(ext::shared_ptr< CashFlow > const & cf) -> ext::shared_ptr< FloatingRateCoupon >"""
    return _quantlib_risks.as_floating_rate_coupon(cf)
class RateAveraging(object):
    r"""Proxy of C++ RateAveraging class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Simple = _quantlib_risks.RateAveraging_Simple
    
    Compound = _quantlib_risks.RateAveraging_Compound
    

    def __init__(self):
        r"""__init__(RateAveraging self) -> RateAveraging"""
        _quantlib_risks.RateAveraging_swiginit(self, _quantlib_risks.new_RateAveraging())
    __swig_destroy__ = _quantlib_risks.delete_RateAveraging

# Register RateAveraging in _quantlib_risks:
_quantlib_risks.RateAveraging_swigregister(RateAveraging)
class OvernightIndexedCoupon(FloatingRateCoupon):
    r"""Proxy of C++ OvernightIndexedCoupon class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(OvernightIndexedCoupon self, Date paymentDate, Real nominal, Date startDate, Date endDate, ext::shared_ptr< OvernightIndex > const & overnightIndex, Real gearing=1.0, Spread spread=0.0, Date refPeriodStart=Date(), Date refPeriodEnd=Date(), DayCounter dayCounter=DayCounter(), bool telescopicValueDates=False, RateAveraging::Type averagingMethod=Compound) -> OvernightIndexedCoupon"""
        _quantlib_risks.OvernightIndexedCoupon_swiginit(self, _quantlib_risks.new_OvernightIndexedCoupon(*args))

    def fixingDates(self):
        r"""fixingDates(OvernightIndexedCoupon self) -> DateVector"""
        return _quantlib_risks.OvernightIndexedCoupon_fixingDates(self)

    def dt(self):
        r"""dt(OvernightIndexedCoupon self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.OvernightIndexedCoupon_dt(self)

    def indexFixings(self):
        r"""indexFixings(OvernightIndexedCoupon self) -> std::vector< Rate,std::allocator< Rate > > const &"""
        return _quantlib_risks.OvernightIndexedCoupon_indexFixings(self)

    def valueDates(self):
        r"""valueDates(OvernightIndexedCoupon self) -> DateVector"""
        return _quantlib_risks.OvernightIndexedCoupon_valueDates(self)
    __swig_destroy__ = _quantlib_risks.delete_OvernightIndexedCoupon

# Register OvernightIndexedCoupon in _quantlib_risks:
_quantlib_risks.OvernightIndexedCoupon_swigregister(OvernightIndexedCoupon)

def as_overnight_indexed_coupon(cf):
    r"""as_overnight_indexed_coupon(ext::shared_ptr< CashFlow > const & cf) -> ext::shared_ptr< OvernightIndexedCoupon >"""
    return _quantlib_risks.as_overnight_indexed_coupon(cf)
class CappedFlooredCoupon(FloatingRateCoupon):
    r"""Proxy of C++ CappedFlooredCoupon class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(CappedFlooredCoupon self, ext::shared_ptr< FloatingRateCoupon > const & underlying, Rate cap=Null< Rate >(), Rate floor=Null< Rate >()) -> CappedFlooredCoupon"""
        _quantlib_risks.CappedFlooredCoupon_swiginit(self, _quantlib_risks.new_CappedFlooredCoupon(*args, **kwargs))

    def cap(self):
        r"""cap(CappedFlooredCoupon self) -> Rate"""
        return _quantlib_risks.CappedFlooredCoupon_cap(self)

    def floor(self):
        r"""floor(CappedFlooredCoupon self) -> Rate"""
        return _quantlib_risks.CappedFlooredCoupon_floor(self)

    def effectiveCap(self):
        r"""effectiveCap(CappedFlooredCoupon self) -> Rate"""
        return _quantlib_risks.CappedFlooredCoupon_effectiveCap(self)

    def effectiveFloor(self):
        r"""effectiveFloor(CappedFlooredCoupon self) -> Rate"""
        return _quantlib_risks.CappedFlooredCoupon_effectiveFloor(self)

    def isCapped(self):
        r"""isCapped(CappedFlooredCoupon self) -> bool"""
        return _quantlib_risks.CappedFlooredCoupon_isCapped(self)

    def isFloored(self):
        r"""isFloored(CappedFlooredCoupon self) -> bool"""
        return _quantlib_risks.CappedFlooredCoupon_isFloored(self)

    def setPricer(self, p):
        r"""setPricer(CappedFlooredCoupon self, ext::shared_ptr< FloatingRateCouponPricer > const & p)"""
        return _quantlib_risks.CappedFlooredCoupon_setPricer(self, p)
    __swig_destroy__ = _quantlib_risks.delete_CappedFlooredCoupon

# Register CappedFlooredCoupon in _quantlib_risks:
_quantlib_risks.CappedFlooredCoupon_swigregister(CappedFlooredCoupon)
class IborCoupon(FloatingRateCoupon):
    r"""Proxy of C++ IborCoupon class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(IborCoupon self, Date paymentDate, Real nominal, Date startDate, Date endDate, Integer fixingDays, ext::shared_ptr< IborIndex > & index, Real gearing=1.0, Spread spread=0.0, Date refPeriodStart=Date(), Date refPeriodEnd=Date(), DayCounter dayCounter=DayCounter(), bool isInArrears=False, Date exCouponDate=Date()) -> IborCoupon"""
        _quantlib_risks.IborCoupon_swiginit(self, _quantlib_risks.new_IborCoupon(*args, **kwargs))

    @staticmethod
    def createAtParCoupons():
        r"""createAtParCoupons()"""
        return _quantlib_risks.IborCoupon_createAtParCoupons()

    @staticmethod
    def createIndexedCoupons():
        r"""createIndexedCoupons()"""
        return _quantlib_risks.IborCoupon_createIndexedCoupons()

    @staticmethod
    def usingAtParCoupons():
        r"""usingAtParCoupons() -> bool"""
        return _quantlib_risks.IborCoupon_usingAtParCoupons()
    __swig_destroy__ = _quantlib_risks.delete_IborCoupon

# Register IborCoupon in _quantlib_risks:
_quantlib_risks.IborCoupon_swigregister(IborCoupon)
class CappedFlooredIborCoupon(CappedFlooredCoupon):
    r"""Proxy of C++ CappedFlooredIborCoupon class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(CappedFlooredIborCoupon self, Date paymentDate, Real nominal, Date startDate, Date endDate, Integer fixingDays, ext::shared_ptr< IborIndex > & index, Real gearing=1.0, Spread spread=0.0, Rate const cap=Null< Rate >(), Rate const floor=Null< Rate >(), Date refPeriodStart=Date(), Date refPeriodEnd=Date(), DayCounter dayCounter=DayCounter(), bool isInArrears=False, Date exCouponDate=Date()) -> CappedFlooredIborCoupon"""
        _quantlib_risks.CappedFlooredIborCoupon_swiginit(self, _quantlib_risks.new_CappedFlooredIborCoupon(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_CappedFlooredIborCoupon

# Register CappedFlooredIborCoupon in _quantlib_risks:
_quantlib_risks.CappedFlooredIborCoupon_swigregister(CappedFlooredIborCoupon)
class SubPeriodsCoupon(FloatingRateCoupon):
    r"""Proxy of C++ SubPeriodsCoupon class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(SubPeriodsCoupon self, Date paymentDate, Real nominal, Date startDate, Date endDate, Natural fixingDays, ext::shared_ptr< IborIndex > const & index, Real gearing=1.0, Rate couponSpread=0.0, Rate rateSpread=0.0, Date refPeriodStart=Date(), Date refPeriodEnd=Date(), DayCounter dayCounter=DayCounter(), Date exCouponDate=Date()) -> SubPeriodsCoupon"""
        _quantlib_risks.SubPeriodsCoupon_swiginit(self, _quantlib_risks.new_SubPeriodsCoupon(*args, **kwargs))

    def fixingDates(self):
        r"""fixingDates(SubPeriodsCoupon self) -> DateVector"""
        return _quantlib_risks.SubPeriodsCoupon_fixingDates(self)

    def dt(self):
        r"""dt(SubPeriodsCoupon self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.SubPeriodsCoupon_dt(self)

    def valueDates(self):
        r"""valueDates(SubPeriodsCoupon self) -> DateVector"""
        return _quantlib_risks.SubPeriodsCoupon_valueDates(self)

    def rateSpread(self):
        r"""rateSpread(SubPeriodsCoupon self) -> Spread"""
        return _quantlib_risks.SubPeriodsCoupon_rateSpread(self)
    __swig_destroy__ = _quantlib_risks.delete_SubPeriodsCoupon

# Register SubPeriodsCoupon in _quantlib_risks:
_quantlib_risks.SubPeriodsCoupon_swigregister(SubPeriodsCoupon)

def as_sub_periods_coupon(cf):
    r"""as_sub_periods_coupon(ext::shared_ptr< CashFlow > const & cf) -> ext::shared_ptr< SubPeriodsCoupon >"""
    return _quantlib_risks.as_sub_periods_coupon(cf)
class IborCouponPricer(FloatingRateCouponPricer):
    r"""Proxy of C++ IborCouponPricer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def capletVolatility(self):
        r"""capletVolatility(IborCouponPricer self) -> OptionletVolatilityStructureHandle"""
        return _quantlib_risks.IborCouponPricer_capletVolatility(self)

    def setCapletVolatility(self, *args):
        r"""setCapletVolatility(IborCouponPricer self, OptionletVolatilityStructureHandle v=Handle< OptionletVolatilityStructure >())"""
        return _quantlib_risks.IborCouponPricer_setCapletVolatility(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_IborCouponPricer

# Register IborCouponPricer in _quantlib_risks:
_quantlib_risks.IborCouponPricer_swigregister(IborCouponPricer)
class BlackIborCouponPricer(IborCouponPricer):
    r"""Proxy of C++ BlackIborCouponPricer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Black76 = _quantlib_risks.BlackIborCouponPricer_Black76
    
    BivariateLognormal = _quantlib_risks.BlackIborCouponPricer_BivariateLognormal
    

    def __init__(self, *args, **kwargs):
        r"""__init__(BlackIborCouponPricer self, OptionletVolatilityStructureHandle v=Handle< OptionletVolatilityStructure >(), BlackIborCouponPricer::TimingAdjustment const timingAdjustment=Black76, QuoteHandle correlation=Handle< Quote >(ext::shared_ptr<Quote>(new SimpleQuote(1.0))), ext::optional< bool > useIndexedCoupon=ext::nullopt) -> BlackIborCouponPricer"""
        _quantlib_risks.BlackIborCouponPricer_swiginit(self, _quantlib_risks.new_BlackIborCouponPricer(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_BlackIborCouponPricer

# Register BlackIborCouponPricer in _quantlib_risks:
_quantlib_risks.BlackIborCouponPricer_swigregister(BlackIborCouponPricer)
class SubPeriodsPricer(FloatingRateCouponPricer):
    r"""Proxy of C++ SubPeriodsPricer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _quantlib_risks.delete_SubPeriodsPricer

# Register SubPeriodsPricer in _quantlib_risks:
_quantlib_risks.SubPeriodsPricer_swigregister(SubPeriodsPricer)
class CompoundingRatePricer(SubPeriodsPricer):
    r"""Proxy of C++ CompoundingRatePricer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CompoundingRatePricer self) -> CompoundingRatePricer"""
        _quantlib_risks.CompoundingRatePricer_swiginit(self, _quantlib_risks.new_CompoundingRatePricer())
    __swig_destroy__ = _quantlib_risks.delete_CompoundingRatePricer

# Register CompoundingRatePricer in _quantlib_risks:
_quantlib_risks.CompoundingRatePricer_swigregister(CompoundingRatePricer)
class AveragingRatePricer(SubPeriodsPricer):
    r"""Proxy of C++ AveragingRatePricer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(AveragingRatePricer self) -> AveragingRatePricer"""
        _quantlib_risks.AveragingRatePricer_swiginit(self, _quantlib_risks.new_AveragingRatePricer())
    __swig_destroy__ = _quantlib_risks.delete_AveragingRatePricer

# Register AveragingRatePricer in _quantlib_risks:
_quantlib_risks.AveragingRatePricer_swigregister(AveragingRatePricer)
class CmsCoupon(FloatingRateCoupon):
    r"""Proxy of C++ CmsCoupon class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(CmsCoupon self, Date paymentDate, Real nominal, Date startDate, Date endDate, Integer fixingDays, ext::shared_ptr< SwapIndex > const & index, Real gearing=1.0, Spread spread=0.0, Date refPeriodStart=Date(), Date refPeriodEnd=Date(), DayCounter dayCounter=DayCounter(), bool isInArrears=False, Date exCouponDate=Date()) -> CmsCoupon"""
        _quantlib_risks.CmsCoupon_swiginit(self, _quantlib_risks.new_CmsCoupon(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_CmsCoupon

# Register CmsCoupon in _quantlib_risks:
_quantlib_risks.CmsCoupon_swigregister(CmsCoupon)
class CmsSpreadCoupon(FloatingRateCoupon):
    r"""Proxy of C++ CmsSpreadCoupon class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(CmsSpreadCoupon self, Date paymentDate, Real nominal, Date startDate, Date endDate, Natural fixingDays, ext::shared_ptr< SwapSpreadIndex > const & index, Real gearing=1.0, Spread spread=0.0, Date refPeriodStart=Date(), Date refPeriodEnd=Date(), DayCounter dayCounter=DayCounter(), bool isInArrears=False, Date exCouponDate=Date()) -> CmsSpreadCoupon"""
        _quantlib_risks.CmsSpreadCoupon_swiginit(self, _quantlib_risks.new_CmsSpreadCoupon(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_CmsSpreadCoupon

# Register CmsSpreadCoupon in _quantlib_risks:
_quantlib_risks.CmsSpreadCoupon_swigregister(CmsSpreadCoupon)
class CmsCouponPricer(FloatingRateCouponPricer):
    r"""Proxy of C++ CmsCouponPricer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def swaptionVolatility(self):
        r"""swaptionVolatility(CmsCouponPricer self) -> SwaptionVolatilityStructureHandle"""
        return _quantlib_risks.CmsCouponPricer_swaptionVolatility(self)

    def setSwaptionVolatility(self, *args):
        r"""setSwaptionVolatility(CmsCouponPricer self, SwaptionVolatilityStructureHandle v=Handle< SwaptionVolatilityStructure >())"""
        return _quantlib_risks.CmsCouponPricer_setSwaptionVolatility(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_CmsCouponPricer

# Register CmsCouponPricer in _quantlib_risks:
_quantlib_risks.CmsCouponPricer_swigregister(CmsCouponPricer)
class CmsCouponPricerVector(object):
    r"""Proxy of C++ std::vector< ext::shared_ptr< CmsCouponPricer > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(CmsCouponPricerVector self) -> SwigPyIterator"""
        return _quantlib_risks.CmsCouponPricerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(CmsCouponPricerVector self) -> bool"""
        return _quantlib_risks.CmsCouponPricerVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(CmsCouponPricerVector self) -> bool"""
        return _quantlib_risks.CmsCouponPricerVector___bool__(self)

    def __len__(self):
        r"""__len__(CmsCouponPricerVector self) -> std::vector< ext::shared_ptr< CmsCouponPricer > >::size_type"""
        return _quantlib_risks.CmsCouponPricerVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(CmsCouponPricerVector self, std::vector< ext::shared_ptr< CmsCouponPricer > >::difference_type i, std::vector< ext::shared_ptr< CmsCouponPricer > >::difference_type j) -> CmsCouponPricerVector"""
        return _quantlib_risks.CmsCouponPricerVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(CmsCouponPricerVector self, std::vector< ext::shared_ptr< CmsCouponPricer > >::difference_type i, std::vector< ext::shared_ptr< CmsCouponPricer > >::difference_type j)
        __setslice__(CmsCouponPricerVector self, std::vector< ext::shared_ptr< CmsCouponPricer > >::difference_type i, std::vector< ext::shared_ptr< CmsCouponPricer > >::difference_type j, CmsCouponPricerVector v)
        """
        return _quantlib_risks.CmsCouponPricerVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(CmsCouponPricerVector self, std::vector< ext::shared_ptr< CmsCouponPricer > >::difference_type i, std::vector< ext::shared_ptr< CmsCouponPricer > >::difference_type j)"""
        return _quantlib_risks.CmsCouponPricerVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(CmsCouponPricerVector self, std::vector< ext::shared_ptr< CmsCouponPricer > >::difference_type i)
        __delitem__(CmsCouponPricerVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.CmsCouponPricerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(CmsCouponPricerVector self, SWIGPY_SLICEOBJECT * slice) -> CmsCouponPricerVector
        __getitem__(CmsCouponPricerVector self, std::vector< ext::shared_ptr< CmsCouponPricer > >::difference_type i) -> std::vector< ext::shared_ptr< CmsCouponPricer > >::value_type const &
        """
        return _quantlib_risks.CmsCouponPricerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(CmsCouponPricerVector self, SWIGPY_SLICEOBJECT * slice, CmsCouponPricerVector v)
        __setitem__(CmsCouponPricerVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(CmsCouponPricerVector self, std::vector< ext::shared_ptr< CmsCouponPricer > >::difference_type i, std::vector< ext::shared_ptr< CmsCouponPricer > >::value_type const & x)
        """
        return _quantlib_risks.CmsCouponPricerVector___setitem__(self, *args)

    def pop(self):
        r"""pop(CmsCouponPricerVector self) -> std::vector< ext::shared_ptr< CmsCouponPricer > >::value_type"""
        return _quantlib_risks.CmsCouponPricerVector_pop(self)

    def append(self, x):
        r"""append(CmsCouponPricerVector self, std::vector< ext::shared_ptr< CmsCouponPricer > >::value_type const & x)"""
        return _quantlib_risks.CmsCouponPricerVector_append(self, x)

    def empty(self):
        r"""empty(CmsCouponPricerVector self) -> bool"""
        return _quantlib_risks.CmsCouponPricerVector_empty(self)

    def size(self):
        r"""size(CmsCouponPricerVector self) -> std::vector< ext::shared_ptr< CmsCouponPricer > >::size_type"""
        return _quantlib_risks.CmsCouponPricerVector_size(self)

    def swap(self, v):
        r"""swap(CmsCouponPricerVector self, CmsCouponPricerVector v)"""
        return _quantlib_risks.CmsCouponPricerVector_swap(self, v)

    def begin(self):
        r"""begin(CmsCouponPricerVector self) -> std::vector< ext::shared_ptr< CmsCouponPricer > >::iterator"""
        return _quantlib_risks.CmsCouponPricerVector_begin(self)

    def end(self):
        r"""end(CmsCouponPricerVector self) -> std::vector< ext::shared_ptr< CmsCouponPricer > >::iterator"""
        return _quantlib_risks.CmsCouponPricerVector_end(self)

    def rbegin(self):
        r"""rbegin(CmsCouponPricerVector self) -> std::vector< ext::shared_ptr< CmsCouponPricer > >::reverse_iterator"""
        return _quantlib_risks.CmsCouponPricerVector_rbegin(self)

    def rend(self):
        r"""rend(CmsCouponPricerVector self) -> std::vector< ext::shared_ptr< CmsCouponPricer > >::reverse_iterator"""
        return _quantlib_risks.CmsCouponPricerVector_rend(self)

    def clear(self):
        r"""clear(CmsCouponPricerVector self)"""
        return _quantlib_risks.CmsCouponPricerVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(CmsCouponPricerVector self) -> std::vector< ext::shared_ptr< CmsCouponPricer > >::allocator_type"""
        return _quantlib_risks.CmsCouponPricerVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(CmsCouponPricerVector self)"""
        return _quantlib_risks.CmsCouponPricerVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(CmsCouponPricerVector self, std::vector< ext::shared_ptr< CmsCouponPricer > >::iterator pos) -> std::vector< ext::shared_ptr< CmsCouponPricer > >::iterator
        erase(CmsCouponPricerVector self, std::vector< ext::shared_ptr< CmsCouponPricer > >::iterator first, std::vector< ext::shared_ptr< CmsCouponPricer > >::iterator last) -> std::vector< ext::shared_ptr< CmsCouponPricer > >::iterator
        """
        return _quantlib_risks.CmsCouponPricerVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(CmsCouponPricerVector self) -> CmsCouponPricerVector
        __init__(CmsCouponPricerVector self, CmsCouponPricerVector other) -> CmsCouponPricerVector
        __init__(CmsCouponPricerVector self, std::vector< ext::shared_ptr< CmsCouponPricer > >::size_type size) -> CmsCouponPricerVector
        __init__(CmsCouponPricerVector self, std::vector< ext::shared_ptr< CmsCouponPricer > >::size_type size, std::vector< ext::shared_ptr< CmsCouponPricer > >::value_type const & value) -> CmsCouponPricerVector
        """
        _quantlib_risks.CmsCouponPricerVector_swiginit(self, _quantlib_risks.new_CmsCouponPricerVector(*args))

    def push_back(self, x):
        r"""push_back(CmsCouponPricerVector self, std::vector< ext::shared_ptr< CmsCouponPricer > >::value_type const & x)"""
        return _quantlib_risks.CmsCouponPricerVector_push_back(self, x)

    def front(self):
        r"""front(CmsCouponPricerVector self) -> std::vector< ext::shared_ptr< CmsCouponPricer > >::value_type const &"""
        return _quantlib_risks.CmsCouponPricerVector_front(self)

    def back(self):
        r"""back(CmsCouponPricerVector self) -> std::vector< ext::shared_ptr< CmsCouponPricer > >::value_type const &"""
        return _quantlib_risks.CmsCouponPricerVector_back(self)

    def assign(self, n, x):
        r"""assign(CmsCouponPricerVector self, std::vector< ext::shared_ptr< CmsCouponPricer > >::size_type n, std::vector< ext::shared_ptr< CmsCouponPricer > >::value_type const & x)"""
        return _quantlib_risks.CmsCouponPricerVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(CmsCouponPricerVector self, std::vector< ext::shared_ptr< CmsCouponPricer > >::size_type new_size)
        resize(CmsCouponPricerVector self, std::vector< ext::shared_ptr< CmsCouponPricer > >::size_type new_size, std::vector< ext::shared_ptr< CmsCouponPricer > >::value_type const & x)
        """
        return _quantlib_risks.CmsCouponPricerVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(CmsCouponPricerVector self, std::vector< ext::shared_ptr< CmsCouponPricer > >::iterator pos, std::vector< ext::shared_ptr< CmsCouponPricer > >::value_type const & x) -> std::vector< ext::shared_ptr< CmsCouponPricer > >::iterator
        insert(CmsCouponPricerVector self, std::vector< ext::shared_ptr< CmsCouponPricer > >::iterator pos, std::vector< ext::shared_ptr< CmsCouponPricer > >::size_type n, std::vector< ext::shared_ptr< CmsCouponPricer > >::value_type const & x)
        """
        return _quantlib_risks.CmsCouponPricerVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(CmsCouponPricerVector self, std::vector< ext::shared_ptr< CmsCouponPricer > >::size_type n)"""
        return _quantlib_risks.CmsCouponPricerVector_reserve(self, n)

    def capacity(self):
        r"""capacity(CmsCouponPricerVector self) -> std::vector< ext::shared_ptr< CmsCouponPricer > >::size_type"""
        return _quantlib_risks.CmsCouponPricerVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_CmsCouponPricerVector

# Register CmsCouponPricerVector in _quantlib_risks:
_quantlib_risks.CmsCouponPricerVector_swigregister(CmsCouponPricerVector)
class GFunctionFactory(object):
    r"""Proxy of C++ GFunctionFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Standard = _quantlib_risks.GFunctionFactory_Standard
    
    ExactYield = _quantlib_risks.GFunctionFactory_ExactYield
    
    ParallelShifts = _quantlib_risks.GFunctionFactory_ParallelShifts
    
    NonParallelShifts = _quantlib_risks.GFunctionFactory_NonParallelShifts
    
    __swig_destroy__ = _quantlib_risks.delete_GFunctionFactory

# Register GFunctionFactory in _quantlib_risks:
_quantlib_risks.GFunctionFactory_swigregister(GFunctionFactory)
class AnalyticHaganPricer(CmsCouponPricer):
    r"""Proxy of C++ AnalyticHaganPricer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, v, model, meanReversion):
        r"""__init__(AnalyticHaganPricer self, SwaptionVolatilityStructureHandle v, GFunctionFactory::YieldCurveModel model, QuoteHandle meanReversion) -> AnalyticHaganPricer"""
        _quantlib_risks.AnalyticHaganPricer_swiginit(self, _quantlib_risks.new_AnalyticHaganPricer(v, model, meanReversion))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticHaganPricer

# Register AnalyticHaganPricer in _quantlib_risks:
_quantlib_risks.AnalyticHaganPricer_swigregister(AnalyticHaganPricer)
class NumericHaganPricer(CmsCouponPricer):
    r"""Proxy of C++ NumericHaganPricer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, v, model, meanReversion, lowerLimit=0.0, upperLimit=1.0, precision=1.0e-6):
        r"""__init__(NumericHaganPricer self, SwaptionVolatilityStructureHandle v, GFunctionFactory::YieldCurveModel model, QuoteHandle meanReversion, Rate lowerLimit=0.0, Rate upperLimit=1.0, Real precision=1.0e-6) -> NumericHaganPricer"""
        _quantlib_risks.NumericHaganPricer_swiginit(self, _quantlib_risks.new_NumericHaganPricer(v, model, meanReversion, lowerLimit, upperLimit, precision))
    __swig_destroy__ = _quantlib_risks.delete_NumericHaganPricer

# Register NumericHaganPricer in _quantlib_risks:
_quantlib_risks.NumericHaganPricer_swigregister(NumericHaganPricer)
class CappedFlooredCmsCoupon(CappedFlooredCoupon):
    r"""Proxy of C++ CappedFlooredCmsCoupon class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(CappedFlooredCmsCoupon self, Date paymentDate, Real nominal, Date startDate, Date endDate, Natural fixingDays, ext::shared_ptr< SwapIndex > const & index, Real gearing=1.0, Spread spread=0.0, Rate const cap=Null< Rate >(), Rate const floor=Null< Rate >(), Date refPeriodStart=Date(), Date refPeriodEnd=Date(), DayCounter dayCounter=DayCounter(), bool isInArrears=False, Date exCouponDate=Date()) -> CappedFlooredCmsCoupon"""
        _quantlib_risks.CappedFlooredCmsCoupon_swiginit(self, _quantlib_risks.new_CappedFlooredCmsCoupon(*args))
    __swig_destroy__ = _quantlib_risks.delete_CappedFlooredCmsCoupon

# Register CappedFlooredCmsCoupon in _quantlib_risks:
_quantlib_risks.CappedFlooredCmsCoupon_swigregister(CappedFlooredCmsCoupon)
class CappedFlooredCmsSpreadCoupon(CappedFlooredCoupon):
    r"""Proxy of C++ CappedFlooredCmsSpreadCoupon class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(CappedFlooredCmsSpreadCoupon self, Date paymentDate, Real nominal, Date startDate, Date endDate, Natural fixingDays, ext::shared_ptr< SwapSpreadIndex > const & index, Real gearing=1.0, Spread spread=0.0, Rate const cap=Null< Rate >(), Rate const floor=Null< Rate >(), Date refPeriodStart=Date(), Date refPeriodEnd=Date(), DayCounter dayCounter=DayCounter(), bool isInArrears=False, Date exCouponDate=Date()) -> CappedFlooredCmsSpreadCoupon"""
        _quantlib_risks.CappedFlooredCmsSpreadCoupon_swiginit(self, _quantlib_risks.new_CappedFlooredCmsSpreadCoupon(*args))
    __swig_destroy__ = _quantlib_risks.delete_CappedFlooredCmsSpreadCoupon

# Register CappedFlooredCmsSpreadCoupon in _quantlib_risks:
_quantlib_risks.CappedFlooredCmsSpreadCoupon_swigregister(CappedFlooredCmsSpreadCoupon)
class LinearTsrPricer(CmsCouponPricer):
    r"""Proxy of C++ LinearTsrPricer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(LinearTsrPricer self, SwaptionVolatilityStructureHandle swaptionVol, QuoteHandle meanReversion, YieldTermStructureHandle couponDiscountCurve=Handle< YieldTermStructure >(), LinearTsrPricerSettings settings=LinearTsrPricer::Settings()) -> LinearTsrPricer"""
        _quantlib_risks.LinearTsrPricer_swiginit(self, _quantlib_risks.new_LinearTsrPricer(*args))
    __swig_destroy__ = _quantlib_risks.delete_LinearTsrPricer

# Register LinearTsrPricer in _quantlib_risks:
_quantlib_risks.LinearTsrPricer_swigregister(LinearTsrPricer)
class LinearTsrPricerSettings(object):
    r"""Proxy of C++ LinearTsrPricer::Settings class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(LinearTsrPricerSettings self) -> LinearTsrPricerSettings"""
        _quantlib_risks.LinearTsrPricerSettings_swiginit(self, _quantlib_risks.new_LinearTsrPricerSettings())

    def withRateBound(self, lowerRateBound=0.0001, upperRateBound=2.0000):
        r"""withRateBound(LinearTsrPricerSettings self, Real const lowerRateBound=0.0001, Real const upperRateBound=2.0000) -> LinearTsrPricerSettings"""
        return _quantlib_risks.LinearTsrPricerSettings_withRateBound(self, lowerRateBound, upperRateBound)

    def withVegaRatio(self, *args):
        r"""
        withVegaRatio(LinearTsrPricerSettings self, Real const vegaRatio=0.01) -> LinearTsrPricerSettings
        withVegaRatio(LinearTsrPricerSettings self, Real const vegaRatio, Real const lowerRateBound, Real const upperRateBound) -> LinearTsrPricerSettings
        """
        return _quantlib_risks.LinearTsrPricerSettings_withVegaRatio(self, *args)

    def withPriceThreshold(self, *args):
        r"""
        withPriceThreshold(LinearTsrPricerSettings self, Real const priceThreshold=1.0E-8) -> LinearTsrPricerSettings
        withPriceThreshold(LinearTsrPricerSettings self, Real const priceThreshold, Real const lowerRateBound, Real const upperRateBound) -> LinearTsrPricerSettings
        """
        return _quantlib_risks.LinearTsrPricerSettings_withPriceThreshold(self, *args)

    def withBSStdDevs(self, *args):
        r"""
        withBSStdDevs(LinearTsrPricerSettings self, Real const stdDevs=3.0) -> LinearTsrPricerSettings
        withBSStdDevs(LinearTsrPricerSettings self, Real const stdDevs, Real const lowerRateBound, Real const upperRateBound) -> LinearTsrPricerSettings
        """
        return _quantlib_risks.LinearTsrPricerSettings_withBSStdDevs(self, *args)
    RateBound = _quantlib_risks.LinearTsrPricerSettings_RateBound
    
    VegaRatio = _quantlib_risks.LinearTsrPricerSettings_VegaRatio
    
    PriceThreshold = _quantlib_risks.LinearTsrPricerSettings_PriceThreshold
    
    BSStdDevs = _quantlib_risks.LinearTsrPricerSettings_BSStdDevs
    
    __swig_destroy__ = _quantlib_risks.delete_LinearTsrPricerSettings

# Register LinearTsrPricerSettings in _quantlib_risks:
_quantlib_risks.LinearTsrPricerSettings_swigregister(LinearTsrPricerSettings)
class CmsSpreadCouponPricer(FloatingRateCouponPricer):
    r"""Proxy of C++ CmsSpreadCouponPricer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def correlation(self):
        r"""correlation(CmsSpreadCouponPricer self) -> QuoteHandle"""
        return _quantlib_risks.CmsSpreadCouponPricer_correlation(self)

    def setCorrelation(self, *args):
        r"""setCorrelation(CmsSpreadCouponPricer self, QuoteHandle correlation=Handle< Quote >())"""
        return _quantlib_risks.CmsSpreadCouponPricer_setCorrelation(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_CmsSpreadCouponPricer

# Register CmsSpreadCouponPricer in _quantlib_risks:
_quantlib_risks.CmsSpreadCouponPricer_swigregister(CmsSpreadCouponPricer)
class LognormalCmsSpreadPricer(CmsSpreadCouponPricer):
    r"""Proxy of C++ LognormalCmsSpreadPricer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(LognormalCmsSpreadPricer self, ext::shared_ptr< CmsCouponPricer > const & cmsPricer, QuoteHandle correlation, YieldTermStructureHandle couponDiscountCurve=Handle< YieldTermStructure >(), Size const IntegrationPoints=16, ext::optional< VolatilityType > const volatilityType=ext::nullopt, Real const shift1=Null< Real >(), Real const shift2=Null< Real >()) -> LognormalCmsSpreadPricer"""
        _quantlib_risks.LognormalCmsSpreadPricer_swiginit(self, _quantlib_risks.new_LognormalCmsSpreadPricer(*args))

    def swapletPrice(self):
        r"""swapletPrice(LognormalCmsSpreadPricer self) -> Real"""
        return _quantlib_risks.LognormalCmsSpreadPricer_swapletPrice(self)

    def swapletRate(self):
        r"""swapletRate(LognormalCmsSpreadPricer self) -> Rate"""
        return _quantlib_risks.LognormalCmsSpreadPricer_swapletRate(self)

    def capletPrice(self, effectiveCap):
        r"""capletPrice(LognormalCmsSpreadPricer self, Rate effectiveCap) -> Real"""
        return _quantlib_risks.LognormalCmsSpreadPricer_capletPrice(self, effectiveCap)

    def capletRate(self, effectiveCap):
        r"""capletRate(LognormalCmsSpreadPricer self, Rate effectiveCap) -> Rate"""
        return _quantlib_risks.LognormalCmsSpreadPricer_capletRate(self, effectiveCap)

    def floorletPrice(self, effectiveFloor):
        r"""floorletPrice(LognormalCmsSpreadPricer self, Rate effectiveFloor) -> Real"""
        return _quantlib_risks.LognormalCmsSpreadPricer_floorletPrice(self, effectiveFloor)

    def floorletRate(self, effectiveFloor):
        r"""floorletRate(LognormalCmsSpreadPricer self, Rate effectiveFloor) -> Rate"""
        return _quantlib_risks.LognormalCmsSpreadPricer_floorletRate(self, effectiveFloor)
    __swig_destroy__ = _quantlib_risks.delete_LognormalCmsSpreadPricer

# Register LognormalCmsSpreadPricer in _quantlib_risks:
_quantlib_risks.LognormalCmsSpreadPricer_swigregister(LognormalCmsSpreadPricer)
class EquityCashFlowPricer(object):
    r"""Proxy of C++ EquityCashFlowPricer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _quantlib_risks.delete_EquityCashFlowPricer

# Register EquityCashFlowPricer in _quantlib_risks:
_quantlib_risks.EquityCashFlowPricer_swigregister(EquityCashFlowPricer)
class EquityCashFlow(IndexedCashFlow):
    r"""Proxy of C++ EquityCashFlow class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, notional, index, baseDate, fixingDate, paymentDate, growthOnly=True):
        r"""__init__(EquityCashFlow self, Real notional, ext::shared_ptr< EquityIndex > index, Date baseDate, Date fixingDate, Date paymentDate, bool growthOnly=True) -> EquityCashFlow"""
        _quantlib_risks.EquityCashFlow_swiginit(self, _quantlib_risks.new_EquityCashFlow(notional, index, baseDate, fixingDate, paymentDate, growthOnly))

    def setPricer(self, arg2):
        r"""setPricer(EquityCashFlow self, ext::shared_ptr< EquityCashFlowPricer > const & arg2)"""
        return _quantlib_risks.EquityCashFlow_setPricer(self, arg2)
    __swig_destroy__ = _quantlib_risks.delete_EquityCashFlow

# Register EquityCashFlow in _quantlib_risks:
_quantlib_risks.EquityCashFlow_swigregister(EquityCashFlow)
class EquityQuantoCashFlowPricer(EquityCashFlowPricer):
    r"""Proxy of C++ EquityQuantoCashFlowPricer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, quantoCurrencyTermStructure, equityVolatility, fxVolatility, correlation):
        r"""__init__(EquityQuantoCashFlowPricer self, YieldTermStructureHandle quantoCurrencyTermStructure, BlackVolTermStructureHandle equityVolatility, BlackVolTermStructureHandle fxVolatility, QuoteHandle correlation) -> EquityQuantoCashFlowPricer"""
        _quantlib_risks.EquityQuantoCashFlowPricer_swiginit(self, _quantlib_risks.new_EquityQuantoCashFlowPricer(quantoCurrencyTermStructure, equityVolatility, fxVolatility, correlation))
    __swig_destroy__ = _quantlib_risks.delete_EquityQuantoCashFlowPricer

# Register EquityQuantoCashFlowPricer in _quantlib_risks:
_quantlib_risks.EquityQuantoCashFlowPricer_swigregister(EquityQuantoCashFlowPricer)

def FixedRateLeg(*args, **kwargs):
    r"""FixedRateLeg(Schedule schedule, DayCounter dayCount, std::vector< Real,std::allocator< Real > > const & nominals, std::vector< Rate,std::allocator< Rate > > const & couponRates, BusinessDayConvention paymentAdjustment=Following, DayCounter firstPeriodDayCount=DayCounter(), Period exCouponPeriod=Period(), Calendar exCouponCalendar=Calendar(), BusinessDayConvention exCouponConvention=Unadjusted, bool exCouponEndOfMonth=False, Calendar paymentCalendar=Calendar(), Integer paymentLag=0, Compounding compounding=Simple, Frequency compoundingFrequency=Annual) -> Leg"""
    return _quantlib_risks.FixedRateLeg(*args, **kwargs)

def IborLeg(*args, **kwargs):
    r"""IborLeg(std::vector< Real,std::allocator< Real > > const & nominals, Schedule schedule, ext::shared_ptr< IborIndex > const & index, DayCounter paymentDayCounter=DayCounter(), BusinessDayConvention const paymentConvention=Following, UnsignedIntVector fixingDays=std::vector< Natural >(), std::vector< Real,std::allocator< Real > > const & gearings=std::vector< Real >(), std::vector< Spread,std::allocator< Spread > > const & spreads=std::vector< Spread >(), std::vector< Rate,std::allocator< Rate > > const & caps=std::vector< Rate >(), std::vector< Rate,std::allocator< Rate > > const & floors=std::vector< Rate >(), bool isInArrears=False, Period exCouponPeriod=Period(), Calendar exCouponCalendar=Calendar(), BusinessDayConvention exCouponConvention=Unadjusted, bool exCouponEndOfMonth=False, Calendar paymentCalendar=Calendar(), Integer paymentLag=0, ext::optional< bool > withIndexedCoupons=ext::nullopt) -> Leg"""
    return _quantlib_risks.IborLeg(*args, **kwargs)

def OvernightLeg(*args, **kwargs):
    r"""OvernightLeg(std::vector< Real,std::allocator< Real > > const & nominals, Schedule schedule, ext::shared_ptr< OvernightIndex > const & index, DayCounter paymentDayCounter=DayCounter(), BusinessDayConvention const paymentConvention=Following, std::vector< Real,std::allocator< Real > > const & gearings=std::vector< Real >(), std::vector< Spread,std::allocator< Spread > > const & spreads=std::vector< Spread >(), bool telescopicValueDates=False, RateAveraging::Type averagingMethod=Compound, Calendar paymentCalendar=Calendar(), Integer paymentLag=0) -> Leg"""
    return _quantlib_risks.OvernightLeg(*args, **kwargs)

def CmsLeg(*args, **kwargs):
    r"""CmsLeg(std::vector< Real,std::allocator< Real > > const & nominals, Schedule schedule, ext::shared_ptr< SwapIndex > const & index, DayCounter paymentDayCounter=DayCounter(), BusinessDayConvention const paymentConvention=Following, UnsignedIntVector fixingDays=std::vector< Natural >(), std::vector< Real,std::allocator< Real > > const & gearings=std::vector< Real >(), std::vector< Spread,std::allocator< Spread > > const & spreads=std::vector< Spread >(), std::vector< Rate,std::allocator< Rate > > const & caps=std::vector< Rate >(), std::vector< Rate,std::allocator< Rate > > const & floors=std::vector< Rate >(), bool isInArrears=False, Period exCouponPeriod=Period(), Calendar exCouponCalendar=Calendar(), BusinessDayConvention const exCouponConvention=Unadjusted, bool exCouponEndOfMonth=False) -> Leg"""
    return _quantlib_risks.CmsLeg(*args, **kwargs)

def CmsZeroLeg(*args, **kwargs):
    r"""CmsZeroLeg(std::vector< Real,std::allocator< Real > > const & nominals, Schedule schedule, ext::shared_ptr< SwapIndex > const & index, DayCounter paymentDayCounter=DayCounter(), BusinessDayConvention const paymentConvention=Following, UnsignedIntVector fixingDays=std::vector< Natural >(), std::vector< Real,std::allocator< Real > > const & gearings=std::vector< Real >(), std::vector< Spread,std::allocator< Spread > > const & spreads=std::vector< Spread >(), std::vector< Rate,std::allocator< Rate > > const & caps=std::vector< Rate >(), std::vector< Rate,std::allocator< Rate > > const & floors=std::vector< Rate >(), Period exCouponPeriod=Period(), Calendar exCouponCalendar=Calendar(), BusinessDayConvention const exCouponConvention=Unadjusted, bool exCouponEndOfMonth=False) -> Leg"""
    return _quantlib_risks.CmsZeroLeg(*args, **kwargs)

def CmsSpreadLeg(*args, **kwargs):
    r"""CmsSpreadLeg(std::vector< Real,std::allocator< Real > > const & nominals, Schedule schedule, ext::shared_ptr< SwapSpreadIndex > const & index, DayCounter paymentDayCounter=DayCounter(), BusinessDayConvention const paymentConvention=Following, UnsignedIntVector fixingDays=std::vector< Natural >(), std::vector< Real,std::allocator< Real > > const & gearings=std::vector< Real >(), std::vector< Spread,std::allocator< Spread > > const & spreads=std::vector< Spread >(), std::vector< Rate,std::allocator< Rate > > const & caps=std::vector< Rate >(), std::vector< Rate,std::allocator< Rate > > const & floors=std::vector< Rate >(), bool isInArrears=False) -> Leg"""
    return _quantlib_risks.CmsSpreadLeg(*args, **kwargs)

def SubPeriodsLeg(*args, **kwargs):
    r"""SubPeriodsLeg(std::vector< Real,std::allocator< Real > > const & nominals, Schedule schedule, ext::shared_ptr< IborIndex > const & index, DayCounter paymentDayCounter=DayCounter(), BusinessDayConvention const paymentConvention=Following, Calendar paymentCalendar=Calendar(), Integer paymentLag=0, UnsignedIntVector fixingDays=std::vector< Natural >(), std::vector< Real,std::allocator< Real > > const & gearings=std::vector< Real >(), std::vector< Spread,std::allocator< Spread > > const & couponSpreads=std::vector< Spread >(), std::vector< Spread,std::allocator< Spread > > const & rateSpreads=std::vector< Spread >(), Period exCouponPeriod=Period(), Calendar exCouponCalendar=Calendar(), BusinessDayConvention exCouponConvention=Unadjusted, bool exCouponEndOfMonth=False, RateAveraging::Type averagingMethod=Compound) -> Leg"""
    return _quantlib_risks.SubPeriodsLeg(*args, **kwargs)
class Duration(object):
    r"""Proxy of C++ Duration class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Simple = _quantlib_risks.Duration_Simple
    
    Macaulay = _quantlib_risks.Duration_Macaulay
    
    Modified = _quantlib_risks.Duration_Modified
    

    def __init__(self):
        r"""__init__(Duration self) -> Duration"""
        _quantlib_risks.Duration_swiginit(self, _quantlib_risks.new_Duration())
    __swig_destroy__ = _quantlib_risks.delete_Duration

# Register Duration in _quantlib_risks:
_quantlib_risks.Duration_swigregister(Duration)
class CashFlows(object):
    r"""Proxy of C++ CashFlows class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def startDate(arg1):
        r"""startDate(Leg arg1) -> Date"""
        return _quantlib_risks.CashFlows_startDate(arg1)

    @staticmethod
    def maturityDate(arg1):
        r"""maturityDate(Leg arg1) -> Date"""
        return _quantlib_risks.CashFlows_maturityDate(arg1)

    @staticmethod
    def previousCashFlowDate(*args):
        r"""previousCashFlowDate(Leg leg, bool includeSettlementDateFlows, Date settlementDate=Date()) -> Date"""
        return _quantlib_risks.CashFlows_previousCashFlowDate(*args)

    @staticmethod
    def nextCashFlowDate(*args):
        r"""nextCashFlowDate(Leg leg, bool includeSettlementDateFlows, Date settlementDate=Date()) -> Date"""
        return _quantlib_risks.CashFlows_nextCashFlowDate(*args)

    @staticmethod
    def previousCashFlowAmount(*args):
        r"""previousCashFlowAmount(Leg leg, bool includeSettlementDateFlows, Date settlementDate=Date()) -> Real"""
        return _quantlib_risks.CashFlows_previousCashFlowAmount(*args)

    @staticmethod
    def nextCashFlowAmount(*args):
        r"""nextCashFlowAmount(Leg leg, bool includeSettlementDateFlows, Date settlementDate=Date()) -> Real"""
        return _quantlib_risks.CashFlows_nextCashFlowAmount(*args)

    @staticmethod
    def previousCashFlow(*args):
        r"""previousCashFlow(Leg leg, bool includeSettlementDateFlows, Date settlementDate=Date()) -> ext::shared_ptr< CashFlow >"""
        return _quantlib_risks.CashFlows_previousCashFlow(*args)

    @staticmethod
    def nextCashFlow(*args):
        r"""nextCashFlow(Leg leg, bool includeSettlementDateFlows, Date settlementDate=Date()) -> ext::shared_ptr< CashFlow >"""
        return _quantlib_risks.CashFlows_nextCashFlow(*args)

    @staticmethod
    def npv(*args):
        r"""
        npv(Leg leg, ext::shared_ptr< YieldTermStructure > const & discountCurve, Spread zSpread, DayCounter dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
        npv(Leg leg, YieldTermStructureHandle discountCurve, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
        npv(Leg arg1, InterestRate arg2, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
        npv(Leg arg1, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
        """
        return _quantlib_risks.CashFlows_npv(*args)

    @staticmethod
    def bps(*args):
        r"""
        bps(Leg leg, ext::shared_ptr< YieldTermStructure > const & discountCurve, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
        bps(Leg leg, YieldTermStructureHandle discountCurve, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
        bps(Leg arg1, InterestRate arg2, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
        bps(Leg arg1, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
        """
        return _quantlib_risks.CashFlows_bps(*args)

    @staticmethod
    def npvbps(*args):
        r"""
        npvbps(Leg leg, ext::shared_ptr< YieldTermStructure > const & discountCurve, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> std::pair< Real,Real >
        npvbps(Leg leg, YieldTermStructureHandle discountCurve, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> std::pair< Real,Real >
        """
        return _quantlib_risks.CashFlows_npvbps(*args)

    @staticmethod
    def atmRate(*args):
        r"""atmRate(Leg leg, ext::shared_ptr< YieldTermStructure > const & discountCurve, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date(), Real npv=Null< Real >()) -> Rate"""
        return _quantlib_risks.CashFlows_atmRate(*args)

    @staticmethod
    def yieldRate(*args):
        r"""yieldRate(Leg arg1, Real npv, DayCounter dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date(), Real accuracy=1.0e-10, Size maxIterations=10000, Rate guess=0.05) -> Rate"""
        return _quantlib_risks.CashFlows_yieldRate(*args)

    @staticmethod
    def duration(*args):
        r"""
        duration(Leg arg1, InterestRate arg2, Duration::Type type, bool includeSettlementDateFlows, Date settlementDate=Date()) -> Time
        duration(Leg arg1, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, Duration::Type type, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Time
        """
        return _quantlib_risks.CashFlows_duration(*args)

    @staticmethod
    def convexity(*args):
        r"""
        convexity(Leg arg1, InterestRate arg2, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
        convexity(Leg arg1, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
        """
        return _quantlib_risks.CashFlows_convexity(*args)

    @staticmethod
    def basisPointValue(*args):
        r"""
        basisPointValue(Leg leg, InterestRate _yield, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
        basisPointValue(Leg leg, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> Real
        """
        return _quantlib_risks.CashFlows_basisPointValue(*args)

    @staticmethod
    def zSpread(*args):
        r"""zSpread(Leg leg, Real npv, ext::shared_ptr< YieldTermStructure > const & arg3, DayCounter dayCounter, Compounding compounding, Frequency frequency, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date(), Real accuracy=1.0e-10, Size maxIterations=100, Rate guess=0.0) -> Spread"""
        return _quantlib_risks.CashFlows_zSpread(*args)
    __swig_destroy__ = _quantlib_risks.delete_CashFlows

# Register CashFlows in _quantlib_risks:
_quantlib_risks.CashFlows_swigregister(CashFlows)
class Dividend(CashFlow):
    r"""Proxy of C++ Dividend class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _quantlib_risks.delete_Dividend

# Register Dividend in _quantlib_risks:
_quantlib_risks.Dividend_swigregister(Dividend)
class FixedDividend(Dividend):
    r"""Proxy of C++ FixedDividend class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, amount, date):
        r"""__init__(FixedDividend self, Real amount, Date date) -> FixedDividend"""
        _quantlib_risks.FixedDividend_swiginit(self, _quantlib_risks.new_FixedDividend(amount, date))
    __swig_destroy__ = _quantlib_risks.delete_FixedDividend

# Register FixedDividend in _quantlib_risks:
_quantlib_risks.FixedDividend_swigregister(FixedDividend)
class FractionalDividend(Dividend):
    r"""Proxy of C++ FractionalDividend class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rate, date):
        r"""__init__(FractionalDividend self, Rate rate, Date date) -> FractionalDividend"""
        _quantlib_risks.FractionalDividend_swiginit(self, _quantlib_risks.new_FractionalDividend(rate, date))
    __swig_destroy__ = _quantlib_risks.delete_FractionalDividend

# Register FractionalDividend in _quantlib_risks:
_quantlib_risks.FractionalDividend_swigregister(FractionalDividend)
class DividendSchedule(object):
    r"""Proxy of C++ std::vector< ext::shared_ptr< Dividend > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DividendSchedule self) -> SwigPyIterator"""
        return _quantlib_risks.DividendSchedule_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DividendSchedule self) -> bool"""
        return _quantlib_risks.DividendSchedule___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DividendSchedule self) -> bool"""
        return _quantlib_risks.DividendSchedule___bool__(self)

    def __len__(self):
        r"""__len__(DividendSchedule self) -> std::vector< ext::shared_ptr< Dividend > >::size_type"""
        return _quantlib_risks.DividendSchedule___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(DividendSchedule self, std::vector< ext::shared_ptr< Dividend > >::difference_type i, std::vector< ext::shared_ptr< Dividend > >::difference_type j) -> DividendSchedule"""
        return _quantlib_risks.DividendSchedule___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DividendSchedule self, std::vector< ext::shared_ptr< Dividend > >::difference_type i, std::vector< ext::shared_ptr< Dividend > >::difference_type j)
        __setslice__(DividendSchedule self, std::vector< ext::shared_ptr< Dividend > >::difference_type i, std::vector< ext::shared_ptr< Dividend > >::difference_type j, DividendSchedule v)
        """
        return _quantlib_risks.DividendSchedule___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(DividendSchedule self, std::vector< ext::shared_ptr< Dividend > >::difference_type i, std::vector< ext::shared_ptr< Dividend > >::difference_type j)"""
        return _quantlib_risks.DividendSchedule___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DividendSchedule self, std::vector< ext::shared_ptr< Dividend > >::difference_type i)
        __delitem__(DividendSchedule self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.DividendSchedule___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DividendSchedule self, SWIGPY_SLICEOBJECT * slice) -> DividendSchedule
        __getitem__(DividendSchedule self, std::vector< ext::shared_ptr< Dividend > >::difference_type i) -> std::vector< ext::shared_ptr< Dividend > >::value_type const &
        """
        return _quantlib_risks.DividendSchedule___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DividendSchedule self, SWIGPY_SLICEOBJECT * slice, DividendSchedule v)
        __setitem__(DividendSchedule self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(DividendSchedule self, std::vector< ext::shared_ptr< Dividend > >::difference_type i, std::vector< ext::shared_ptr< Dividend > >::value_type const & x)
        """
        return _quantlib_risks.DividendSchedule___setitem__(self, *args)

    def pop(self):
        r"""pop(DividendSchedule self) -> std::vector< ext::shared_ptr< Dividend > >::value_type"""
        return _quantlib_risks.DividendSchedule_pop(self)

    def append(self, x):
        r"""append(DividendSchedule self, std::vector< ext::shared_ptr< Dividend > >::value_type const & x)"""
        return _quantlib_risks.DividendSchedule_append(self, x)

    def empty(self):
        r"""empty(DividendSchedule self) -> bool"""
        return _quantlib_risks.DividendSchedule_empty(self)

    def size(self):
        r"""size(DividendSchedule self) -> std::vector< ext::shared_ptr< Dividend > >::size_type"""
        return _quantlib_risks.DividendSchedule_size(self)

    def swap(self, v):
        r"""swap(DividendSchedule self, DividendSchedule v)"""
        return _quantlib_risks.DividendSchedule_swap(self, v)

    def begin(self):
        r"""begin(DividendSchedule self) -> std::vector< ext::shared_ptr< Dividend > >::iterator"""
        return _quantlib_risks.DividendSchedule_begin(self)

    def end(self):
        r"""end(DividendSchedule self) -> std::vector< ext::shared_ptr< Dividend > >::iterator"""
        return _quantlib_risks.DividendSchedule_end(self)

    def rbegin(self):
        r"""rbegin(DividendSchedule self) -> std::vector< ext::shared_ptr< Dividend > >::reverse_iterator"""
        return _quantlib_risks.DividendSchedule_rbegin(self)

    def rend(self):
        r"""rend(DividendSchedule self) -> std::vector< ext::shared_ptr< Dividend > >::reverse_iterator"""
        return _quantlib_risks.DividendSchedule_rend(self)

    def clear(self):
        r"""clear(DividendSchedule self)"""
        return _quantlib_risks.DividendSchedule_clear(self)

    def get_allocator(self):
        r"""get_allocator(DividendSchedule self) -> std::vector< ext::shared_ptr< Dividend > >::allocator_type"""
        return _quantlib_risks.DividendSchedule_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DividendSchedule self)"""
        return _quantlib_risks.DividendSchedule_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DividendSchedule self, std::vector< ext::shared_ptr< Dividend > >::iterator pos) -> std::vector< ext::shared_ptr< Dividend > >::iterator
        erase(DividendSchedule self, std::vector< ext::shared_ptr< Dividend > >::iterator first, std::vector< ext::shared_ptr< Dividend > >::iterator last) -> std::vector< ext::shared_ptr< Dividend > >::iterator
        """
        return _quantlib_risks.DividendSchedule_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DividendSchedule self) -> DividendSchedule
        __init__(DividendSchedule self, DividendSchedule other) -> DividendSchedule
        __init__(DividendSchedule self, std::vector< ext::shared_ptr< Dividend > >::size_type size) -> DividendSchedule
        __init__(DividendSchedule self, std::vector< ext::shared_ptr< Dividend > >::size_type size, std::vector< ext::shared_ptr< Dividend > >::value_type const & value) -> DividendSchedule
        """
        _quantlib_risks.DividendSchedule_swiginit(self, _quantlib_risks.new_DividendSchedule(*args))

    def push_back(self, x):
        r"""push_back(DividendSchedule self, std::vector< ext::shared_ptr< Dividend > >::value_type const & x)"""
        return _quantlib_risks.DividendSchedule_push_back(self, x)

    def front(self):
        r"""front(DividendSchedule self) -> std::vector< ext::shared_ptr< Dividend > >::value_type const &"""
        return _quantlib_risks.DividendSchedule_front(self)

    def back(self):
        r"""back(DividendSchedule self) -> std::vector< ext::shared_ptr< Dividend > >::value_type const &"""
        return _quantlib_risks.DividendSchedule_back(self)

    def assign(self, n, x):
        r"""assign(DividendSchedule self, std::vector< ext::shared_ptr< Dividend > >::size_type n, std::vector< ext::shared_ptr< Dividend > >::value_type const & x)"""
        return _quantlib_risks.DividendSchedule_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DividendSchedule self, std::vector< ext::shared_ptr< Dividend > >::size_type new_size)
        resize(DividendSchedule self, std::vector< ext::shared_ptr< Dividend > >::size_type new_size, std::vector< ext::shared_ptr< Dividend > >::value_type const & x)
        """
        return _quantlib_risks.DividendSchedule_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DividendSchedule self, std::vector< ext::shared_ptr< Dividend > >::iterator pos, std::vector< ext::shared_ptr< Dividend > >::value_type const & x) -> std::vector< ext::shared_ptr< Dividend > >::iterator
        insert(DividendSchedule self, std::vector< ext::shared_ptr< Dividend > >::iterator pos, std::vector< ext::shared_ptr< Dividend > >::size_type n, std::vector< ext::shared_ptr< Dividend > >::value_type const & x)
        """
        return _quantlib_risks.DividendSchedule_insert(self, *args)

    def reserve(self, n):
        r"""reserve(DividendSchedule self, std::vector< ext::shared_ptr< Dividend > >::size_type n)"""
        return _quantlib_risks.DividendSchedule_reserve(self, n)

    def capacity(self):
        r"""capacity(DividendSchedule self) -> std::vector< ext::shared_ptr< Dividend > >::size_type"""
        return _quantlib_risks.DividendSchedule_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_DividendSchedule

# Register DividendSchedule in _quantlib_risks:
_quantlib_risks.DividendSchedule_swigregister(DividendSchedule)
class Exercise(object):
    r"""Proxy of C++ Exercise class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    American = _quantlib_risks.Exercise_American
    
    Bermudan = _quantlib_risks.Exercise_Bermudan
    
    European = _quantlib_risks.Exercise_European
    

    def __init__(self, type):
        r"""__init__(Exercise self, Exercise::Type type) -> Exercise"""
        _quantlib_risks.Exercise_swiginit(self, _quantlib_risks.new_Exercise(type))

    def type(self):
        r"""type(Exercise self) -> Exercise::Type"""
        return _quantlib_risks.Exercise_type(self)

    def date(self, index):
        r"""date(Exercise self, Size index) -> Date"""
        return _quantlib_risks.Exercise_date(self, index)

    def dateAt(self, index):
        r"""dateAt(Exercise self, Size index) -> Date"""
        return _quantlib_risks.Exercise_dateAt(self, index)

    def dates(self):
        r"""dates(Exercise self) -> DateVector"""
        return _quantlib_risks.Exercise_dates(self)

    def lastDate(self):
        r"""lastDate(Exercise self) -> Date"""
        return _quantlib_risks.Exercise_lastDate(self)
    __swig_destroy__ = _quantlib_risks.delete_Exercise

# Register Exercise in _quantlib_risks:
_quantlib_risks.Exercise_swigregister(Exercise)
class EuropeanExercise(Exercise):
    r"""Proxy of C++ EuropeanExercise class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, date):
        r"""__init__(EuropeanExercise self, Date date) -> EuropeanExercise"""
        _quantlib_risks.EuropeanExercise_swiginit(self, _quantlib_risks.new_EuropeanExercise(date))
    __swig_destroy__ = _quantlib_risks.delete_EuropeanExercise

# Register EuropeanExercise in _quantlib_risks:
_quantlib_risks.EuropeanExercise_swigregister(EuropeanExercise)
class AmericanExercise(Exercise):
    r"""Proxy of C++ AmericanExercise class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, earliestDate, latestDate, payoffAtExpiry=False):
        r"""__init__(AmericanExercise self, Date earliestDate, Date latestDate, bool payoffAtExpiry=False) -> AmericanExercise"""
        _quantlib_risks.AmericanExercise_swiginit(self, _quantlib_risks.new_AmericanExercise(earliestDate, latestDate, payoffAtExpiry))
    __swig_destroy__ = _quantlib_risks.delete_AmericanExercise

# Register AmericanExercise in _quantlib_risks:
_quantlib_risks.AmericanExercise_swigregister(AmericanExercise)
class BermudanExercise(Exercise):
    r"""Proxy of C++ BermudanExercise class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dates, payoffAtExpiry=False):
        r"""__init__(BermudanExercise self, DateVector dates, bool payoffAtExpiry=False) -> BermudanExercise"""
        _quantlib_risks.BermudanExercise_swiginit(self, _quantlib_risks.new_BermudanExercise(dates, payoffAtExpiry))
    __swig_destroy__ = _quantlib_risks.delete_BermudanExercise

# Register BermudanExercise in _quantlib_risks:
_quantlib_risks.BermudanExercise_swigregister(BermudanExercise)
class RebatedExercise(Exercise):
    r"""Proxy of C++ RebatedExercise class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(RebatedExercise self, Exercise exercise, std::vector< Real,std::allocator< Real > > const rebates, Natural rebateSettlementDays=0, Calendar rebatePaymentCalendar=NullCalendar(), BusinessDayConvention const rebatePaymentConvention=Following) -> RebatedExercise"""
        _quantlib_risks.RebatedExercise_swiginit(self, _quantlib_risks.new_RebatedExercise(*args))
    __swig_destroy__ = _quantlib_risks.delete_RebatedExercise

# Register RebatedExercise in _quantlib_risks:
_quantlib_risks.RebatedExercise_swigregister(RebatedExercise)
class SwingExercise(Exercise):
    r"""Proxy of C++ SwingExercise class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dates):
        r"""__init__(SwingExercise self, DateVector dates) -> SwingExercise"""
        _quantlib_risks.SwingExercise_swiginit(self, _quantlib_risks.new_SwingExercise(dates))
    __swig_destroy__ = _quantlib_risks.delete_SwingExercise

# Register SwingExercise in _quantlib_risks:
_quantlib_risks.SwingExercise_swigregister(SwingExercise)
class TimeGrid(object):
    r"""Proxy of C++ TimeGrid class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TimeGrid self) -> TimeGrid
        __init__(TimeGrid self, Time end, Size steps) -> TimeGrid
        __init__(TimeGrid self, std::vector< Time,std::allocator< Time > > const & times) -> TimeGrid
        __init__(TimeGrid self, std::vector< Time,std::allocator< Time > > const & times, Size steps) -> TimeGrid
        """
        _quantlib_risks.TimeGrid_swiginit(self, _quantlib_risks.new_TimeGrid(*args))

    def __len__(self):
        r"""__len__(TimeGrid self) -> Size"""
        return _quantlib_risks.TimeGrid___len__(self)

    def __getitem__(self, i):
        r"""__getitem__(TimeGrid self, Integer i) -> Time"""
        return _quantlib_risks.TimeGrid___getitem__(self, i)

    def dt(self, i):
        r"""dt(TimeGrid self, Integer i) -> Time"""
        return _quantlib_risks.TimeGrid_dt(self, i)
    __swig_destroy__ = _quantlib_risks.delete_TimeGrid

# Register TimeGrid in _quantlib_risks:
_quantlib_risks.TimeGrid_swigregister(TimeGrid)
class StochasticProcess(Observable):
    r"""Proxy of C++ StochasticProcess class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def size(self):
        r"""size(StochasticProcess self) -> Size"""
        return _quantlib_risks.StochasticProcess_size(self)

    def factors(self):
        r"""factors(StochasticProcess self) -> Size"""
        return _quantlib_risks.StochasticProcess_factors(self)

    def initialValues(self):
        r"""initialValues(StochasticProcess self) -> Array"""
        return _quantlib_risks.StochasticProcess_initialValues(self)

    def drift(self, t, x):
        r"""drift(StochasticProcess self, Time t, Array x) -> Array"""
        return _quantlib_risks.StochasticProcess_drift(self, t, x)

    def diffusion(self, t, x):
        r"""diffusion(StochasticProcess self, Time t, Array x) -> Matrix"""
        return _quantlib_risks.StochasticProcess_diffusion(self, t, x)

    def expectation(self, t0, x0, dt):
        r"""expectation(StochasticProcess self, Time t0, Array x0, Time dt) -> Array"""
        return _quantlib_risks.StochasticProcess_expectation(self, t0, x0, dt)

    def stdDeviation(self, t0, x0, dt):
        r"""stdDeviation(StochasticProcess self, Time t0, Array x0, Time dt) -> Matrix"""
        return _quantlib_risks.StochasticProcess_stdDeviation(self, t0, x0, dt)

    def covariance(self, t0, x0, dt):
        r"""covariance(StochasticProcess self, Time t0, Array x0, Time dt) -> Matrix"""
        return _quantlib_risks.StochasticProcess_covariance(self, t0, x0, dt)

    def evolve(self, t0, x0, dt, dw):
        r"""evolve(StochasticProcess self, Time t0, Array x0, Time dt, Array dw) -> Array"""
        return _quantlib_risks.StochasticProcess_evolve(self, t0, x0, dt, dw)
    __swig_destroy__ = _quantlib_risks.delete_StochasticProcess

# Register StochasticProcess in _quantlib_risks:
_quantlib_risks.StochasticProcess_swigregister(StochasticProcess)
class StochasticProcessVector(object):
    r"""Proxy of C++ std::vector< ext::shared_ptr< StochasticProcess > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(StochasticProcessVector self) -> SwigPyIterator"""
        return _quantlib_risks.StochasticProcessVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(StochasticProcessVector self) -> bool"""
        return _quantlib_risks.StochasticProcessVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(StochasticProcessVector self) -> bool"""
        return _quantlib_risks.StochasticProcessVector___bool__(self)

    def __len__(self):
        r"""__len__(StochasticProcessVector self) -> std::vector< ext::shared_ptr< StochasticProcess > >::size_type"""
        return _quantlib_risks.StochasticProcessVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(StochasticProcessVector self, std::vector< ext::shared_ptr< StochasticProcess > >::difference_type i, std::vector< ext::shared_ptr< StochasticProcess > >::difference_type j) -> StochasticProcessVector"""
        return _quantlib_risks.StochasticProcessVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(StochasticProcessVector self, std::vector< ext::shared_ptr< StochasticProcess > >::difference_type i, std::vector< ext::shared_ptr< StochasticProcess > >::difference_type j)
        __setslice__(StochasticProcessVector self, std::vector< ext::shared_ptr< StochasticProcess > >::difference_type i, std::vector< ext::shared_ptr< StochasticProcess > >::difference_type j, StochasticProcessVector v)
        """
        return _quantlib_risks.StochasticProcessVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(StochasticProcessVector self, std::vector< ext::shared_ptr< StochasticProcess > >::difference_type i, std::vector< ext::shared_ptr< StochasticProcess > >::difference_type j)"""
        return _quantlib_risks.StochasticProcessVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(StochasticProcessVector self, std::vector< ext::shared_ptr< StochasticProcess > >::difference_type i)
        __delitem__(StochasticProcessVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.StochasticProcessVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(StochasticProcessVector self, SWIGPY_SLICEOBJECT * slice) -> StochasticProcessVector
        __getitem__(StochasticProcessVector self, std::vector< ext::shared_ptr< StochasticProcess > >::difference_type i) -> std::vector< ext::shared_ptr< StochasticProcess > >::value_type const &
        """
        return _quantlib_risks.StochasticProcessVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(StochasticProcessVector self, SWIGPY_SLICEOBJECT * slice, StochasticProcessVector v)
        __setitem__(StochasticProcessVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(StochasticProcessVector self, std::vector< ext::shared_ptr< StochasticProcess > >::difference_type i, std::vector< ext::shared_ptr< StochasticProcess > >::value_type const & x)
        """
        return _quantlib_risks.StochasticProcessVector___setitem__(self, *args)

    def pop(self):
        r"""pop(StochasticProcessVector self) -> std::vector< ext::shared_ptr< StochasticProcess > >::value_type"""
        return _quantlib_risks.StochasticProcessVector_pop(self)

    def append(self, x):
        r"""append(StochasticProcessVector self, std::vector< ext::shared_ptr< StochasticProcess > >::value_type const & x)"""
        return _quantlib_risks.StochasticProcessVector_append(self, x)

    def empty(self):
        r"""empty(StochasticProcessVector self) -> bool"""
        return _quantlib_risks.StochasticProcessVector_empty(self)

    def size(self):
        r"""size(StochasticProcessVector self) -> std::vector< ext::shared_ptr< StochasticProcess > >::size_type"""
        return _quantlib_risks.StochasticProcessVector_size(self)

    def swap(self, v):
        r"""swap(StochasticProcessVector self, StochasticProcessVector v)"""
        return _quantlib_risks.StochasticProcessVector_swap(self, v)

    def begin(self):
        r"""begin(StochasticProcessVector self) -> std::vector< ext::shared_ptr< StochasticProcess > >::iterator"""
        return _quantlib_risks.StochasticProcessVector_begin(self)

    def end(self):
        r"""end(StochasticProcessVector self) -> std::vector< ext::shared_ptr< StochasticProcess > >::iterator"""
        return _quantlib_risks.StochasticProcessVector_end(self)

    def rbegin(self):
        r"""rbegin(StochasticProcessVector self) -> std::vector< ext::shared_ptr< StochasticProcess > >::reverse_iterator"""
        return _quantlib_risks.StochasticProcessVector_rbegin(self)

    def rend(self):
        r"""rend(StochasticProcessVector self) -> std::vector< ext::shared_ptr< StochasticProcess > >::reverse_iterator"""
        return _quantlib_risks.StochasticProcessVector_rend(self)

    def clear(self):
        r"""clear(StochasticProcessVector self)"""
        return _quantlib_risks.StochasticProcessVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(StochasticProcessVector self) -> std::vector< ext::shared_ptr< StochasticProcess > >::allocator_type"""
        return _quantlib_risks.StochasticProcessVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(StochasticProcessVector self)"""
        return _quantlib_risks.StochasticProcessVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(StochasticProcessVector self, std::vector< ext::shared_ptr< StochasticProcess > >::iterator pos) -> std::vector< ext::shared_ptr< StochasticProcess > >::iterator
        erase(StochasticProcessVector self, std::vector< ext::shared_ptr< StochasticProcess > >::iterator first, std::vector< ext::shared_ptr< StochasticProcess > >::iterator last) -> std::vector< ext::shared_ptr< StochasticProcess > >::iterator
        """
        return _quantlib_risks.StochasticProcessVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(StochasticProcessVector self) -> StochasticProcessVector
        __init__(StochasticProcessVector self, StochasticProcessVector other) -> StochasticProcessVector
        __init__(StochasticProcessVector self, std::vector< ext::shared_ptr< StochasticProcess > >::size_type size) -> StochasticProcessVector
        __init__(StochasticProcessVector self, std::vector< ext::shared_ptr< StochasticProcess > >::size_type size, std::vector< ext::shared_ptr< StochasticProcess > >::value_type const & value) -> StochasticProcessVector
        """
        _quantlib_risks.StochasticProcessVector_swiginit(self, _quantlib_risks.new_StochasticProcessVector(*args))

    def push_back(self, x):
        r"""push_back(StochasticProcessVector self, std::vector< ext::shared_ptr< StochasticProcess > >::value_type const & x)"""
        return _quantlib_risks.StochasticProcessVector_push_back(self, x)

    def front(self):
        r"""front(StochasticProcessVector self) -> std::vector< ext::shared_ptr< StochasticProcess > >::value_type const &"""
        return _quantlib_risks.StochasticProcessVector_front(self)

    def back(self):
        r"""back(StochasticProcessVector self) -> std::vector< ext::shared_ptr< StochasticProcess > >::value_type const &"""
        return _quantlib_risks.StochasticProcessVector_back(self)

    def assign(self, n, x):
        r"""assign(StochasticProcessVector self, std::vector< ext::shared_ptr< StochasticProcess > >::size_type n, std::vector< ext::shared_ptr< StochasticProcess > >::value_type const & x)"""
        return _quantlib_risks.StochasticProcessVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(StochasticProcessVector self, std::vector< ext::shared_ptr< StochasticProcess > >::size_type new_size)
        resize(StochasticProcessVector self, std::vector< ext::shared_ptr< StochasticProcess > >::size_type new_size, std::vector< ext::shared_ptr< StochasticProcess > >::value_type const & x)
        """
        return _quantlib_risks.StochasticProcessVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(StochasticProcessVector self, std::vector< ext::shared_ptr< StochasticProcess > >::iterator pos, std::vector< ext::shared_ptr< StochasticProcess > >::value_type const & x) -> std::vector< ext::shared_ptr< StochasticProcess > >::iterator
        insert(StochasticProcessVector self, std::vector< ext::shared_ptr< StochasticProcess > >::iterator pos, std::vector< ext::shared_ptr< StochasticProcess > >::size_type n, std::vector< ext::shared_ptr< StochasticProcess > >::value_type const & x)
        """
        return _quantlib_risks.StochasticProcessVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(StochasticProcessVector self, std::vector< ext::shared_ptr< StochasticProcess > >::size_type n)"""
        return _quantlib_risks.StochasticProcessVector_reserve(self, n)

    def capacity(self):
        r"""capacity(StochasticProcessVector self) -> std::vector< ext::shared_ptr< StochasticProcess > >::size_type"""
        return _quantlib_risks.StochasticProcessVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_StochasticProcessVector

# Register StochasticProcessVector in _quantlib_risks:
_quantlib_risks.StochasticProcessVector_swigregister(StochasticProcessVector)
class StochasticProcess1D(StochasticProcess):
    r"""Proxy of C++ StochasticProcess1D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def x0(self):
        r"""x0(StochasticProcess1D self) -> Real"""
        return _quantlib_risks.StochasticProcess1D_x0(self)

    def drift(self, t, x):
        r"""drift(StochasticProcess1D self, Time t, Real x) -> Real"""
        return _quantlib_risks.StochasticProcess1D_drift(self, t, x)

    def diffusion(self, t, x):
        r"""diffusion(StochasticProcess1D self, Time t, Real x) -> Real"""
        return _quantlib_risks.StochasticProcess1D_diffusion(self, t, x)

    def expectation(self, t0, x0, dt):
        r"""expectation(StochasticProcess1D self, Time t0, Real x0, Time dt) -> Real"""
        return _quantlib_risks.StochasticProcess1D_expectation(self, t0, x0, dt)

    def stdDeviation(self, t0, x0, dt):
        r"""stdDeviation(StochasticProcess1D self, Time t0, Real x0, Time dt) -> Real"""
        return _quantlib_risks.StochasticProcess1D_stdDeviation(self, t0, x0, dt)

    def variance(self, t0, x0, dt):
        r"""variance(StochasticProcess1D self, Time t0, Real x0, Time dt) -> Real"""
        return _quantlib_risks.StochasticProcess1D_variance(self, t0, x0, dt)

    def evolve(self, t0, x0, dt, dw):
        r"""evolve(StochasticProcess1D self, Time t0, Real x0, Time dt, Real dw) -> Real"""
        return _quantlib_risks.StochasticProcess1D_evolve(self, t0, x0, dt, dw)

    def apply(self, x0, dx):
        r"""apply(StochasticProcess1D self, Real x0, Real dx) -> Real"""
        return _quantlib_risks.StochasticProcess1D_apply(self, x0, dx)
    __swig_destroy__ = _quantlib_risks.delete_StochasticProcess1D

# Register StochasticProcess1D in _quantlib_risks:
_quantlib_risks.StochasticProcess1D_swigregister(StochasticProcess1D)
class StochasticProcess1DVector(object):
    r"""Proxy of C++ std::vector< ext::shared_ptr< StochasticProcess1D > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(StochasticProcess1DVector self) -> SwigPyIterator"""
        return _quantlib_risks.StochasticProcess1DVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(StochasticProcess1DVector self) -> bool"""
        return _quantlib_risks.StochasticProcess1DVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(StochasticProcess1DVector self) -> bool"""
        return _quantlib_risks.StochasticProcess1DVector___bool__(self)

    def __len__(self):
        r"""__len__(StochasticProcess1DVector self) -> std::vector< ext::shared_ptr< StochasticProcess1D > >::size_type"""
        return _quantlib_risks.StochasticProcess1DVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(StochasticProcess1DVector self, std::vector< ext::shared_ptr< StochasticProcess1D > >::difference_type i, std::vector< ext::shared_ptr< StochasticProcess1D > >::difference_type j) -> StochasticProcess1DVector"""
        return _quantlib_risks.StochasticProcess1DVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(StochasticProcess1DVector self, std::vector< ext::shared_ptr< StochasticProcess1D > >::difference_type i, std::vector< ext::shared_ptr< StochasticProcess1D > >::difference_type j)
        __setslice__(StochasticProcess1DVector self, std::vector< ext::shared_ptr< StochasticProcess1D > >::difference_type i, std::vector< ext::shared_ptr< StochasticProcess1D > >::difference_type j, StochasticProcess1DVector v)
        """
        return _quantlib_risks.StochasticProcess1DVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(StochasticProcess1DVector self, std::vector< ext::shared_ptr< StochasticProcess1D > >::difference_type i, std::vector< ext::shared_ptr< StochasticProcess1D > >::difference_type j)"""
        return _quantlib_risks.StochasticProcess1DVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(StochasticProcess1DVector self, std::vector< ext::shared_ptr< StochasticProcess1D > >::difference_type i)
        __delitem__(StochasticProcess1DVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.StochasticProcess1DVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(StochasticProcess1DVector self, SWIGPY_SLICEOBJECT * slice) -> StochasticProcess1DVector
        __getitem__(StochasticProcess1DVector self, std::vector< ext::shared_ptr< StochasticProcess1D > >::difference_type i) -> std::vector< ext::shared_ptr< StochasticProcess1D > >::value_type const &
        """
        return _quantlib_risks.StochasticProcess1DVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(StochasticProcess1DVector self, SWIGPY_SLICEOBJECT * slice, StochasticProcess1DVector v)
        __setitem__(StochasticProcess1DVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(StochasticProcess1DVector self, std::vector< ext::shared_ptr< StochasticProcess1D > >::difference_type i, std::vector< ext::shared_ptr< StochasticProcess1D > >::value_type const & x)
        """
        return _quantlib_risks.StochasticProcess1DVector___setitem__(self, *args)

    def pop(self):
        r"""pop(StochasticProcess1DVector self) -> std::vector< ext::shared_ptr< StochasticProcess1D > >::value_type"""
        return _quantlib_risks.StochasticProcess1DVector_pop(self)

    def append(self, x):
        r"""append(StochasticProcess1DVector self, std::vector< ext::shared_ptr< StochasticProcess1D > >::value_type const & x)"""
        return _quantlib_risks.StochasticProcess1DVector_append(self, x)

    def empty(self):
        r"""empty(StochasticProcess1DVector self) -> bool"""
        return _quantlib_risks.StochasticProcess1DVector_empty(self)

    def size(self):
        r"""size(StochasticProcess1DVector self) -> std::vector< ext::shared_ptr< StochasticProcess1D > >::size_type"""
        return _quantlib_risks.StochasticProcess1DVector_size(self)

    def swap(self, v):
        r"""swap(StochasticProcess1DVector self, StochasticProcess1DVector v)"""
        return _quantlib_risks.StochasticProcess1DVector_swap(self, v)

    def begin(self):
        r"""begin(StochasticProcess1DVector self) -> std::vector< ext::shared_ptr< StochasticProcess1D > >::iterator"""
        return _quantlib_risks.StochasticProcess1DVector_begin(self)

    def end(self):
        r"""end(StochasticProcess1DVector self) -> std::vector< ext::shared_ptr< StochasticProcess1D > >::iterator"""
        return _quantlib_risks.StochasticProcess1DVector_end(self)

    def rbegin(self):
        r"""rbegin(StochasticProcess1DVector self) -> std::vector< ext::shared_ptr< StochasticProcess1D > >::reverse_iterator"""
        return _quantlib_risks.StochasticProcess1DVector_rbegin(self)

    def rend(self):
        r"""rend(StochasticProcess1DVector self) -> std::vector< ext::shared_ptr< StochasticProcess1D > >::reverse_iterator"""
        return _quantlib_risks.StochasticProcess1DVector_rend(self)

    def clear(self):
        r"""clear(StochasticProcess1DVector self)"""
        return _quantlib_risks.StochasticProcess1DVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(StochasticProcess1DVector self) -> std::vector< ext::shared_ptr< StochasticProcess1D > >::allocator_type"""
        return _quantlib_risks.StochasticProcess1DVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(StochasticProcess1DVector self)"""
        return _quantlib_risks.StochasticProcess1DVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(StochasticProcess1DVector self, std::vector< ext::shared_ptr< StochasticProcess1D > >::iterator pos) -> std::vector< ext::shared_ptr< StochasticProcess1D > >::iterator
        erase(StochasticProcess1DVector self, std::vector< ext::shared_ptr< StochasticProcess1D > >::iterator first, std::vector< ext::shared_ptr< StochasticProcess1D > >::iterator last) -> std::vector< ext::shared_ptr< StochasticProcess1D > >::iterator
        """
        return _quantlib_risks.StochasticProcess1DVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(StochasticProcess1DVector self) -> StochasticProcess1DVector
        __init__(StochasticProcess1DVector self, StochasticProcess1DVector other) -> StochasticProcess1DVector
        __init__(StochasticProcess1DVector self, std::vector< ext::shared_ptr< StochasticProcess1D > >::size_type size) -> StochasticProcess1DVector
        __init__(StochasticProcess1DVector self, std::vector< ext::shared_ptr< StochasticProcess1D > >::size_type size, std::vector< ext::shared_ptr< StochasticProcess1D > >::value_type const & value) -> StochasticProcess1DVector
        """
        _quantlib_risks.StochasticProcess1DVector_swiginit(self, _quantlib_risks.new_StochasticProcess1DVector(*args))

    def push_back(self, x):
        r"""push_back(StochasticProcess1DVector self, std::vector< ext::shared_ptr< StochasticProcess1D > >::value_type const & x)"""
        return _quantlib_risks.StochasticProcess1DVector_push_back(self, x)

    def front(self):
        r"""front(StochasticProcess1DVector self) -> std::vector< ext::shared_ptr< StochasticProcess1D > >::value_type const &"""
        return _quantlib_risks.StochasticProcess1DVector_front(self)

    def back(self):
        r"""back(StochasticProcess1DVector self) -> std::vector< ext::shared_ptr< StochasticProcess1D > >::value_type const &"""
        return _quantlib_risks.StochasticProcess1DVector_back(self)

    def assign(self, n, x):
        r"""assign(StochasticProcess1DVector self, std::vector< ext::shared_ptr< StochasticProcess1D > >::size_type n, std::vector< ext::shared_ptr< StochasticProcess1D > >::value_type const & x)"""
        return _quantlib_risks.StochasticProcess1DVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(StochasticProcess1DVector self, std::vector< ext::shared_ptr< StochasticProcess1D > >::size_type new_size)
        resize(StochasticProcess1DVector self, std::vector< ext::shared_ptr< StochasticProcess1D > >::size_type new_size, std::vector< ext::shared_ptr< StochasticProcess1D > >::value_type const & x)
        """
        return _quantlib_risks.StochasticProcess1DVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(StochasticProcess1DVector self, std::vector< ext::shared_ptr< StochasticProcess1D > >::iterator pos, std::vector< ext::shared_ptr< StochasticProcess1D > >::value_type const & x) -> std::vector< ext::shared_ptr< StochasticProcess1D > >::iterator
        insert(StochasticProcess1DVector self, std::vector< ext::shared_ptr< StochasticProcess1D > >::iterator pos, std::vector< ext::shared_ptr< StochasticProcess1D > >::size_type n, std::vector< ext::shared_ptr< StochasticProcess1D > >::value_type const & x)
        """
        return _quantlib_risks.StochasticProcess1DVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(StochasticProcess1DVector self, std::vector< ext::shared_ptr< StochasticProcess1D > >::size_type n)"""
        return _quantlib_risks.StochasticProcess1DVector_reserve(self, n)

    def capacity(self):
        r"""capacity(StochasticProcess1DVector self) -> std::vector< ext::shared_ptr< StochasticProcess1D > >::size_type"""
        return _quantlib_risks.StochasticProcess1DVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_StochasticProcess1DVector

# Register StochasticProcess1DVector in _quantlib_risks:
_quantlib_risks.StochasticProcess1DVector_swigregister(StochasticProcess1DVector)
class GeneralizedBlackScholesProcess(StochasticProcess1D):
    r"""Proxy of C++ GeneralizedBlackScholesProcess class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GeneralizedBlackScholesProcess self, QuoteHandle s0, YieldTermStructureHandle dividendTS, YieldTermStructureHandle riskFreeTS, BlackVolTermStructureHandle volTS) -> GeneralizedBlackScholesProcess
        __init__(GeneralizedBlackScholesProcess self, QuoteHandle x0, YieldTermStructureHandle dividendTS, YieldTermStructureHandle riskFreeTS, BlackVolTermStructureHandle blackVolTS, LocalVolTermStructureHandle localVolTS) -> GeneralizedBlackScholesProcess
        """
        _quantlib_risks.GeneralizedBlackScholesProcess_swiginit(self, _quantlib_risks.new_GeneralizedBlackScholesProcess(*args))

    def stateVariable(self):
        r"""stateVariable(GeneralizedBlackScholesProcess self) -> QuoteHandle"""
        return _quantlib_risks.GeneralizedBlackScholesProcess_stateVariable(self)

    def dividendYield(self):
        r"""dividendYield(GeneralizedBlackScholesProcess self) -> YieldTermStructureHandle"""
        return _quantlib_risks.GeneralizedBlackScholesProcess_dividendYield(self)

    def riskFreeRate(self):
        r"""riskFreeRate(GeneralizedBlackScholesProcess self) -> YieldTermStructureHandle"""
        return _quantlib_risks.GeneralizedBlackScholesProcess_riskFreeRate(self)

    def blackVolatility(self):
        r"""blackVolatility(GeneralizedBlackScholesProcess self) -> BlackVolTermStructureHandle"""
        return _quantlib_risks.GeneralizedBlackScholesProcess_blackVolatility(self)

    def localVolatility(self):
        r"""localVolatility(GeneralizedBlackScholesProcess self) -> LocalVolTermStructureHandle"""
        return _quantlib_risks.GeneralizedBlackScholesProcess_localVolatility(self)
    __swig_destroy__ = _quantlib_risks.delete_GeneralizedBlackScholesProcess

# Register GeneralizedBlackScholesProcess in _quantlib_risks:
_quantlib_risks.GeneralizedBlackScholesProcess_swigregister(GeneralizedBlackScholesProcess)
class BlackScholesProcess(GeneralizedBlackScholesProcess):
    r"""Proxy of C++ BlackScholesProcess class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s0, riskFreeTS, volTS):
        r"""__init__(BlackScholesProcess self, QuoteHandle s0, YieldTermStructureHandle riskFreeTS, BlackVolTermStructureHandle volTS) -> BlackScholesProcess"""
        _quantlib_risks.BlackScholesProcess_swiginit(self, _quantlib_risks.new_BlackScholesProcess(s0, riskFreeTS, volTS))
    __swig_destroy__ = _quantlib_risks.delete_BlackScholesProcess

# Register BlackScholesProcess in _quantlib_risks:
_quantlib_risks.BlackScholesProcess_swigregister(BlackScholesProcess)
class BlackScholesMertonProcess(GeneralizedBlackScholesProcess):
    r"""Proxy of C++ BlackScholesMertonProcess class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s0, dividendTS, riskFreeTS, volTS):
        r"""__init__(BlackScholesMertonProcess self, QuoteHandle s0, YieldTermStructureHandle dividendTS, YieldTermStructureHandle riskFreeTS, BlackVolTermStructureHandle volTS) -> BlackScholesMertonProcess"""
        _quantlib_risks.BlackScholesMertonProcess_swiginit(self, _quantlib_risks.new_BlackScholesMertonProcess(s0, dividendTS, riskFreeTS, volTS))
    __swig_destroy__ = _quantlib_risks.delete_BlackScholesMertonProcess

# Register BlackScholesMertonProcess in _quantlib_risks:
_quantlib_risks.BlackScholesMertonProcess_swigregister(BlackScholesMertonProcess)
class BlackProcess(GeneralizedBlackScholesProcess):
    r"""Proxy of C++ BlackProcess class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s0, riskFreeTS, volTS):
        r"""__init__(BlackProcess self, QuoteHandle s0, YieldTermStructureHandle riskFreeTS, BlackVolTermStructureHandle volTS) -> BlackProcess"""
        _quantlib_risks.BlackProcess_swiginit(self, _quantlib_risks.new_BlackProcess(s0, riskFreeTS, volTS))
    __swig_destroy__ = _quantlib_risks.delete_BlackProcess

# Register BlackProcess in _quantlib_risks:
_quantlib_risks.BlackProcess_swigregister(BlackProcess)
class GarmanKohlagenProcess(GeneralizedBlackScholesProcess):
    r"""Proxy of C++ GarmanKohlagenProcess class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s0, foreignRiskFreeTS, domesticRiskFreeTS, volTS):
        r"""__init__(GarmanKohlagenProcess self, QuoteHandle s0, YieldTermStructureHandle foreignRiskFreeTS, YieldTermStructureHandle domesticRiskFreeTS, BlackVolTermStructureHandle volTS) -> GarmanKohlagenProcess"""
        _quantlib_risks.GarmanKohlagenProcess_swiginit(self, _quantlib_risks.new_GarmanKohlagenProcess(s0, foreignRiskFreeTS, domesticRiskFreeTS, volTS))
    __swig_destroy__ = _quantlib_risks.delete_GarmanKohlagenProcess

# Register GarmanKohlagenProcess in _quantlib_risks:
_quantlib_risks.GarmanKohlagenProcess_swigregister(GarmanKohlagenProcess)
class Merton76Process(StochasticProcess1D):
    r"""Proxy of C++ Merton76Process class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, stateVariable, dividendTS, riskFreeTS, volTS, jumpIntensity, meanLogJump, jumpVolatility):
        r"""__init__(Merton76Process self, QuoteHandle stateVariable, YieldTermStructureHandle dividendTS, YieldTermStructureHandle riskFreeTS, BlackVolTermStructureHandle volTS, QuoteHandle jumpIntensity, QuoteHandle meanLogJump, QuoteHandle jumpVolatility) -> Merton76Process"""
        _quantlib_risks.Merton76Process_swiginit(self, _quantlib_risks.new_Merton76Process(stateVariable, dividendTS, riskFreeTS, volTS, jumpIntensity, meanLogJump, jumpVolatility))
    __swig_destroy__ = _quantlib_risks.delete_Merton76Process

# Register Merton76Process in _quantlib_risks:
_quantlib_risks.Merton76Process_swigregister(Merton76Process)
class StochasticProcessArray(StochasticProcess):
    r"""Proxy of C++ StochasticProcessArray class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, array, correlation):
        r"""__init__(StochasticProcessArray self, StochasticProcess1DVector array, Matrix correlation) -> StochasticProcessArray"""
        _quantlib_risks.StochasticProcessArray_swiginit(self, _quantlib_risks.new_StochasticProcessArray(array, correlation))
    __swig_destroy__ = _quantlib_risks.delete_StochasticProcessArray

# Register StochasticProcessArray in _quantlib_risks:
_quantlib_risks.StochasticProcessArray_swigregister(StochasticProcessArray)
class GeometricBrownianMotionProcess(StochasticProcess1D):
    r"""Proxy of C++ GeometricBrownianMotionProcess class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, initialValue, mu, sigma):
        r"""__init__(GeometricBrownianMotionProcess self, Real initialValue, Real mu, Real sigma) -> GeometricBrownianMotionProcess"""
        _quantlib_risks.GeometricBrownianMotionProcess_swiginit(self, _quantlib_risks.new_GeometricBrownianMotionProcess(initialValue, mu, sigma))
    __swig_destroy__ = _quantlib_risks.delete_GeometricBrownianMotionProcess

# Register GeometricBrownianMotionProcess in _quantlib_risks:
_quantlib_risks.GeometricBrownianMotionProcess_swigregister(GeometricBrownianMotionProcess)
class VarianceGammaProcess(StochasticProcess1D):
    r"""Proxy of C++ VarianceGammaProcess class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s0, dividendYield, riskFreeRate, sigma, nu, theta):
        r"""__init__(VarianceGammaProcess self, QuoteHandle s0, YieldTermStructureHandle dividendYield, YieldTermStructureHandle riskFreeRate, Real sigma, Real nu, Real theta) -> VarianceGammaProcess"""
        _quantlib_risks.VarianceGammaProcess_swiginit(self, _quantlib_risks.new_VarianceGammaProcess(s0, dividendYield, riskFreeRate, sigma, nu, theta))
    __swig_destroy__ = _quantlib_risks.delete_VarianceGammaProcess

# Register VarianceGammaProcess in _quantlib_risks:
_quantlib_risks.VarianceGammaProcess_swigregister(VarianceGammaProcess)
class HestonProcess(StochasticProcess):
    r"""Proxy of C++ HestonProcess class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PartialTruncation = _quantlib_risks.HestonProcess_PartialTruncation
    
    FullTruncation = _quantlib_risks.HestonProcess_FullTruncation
    
    Reflection = _quantlib_risks.HestonProcess_Reflection
    
    NonCentralChiSquareVariance = _quantlib_risks.HestonProcess_NonCentralChiSquareVariance
    
    QuadraticExponential = _quantlib_risks.HestonProcess_QuadraticExponential
    
    QuadraticExponentialMartingale = _quantlib_risks.HestonProcess_QuadraticExponentialMartingale
    
    BroadieKayaExactSchemeLobatto = _quantlib_risks.HestonProcess_BroadieKayaExactSchemeLobatto
    
    BroadieKayaExactSchemeLaguerre = _quantlib_risks.HestonProcess_BroadieKayaExactSchemeLaguerre
    
    BroadieKayaExactSchemeTrapezoidal = _quantlib_risks.HestonProcess_BroadieKayaExactSchemeTrapezoidal
    

    def __init__(self, *args):
        r"""__init__(HestonProcess self, YieldTermStructureHandle riskFreeTS, YieldTermStructureHandle dividendTS, QuoteHandle s0, Real v0, Real kappa, Real theta, Real sigma, Real rho, HestonProcess::Discretization d=QuadraticExponentialMartingale) -> HestonProcess"""
        _quantlib_risks.HestonProcess_swiginit(self, _quantlib_risks.new_HestonProcess(*args))

    def s0(self):
        r"""s0(HestonProcess self) -> QuoteHandle"""
        return _quantlib_risks.HestonProcess_s0(self)

    def dividendYield(self):
        r"""dividendYield(HestonProcess self) -> YieldTermStructureHandle"""
        return _quantlib_risks.HestonProcess_dividendYield(self)

    def riskFreeRate(self):
        r"""riskFreeRate(HestonProcess self) -> YieldTermStructureHandle"""
        return _quantlib_risks.HestonProcess_riskFreeRate(self)
    __swig_destroy__ = _quantlib_risks.delete_HestonProcess

# Register HestonProcess in _quantlib_risks:
_quantlib_risks.HestonProcess_swigregister(HestonProcess)
class BatesProcess(HestonProcess):
    r"""Proxy of C++ BatesProcess class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, riskFreeRate, dividendYield, s0, v0, kappa, theta, sigma, rho, lambda_parameter, nu, delta):
        r"""__init__(BatesProcess self, YieldTermStructureHandle riskFreeRate, YieldTermStructureHandle dividendYield, QuoteHandle s0, Real v0, Real kappa, Real theta, Real sigma, Real rho, Real lambda_parameter, Real nu, Real delta) -> BatesProcess"""
        _quantlib_risks.BatesProcess_swiginit(self, _quantlib_risks.new_BatesProcess(riskFreeRate, dividendYield, s0, v0, kappa, theta, sigma, rho, lambda_parameter, nu, delta))
    __swig_destroy__ = _quantlib_risks.delete_BatesProcess

# Register BatesProcess in _quantlib_risks:
_quantlib_risks.BatesProcess_swigregister(BatesProcess)
class HullWhiteProcess(StochasticProcess1D):
    r"""Proxy of C++ HullWhiteProcess class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, riskFreeTS, a, sigma):
        r"""__init__(HullWhiteProcess self, YieldTermStructureHandle riskFreeTS, Real a, Real sigma) -> HullWhiteProcess"""
        _quantlib_risks.HullWhiteProcess_swiginit(self, _quantlib_risks.new_HullWhiteProcess(riskFreeTS, a, sigma))
    __swig_destroy__ = _quantlib_risks.delete_HullWhiteProcess

# Register HullWhiteProcess in _quantlib_risks:
_quantlib_risks.HullWhiteProcess_swigregister(HullWhiteProcess)
class HullWhiteForwardProcess(StochasticProcess1D):
    r"""Proxy of C++ HullWhiteForwardProcess class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, riskFreeTS, a, sigma):
        r"""__init__(HullWhiteForwardProcess self, YieldTermStructureHandle riskFreeTS, Real a, Real sigma) -> HullWhiteForwardProcess"""
        _quantlib_risks.HullWhiteForwardProcess_swiginit(self, _quantlib_risks.new_HullWhiteForwardProcess(riskFreeTS, a, sigma))

    def alpha(self, t):
        r"""alpha(HullWhiteForwardProcess self, Time t) -> Real"""
        return _quantlib_risks.HullWhiteForwardProcess_alpha(self, t)

    def M_T(self, s, t, T):
        r"""M_T(HullWhiteForwardProcess self, Real s, Real t, Real T) -> Real"""
        return _quantlib_risks.HullWhiteForwardProcess_M_T(self, s, t, T)

    def B(self, t, T):
        r"""B(HullWhiteForwardProcess self, Time t, Time T) -> Real"""
        return _quantlib_risks.HullWhiteForwardProcess_B(self, t, T)

    def setForwardMeasureTime(self, t):
        r"""setForwardMeasureTime(HullWhiteForwardProcess self, Time t)"""
        return _quantlib_risks.HullWhiteForwardProcess_setForwardMeasureTime(self, t)
    __swig_destroy__ = _quantlib_risks.delete_HullWhiteForwardProcess

# Register HullWhiteForwardProcess in _quantlib_risks:
_quantlib_risks.HullWhiteForwardProcess_swigregister(HullWhiteForwardProcess)
class G2Process(StochasticProcess):
    r"""Proxy of C++ G2Process class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, a, sigma, b, eta, rho):
        r"""__init__(G2Process self, Real a, Real sigma, Real b, Real eta, Real rho) -> G2Process"""
        _quantlib_risks.G2Process_swiginit(self, _quantlib_risks.new_G2Process(a, sigma, b, eta, rho))
    __swig_destroy__ = _quantlib_risks.delete_G2Process

# Register G2Process in _quantlib_risks:
_quantlib_risks.G2Process_swigregister(G2Process)
class G2ForwardProcess(StochasticProcess):
    r"""Proxy of C++ G2ForwardProcess class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, a, sigma, b, eta, rho):
        r"""__init__(G2ForwardProcess self, Real a, Real sigma, Real b, Real eta, Real rho) -> G2ForwardProcess"""
        _quantlib_risks.G2ForwardProcess_swiginit(self, _quantlib_risks.new_G2ForwardProcess(a, sigma, b, eta, rho))

    def setForwardMeasureTime(self, t):
        r"""setForwardMeasureTime(G2ForwardProcess self, Time t)"""
        return _quantlib_risks.G2ForwardProcess_setForwardMeasureTime(self, t)
    __swig_destroy__ = _quantlib_risks.delete_G2ForwardProcess

# Register G2ForwardProcess in _quantlib_risks:
_quantlib_risks.G2ForwardProcess_swigregister(G2ForwardProcess)
class GsrProcess(StochasticProcess1D):
    r"""Proxy of C++ GsrProcess class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, times, vols, reversions, T=60.0):
        r"""__init__(GsrProcess self, Array times, Array vols, Array reversions, Real const T=60.0) -> GsrProcess"""
        _quantlib_risks.GsrProcess_swiginit(self, _quantlib_risks.new_GsrProcess(times, vols, reversions, T))

    def sigma(self, t):
        r"""sigma(GsrProcess self, Time t) -> Real"""
        return _quantlib_risks.GsrProcess_sigma(self, t)

    def reversion(self, t):
        r"""reversion(GsrProcess self, Time t) -> Real"""
        return _quantlib_risks.GsrProcess_reversion(self, t)

    def y(self, t):
        r"""y(GsrProcess self, Time t) -> Real"""
        return _quantlib_risks.GsrProcess_y(self, t)

    def G(self, t, T, x):
        r"""G(GsrProcess self, Time t, Time T, Real x) -> Real"""
        return _quantlib_risks.GsrProcess_G(self, t, T, x)

    def setForwardMeasureTime(self, t):
        r"""setForwardMeasureTime(GsrProcess self, Time t)"""
        return _quantlib_risks.GsrProcess_setForwardMeasureTime(self, t)
    __swig_destroy__ = _quantlib_risks.delete_GsrProcess

# Register GsrProcess in _quantlib_risks:
_quantlib_risks.GsrProcess_swigregister(GsrProcess)

def as_gsr_process(proc):
    r"""as_gsr_process(ext::shared_ptr< StochasticProcess > const & proc) -> ext::shared_ptr< GsrProcess > const"""
    return _quantlib_risks.as_gsr_process(proc)
class OrnsteinUhlenbeckProcess(StochasticProcess1D):
    r"""Proxy of C++ OrnsteinUhlenbeckProcess class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, speed, vol, x0=0.0, level=0.0):
        r"""__init__(OrnsteinUhlenbeckProcess self, Real speed, Volatility vol, Real x0=0.0, Real level=0.0) -> OrnsteinUhlenbeckProcess"""
        _quantlib_risks.OrnsteinUhlenbeckProcess_swiginit(self, _quantlib_risks.new_OrnsteinUhlenbeckProcess(speed, vol, x0, level))

    def speed(self):
        r"""speed(OrnsteinUhlenbeckProcess self) -> Real"""
        return _quantlib_risks.OrnsteinUhlenbeckProcess_speed(self)

    def volatility(self):
        r"""volatility(OrnsteinUhlenbeckProcess self) -> Real"""
        return _quantlib_risks.OrnsteinUhlenbeckProcess_volatility(self)

    def level(self):
        r"""level(OrnsteinUhlenbeckProcess self) -> Real"""
        return _quantlib_risks.OrnsteinUhlenbeckProcess_level(self)
    __swig_destroy__ = _quantlib_risks.delete_OrnsteinUhlenbeckProcess

# Register OrnsteinUhlenbeckProcess in _quantlib_risks:
_quantlib_risks.OrnsteinUhlenbeckProcess_swigregister(OrnsteinUhlenbeckProcess)
class ExtendedOrnsteinUhlenbeckProcess(StochasticProcess1D):
    r"""Proxy of C++ ExtendedOrnsteinUhlenbeckProcess class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MidPoint = _quantlib_risks.ExtendedOrnsteinUhlenbeckProcess_MidPoint
    
    Trapezodial = _quantlib_risks.ExtendedOrnsteinUhlenbeckProcess_Trapezodial
    
    GaussLobatto = _quantlib_risks.ExtendedOrnsteinUhlenbeckProcess_GaussLobatto
    

    def __init__(self, *args):
        r"""
        __init__(ExtendedOrnsteinUhlenbeckProcess self, Real speed, Volatility sigma, Real x0, ext::function< Real (Real) > const & b, ExtendedOrnsteinUhlenbeckProcess::Discretization discretization=MidPoint, Real intEps=1e-4) -> ExtendedOrnsteinUhlenbeckProcess
        __init__(ExtendedOrnsteinUhlenbeckProcess self, Real speed, Volatility sigma, Real x0, PyObject * function, Real intEps=1e-4) -> ExtendedOrnsteinUhlenbeckProcess
        """
        _quantlib_risks.ExtendedOrnsteinUhlenbeckProcess_swiginit(self, _quantlib_risks.new_ExtendedOrnsteinUhlenbeckProcess(*args))
    __swig_destroy__ = _quantlib_risks.delete_ExtendedOrnsteinUhlenbeckProcess

# Register ExtendedOrnsteinUhlenbeckProcess in _quantlib_risks:
_quantlib_risks.ExtendedOrnsteinUhlenbeckProcess_swigregister(ExtendedOrnsteinUhlenbeckProcess)
class ExtOUWithJumpsProcess(StochasticProcess):
    r"""Proxy of C++ ExtOUWithJumpsProcess class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process, Y0, beta, jumpIntensity, eta):
        r"""__init__(ExtOUWithJumpsProcess self, ext::shared_ptr< ExtendedOrnsteinUhlenbeckProcess > const & process, Real Y0, Real beta, Real jumpIntensity, Real eta) -> ExtOUWithJumpsProcess"""
        _quantlib_risks.ExtOUWithJumpsProcess_swiginit(self, _quantlib_risks.new_ExtOUWithJumpsProcess(process, Y0, beta, jumpIntensity, eta))
    __swig_destroy__ = _quantlib_risks.delete_ExtOUWithJumpsProcess

# Register ExtOUWithJumpsProcess in _quantlib_risks:
_quantlib_risks.ExtOUWithJumpsProcess_swigregister(ExtOUWithJumpsProcess)
class KlugeExtOUProcess(StochasticProcess):
    r"""Proxy of C++ KlugeExtOUProcess class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rho, kluge, extOU):
        r"""__init__(KlugeExtOUProcess self, Real rho, ext::shared_ptr< ExtOUWithJumpsProcess > const & kluge, ext::shared_ptr< ExtendedOrnsteinUhlenbeckProcess > const & extOU) -> KlugeExtOUProcess"""
        _quantlib_risks.KlugeExtOUProcess_swiginit(self, _quantlib_risks.new_KlugeExtOUProcess(rho, kluge, extOU))
    __swig_destroy__ = _quantlib_risks.delete_KlugeExtOUProcess

# Register KlugeExtOUProcess in _quantlib_risks:
_quantlib_risks.KlugeExtOUProcess_swigregister(KlugeExtOUProcess)
class GJRGARCHProcess(StochasticProcess):
    r"""Proxy of C++ GJRGARCHProcess class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PartialTruncation = _quantlib_risks.GJRGARCHProcess_PartialTruncation
    
    FullTruncation = _quantlib_risks.GJRGARCHProcess_FullTruncation
    
    Reflection = _quantlib_risks.GJRGARCHProcess_Reflection
    

    def __init__(self, *args):
        r"""__init__(GJRGARCHProcess self, YieldTermStructureHandle riskFreeRate, YieldTermStructureHandle dividendYield, QuoteHandle s0, Real v0, Real omega, Real alpha, Real beta, Real gamma, Real lambda_parameter, Real daysPerYear=252.0, GJRGARCHProcess::Discretization d=FullTruncation) -> GJRGARCHProcess"""
        _quantlib_risks.GJRGARCHProcess_swiginit(self, _quantlib_risks.new_GJRGARCHProcess(*args))

    def s0(self):
        r"""s0(GJRGARCHProcess self) -> QuoteHandle"""
        return _quantlib_risks.GJRGARCHProcess_s0(self)

    def dividendYield(self):
        r"""dividendYield(GJRGARCHProcess self) -> YieldTermStructureHandle"""
        return _quantlib_risks.GJRGARCHProcess_dividendYield(self)

    def riskFreeRate(self):
        r"""riskFreeRate(GJRGARCHProcess self) -> YieldTermStructureHandle"""
        return _quantlib_risks.GJRGARCHProcess_riskFreeRate(self)
    __swig_destroy__ = _quantlib_risks.delete_GJRGARCHProcess

# Register GJRGARCHProcess in _quantlib_risks:
_quantlib_risks.GJRGARCHProcess_swigregister(GJRGARCHProcess)
class LazyObject(Observable):
    r"""Proxy of C++ LazyObject class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def recalculate(self):
        r"""recalculate(LazyObject self)"""
        return _quantlib_risks.LazyObject_recalculate(self)

    def freeze(self):
        r"""freeze(LazyObject self)"""
        return _quantlib_risks.LazyObject_freeze(self)

    def unfreeze(self):
        r"""unfreeze(LazyObject self)"""
        return _quantlib_risks.LazyObject_unfreeze(self)

    @staticmethod
    def forwardFirstNotificationOnly():
        r"""forwardFirstNotificationOnly()"""
        return _quantlib_risks.LazyObject_forwardFirstNotificationOnly()

    @staticmethod
    def alwaysForwardNotifications():
        r"""alwaysForwardNotifications()"""
        return _quantlib_risks.LazyObject_alwaysForwardNotifications()

    @staticmethod
    def forwardsAllNotifications():
        r"""forwardsAllNotifications() -> bool"""
        return _quantlib_risks.LazyObject_forwardsAllNotifications()
    __swig_destroy__ = _quantlib_risks.delete_LazyObject

# Register LazyObject in _quantlib_risks:
_quantlib_risks.LazyObject_swigregister(LazyObject)
class PricingEngine(Observable):
    r"""Proxy of C++ PricingEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _quantlib_risks.delete_PricingEngine

# Register PricingEngine in _quantlib_risks:
_quantlib_risks.PricingEngine_swigregister(PricingEngine)
class Instrument(LazyObject):
    r"""Proxy of C++ Instrument class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def NPV(self):
        r"""NPV(Instrument self) -> Real"""
        return _quantlib_risks.Instrument_NPV(self)

    def errorEstimate(self):
        r"""errorEstimate(Instrument self) -> Real"""
        return _quantlib_risks.Instrument_errorEstimate(self)

    def isExpired(self):
        r"""isExpired(Instrument self) -> bool"""
        return _quantlib_risks.Instrument_isExpired(self)

    def setPricingEngine(self, arg2):
        r"""setPricingEngine(Instrument self, ext::shared_ptr< PricingEngine > const & arg2)"""
        return _quantlib_risks.Instrument_setPricingEngine(self, arg2)
    __swig_destroy__ = _quantlib_risks.delete_Instrument

# Register Instrument in _quantlib_risks:
_quantlib_risks.Instrument_swigregister(Instrument)
class InstrumentVector(object):
    r"""Proxy of C++ std::vector< ext::shared_ptr< Instrument > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(InstrumentVector self) -> SwigPyIterator"""
        return _quantlib_risks.InstrumentVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(InstrumentVector self) -> bool"""
        return _quantlib_risks.InstrumentVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(InstrumentVector self) -> bool"""
        return _quantlib_risks.InstrumentVector___bool__(self)

    def __len__(self):
        r"""__len__(InstrumentVector self) -> std::vector< ext::shared_ptr< Instrument > >::size_type"""
        return _quantlib_risks.InstrumentVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(InstrumentVector self, std::vector< ext::shared_ptr< Instrument > >::difference_type i, std::vector< ext::shared_ptr< Instrument > >::difference_type j) -> InstrumentVector"""
        return _quantlib_risks.InstrumentVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(InstrumentVector self, std::vector< ext::shared_ptr< Instrument > >::difference_type i, std::vector< ext::shared_ptr< Instrument > >::difference_type j)
        __setslice__(InstrumentVector self, std::vector< ext::shared_ptr< Instrument > >::difference_type i, std::vector< ext::shared_ptr< Instrument > >::difference_type j, InstrumentVector v)
        """
        return _quantlib_risks.InstrumentVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(InstrumentVector self, std::vector< ext::shared_ptr< Instrument > >::difference_type i, std::vector< ext::shared_ptr< Instrument > >::difference_type j)"""
        return _quantlib_risks.InstrumentVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(InstrumentVector self, std::vector< ext::shared_ptr< Instrument > >::difference_type i)
        __delitem__(InstrumentVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.InstrumentVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(InstrumentVector self, SWIGPY_SLICEOBJECT * slice) -> InstrumentVector
        __getitem__(InstrumentVector self, std::vector< ext::shared_ptr< Instrument > >::difference_type i) -> std::vector< ext::shared_ptr< Instrument > >::value_type const &
        """
        return _quantlib_risks.InstrumentVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(InstrumentVector self, SWIGPY_SLICEOBJECT * slice, InstrumentVector v)
        __setitem__(InstrumentVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(InstrumentVector self, std::vector< ext::shared_ptr< Instrument > >::difference_type i, std::vector< ext::shared_ptr< Instrument > >::value_type const & x)
        """
        return _quantlib_risks.InstrumentVector___setitem__(self, *args)

    def pop(self):
        r"""pop(InstrumentVector self) -> std::vector< ext::shared_ptr< Instrument > >::value_type"""
        return _quantlib_risks.InstrumentVector_pop(self)

    def append(self, x):
        r"""append(InstrumentVector self, std::vector< ext::shared_ptr< Instrument > >::value_type const & x)"""
        return _quantlib_risks.InstrumentVector_append(self, x)

    def empty(self):
        r"""empty(InstrumentVector self) -> bool"""
        return _quantlib_risks.InstrumentVector_empty(self)

    def size(self):
        r"""size(InstrumentVector self) -> std::vector< ext::shared_ptr< Instrument > >::size_type"""
        return _quantlib_risks.InstrumentVector_size(self)

    def swap(self, v):
        r"""swap(InstrumentVector self, InstrumentVector v)"""
        return _quantlib_risks.InstrumentVector_swap(self, v)

    def begin(self):
        r"""begin(InstrumentVector self) -> std::vector< ext::shared_ptr< Instrument > >::iterator"""
        return _quantlib_risks.InstrumentVector_begin(self)

    def end(self):
        r"""end(InstrumentVector self) -> std::vector< ext::shared_ptr< Instrument > >::iterator"""
        return _quantlib_risks.InstrumentVector_end(self)

    def rbegin(self):
        r"""rbegin(InstrumentVector self) -> std::vector< ext::shared_ptr< Instrument > >::reverse_iterator"""
        return _quantlib_risks.InstrumentVector_rbegin(self)

    def rend(self):
        r"""rend(InstrumentVector self) -> std::vector< ext::shared_ptr< Instrument > >::reverse_iterator"""
        return _quantlib_risks.InstrumentVector_rend(self)

    def clear(self):
        r"""clear(InstrumentVector self)"""
        return _quantlib_risks.InstrumentVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(InstrumentVector self) -> std::vector< ext::shared_ptr< Instrument > >::allocator_type"""
        return _quantlib_risks.InstrumentVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(InstrumentVector self)"""
        return _quantlib_risks.InstrumentVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(InstrumentVector self, std::vector< ext::shared_ptr< Instrument > >::iterator pos) -> std::vector< ext::shared_ptr< Instrument > >::iterator
        erase(InstrumentVector self, std::vector< ext::shared_ptr< Instrument > >::iterator first, std::vector< ext::shared_ptr< Instrument > >::iterator last) -> std::vector< ext::shared_ptr< Instrument > >::iterator
        """
        return _quantlib_risks.InstrumentVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(InstrumentVector self) -> InstrumentVector
        __init__(InstrumentVector self, InstrumentVector other) -> InstrumentVector
        __init__(InstrumentVector self, std::vector< ext::shared_ptr< Instrument > >::size_type size) -> InstrumentVector
        __init__(InstrumentVector self, std::vector< ext::shared_ptr< Instrument > >::size_type size, std::vector< ext::shared_ptr< Instrument > >::value_type const & value) -> InstrumentVector
        """
        _quantlib_risks.InstrumentVector_swiginit(self, _quantlib_risks.new_InstrumentVector(*args))

    def push_back(self, x):
        r"""push_back(InstrumentVector self, std::vector< ext::shared_ptr< Instrument > >::value_type const & x)"""
        return _quantlib_risks.InstrumentVector_push_back(self, x)

    def front(self):
        r"""front(InstrumentVector self) -> std::vector< ext::shared_ptr< Instrument > >::value_type const &"""
        return _quantlib_risks.InstrumentVector_front(self)

    def back(self):
        r"""back(InstrumentVector self) -> std::vector< ext::shared_ptr< Instrument > >::value_type const &"""
        return _quantlib_risks.InstrumentVector_back(self)

    def assign(self, n, x):
        r"""assign(InstrumentVector self, std::vector< ext::shared_ptr< Instrument > >::size_type n, std::vector< ext::shared_ptr< Instrument > >::value_type const & x)"""
        return _quantlib_risks.InstrumentVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(InstrumentVector self, std::vector< ext::shared_ptr< Instrument > >::size_type new_size)
        resize(InstrumentVector self, std::vector< ext::shared_ptr< Instrument > >::size_type new_size, std::vector< ext::shared_ptr< Instrument > >::value_type const & x)
        """
        return _quantlib_risks.InstrumentVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(InstrumentVector self, std::vector< ext::shared_ptr< Instrument > >::iterator pos, std::vector< ext::shared_ptr< Instrument > >::value_type const & x) -> std::vector< ext::shared_ptr< Instrument > >::iterator
        insert(InstrumentVector self, std::vector< ext::shared_ptr< Instrument > >::iterator pos, std::vector< ext::shared_ptr< Instrument > >::size_type n, std::vector< ext::shared_ptr< Instrument > >::value_type const & x)
        """
        return _quantlib_risks.InstrumentVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(InstrumentVector self, std::vector< ext::shared_ptr< Instrument > >::size_type n)"""
        return _quantlib_risks.InstrumentVector_reserve(self, n)

    def capacity(self):
        r"""capacity(InstrumentVector self) -> std::vector< ext::shared_ptr< Instrument > >::size_type"""
        return _quantlib_risks.InstrumentVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_InstrumentVector

# Register InstrumentVector in _quantlib_risks:
_quantlib_risks.InstrumentVector_swigregister(InstrumentVector)
class Stock(Instrument):
    r"""Proxy of C++ Stock class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, quote):
        r"""__init__(Stock self, QuoteHandle quote) -> Stock"""
        _quantlib_risks.Stock_swiginit(self, _quantlib_risks.new_Stock(quote))
    __swig_destroy__ = _quantlib_risks.delete_Stock

# Register Stock in _quantlib_risks:
_quantlib_risks.Stock_swigregister(Stock)
class CompositeInstrument(Instrument):
    r"""Proxy of C++ CompositeInstrument class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CompositeInstrument self) -> CompositeInstrument"""
        _quantlib_risks.CompositeInstrument_swiginit(self, _quantlib_risks.new_CompositeInstrument())

    def add(self, instrument, multiplier=1.0):
        r"""add(CompositeInstrument self, ext::shared_ptr< Instrument > const & instrument, Real multiplier=1.0)"""
        return _quantlib_risks.CompositeInstrument_add(self, instrument, multiplier)

    def subtract(self, instrument, multiplier=1.0):
        r"""subtract(CompositeInstrument self, ext::shared_ptr< Instrument > const & instrument, Real multiplier=1.0)"""
        return _quantlib_risks.CompositeInstrument_subtract(self, instrument, multiplier)
    __swig_destroy__ = _quantlib_risks.delete_CompositeInstrument

# Register CompositeInstrument in _quantlib_risks:
_quantlib_risks.CompositeInstrument_swigregister(CompositeInstrument)
class CalibrationHelper(object):
    r"""Proxy of C++ CalibrationHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def calibrationError(self):
        r"""calibrationError(CalibrationHelper self) -> Real"""
        return _quantlib_risks.CalibrationHelper_calibrationError(self)
    __swig_destroy__ = _quantlib_risks.delete_CalibrationHelper

# Register CalibrationHelper in _quantlib_risks:
_quantlib_risks.CalibrationHelper_swigregister(CalibrationHelper)
class CalibrationHelperVector(object):
    r"""Proxy of C++ std::vector< ext::shared_ptr< CalibrationHelper > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(CalibrationHelperVector self) -> SwigPyIterator"""
        return _quantlib_risks.CalibrationHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(CalibrationHelperVector self) -> bool"""
        return _quantlib_risks.CalibrationHelperVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(CalibrationHelperVector self) -> bool"""
        return _quantlib_risks.CalibrationHelperVector___bool__(self)

    def __len__(self):
        r"""__len__(CalibrationHelperVector self) -> std::vector< ext::shared_ptr< CalibrationHelper > >::size_type"""
        return _quantlib_risks.CalibrationHelperVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(CalibrationHelperVector self, std::vector< ext::shared_ptr< CalibrationHelper > >::difference_type i, std::vector< ext::shared_ptr< CalibrationHelper > >::difference_type j) -> CalibrationHelperVector"""
        return _quantlib_risks.CalibrationHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(CalibrationHelperVector self, std::vector< ext::shared_ptr< CalibrationHelper > >::difference_type i, std::vector< ext::shared_ptr< CalibrationHelper > >::difference_type j)
        __setslice__(CalibrationHelperVector self, std::vector< ext::shared_ptr< CalibrationHelper > >::difference_type i, std::vector< ext::shared_ptr< CalibrationHelper > >::difference_type j, CalibrationHelperVector v)
        """
        return _quantlib_risks.CalibrationHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(CalibrationHelperVector self, std::vector< ext::shared_ptr< CalibrationHelper > >::difference_type i, std::vector< ext::shared_ptr< CalibrationHelper > >::difference_type j)"""
        return _quantlib_risks.CalibrationHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(CalibrationHelperVector self, std::vector< ext::shared_ptr< CalibrationHelper > >::difference_type i)
        __delitem__(CalibrationHelperVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.CalibrationHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(CalibrationHelperVector self, SWIGPY_SLICEOBJECT * slice) -> CalibrationHelperVector
        __getitem__(CalibrationHelperVector self, std::vector< ext::shared_ptr< CalibrationHelper > >::difference_type i) -> std::vector< ext::shared_ptr< CalibrationHelper > >::value_type const &
        """
        return _quantlib_risks.CalibrationHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(CalibrationHelperVector self, SWIGPY_SLICEOBJECT * slice, CalibrationHelperVector v)
        __setitem__(CalibrationHelperVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(CalibrationHelperVector self, std::vector< ext::shared_ptr< CalibrationHelper > >::difference_type i, std::vector< ext::shared_ptr< CalibrationHelper > >::value_type const & x)
        """
        return _quantlib_risks.CalibrationHelperVector___setitem__(self, *args)

    def pop(self):
        r"""pop(CalibrationHelperVector self) -> std::vector< ext::shared_ptr< CalibrationHelper > >::value_type"""
        return _quantlib_risks.CalibrationHelperVector_pop(self)

    def append(self, x):
        r"""append(CalibrationHelperVector self, std::vector< ext::shared_ptr< CalibrationHelper > >::value_type const & x)"""
        return _quantlib_risks.CalibrationHelperVector_append(self, x)

    def empty(self):
        r"""empty(CalibrationHelperVector self) -> bool"""
        return _quantlib_risks.CalibrationHelperVector_empty(self)

    def size(self):
        r"""size(CalibrationHelperVector self) -> std::vector< ext::shared_ptr< CalibrationHelper > >::size_type"""
        return _quantlib_risks.CalibrationHelperVector_size(self)

    def swap(self, v):
        r"""swap(CalibrationHelperVector self, CalibrationHelperVector v)"""
        return _quantlib_risks.CalibrationHelperVector_swap(self, v)

    def begin(self):
        r"""begin(CalibrationHelperVector self) -> std::vector< ext::shared_ptr< CalibrationHelper > >::iterator"""
        return _quantlib_risks.CalibrationHelperVector_begin(self)

    def end(self):
        r"""end(CalibrationHelperVector self) -> std::vector< ext::shared_ptr< CalibrationHelper > >::iterator"""
        return _quantlib_risks.CalibrationHelperVector_end(self)

    def rbegin(self):
        r"""rbegin(CalibrationHelperVector self) -> std::vector< ext::shared_ptr< CalibrationHelper > >::reverse_iterator"""
        return _quantlib_risks.CalibrationHelperVector_rbegin(self)

    def rend(self):
        r"""rend(CalibrationHelperVector self) -> std::vector< ext::shared_ptr< CalibrationHelper > >::reverse_iterator"""
        return _quantlib_risks.CalibrationHelperVector_rend(self)

    def clear(self):
        r"""clear(CalibrationHelperVector self)"""
        return _quantlib_risks.CalibrationHelperVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(CalibrationHelperVector self) -> std::vector< ext::shared_ptr< CalibrationHelper > >::allocator_type"""
        return _quantlib_risks.CalibrationHelperVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(CalibrationHelperVector self)"""
        return _quantlib_risks.CalibrationHelperVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(CalibrationHelperVector self, std::vector< ext::shared_ptr< CalibrationHelper > >::iterator pos) -> std::vector< ext::shared_ptr< CalibrationHelper > >::iterator
        erase(CalibrationHelperVector self, std::vector< ext::shared_ptr< CalibrationHelper > >::iterator first, std::vector< ext::shared_ptr< CalibrationHelper > >::iterator last) -> std::vector< ext::shared_ptr< CalibrationHelper > >::iterator
        """
        return _quantlib_risks.CalibrationHelperVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(CalibrationHelperVector self) -> CalibrationHelperVector
        __init__(CalibrationHelperVector self, CalibrationHelperVector other) -> CalibrationHelperVector
        __init__(CalibrationHelperVector self, std::vector< ext::shared_ptr< CalibrationHelper > >::size_type size) -> CalibrationHelperVector
        __init__(CalibrationHelperVector self, std::vector< ext::shared_ptr< CalibrationHelper > >::size_type size, std::vector< ext::shared_ptr< CalibrationHelper > >::value_type const & value) -> CalibrationHelperVector
        """
        _quantlib_risks.CalibrationHelperVector_swiginit(self, _quantlib_risks.new_CalibrationHelperVector(*args))

    def push_back(self, x):
        r"""push_back(CalibrationHelperVector self, std::vector< ext::shared_ptr< CalibrationHelper > >::value_type const & x)"""
        return _quantlib_risks.CalibrationHelperVector_push_back(self, x)

    def front(self):
        r"""front(CalibrationHelperVector self) -> std::vector< ext::shared_ptr< CalibrationHelper > >::value_type const &"""
        return _quantlib_risks.CalibrationHelperVector_front(self)

    def back(self):
        r"""back(CalibrationHelperVector self) -> std::vector< ext::shared_ptr< CalibrationHelper > >::value_type const &"""
        return _quantlib_risks.CalibrationHelperVector_back(self)

    def assign(self, n, x):
        r"""assign(CalibrationHelperVector self, std::vector< ext::shared_ptr< CalibrationHelper > >::size_type n, std::vector< ext::shared_ptr< CalibrationHelper > >::value_type const & x)"""
        return _quantlib_risks.CalibrationHelperVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(CalibrationHelperVector self, std::vector< ext::shared_ptr< CalibrationHelper > >::size_type new_size)
        resize(CalibrationHelperVector self, std::vector< ext::shared_ptr< CalibrationHelper > >::size_type new_size, std::vector< ext::shared_ptr< CalibrationHelper > >::value_type const & x)
        """
        return _quantlib_risks.CalibrationHelperVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(CalibrationHelperVector self, std::vector< ext::shared_ptr< CalibrationHelper > >::iterator pos, std::vector< ext::shared_ptr< CalibrationHelper > >::value_type const & x) -> std::vector< ext::shared_ptr< CalibrationHelper > >::iterator
        insert(CalibrationHelperVector self, std::vector< ext::shared_ptr< CalibrationHelper > >::iterator pos, std::vector< ext::shared_ptr< CalibrationHelper > >::size_type n, std::vector< ext::shared_ptr< CalibrationHelper > >::value_type const & x)
        """
        return _quantlib_risks.CalibrationHelperVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(CalibrationHelperVector self, std::vector< ext::shared_ptr< CalibrationHelper > >::size_type n)"""
        return _quantlib_risks.CalibrationHelperVector_reserve(self, n)

    def capacity(self):
        r"""capacity(CalibrationHelperVector self) -> std::vector< ext::shared_ptr< CalibrationHelper > >::size_type"""
        return _quantlib_risks.CalibrationHelperVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_CalibrationHelperVector

# Register CalibrationHelperVector in _quantlib_risks:
_quantlib_risks.CalibrationHelperVector_swigregister(CalibrationHelperVector)
class CalibratedModel(Observable):
    r"""Proxy of C++ CalibratedModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def params(self):
        r"""params(CalibratedModel self) -> Array"""
        return _quantlib_risks.CalibratedModel_params(self)

    def calibrate(self, *args):
        r"""calibrate(CalibratedModel self, CalibrationHelperVector arg2, OptimizationMethod arg3, EndCriteria arg4, Constraint constraint=Constraint(), std::vector< Real,std::allocator< Real > > const & weights=std::vector< Real >(), BoolVector fixParameters=std::vector< bool >())"""
        return _quantlib_risks.CalibratedModel_calibrate(self, *args)

    def setParams(self, params):
        r"""setParams(CalibratedModel self, Array params)"""
        return _quantlib_risks.CalibratedModel_setParams(self, params)

    def value(self, params, arg3):
        r"""value(CalibratedModel self, Array params, CalibrationHelperVector arg3) -> Real"""
        return _quantlib_risks.CalibratedModel_value(self, params, arg3)

    def constraint(self):
        r"""constraint(CalibratedModel self) -> ext::shared_ptr< Constraint > const &"""
        return _quantlib_risks.CalibratedModel_constraint(self)

    def endCriteria(self):
        r"""endCriteria(CalibratedModel self) -> EndCriteria::Type"""
        return _quantlib_risks.CalibratedModel_endCriteria(self)

    def problemValues(self):
        r"""problemValues(CalibratedModel self) -> Array"""
        return _quantlib_risks.CalibratedModel_problemValues(self)

    def functionEvaluation(self):
        r"""functionEvaluation(CalibratedModel self) -> Integer"""
        return _quantlib_risks.CalibratedModel_functionEvaluation(self)
    __swig_destroy__ = _quantlib_risks.delete_CalibratedModel

# Register CalibratedModel in _quantlib_risks:
_quantlib_risks.CalibratedModel_swigregister(CalibratedModel)
class TermStructureConsistentModel(Observable):
    r"""Proxy of C++ TermStructureConsistentModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def termStructure(self):
        r"""termStructure(TermStructureConsistentModel self) -> YieldTermStructureHandle"""
        return _quantlib_risks.TermStructureConsistentModel_termStructure(self)
    __swig_destroy__ = _quantlib_risks.delete_TermStructureConsistentModel

# Register TermStructureConsistentModel in _quantlib_risks:
_quantlib_risks.TermStructureConsistentModel_swigregister(TermStructureConsistentModel)
class CalibratedModelHandle(object):
    r"""Proxy of C++ Handle< CalibratedModel > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(CalibratedModelHandle self, ext::shared_ptr< CalibratedModel > const & arg2=ext::shared_ptr()) -> CalibratedModelHandle"""
        _quantlib_risks.CalibratedModelHandle_swiginit(self, _quantlib_risks.new_CalibratedModelHandle(*args))

    def __deref__(self):
        r"""__deref__(CalibratedModelHandle self) -> ext::shared_ptr< CalibratedModel >"""
        return _quantlib_risks.CalibratedModelHandle___deref__(self)

    def currentLink(self):
        r"""currentLink(CalibratedModelHandle self) -> ext::shared_ptr< CalibratedModel >"""
        return _quantlib_risks.CalibratedModelHandle_currentLink(self)

    def __nonzero__(self):
        r"""__nonzero__(CalibratedModelHandle self) -> bool"""
        return _quantlib_risks.CalibratedModelHandle___nonzero__(self)

    def __bool__(self):
        r"""__bool__(CalibratedModelHandle self) -> bool"""
        return _quantlib_risks.CalibratedModelHandle___bool__(self)

    def asObservable(self):
        r"""asObservable(CalibratedModelHandle self) -> ext::shared_ptr< Observable >"""
        return _quantlib_risks.CalibratedModelHandle_asObservable(self)
    __swig_destroy__ = _quantlib_risks.delete_CalibratedModelHandle

    def params(self):
        r"""params(CalibratedModelHandle self) -> Array"""
        return _quantlib_risks.CalibratedModelHandle_params(self)

    def calibrate(self, *args):
        r"""calibrate(CalibratedModelHandle self, CalibrationHelperVector arg2, OptimizationMethod arg3, EndCriteria arg4, Constraint constraint=Constraint(), std::vector< Real,std::allocator< Real > > const & weights=std::vector< Real >(), BoolVector fixParameters=std::vector< bool >())"""
        return _quantlib_risks.CalibratedModelHandle_calibrate(self, *args)

    def setParams(self, params):
        r"""setParams(CalibratedModelHandle self, Array params)"""
        return _quantlib_risks.CalibratedModelHandle_setParams(self, params)

    def value(self, params, arg3):
        r"""value(CalibratedModelHandle self, Array params, CalibrationHelperVector arg3) -> Real"""
        return _quantlib_risks.CalibratedModelHandle_value(self, params, arg3)

    def constraint(self):
        r"""constraint(CalibratedModelHandle self) -> ext::shared_ptr< Constraint > const &"""
        return _quantlib_risks.CalibratedModelHandle_constraint(self)

    def endCriteria(self):
        r"""endCriteria(CalibratedModelHandle self) -> EndCriteria::Type"""
        return _quantlib_risks.CalibratedModelHandle_endCriteria(self)

    def problemValues(self):
        r"""problemValues(CalibratedModelHandle self) -> Array"""
        return _quantlib_risks.CalibratedModelHandle_problemValues(self)

    def functionEvaluation(self):
        r"""functionEvaluation(CalibratedModelHandle self) -> Integer"""
        return _quantlib_risks.CalibratedModelHandle_functionEvaluation(self)

# Register CalibratedModelHandle in _quantlib_risks:
_quantlib_risks.CalibratedModelHandle_swigregister(CalibratedModelHandle)
class RelinkableCalibratedModelHandle(CalibratedModelHandle):
    r"""Proxy of C++ RelinkableHandle< CalibratedModel > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(RelinkableCalibratedModelHandle self, ext::shared_ptr< CalibratedModel > const & arg2=ext::shared_ptr()) -> RelinkableCalibratedModelHandle"""
        _quantlib_risks.RelinkableCalibratedModelHandle_swiginit(self, _quantlib_risks.new_RelinkableCalibratedModelHandle(*args))

    def linkTo(self, arg2):
        r"""linkTo(RelinkableCalibratedModelHandle self, ext::shared_ptr< CalibratedModel > const & arg2)"""
        return _quantlib_risks.RelinkableCalibratedModelHandle_linkTo(self, arg2)

    def reset(self):
        r"""reset(RelinkableCalibratedModelHandle self)"""
        return _quantlib_risks.RelinkableCalibratedModelHandle_reset(self)
    __swig_destroy__ = _quantlib_risks.delete_RelinkableCalibratedModelHandle

# Register RelinkableCalibratedModelHandle in _quantlib_risks:
_quantlib_risks.RelinkableCalibratedModelHandle_swigregister(RelinkableCalibratedModelHandle)
class Parameter(object):
    r"""Proxy of C++ Parameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Parameter self) -> Parameter"""
        _quantlib_risks.Parameter_swiginit(self, _quantlib_risks.new_Parameter())

    def params(self):
        r"""params(Parameter self) -> Array"""
        return _quantlib_risks.Parameter_params(self)

    def setParam(self, i, x):
        r"""setParam(Parameter self, Size i, Real x)"""
        return _quantlib_risks.Parameter_setParam(self, i, x)

    def testParams(self, params):
        r"""testParams(Parameter self, Array params) -> bool"""
        return _quantlib_risks.Parameter_testParams(self, params)

    def size(self):
        r"""size(Parameter self) -> Size"""
        return _quantlib_risks.Parameter_size(self)

    def __call__(self, t):
        r"""__call__(Parameter self, Time t) -> Real"""
        return _quantlib_risks.Parameter___call__(self, t)

    def constraint(self):
        r"""constraint(Parameter self) -> Constraint"""
        return _quantlib_risks.Parameter_constraint(self)
    __swig_destroy__ = _quantlib_risks.delete_Parameter

# Register Parameter in _quantlib_risks:
_quantlib_risks.Parameter_swigregister(Parameter)
class ConstantParameter(Parameter):
    r"""Proxy of C++ ConstantParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ConstantParameter self, Constraint constraint) -> ConstantParameter
        __init__(ConstantParameter self, Real value, Constraint constraint) -> ConstantParameter
        """
        _quantlib_risks.ConstantParameter_swiginit(self, _quantlib_risks.new_ConstantParameter(*args))
    __swig_destroy__ = _quantlib_risks.delete_ConstantParameter

# Register ConstantParameter in _quantlib_risks:
_quantlib_risks.ConstantParameter_swigregister(ConstantParameter)
class NullParameter(Parameter):
    r"""Proxy of C++ NullParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(NullParameter self) -> NullParameter"""
        _quantlib_risks.NullParameter_swiginit(self, _quantlib_risks.new_NullParameter())
    __swig_destroy__ = _quantlib_risks.delete_NullParameter

# Register NullParameter in _quantlib_risks:
_quantlib_risks.NullParameter_swigregister(NullParameter)
class PiecewiseConstantParameter(Parameter):
    r"""Proxy of C++ PiecewiseConstantParameter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(PiecewiseConstantParameter self, std::vector< Time,std::allocator< Time > > const & times, Constraint constraint=QuantLib::NoConstraint()) -> PiecewiseConstantParameter"""
        _quantlib_risks.PiecewiseConstantParameter_swiginit(self, _quantlib_risks.new_PiecewiseConstantParameter(*args))
    __swig_destroy__ = _quantlib_risks.delete_PiecewiseConstantParameter

# Register PiecewiseConstantParameter in _quantlib_risks:
_quantlib_risks.PiecewiseConstantParameter_swigregister(PiecewiseConstantParameter)
class Payoff(object):
    r"""Proxy of C++ Payoff class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __call__(self, price):
        r"""__call__(Payoff self, Real price) -> Real"""
        return _quantlib_risks.Payoff___call__(self, price)
    __swig_destroy__ = _quantlib_risks.delete_Payoff

# Register Payoff in _quantlib_risks:
_quantlib_risks.Payoff_swigregister(Payoff)
class Option(Instrument):
    r"""Proxy of C++ Option class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Put = _quantlib_risks.Option_Put
    
    Call = _quantlib_risks.Option_Call
    

    def payoff(self):
        r"""payoff(Option self) -> ext::shared_ptr< Payoff >"""
        return _quantlib_risks.Option_payoff(self)

    def exercise(self):
        r"""exercise(Option self) -> ext::shared_ptr< Exercise >"""
        return _quantlib_risks.Option_exercise(self)
    __swig_destroy__ = _quantlib_risks.delete_Option

# Register Option in _quantlib_risks:
_quantlib_risks.Option_swigregister(Option)
class TypePayoff(Payoff):
    r"""Proxy of C++ TypePayoff class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def optionType(self):
        r"""optionType(TypePayoff self) -> Option::Type"""
        return _quantlib_risks.TypePayoff_optionType(self)
    __swig_destroy__ = _quantlib_risks.delete_TypePayoff

# Register TypePayoff in _quantlib_risks:
_quantlib_risks.TypePayoff_swigregister(TypePayoff)
class FloatingTypePayoff(TypePayoff):
    r"""Proxy of C++ FloatingTypePayoff class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type):
        r"""__init__(FloatingTypePayoff self, Option::Type type) -> FloatingTypePayoff"""
        _quantlib_risks.FloatingTypePayoff_swiginit(self, _quantlib_risks.new_FloatingTypePayoff(type))

    def __call__(self, *args):
        r"""
        __call__(FloatingTypePayoff self, Real price, Real strike) -> Real
        __call__(FloatingTypePayoff self, Real price) -> Real
        """
        return _quantlib_risks.FloatingTypePayoff___call__(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_FloatingTypePayoff

# Register FloatingTypePayoff in _quantlib_risks:
_quantlib_risks.FloatingTypePayoff_swigregister(FloatingTypePayoff)
class StrikedTypePayoff(TypePayoff):
    r"""Proxy of C++ StrikedTypePayoff class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def strike(self):
        r"""strike(StrikedTypePayoff self) -> Real"""
        return _quantlib_risks.StrikedTypePayoff_strike(self)
    __swig_destroy__ = _quantlib_risks.delete_StrikedTypePayoff

# Register StrikedTypePayoff in _quantlib_risks:
_quantlib_risks.StrikedTypePayoff_swigregister(StrikedTypePayoff)
class DeltaVolQuote(Quote):
    r"""Proxy of C++ DeltaVolQuote class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Spot = _quantlib_risks.DeltaVolQuote_Spot
    
    Fwd = _quantlib_risks.DeltaVolQuote_Fwd
    
    PaSpot = _quantlib_risks.DeltaVolQuote_PaSpot
    
    PaFwd = _quantlib_risks.DeltaVolQuote_PaFwd
    
    AtmNull = _quantlib_risks.DeltaVolQuote_AtmNull
    
    AtmSpot = _quantlib_risks.DeltaVolQuote_AtmSpot
    
    AtmFwd = _quantlib_risks.DeltaVolQuote_AtmFwd
    
    AtmDeltaNeutral = _quantlib_risks.DeltaVolQuote_AtmDeltaNeutral
    
    AtmVegaMax = _quantlib_risks.DeltaVolQuote_AtmVegaMax
    
    AtmGammaMax = _quantlib_risks.DeltaVolQuote_AtmGammaMax
    
    AtmPutCall50 = _quantlib_risks.DeltaVolQuote_AtmPutCall50
    

    def __init__(self, *args):
        r"""
        __init__(DeltaVolQuote self, Real delta, QuoteHandle vol, Time maturity, DeltaVolQuote::DeltaType deltaType) -> DeltaVolQuote
        __init__(DeltaVolQuote self, QuoteHandle vol, DeltaVolQuote::DeltaType deltaType, Time maturity, DeltaVolQuote::AtmType atmType) -> DeltaVolQuote
        """
        _quantlib_risks.DeltaVolQuote_swiginit(self, _quantlib_risks.new_DeltaVolQuote(*args))

    def delta(self):
        r"""delta(DeltaVolQuote self) -> Real"""
        return _quantlib_risks.DeltaVolQuote_delta(self)

    def maturity(self):
        r"""maturity(DeltaVolQuote self) -> Time"""
        return _quantlib_risks.DeltaVolQuote_maturity(self)

    def atmType(self):
        r"""atmType(DeltaVolQuote self) -> DeltaVolQuote::AtmType"""
        return _quantlib_risks.DeltaVolQuote_atmType(self)

    def deltaType(self):
        r"""deltaType(DeltaVolQuote self) -> DeltaVolQuote::DeltaType"""
        return _quantlib_risks.DeltaVolQuote_deltaType(self)
    __swig_destroy__ = _quantlib_risks.delete_DeltaVolQuote

# Register DeltaVolQuote in _quantlib_risks:
_quantlib_risks.DeltaVolQuote_swigregister(DeltaVolQuote)
class DeltaVolQuoteHandle(object):
    r"""Proxy of C++ Handle< DeltaVolQuote > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(DeltaVolQuoteHandle self, ext::shared_ptr< DeltaVolQuote > const & arg2=ext::shared_ptr()) -> DeltaVolQuoteHandle"""
        _quantlib_risks.DeltaVolQuoteHandle_swiginit(self, _quantlib_risks.new_DeltaVolQuoteHandle(*args))

    def __deref__(self):
        r"""__deref__(DeltaVolQuoteHandle self) -> ext::shared_ptr< DeltaVolQuote >"""
        return _quantlib_risks.DeltaVolQuoteHandle___deref__(self)

    def currentLink(self):
        r"""currentLink(DeltaVolQuoteHandle self) -> ext::shared_ptr< DeltaVolQuote >"""
        return _quantlib_risks.DeltaVolQuoteHandle_currentLink(self)

    def __nonzero__(self):
        r"""__nonzero__(DeltaVolQuoteHandle self) -> bool"""
        return _quantlib_risks.DeltaVolQuoteHandle___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DeltaVolQuoteHandle self) -> bool"""
        return _quantlib_risks.DeltaVolQuoteHandle___bool__(self)

    def asObservable(self):
        r"""asObservable(DeltaVolQuoteHandle self) -> ext::shared_ptr< Observable >"""
        return _quantlib_risks.DeltaVolQuoteHandle_asObservable(self)
    __swig_destroy__ = _quantlib_risks.delete_DeltaVolQuoteHandle

    def delta(self):
        r"""delta(DeltaVolQuoteHandle self) -> Real"""
        return _quantlib_risks.DeltaVolQuoteHandle_delta(self)

    def maturity(self):
        r"""maturity(DeltaVolQuoteHandle self) -> Time"""
        return _quantlib_risks.DeltaVolQuoteHandle_maturity(self)

    def atmType(self):
        r"""atmType(DeltaVolQuoteHandle self) -> DeltaVolQuote::AtmType"""
        return _quantlib_risks.DeltaVolQuoteHandle_atmType(self)

    def deltaType(self):
        r"""deltaType(DeltaVolQuoteHandle self) -> DeltaVolQuote::DeltaType"""
        return _quantlib_risks.DeltaVolQuoteHandle_deltaType(self)

    def value(self):
        r"""value(DeltaVolQuoteHandle self) -> Real"""
        return _quantlib_risks.DeltaVolQuoteHandle_value(self)

    def isValid(self):
        r"""isValid(DeltaVolQuoteHandle self) -> bool"""
        return _quantlib_risks.DeltaVolQuoteHandle_isValid(self)

# Register DeltaVolQuoteHandle in _quantlib_risks:
_quantlib_risks.DeltaVolQuoteHandle_swigregister(DeltaVolQuoteHandle)
class RelinkableDeltaVolQuoteHandle(DeltaVolQuoteHandle):
    r"""Proxy of C++ RelinkableHandle< DeltaVolQuote > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(RelinkableDeltaVolQuoteHandle self, ext::shared_ptr< DeltaVolQuote > const & arg2=ext::shared_ptr()) -> RelinkableDeltaVolQuoteHandle"""
        _quantlib_risks.RelinkableDeltaVolQuoteHandle_swiginit(self, _quantlib_risks.new_RelinkableDeltaVolQuoteHandle(*args))

    def linkTo(self, arg2):
        r"""linkTo(RelinkableDeltaVolQuoteHandle self, ext::shared_ptr< DeltaVolQuote > const & arg2)"""
        return _quantlib_risks.RelinkableDeltaVolQuoteHandle_linkTo(self, arg2)

    def reset(self):
        r"""reset(RelinkableDeltaVolQuoteHandle self)"""
        return _quantlib_risks.RelinkableDeltaVolQuoteHandle_reset(self)
    __swig_destroy__ = _quantlib_risks.delete_RelinkableDeltaVolQuoteHandle

# Register RelinkableDeltaVolQuoteHandle in _quantlib_risks:
_quantlib_risks.RelinkableDeltaVolQuoteHandle_swigregister(RelinkableDeltaVolQuoteHandle)
class OneAssetOption(Option):
    r"""Proxy of C++ OneAssetOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def delta(self):
        r"""delta(OneAssetOption self) -> Real"""
        return _quantlib_risks.OneAssetOption_delta(self)

    def deltaForward(self):
        r"""deltaForward(OneAssetOption self) -> Real"""
        return _quantlib_risks.OneAssetOption_deltaForward(self)

    def elasticity(self):
        r"""elasticity(OneAssetOption self) -> Real"""
        return _quantlib_risks.OneAssetOption_elasticity(self)

    def gamma(self):
        r"""gamma(OneAssetOption self) -> Real"""
        return _quantlib_risks.OneAssetOption_gamma(self)

    def theta(self):
        r"""theta(OneAssetOption self) -> Real"""
        return _quantlib_risks.OneAssetOption_theta(self)

    def thetaPerDay(self):
        r"""thetaPerDay(OneAssetOption self) -> Real"""
        return _quantlib_risks.OneAssetOption_thetaPerDay(self)

    def vega(self):
        r"""vega(OneAssetOption self) -> Real"""
        return _quantlib_risks.OneAssetOption_vega(self)

    def rho(self):
        r"""rho(OneAssetOption self) -> Real"""
        return _quantlib_risks.OneAssetOption_rho(self)

    def dividendRho(self):
        r"""dividendRho(OneAssetOption self) -> Real"""
        return _quantlib_risks.OneAssetOption_dividendRho(self)

    def strikeSensitivity(self):
        r"""strikeSensitivity(OneAssetOption self) -> Real"""
        return _quantlib_risks.OneAssetOption_strikeSensitivity(self)

    def itmCashProbability(self):
        r"""itmCashProbability(OneAssetOption self) -> Real"""
        return _quantlib_risks.OneAssetOption_itmCashProbability(self)
    __swig_destroy__ = _quantlib_risks.delete_OneAssetOption

# Register OneAssetOption in _quantlib_risks:
_quantlib_risks.OneAssetOption_swigregister(OneAssetOption)
class VanillaOption(OneAssetOption):
    r"""Proxy of C++ VanillaOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff, exercise):
        r"""__init__(VanillaOption self, ext::shared_ptr< StrikedTypePayoff > const & payoff, ext::shared_ptr< Exercise > const & exercise) -> VanillaOption"""
        _quantlib_risks.VanillaOption_swiginit(self, _quantlib_risks.new_VanillaOption(payoff, exercise))

    def impliedVolatility(self, *args):
        r"""
        impliedVolatility(VanillaOption self, Real targetValue, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, Real accuracy=1.0e-4, Size maxEvaluations=100, Volatility minVol=1.0e-4, Volatility maxVol=4.0) -> Volatility
        impliedVolatility(VanillaOption self, Real targetValue, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, DividendSchedule dividends, Real accuracy=1.0e-4, Size maxEvaluations=100, Volatility minVol=1.0e-4, Volatility maxVol=4.0) -> Volatility
        """
        return _quantlib_risks.VanillaOption_impliedVolatility(self, *args)

    def priceCurve(self):
        r"""priceCurve(VanillaOption self) -> SampledCurve"""
        return _quantlib_risks.VanillaOption_priceCurve(self)
    __swig_destroy__ = _quantlib_risks.delete_VanillaOption

# Register VanillaOption in _quantlib_risks:
_quantlib_risks.VanillaOption_swigregister(VanillaOption)
class CalibrationPair(object):
    r"""Proxy of C++ std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CalibrationPair self) -> CalibrationPair
        __init__(CalibrationPair self, ext::shared_ptr< VanillaOption > first, ext::shared_ptr< Quote > second) -> CalibrationPair
        __init__(CalibrationPair self, CalibrationPair other) -> CalibrationPair
        """
        _quantlib_risks.CalibrationPair_swiginit(self, _quantlib_risks.new_CalibrationPair(*args))
    first = property(_quantlib_risks.CalibrationPair_first_get, _quantlib_risks.CalibrationPair_first_set, doc=r"""first : ext::shared_ptr<(VanillaOption)>""")
    second = property(_quantlib_risks.CalibrationPair_second_get, _quantlib_risks.CalibrationPair_second_set, doc=r"""second : ext::shared_ptr<(Quote)>""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _quantlib_risks.delete_CalibrationPair

# Register CalibrationPair in _quantlib_risks:
_quantlib_risks.CalibrationPair_swigregister(CalibrationPair)
class CalibrationSet(object):
    r"""Proxy of C++ std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(CalibrationSet self) -> SwigPyIterator"""
        return _quantlib_risks.CalibrationSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(CalibrationSet self) -> bool"""
        return _quantlib_risks.CalibrationSet___nonzero__(self)

    def __bool__(self):
        r"""__bool__(CalibrationSet self) -> bool"""
        return _quantlib_risks.CalibrationSet___bool__(self)

    def __len__(self):
        r"""__len__(CalibrationSet self) -> std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::size_type"""
        return _quantlib_risks.CalibrationSet___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(CalibrationSet self, std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::difference_type i, std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::difference_type j) -> CalibrationSet"""
        return _quantlib_risks.CalibrationSet___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(CalibrationSet self, std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::difference_type i, std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::difference_type j)
        __setslice__(CalibrationSet self, std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::difference_type i, std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::difference_type j, CalibrationSet v)
        """
        return _quantlib_risks.CalibrationSet___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(CalibrationSet self, std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::difference_type i, std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::difference_type j)"""
        return _quantlib_risks.CalibrationSet___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(CalibrationSet self, std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::difference_type i)
        __delitem__(CalibrationSet self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.CalibrationSet___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(CalibrationSet self, SWIGPY_SLICEOBJECT * slice) -> CalibrationSet
        __getitem__(CalibrationSet self, std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::difference_type i) -> CalibrationPair
        """
        return _quantlib_risks.CalibrationSet___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(CalibrationSet self, SWIGPY_SLICEOBJECT * slice, CalibrationSet v)
        __setitem__(CalibrationSet self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(CalibrationSet self, std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::difference_type i, CalibrationPair x)
        """
        return _quantlib_risks.CalibrationSet___setitem__(self, *args)

    def pop(self):
        r"""pop(CalibrationSet self) -> CalibrationPair"""
        return _quantlib_risks.CalibrationSet_pop(self)

    def append(self, x):
        r"""append(CalibrationSet self, CalibrationPair x)"""
        return _quantlib_risks.CalibrationSet_append(self, x)

    def empty(self):
        r"""empty(CalibrationSet self) -> bool"""
        return _quantlib_risks.CalibrationSet_empty(self)

    def size(self):
        r"""size(CalibrationSet self) -> std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::size_type"""
        return _quantlib_risks.CalibrationSet_size(self)

    def swap(self, v):
        r"""swap(CalibrationSet self, CalibrationSet v)"""
        return _quantlib_risks.CalibrationSet_swap(self, v)

    def begin(self):
        r"""begin(CalibrationSet self) -> std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::iterator"""
        return _quantlib_risks.CalibrationSet_begin(self)

    def end(self):
        r"""end(CalibrationSet self) -> std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::iterator"""
        return _quantlib_risks.CalibrationSet_end(self)

    def rbegin(self):
        r"""rbegin(CalibrationSet self) -> std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::reverse_iterator"""
        return _quantlib_risks.CalibrationSet_rbegin(self)

    def rend(self):
        r"""rend(CalibrationSet self) -> std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::reverse_iterator"""
        return _quantlib_risks.CalibrationSet_rend(self)

    def clear(self):
        r"""clear(CalibrationSet self)"""
        return _quantlib_risks.CalibrationSet_clear(self)

    def get_allocator(self):
        r"""get_allocator(CalibrationSet self) -> std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::allocator_type"""
        return _quantlib_risks.CalibrationSet_get_allocator(self)

    def pop_back(self):
        r"""pop_back(CalibrationSet self)"""
        return _quantlib_risks.CalibrationSet_pop_back(self)

    def erase(self, *args):
        r"""
        erase(CalibrationSet self, std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::iterator pos) -> std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::iterator
        erase(CalibrationSet self, std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::iterator first, std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::iterator last) -> std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::iterator
        """
        return _quantlib_risks.CalibrationSet_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(CalibrationSet self) -> CalibrationSet
        __init__(CalibrationSet self, CalibrationSet other) -> CalibrationSet
        __init__(CalibrationSet self, std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::size_type size) -> CalibrationSet
        __init__(CalibrationSet self, std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::size_type size, CalibrationPair value) -> CalibrationSet
        """
        _quantlib_risks.CalibrationSet_swiginit(self, _quantlib_risks.new_CalibrationSet(*args))

    def push_back(self, x):
        r"""push_back(CalibrationSet self, CalibrationPair x)"""
        return _quantlib_risks.CalibrationSet_push_back(self, x)

    def front(self):
        r"""front(CalibrationSet self) -> CalibrationPair"""
        return _quantlib_risks.CalibrationSet_front(self)

    def back(self):
        r"""back(CalibrationSet self) -> CalibrationPair"""
        return _quantlib_risks.CalibrationSet_back(self)

    def assign(self, n, x):
        r"""assign(CalibrationSet self, std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::size_type n, CalibrationPair x)"""
        return _quantlib_risks.CalibrationSet_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(CalibrationSet self, std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::size_type new_size)
        resize(CalibrationSet self, std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::size_type new_size, CalibrationPair x)
        """
        return _quantlib_risks.CalibrationSet_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(CalibrationSet self, std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::iterator pos, CalibrationPair x) -> std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::iterator
        insert(CalibrationSet self, std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::iterator pos, std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::size_type n, CalibrationPair x)
        """
        return _quantlib_risks.CalibrationSet_insert(self, *args)

    def reserve(self, n):
        r"""reserve(CalibrationSet self, std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::size_type n)"""
        return _quantlib_risks.CalibrationSet_reserve(self, n)

    def capacity(self):
        r"""capacity(CalibrationSet self) -> std::vector< std::pair< ext::shared_ptr< VanillaOption >,ext::shared_ptr< Quote > > >::size_type"""
        return _quantlib_risks.CalibrationSet_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_CalibrationSet

# Register CalibrationSet in _quantlib_risks:
_quantlib_risks.CalibrationSet_swigregister(CalibrationSet)
class EuropeanOption(VanillaOption):
    r"""Proxy of C++ EuropeanOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff, exercise):
        r"""__init__(EuropeanOption self, ext::shared_ptr< StrikedTypePayoff > const & payoff, ext::shared_ptr< Exercise > const & exercise) -> EuropeanOption"""
        _quantlib_risks.EuropeanOption_swiginit(self, _quantlib_risks.new_EuropeanOption(payoff, exercise))
    __swig_destroy__ = _quantlib_risks.delete_EuropeanOption

# Register EuropeanOption in _quantlib_risks:
_quantlib_risks.EuropeanOption_swigregister(EuropeanOption)
class ForwardVanillaOption(OneAssetOption):
    r"""Proxy of C++ ForwardVanillaOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, moneyness, resetDate, payoff, exercise):
        r"""__init__(ForwardVanillaOption self, Real moneyness, Date resetDate, ext::shared_ptr< StrikedTypePayoff > const & payoff, ext::shared_ptr< Exercise > const & exercise) -> ForwardVanillaOption"""
        _quantlib_risks.ForwardVanillaOption_swiginit(self, _quantlib_risks.new_ForwardVanillaOption(moneyness, resetDate, payoff, exercise))
    __swig_destroy__ = _quantlib_risks.delete_ForwardVanillaOption

# Register ForwardVanillaOption in _quantlib_risks:
_quantlib_risks.ForwardVanillaOption_swigregister(ForwardVanillaOption)
class QuantoVanillaOption(OneAssetOption):
    r"""Proxy of C++ QuantoVanillaOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff, exercise):
        r"""__init__(QuantoVanillaOption self, ext::shared_ptr< StrikedTypePayoff > const & payoff, ext::shared_ptr< Exercise > const & exercise) -> QuantoVanillaOption"""
        _quantlib_risks.QuantoVanillaOption_swiginit(self, _quantlib_risks.new_QuantoVanillaOption(payoff, exercise))

    def qvega(self):
        r"""qvega(QuantoVanillaOption self) -> Real"""
        return _quantlib_risks.QuantoVanillaOption_qvega(self)

    def qrho(self):
        r"""qrho(QuantoVanillaOption self) -> Real"""
        return _quantlib_risks.QuantoVanillaOption_qrho(self)

    def qlambda(self):
        r"""qlambda(QuantoVanillaOption self) -> Real"""
        return _quantlib_risks.QuantoVanillaOption_qlambda(self)
    __swig_destroy__ = _quantlib_risks.delete_QuantoVanillaOption

# Register QuantoVanillaOption in _quantlib_risks:
_quantlib_risks.QuantoVanillaOption_swigregister(QuantoVanillaOption)
class QuantoForwardVanillaOption(ForwardVanillaOption):
    r"""Proxy of C++ QuantoForwardVanillaOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, moneyness, resetDate, payoff, exercise):
        r"""__init__(QuantoForwardVanillaOption self, Real moneyness, Date resetDate, ext::shared_ptr< StrikedTypePayoff > const & payoff, ext::shared_ptr< Exercise > const & exercise) -> QuantoForwardVanillaOption"""
        _quantlib_risks.QuantoForwardVanillaOption_swiginit(self, _quantlib_risks.new_QuantoForwardVanillaOption(moneyness, resetDate, payoff, exercise))
    __swig_destroy__ = _quantlib_risks.delete_QuantoForwardVanillaOption

# Register QuantoForwardVanillaOption in _quantlib_risks:
_quantlib_risks.QuantoForwardVanillaOption_swigregister(QuantoForwardVanillaOption)
class MultiAssetOption(Option):
    r"""Proxy of C++ MultiAssetOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def delta(self):
        r"""delta(MultiAssetOption self) -> Real"""
        return _quantlib_risks.MultiAssetOption_delta(self)

    def gamma(self):
        r"""gamma(MultiAssetOption self) -> Real"""
        return _quantlib_risks.MultiAssetOption_gamma(self)

    def theta(self):
        r"""theta(MultiAssetOption self) -> Real"""
        return _quantlib_risks.MultiAssetOption_theta(self)

    def vega(self):
        r"""vega(MultiAssetOption self) -> Real"""
        return _quantlib_risks.MultiAssetOption_vega(self)

    def rho(self):
        r"""rho(MultiAssetOption self) -> Real"""
        return _quantlib_risks.MultiAssetOption_rho(self)

    def dividendRho(self):
        r"""dividendRho(MultiAssetOption self) -> Real"""
        return _quantlib_risks.MultiAssetOption_dividendRho(self)
    __swig_destroy__ = _quantlib_risks.delete_MultiAssetOption

# Register MultiAssetOption in _quantlib_risks:
_quantlib_risks.MultiAssetOption_swigregister(MultiAssetOption)
class AnalyticEuropeanEngine(PricingEngine):
    r"""Proxy of C++ AnalyticEuropeanEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(AnalyticEuropeanEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process) -> AnalyticEuropeanEngine
        __init__(AnalyticEuropeanEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, YieldTermStructureHandle discountCurve) -> AnalyticEuropeanEngine
        """
        _quantlib_risks.AnalyticEuropeanEngine_swiginit(self, _quantlib_risks.new_AnalyticEuropeanEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticEuropeanEngine

# Register AnalyticEuropeanEngine in _quantlib_risks:
_quantlib_risks.AnalyticEuropeanEngine_swigregister(AnalyticEuropeanEngine)
class HestonModel(CalibratedModel):
    r"""Proxy of C++ HestonModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(HestonModel self, ext::shared_ptr< HestonProcess > const & process) -> HestonModel"""
        _quantlib_risks.HestonModel_swiginit(self, _quantlib_risks.new_HestonModel(process))

    def theta(self):
        r"""theta(HestonModel self) -> Real"""
        return _quantlib_risks.HestonModel_theta(self)

    def kappa(self):
        r"""kappa(HestonModel self) -> Real"""
        return _quantlib_risks.HestonModel_kappa(self)

    def sigma(self):
        r"""sigma(HestonModel self) -> Real"""
        return _quantlib_risks.HestonModel_sigma(self)

    def rho(self):
        r"""rho(HestonModel self) -> Real"""
        return _quantlib_risks.HestonModel_rho(self)

    def v0(self):
        r"""v0(HestonModel self) -> Real"""
        return _quantlib_risks.HestonModel_v0(self)
    __swig_destroy__ = _quantlib_risks.delete_HestonModel

# Register HestonModel in _quantlib_risks:
_quantlib_risks.HestonModel_swigregister(HestonModel)
class HestonModelHandle(object):
    r"""Proxy of C++ Handle< HestonModel > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(HestonModelHandle self, ext::shared_ptr< HestonModel > const & arg2=ext::shared_ptr()) -> HestonModelHandle"""
        _quantlib_risks.HestonModelHandle_swiginit(self, _quantlib_risks.new_HestonModelHandle(*args))

    def __deref__(self):
        r"""__deref__(HestonModelHandle self) -> ext::shared_ptr< HestonModel >"""
        return _quantlib_risks.HestonModelHandle___deref__(self)

    def currentLink(self):
        r"""currentLink(HestonModelHandle self) -> ext::shared_ptr< HestonModel >"""
        return _quantlib_risks.HestonModelHandle_currentLink(self)

    def __nonzero__(self):
        r"""__nonzero__(HestonModelHandle self) -> bool"""
        return _quantlib_risks.HestonModelHandle___nonzero__(self)

    def __bool__(self):
        r"""__bool__(HestonModelHandle self) -> bool"""
        return _quantlib_risks.HestonModelHandle___bool__(self)

    def asObservable(self):
        r"""asObservable(HestonModelHandle self) -> ext::shared_ptr< Observable >"""
        return _quantlib_risks.HestonModelHandle_asObservable(self)
    __swig_destroy__ = _quantlib_risks.delete_HestonModelHandle

    def theta(self):
        r"""theta(HestonModelHandle self) -> Real"""
        return _quantlib_risks.HestonModelHandle_theta(self)

    def kappa(self):
        r"""kappa(HestonModelHandle self) -> Real"""
        return _quantlib_risks.HestonModelHandle_kappa(self)

    def sigma(self):
        r"""sigma(HestonModelHandle self) -> Real"""
        return _quantlib_risks.HestonModelHandle_sigma(self)

    def rho(self):
        r"""rho(HestonModelHandle self) -> Real"""
        return _quantlib_risks.HestonModelHandle_rho(self)

    def v0(self):
        r"""v0(HestonModelHandle self) -> Real"""
        return _quantlib_risks.HestonModelHandle_v0(self)

    def params(self):
        r"""params(HestonModelHandle self) -> Array"""
        return _quantlib_risks.HestonModelHandle_params(self)

    def calibrate(self, *args):
        r"""calibrate(HestonModelHandle self, CalibrationHelperVector arg2, OptimizationMethod arg3, EndCriteria arg4, Constraint constraint=Constraint(), std::vector< Real,std::allocator< Real > > const & weights=std::vector< Real >(), BoolVector fixParameters=std::vector< bool >())"""
        return _quantlib_risks.HestonModelHandle_calibrate(self, *args)

    def setParams(self, params):
        r"""setParams(HestonModelHandle self, Array params)"""
        return _quantlib_risks.HestonModelHandle_setParams(self, params)

    def value(self, params, arg3):
        r"""value(HestonModelHandle self, Array params, CalibrationHelperVector arg3) -> Real"""
        return _quantlib_risks.HestonModelHandle_value(self, params, arg3)

    def constraint(self):
        r"""constraint(HestonModelHandle self) -> ext::shared_ptr< Constraint > const &"""
        return _quantlib_risks.HestonModelHandle_constraint(self)

    def endCriteria(self):
        r"""endCriteria(HestonModelHandle self) -> EndCriteria::Type"""
        return _quantlib_risks.HestonModelHandle_endCriteria(self)

    def problemValues(self):
        r"""problemValues(HestonModelHandle self) -> Array"""
        return _quantlib_risks.HestonModelHandle_problemValues(self)

    def functionEvaluation(self):
        r"""functionEvaluation(HestonModelHandle self) -> Integer"""
        return _quantlib_risks.HestonModelHandle_functionEvaluation(self)

# Register HestonModelHandle in _quantlib_risks:
_quantlib_risks.HestonModelHandle_swigregister(HestonModelHandle)
class PiecewiseTimeDependentHestonModel(CalibratedModel):
    r"""Proxy of C++ PiecewiseTimeDependentHestonModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, riskFreeRate, dividendYield, s0, v0, theta, kappa, sigma, rho, timeGrid):
        r"""__init__(PiecewiseTimeDependentHestonModel self, YieldTermStructureHandle riskFreeRate, YieldTermStructureHandle dividendYield, QuoteHandle s0, Real v0, Parameter theta, Parameter kappa, Parameter sigma, Parameter rho, TimeGrid timeGrid) -> PiecewiseTimeDependentHestonModel"""
        _quantlib_risks.PiecewiseTimeDependentHestonModel_swiginit(self, _quantlib_risks.new_PiecewiseTimeDependentHestonModel(riskFreeRate, dividendYield, s0, v0, theta, kappa, sigma, rho, timeGrid))

    def theta(self, t):
        r"""theta(PiecewiseTimeDependentHestonModel self, Time t) -> Real"""
        return _quantlib_risks.PiecewiseTimeDependentHestonModel_theta(self, t)

    def kappa(self, t):
        r"""kappa(PiecewiseTimeDependentHestonModel self, Time t) -> Real"""
        return _quantlib_risks.PiecewiseTimeDependentHestonModel_kappa(self, t)

    def sigma(self, t):
        r"""sigma(PiecewiseTimeDependentHestonModel self, Time t) -> Real"""
        return _quantlib_risks.PiecewiseTimeDependentHestonModel_sigma(self, t)

    def rho(self, t):
        r"""rho(PiecewiseTimeDependentHestonModel self, Time t) -> Real"""
        return _quantlib_risks.PiecewiseTimeDependentHestonModel_rho(self, t)

    def v0(self):
        r"""v0(PiecewiseTimeDependentHestonModel self) -> Real"""
        return _quantlib_risks.PiecewiseTimeDependentHestonModel_v0(self)

    def s0(self):
        r"""s0(PiecewiseTimeDependentHestonModel self) -> Real"""
        return _quantlib_risks.PiecewiseTimeDependentHestonModel_s0(self)

    def timeGrid(self):
        r"""timeGrid(PiecewiseTimeDependentHestonModel self) -> TimeGrid"""
        return _quantlib_risks.PiecewiseTimeDependentHestonModel_timeGrid(self)

    def dividendYield(self):
        r"""dividendYield(PiecewiseTimeDependentHestonModel self) -> YieldTermStructureHandle"""
        return _quantlib_risks.PiecewiseTimeDependentHestonModel_dividendYield(self)

    def riskFreeRate(self):
        r"""riskFreeRate(PiecewiseTimeDependentHestonModel self) -> YieldTermStructureHandle"""
        return _quantlib_risks.PiecewiseTimeDependentHestonModel_riskFreeRate(self)
    __swig_destroy__ = _quantlib_risks.delete_PiecewiseTimeDependentHestonModel

# Register PiecewiseTimeDependentHestonModel in _quantlib_risks:
_quantlib_risks.PiecewiseTimeDependentHestonModel_swigregister(PiecewiseTimeDependentHestonModel)
class AnalyticHestonEngine(PricingEngine):
    r"""Proxy of C++ AnalyticHestonEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Gatheral = _quantlib_risks.AnalyticHestonEngine_Gatheral
    
    BranchCorrection = _quantlib_risks.AnalyticHestonEngine_BranchCorrection
    
    AndersenPiterbarg = _quantlib_risks.AnalyticHestonEngine_AndersenPiterbarg
    
    AndersenPiterbargOptCV = _quantlib_risks.AnalyticHestonEngine_AndersenPiterbargOptCV
    
    AsymptoticChF = _quantlib_risks.AnalyticHestonEngine_AsymptoticChF
    
    AngledContour = _quantlib_risks.AnalyticHestonEngine_AngledContour
    
    AngledContourNoCV = _quantlib_risks.AnalyticHestonEngine_AngledContourNoCV
    
    OptimalCV = _quantlib_risks.AnalyticHestonEngine_OptimalCV
    

    def __init__(self, *args):
        r"""
        __init__(AnalyticHestonEngine self, ext::shared_ptr< HestonModel > const & model, Size integrationOrder=144) -> AnalyticHestonEngine
        __init__(AnalyticHestonEngine self, ext::shared_ptr< HestonModel > const & model, Real relTolerance, Size maxEvaluations) -> AnalyticHestonEngine
        __init__(AnalyticHestonEngine self, ext::shared_ptr< HestonModel > const & model, AnalyticHestonEngine::ComplexLogFormula cpxLog, AnalyticHestonEngine_Integration itg, Real andersenPiterbargEpsilon=1e-8) -> AnalyticHestonEngine
        """
        _quantlib_risks.AnalyticHestonEngine_swiginit(self, _quantlib_risks.new_AnalyticHestonEngine(*args))

    def numberOfEvaluations(self):
        r"""numberOfEvaluations(AnalyticHestonEngine self) -> Size"""
        return _quantlib_risks.AnalyticHestonEngine_numberOfEvaluations(self)

    def chF(self, real, imag, t):
        r"""chF(AnalyticHestonEngine self, Real real, Real imag, Time t) -> std::pair< Real,Real >"""
        return _quantlib_risks.AnalyticHestonEngine_chF(self, real, imag, t)
    __swig_destroy__ = _quantlib_risks.delete_AnalyticHestonEngine

# Register AnalyticHestonEngine in _quantlib_risks:
_quantlib_risks.AnalyticHestonEngine_swigregister(AnalyticHestonEngine)
class AnalyticHestonEngine_Integration(object):
    r"""Proxy of C++ AnalyticHestonEngine::Integration class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def gaussLaguerre(integrationOrder=128):
        r"""gaussLaguerre(Size integrationOrder=128) -> AnalyticHestonEngine_Integration"""
        return _quantlib_risks.AnalyticHestonEngine_Integration_gaussLaguerre(integrationOrder)

    @staticmethod
    def gaussLegendre(integrationOrder=128):
        r"""gaussLegendre(Size integrationOrder=128) -> AnalyticHestonEngine_Integration"""
        return _quantlib_risks.AnalyticHestonEngine_Integration_gaussLegendre(integrationOrder)

    @staticmethod
    def gaussChebyshev(integrationOrder=128):
        r"""gaussChebyshev(Size integrationOrder=128) -> AnalyticHestonEngine_Integration"""
        return _quantlib_risks.AnalyticHestonEngine_Integration_gaussChebyshev(integrationOrder)

    @staticmethod
    def gaussChebyshev2nd(integrationOrder=128):
        r"""gaussChebyshev2nd(Size integrationOrder=128) -> AnalyticHestonEngine_Integration"""
        return _quantlib_risks.AnalyticHestonEngine_Integration_gaussChebyshev2nd(integrationOrder)

    @staticmethod
    def gaussLobatto(relTolerance, absTolerance, maxEvaluations=1000, useConvergenceEstimate=False):
        r"""gaussLobatto(Real relTolerance, Real absTolerance, Size maxEvaluations=1000, bool useConvergenceEstimate=False) -> AnalyticHestonEngine_Integration"""
        return _quantlib_risks.AnalyticHestonEngine_Integration_gaussLobatto(relTolerance, absTolerance, maxEvaluations, useConvergenceEstimate)

    @staticmethod
    def gaussKronrod(absTolerance, maxEvaluations=1000):
        r"""gaussKronrod(Real absTolerance, Size maxEvaluations=1000) -> AnalyticHestonEngine_Integration"""
        return _quantlib_risks.AnalyticHestonEngine_Integration_gaussKronrod(absTolerance, maxEvaluations)

    @staticmethod
    def simpson(absTolerance, maxEvaluations=1000):
        r"""simpson(Real absTolerance, Size maxEvaluations=1000) -> AnalyticHestonEngine_Integration"""
        return _quantlib_risks.AnalyticHestonEngine_Integration_simpson(absTolerance, maxEvaluations)

    @staticmethod
    def trapezoid(absTolerance, maxEvaluations=1000):
        r"""trapezoid(Real absTolerance, Size maxEvaluations=1000) -> AnalyticHestonEngine_Integration"""
        return _quantlib_risks.AnalyticHestonEngine_Integration_trapezoid(absTolerance, maxEvaluations)

    @staticmethod
    def discreteSimpson(evaluation=1000):
        r"""discreteSimpson(Size evaluation=1000) -> AnalyticHestonEngine_Integration"""
        return _quantlib_risks.AnalyticHestonEngine_Integration_discreteSimpson(evaluation)

    @staticmethod
    def discreteTrapezoid(evaluation=1000):
        r"""discreteTrapezoid(Size evaluation=1000) -> AnalyticHestonEngine_Integration"""
        return _quantlib_risks.AnalyticHestonEngine_Integration_discreteTrapezoid(evaluation)

    @staticmethod
    def expSinh(relTolerance=1e-8):
        r"""expSinh(Real relTolerance=1e-8) -> AnalyticHestonEngine_Integration"""
        return _quantlib_risks.AnalyticHestonEngine_Integration_expSinh(relTolerance)

    @staticmethod
    def andersenPiterbargIntegrationLimit(c_inf, epsilon, v0, t):
        r"""andersenPiterbargIntegrationLimit(Real c_inf, Real epsilon, Real v0, Real t) -> Real"""
        return _quantlib_risks.AnalyticHestonEngine_Integration_andersenPiterbargIntegrationLimit(c_inf, epsilon, v0, t)

    def numberOfEvaluations(self):
        r"""numberOfEvaluations(AnalyticHestonEngine_Integration self) -> Size"""
        return _quantlib_risks.AnalyticHestonEngine_Integration_numberOfEvaluations(self)

    def isAdaptiveIntegration(self):
        r"""isAdaptiveIntegration(AnalyticHestonEngine_Integration self) -> bool"""
        return _quantlib_risks.AnalyticHestonEngine_Integration_isAdaptiveIntegration(self)
    __swig_destroy__ = _quantlib_risks.delete_AnalyticHestonEngine_Integration

# Register AnalyticHestonEngine_Integration in _quantlib_risks:
_quantlib_risks.AnalyticHestonEngine_Integration_swigregister(AnalyticHestonEngine_Integration)
class AnalyticHestonEngine_OptimalAlpha(object):
    r"""Proxy of C++ AnalyticHestonEngine::OptimalAlpha class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, t, engine):
        r"""__init__(AnalyticHestonEngine_OptimalAlpha self, Time const t, ext::shared_ptr< AnalyticHestonEngine > const & engine) -> AnalyticHestonEngine_OptimalAlpha"""
        _quantlib_risks.AnalyticHestonEngine_OptimalAlpha_swiginit(self, _quantlib_risks.new_AnalyticHestonEngine_OptimalAlpha(t, engine))

    def __call__(self, strike):
        r"""__call__(AnalyticHestonEngine_OptimalAlpha self, Real strike) -> Real"""
        return _quantlib_risks.AnalyticHestonEngine_OptimalAlpha___call__(self, strike)

    def alphaGreaterZero(self, strike):
        r"""alphaGreaterZero(AnalyticHestonEngine_OptimalAlpha self, Real strike) -> std::pair< Real,Real >"""
        return _quantlib_risks.AnalyticHestonEngine_OptimalAlpha_alphaGreaterZero(self, strike)

    def alphaSmallerMinusOne(self, strike):
        r"""alphaSmallerMinusOne(AnalyticHestonEngine_OptimalAlpha self, Real strike) -> std::pair< Real,Real >"""
        return _quantlib_risks.AnalyticHestonEngine_OptimalAlpha_alphaSmallerMinusOne(self, strike)

    def numberOfEvaluations(self):
        r"""numberOfEvaluations(AnalyticHestonEngine_OptimalAlpha self) -> Size"""
        return _quantlib_risks.AnalyticHestonEngine_OptimalAlpha_numberOfEvaluations(self)

    def M(self, k):
        r"""M(AnalyticHestonEngine_OptimalAlpha self, Real k) -> Real"""
        return _quantlib_risks.AnalyticHestonEngine_OptimalAlpha_M(self, k)

    def k(self, x, sgn):
        r"""k(AnalyticHestonEngine_OptimalAlpha self, Real x, Integer sgn) -> Real"""
        return _quantlib_risks.AnalyticHestonEngine_OptimalAlpha_k(self, x, sgn)

    def alphaMin(self, strike):
        r"""alphaMin(AnalyticHestonEngine_OptimalAlpha self, Real strike) -> Real"""
        return _quantlib_risks.AnalyticHestonEngine_OptimalAlpha_alphaMin(self, strike)

    def alphaMax(self, strike):
        r"""alphaMax(AnalyticHestonEngine_OptimalAlpha self, Real strike) -> Real"""
        return _quantlib_risks.AnalyticHestonEngine_OptimalAlpha_alphaMax(self, strike)
    __swig_destroy__ = _quantlib_risks.delete_AnalyticHestonEngine_OptimalAlpha

# Register AnalyticHestonEngine_OptimalAlpha in _quantlib_risks:
_quantlib_risks.AnalyticHestonEngine_OptimalAlpha_swigregister(AnalyticHestonEngine_OptimalAlpha)
class COSHestonEngine(PricingEngine):
    r"""Proxy of C++ COSHestonEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model, L=16, N=200):
        r"""__init__(COSHestonEngine self, ext::shared_ptr< HestonModel > const & model, Real L=16, Size N=200) -> COSHestonEngine"""
        _quantlib_risks.COSHestonEngine_swiginit(self, _quantlib_risks.new_COSHestonEngine(model, L, N))
    __swig_destroy__ = _quantlib_risks.delete_COSHestonEngine

# Register COSHestonEngine in _quantlib_risks:
_quantlib_risks.COSHestonEngine_swigregister(COSHestonEngine)
class ExponentialFittingHestonEngine(PricingEngine):
    r"""Proxy of C++ ExponentialFittingHestonEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ExponentialFittingHestonEngine self, ext::shared_ptr< HestonModel > const & model, ExponentialFittingHestonEngine::ControlVariate cv=ControlVariate::OptimalCV, doubleOrNull scaling=Null< Real >(), Real alpha=-0.5) -> ExponentialFittingHestonEngine"""
        _quantlib_risks.ExponentialFittingHestonEngine_swiginit(self, _quantlib_risks.new_ExponentialFittingHestonEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_ExponentialFittingHestonEngine

# Register ExponentialFittingHestonEngine in _quantlib_risks:
_quantlib_risks.ExponentialFittingHestonEngine_swigregister(ExponentialFittingHestonEngine)
class AnalyticPTDHestonEngine(PricingEngine):
    r"""Proxy of C++ AnalyticPTDHestonEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Gatheral = _quantlib_risks.AnalyticPTDHestonEngine_Gatheral
    
    AndersenPiterbarg = _quantlib_risks.AnalyticPTDHestonEngine_AndersenPiterbarg
    

    def __init__(self, *args):
        r"""
        __init__(AnalyticPTDHestonEngine self, ext::shared_ptr< PiecewiseTimeDependentHestonModel > const & model, Real relTolerance, Size maxEvaluations) -> AnalyticPTDHestonEngine
        __init__(AnalyticPTDHestonEngine self, ext::shared_ptr< PiecewiseTimeDependentHestonModel > const & model, Size integrationOrder=144) -> AnalyticPTDHestonEngine
        __init__(AnalyticPTDHestonEngine self, ext::shared_ptr< PiecewiseTimeDependentHestonModel > const & model, AnalyticPTDHestonEngine::ComplexLogFormula cpxLog, AnalyticHestonEngine_Integration itg, Real andersenPiterbargEpsilon=1e-8) -> AnalyticPTDHestonEngine
        """
        _quantlib_risks.AnalyticPTDHestonEngine_swiginit(self, _quantlib_risks.new_AnalyticPTDHestonEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticPTDHestonEngine

# Register AnalyticPTDHestonEngine in _quantlib_risks:
_quantlib_risks.AnalyticPTDHestonEngine_swigregister(AnalyticPTDHestonEngine)
class BatesModel(HestonModel):
    r"""Proxy of C++ BatesModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(BatesModel self, ext::shared_ptr< BatesProcess > const & process) -> BatesModel"""
        _quantlib_risks.BatesModel_swiginit(self, _quantlib_risks.new_BatesModel(process))

    def nu(self):
        r"""nu(BatesModel self) -> Real"""
        return _quantlib_risks.BatesModel_nu(self)

    def delta(self):
        r"""delta(BatesModel self) -> Real"""
        return _quantlib_risks.BatesModel_delta(self)

    def lambda_parameter(self):
        r"""lambda_parameter(BatesModel self) -> Real"""
        return _quantlib_risks.BatesModel_lambda_parameter(self)
    __swig_destroy__ = _quantlib_risks.delete_BatesModel

# Register BatesModel in _quantlib_risks:
_quantlib_risks.BatesModel_swigregister(BatesModel)
class BatesEngine(PricingEngine):
    r"""Proxy of C++ BatesEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BatesEngine self, ext::shared_ptr< BatesModel > const & model, Size integrationOrder=144) -> BatesEngine
        __init__(BatesEngine self, ext::shared_ptr< BatesModel > const & model, Real relTolerance, Size maxEvaluations) -> BatesEngine
        """
        _quantlib_risks.BatesEngine_swiginit(self, _quantlib_risks.new_BatesEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_BatesEngine

# Register BatesEngine in _quantlib_risks:
_quantlib_risks.BatesEngine_swigregister(BatesEngine)
class IntegralEngine(PricingEngine):
    r"""Proxy of C++ IntegralEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2):
        r"""__init__(IntegralEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2) -> IntegralEngine"""
        _quantlib_risks.IntegralEngine_swiginit(self, _quantlib_risks.new_IntegralEngine(arg2))
    __swig_destroy__ = _quantlib_risks.delete_IntegralEngine

# Register IntegralEngine in _quantlib_risks:
_quantlib_risks.IntegralEngine_swigregister(IntegralEngine)
class BinomialCRRVanillaEngine(PricingEngine):
    r"""Proxy of C++ BinomialVanillaEngine< CoxRossRubinstein > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        r"""__init__(BinomialCRRVanillaEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2, Size steps) -> BinomialCRRVanillaEngine"""
        _quantlib_risks.BinomialCRRVanillaEngine_swiginit(self, _quantlib_risks.new_BinomialCRRVanillaEngine(arg2, steps))
    __swig_destroy__ = _quantlib_risks.delete_BinomialCRRVanillaEngine

# Register BinomialCRRVanillaEngine in _quantlib_risks:
_quantlib_risks.BinomialCRRVanillaEngine_swigregister(BinomialCRRVanillaEngine)
class BinomialJRVanillaEngine(PricingEngine):
    r"""Proxy of C++ BinomialVanillaEngine< JarrowRudd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        r"""__init__(BinomialJRVanillaEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2, Size steps) -> BinomialJRVanillaEngine"""
        _quantlib_risks.BinomialJRVanillaEngine_swiginit(self, _quantlib_risks.new_BinomialJRVanillaEngine(arg2, steps))
    __swig_destroy__ = _quantlib_risks.delete_BinomialJRVanillaEngine

# Register BinomialJRVanillaEngine in _quantlib_risks:
_quantlib_risks.BinomialJRVanillaEngine_swigregister(BinomialJRVanillaEngine)
class BinomialEQPVanillaEngine(PricingEngine):
    r"""Proxy of C++ BinomialVanillaEngine< AdditiveEQPBinomialTree > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        r"""__init__(BinomialEQPVanillaEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2, Size steps) -> BinomialEQPVanillaEngine"""
        _quantlib_risks.BinomialEQPVanillaEngine_swiginit(self, _quantlib_risks.new_BinomialEQPVanillaEngine(arg2, steps))
    __swig_destroy__ = _quantlib_risks.delete_BinomialEQPVanillaEngine

# Register BinomialEQPVanillaEngine in _quantlib_risks:
_quantlib_risks.BinomialEQPVanillaEngine_swigregister(BinomialEQPVanillaEngine)
class BinomialTrigeorgisVanillaEngine(PricingEngine):
    r"""Proxy of C++ BinomialVanillaEngine< Trigeorgis > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        r"""__init__(BinomialTrigeorgisVanillaEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2, Size steps) -> BinomialTrigeorgisVanillaEngine"""
        _quantlib_risks.BinomialTrigeorgisVanillaEngine_swiginit(self, _quantlib_risks.new_BinomialTrigeorgisVanillaEngine(arg2, steps))
    __swig_destroy__ = _quantlib_risks.delete_BinomialTrigeorgisVanillaEngine

# Register BinomialTrigeorgisVanillaEngine in _quantlib_risks:
_quantlib_risks.BinomialTrigeorgisVanillaEngine_swigregister(BinomialTrigeorgisVanillaEngine)
class BinomialTianVanillaEngine(PricingEngine):
    r"""Proxy of C++ BinomialVanillaEngine< Tian > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        r"""__init__(BinomialTianVanillaEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2, Size steps) -> BinomialTianVanillaEngine"""
        _quantlib_risks.BinomialTianVanillaEngine_swiginit(self, _quantlib_risks.new_BinomialTianVanillaEngine(arg2, steps))
    __swig_destroy__ = _quantlib_risks.delete_BinomialTianVanillaEngine

# Register BinomialTianVanillaEngine in _quantlib_risks:
_quantlib_risks.BinomialTianVanillaEngine_swigregister(BinomialTianVanillaEngine)
class BinomialLRVanillaEngine(PricingEngine):
    r"""Proxy of C++ BinomialVanillaEngine< LeisenReimer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        r"""__init__(BinomialLRVanillaEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2, Size steps) -> BinomialLRVanillaEngine"""
        _quantlib_risks.BinomialLRVanillaEngine_swiginit(self, _quantlib_risks.new_BinomialLRVanillaEngine(arg2, steps))
    __swig_destroy__ = _quantlib_risks.delete_BinomialLRVanillaEngine

# Register BinomialLRVanillaEngine in _quantlib_risks:
_quantlib_risks.BinomialLRVanillaEngine_swigregister(BinomialLRVanillaEngine)
class BinomialJ4VanillaEngine(PricingEngine):
    r"""Proxy of C++ BinomialVanillaEngine< Joshi4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        r"""__init__(BinomialJ4VanillaEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2, Size steps) -> BinomialJ4VanillaEngine"""
        _quantlib_risks.BinomialJ4VanillaEngine_swiginit(self, _quantlib_risks.new_BinomialJ4VanillaEngine(arg2, steps))
    __swig_destroy__ = _quantlib_risks.delete_BinomialJ4VanillaEngine

# Register BinomialJ4VanillaEngine in _quantlib_risks:
_quantlib_risks.BinomialJ4VanillaEngine_swigregister(BinomialJ4VanillaEngine)

def BinomialVanillaEngine(process, type, steps):
    type = type.lower()
    if type == "crr" or type == "coxrossrubinstein":
        cls = BinomialCRRVanillaEngine
    elif type == "jr" or type == "jarrowrudd":
        cls = BinomialJRVanillaEngine
    elif type == "eqp":
        cls = BinomialEQPVanillaEngine
    elif type == "trigeorgis":
        cls = BinomialTrigeorgisVanillaEngine
    elif type == "tian":
        cls = BinomialTianVanillaEngine
    elif type == "lr" or type == "leisenreimer":
        cls = BinomialLRVanillaEngine
    elif type == "j4" or type == "joshi4":
        cls = BinomialJ4VanillaEngine
    else:
        raise RuntimeError("unknown binomial engine type: %s" % type);
    return cls(process, steps)

class LsmBasisSystem(object):
    r"""Proxy of C++ LsmBasisSystem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Monomial = _quantlib_risks.LsmBasisSystem_Monomial
    
    Laguerre = _quantlib_risks.LsmBasisSystem_Laguerre
    
    Hermite = _quantlib_risks.LsmBasisSystem_Hermite
    
    Hyperbolic = _quantlib_risks.LsmBasisSystem_Hyperbolic
    
    Legendre = _quantlib_risks.LsmBasisSystem_Legendre
    
    Chebyshev = _quantlib_risks.LsmBasisSystem_Chebyshev
    
    Chebyshev2nd = _quantlib_risks.LsmBasisSystem_Chebyshev2nd
    

    def __init__(self):
        r"""__init__(LsmBasisSystem self) -> LsmBasisSystem"""
        _quantlib_risks.LsmBasisSystem_swiginit(self, _quantlib_risks.new_LsmBasisSystem())
    __swig_destroy__ = _quantlib_risks.delete_LsmBasisSystem

# Register LsmBasisSystem in _quantlib_risks:
_quantlib_risks.LsmBasisSystem_swigregister(LsmBasisSystem)
class MCPREuropeanEngine(PricingEngine):
    r"""Proxy of C++ MCEuropeanEngine< PseudoRandom > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCPREuropeanEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, intOrNull timeSteps=Null< Size >(), intOrNull timeStepsPerYear=Null< Size >(), bool brownianBridge=False, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0) -> MCPREuropeanEngine"""
        _quantlib_risks.MCPREuropeanEngine_swiginit(self, _quantlib_risks.new_MCPREuropeanEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCPREuropeanEngine

# Register MCPREuropeanEngine in _quantlib_risks:
_quantlib_risks.MCPREuropeanEngine_swigregister(MCPREuropeanEngine)
class MCLDEuropeanEngine(PricingEngine):
    r"""Proxy of C++ MCEuropeanEngine< LowDiscrepancy > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCLDEuropeanEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, intOrNull timeSteps=Null< Size >(), intOrNull timeStepsPerYear=Null< Size >(), bool brownianBridge=False, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0) -> MCLDEuropeanEngine"""
        _quantlib_risks.MCLDEuropeanEngine_swiginit(self, _quantlib_risks.new_MCLDEuropeanEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCLDEuropeanEngine

# Register MCLDEuropeanEngine in _quantlib_risks:
_quantlib_risks.MCLDEuropeanEngine_swigregister(MCLDEuropeanEngine)

def MCEuropeanEngine(process,
                     traits,
                     timeSteps=None,
                     timeStepsPerYear=None,
                     brownianBridge=False,
                     antitheticVariate=False,
                     requiredSamples=None,
                     requiredTolerance=None,
                     maxSamples=None,
                     seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPREuropeanEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDEuropeanEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               timeSteps,
               timeStepsPerYear,
               brownianBridge,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed)

class MCPRAmericanEngine(PricingEngine):
    r"""Proxy of C++ MCAmericanEngine< PseudoRandom > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCPRAmericanEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, intOrNull timeSteps=Null< Size >(), intOrNull timeStepsPerYear=Null< Size >(), bool antitheticVariate=False, bool controlVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0, intOrNull polynomOrder=2, LsmBasisSystem::PolynomialType polynomType=Monomial, int nCalibrationSamples=2048, ext::optional< bool > antitheticVariateCalibration=ext::nullopt, BigNatural seedCalibration=Null< Size >()) -> MCPRAmericanEngine"""
        _quantlib_risks.MCPRAmericanEngine_swiginit(self, _quantlib_risks.new_MCPRAmericanEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCPRAmericanEngine

# Register MCPRAmericanEngine in _quantlib_risks:
_quantlib_risks.MCPRAmericanEngine_swigregister(MCPRAmericanEngine)
class MCLDAmericanEngine(PricingEngine):
    r"""Proxy of C++ MCAmericanEngine< LowDiscrepancy > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCLDAmericanEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, intOrNull timeSteps=Null< Size >(), intOrNull timeStepsPerYear=Null< Size >(), bool antitheticVariate=False, bool controlVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0, intOrNull polynomOrder=2, LsmBasisSystem::PolynomialType polynomType=Monomial, int nCalibrationSamples=2048, ext::optional< bool > antitheticVariateCalibration=ext::nullopt, BigNatural seedCalibration=Null< Size >()) -> MCLDAmericanEngine"""
        _quantlib_risks.MCLDAmericanEngine_swiginit(self, _quantlib_risks.new_MCLDAmericanEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCLDAmericanEngine

# Register MCLDAmericanEngine in _quantlib_risks:
_quantlib_risks.MCLDAmericanEngine_swigregister(MCLDAmericanEngine)

def MCAmericanEngine(process,
                     traits,
                     timeSteps=None,
                     timeStepsPerYear=None,
                     antitheticVariate=False,
                     controlVariate=False,
                     requiredSamples=None,
                     requiredTolerance=None,
                     maxSamples=None,
                     seed=0,
                     polynomOrder=2,
                     polynomType=LsmBasisSystem.Monomial,
                     nCalibrationSamples=2048,
                     antitheticVariateCalibration=None,
                     seedCalibration=None):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRAmericanEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDAmericanEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               timeSteps,
               timeStepsPerYear,
               antitheticVariate,
               controlVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed,
               polynomOrder,
               polynomType,
               nCalibrationSamples,
               antitheticVariateCalibration,
               seedCalibration if seedCalibration is not None else nullInt())

class MCPREuropeanHestonEngine(PricingEngine):
    r"""Proxy of C++ MCEuropeanHestonEngine< PseudoRandom > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCPREuropeanHestonEngine self, ext::shared_ptr< HestonProcess > const & process, intOrNull timeSteps=Null< Size >(), intOrNull timeStepsPerYear=Null< Size >(), bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0) -> MCPREuropeanHestonEngine"""
        _quantlib_risks.MCPREuropeanHestonEngine_swiginit(self, _quantlib_risks.new_MCPREuropeanHestonEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCPREuropeanHestonEngine

# Register MCPREuropeanHestonEngine in _quantlib_risks:
_quantlib_risks.MCPREuropeanHestonEngine_swigregister(MCPREuropeanHestonEngine)
class MCLDEuropeanHestonEngine(PricingEngine):
    r"""Proxy of C++ MCEuropeanHestonEngine< LowDiscrepancy > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCLDEuropeanHestonEngine self, ext::shared_ptr< HestonProcess > const & process, intOrNull timeSteps=Null< Size >(), intOrNull timeStepsPerYear=Null< Size >(), bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0) -> MCLDEuropeanHestonEngine"""
        _quantlib_risks.MCLDEuropeanHestonEngine_swiginit(self, _quantlib_risks.new_MCLDEuropeanHestonEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCLDEuropeanHestonEngine

# Register MCLDEuropeanHestonEngine in _quantlib_risks:
_quantlib_risks.MCLDEuropeanHestonEngine_swigregister(MCLDEuropeanHestonEngine)

def MCEuropeanHestonEngine(process,
                           traits,
                           timeSteps=None,
                           timeStepsPerYear=None,
                           antitheticVariate=False,
                           requiredSamples=None,
                           requiredTolerance=None,
                           maxSamples=None,
                           seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPREuropeanHestonEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDEuropeanHestonEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               timeSteps,
               timeStepsPerYear,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed)

class MCPRDigitalEngine(PricingEngine):
    r"""Proxy of C++ MCDigitalEngine< PseudoRandom > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCPRDigitalEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, intOrNull timeSteps=Null< Size >(), intOrNull timeStepsPerYear=Null< Size >(), bool brownianBridge=False, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0) -> MCPRDigitalEngine"""
        _quantlib_risks.MCPRDigitalEngine_swiginit(self, _quantlib_risks.new_MCPRDigitalEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCPRDigitalEngine

# Register MCPRDigitalEngine in _quantlib_risks:
_quantlib_risks.MCPRDigitalEngine_swigregister(MCPRDigitalEngine)
class MCLDDigitalEngine(PricingEngine):
    r"""Proxy of C++ MCDigitalEngine< LowDiscrepancy > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCLDDigitalEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, intOrNull timeSteps=Null< Size >(), intOrNull timeStepsPerYear=Null< Size >(), bool brownianBridge=False, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0) -> MCLDDigitalEngine"""
        _quantlib_risks.MCLDDigitalEngine_swiginit(self, _quantlib_risks.new_MCLDDigitalEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCLDDigitalEngine

# Register MCLDDigitalEngine in _quantlib_risks:
_quantlib_risks.MCLDDigitalEngine_swigregister(MCLDDigitalEngine)

def MCDigitalEngine(process,
                    traits,
                    timeSteps=None,
                    timeStepsPerYear=None,
                    brownianBridge=False,
                    antitheticVariate=False,
                    requiredSamples=None,
                    requiredTolerance=None,
                    maxSamples=None,
                    seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRDigitalEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDDigitalEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               timeSteps,
               timeStepsPerYear,
               brownianBridge,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed)

class BaroneAdesiWhaleyApproximationEngine(PricingEngine):
    r"""Proxy of C++ BaroneAdesiWhaleyApproximationEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(BaroneAdesiWhaleyApproximationEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process) -> BaroneAdesiWhaleyApproximationEngine"""
        _quantlib_risks.BaroneAdesiWhaleyApproximationEngine_swiginit(self, _quantlib_risks.new_BaroneAdesiWhaleyApproximationEngine(process))
    __swig_destroy__ = _quantlib_risks.delete_BaroneAdesiWhaleyApproximationEngine

# Register BaroneAdesiWhaleyApproximationEngine in _quantlib_risks:
_quantlib_risks.BaroneAdesiWhaleyApproximationEngine_swigregister(BaroneAdesiWhaleyApproximationEngine)
class BjerksundStenslandApproximationEngine(PricingEngine):
    r"""Proxy of C++ BjerksundStenslandApproximationEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(BjerksundStenslandApproximationEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process) -> BjerksundStenslandApproximationEngine"""
        _quantlib_risks.BjerksundStenslandApproximationEngine_swiginit(self, _quantlib_risks.new_BjerksundStenslandApproximationEngine(process))
    __swig_destroy__ = _quantlib_risks.delete_BjerksundStenslandApproximationEngine

# Register BjerksundStenslandApproximationEngine in _quantlib_risks:
_quantlib_risks.BjerksundStenslandApproximationEngine_swigregister(BjerksundStenslandApproximationEngine)
class JuQuadraticApproximationEngine(PricingEngine):
    r"""Proxy of C++ JuQuadraticApproximationEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(JuQuadraticApproximationEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process) -> JuQuadraticApproximationEngine"""
        _quantlib_risks.JuQuadraticApproximationEngine_swiginit(self, _quantlib_risks.new_JuQuadraticApproximationEngine(process))
    __swig_destroy__ = _quantlib_risks.delete_JuQuadraticApproximationEngine

# Register JuQuadraticApproximationEngine in _quantlib_risks:
_quantlib_risks.JuQuadraticApproximationEngine_swigregister(JuQuadraticApproximationEngine)
class AnalyticDigitalAmericanEngine(PricingEngine):
    r"""Proxy of C++ AnalyticDigitalAmericanEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(AnalyticDigitalAmericanEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process) -> AnalyticDigitalAmericanEngine"""
        _quantlib_risks.AnalyticDigitalAmericanEngine_swiginit(self, _quantlib_risks.new_AnalyticDigitalAmericanEngine(process))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticDigitalAmericanEngine

# Register AnalyticDigitalAmericanEngine in _quantlib_risks:
_quantlib_risks.AnalyticDigitalAmericanEngine_swigregister(AnalyticDigitalAmericanEngine)
class AnalyticDigitalAmericanKOEngine(PricingEngine):
    r"""Proxy of C++ AnalyticDigitalAmericanKOEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(AnalyticDigitalAmericanKOEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process) -> AnalyticDigitalAmericanKOEngine"""
        _quantlib_risks.AnalyticDigitalAmericanKOEngine_swiginit(self, _quantlib_risks.new_AnalyticDigitalAmericanKOEngine(process))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticDigitalAmericanKOEngine

# Register AnalyticDigitalAmericanKOEngine in _quantlib_risks:
_quantlib_risks.AnalyticDigitalAmericanKOEngine_swigregister(AnalyticDigitalAmericanKOEngine)
class DividendVanillaOption(OneAssetOption):
    r"""Proxy of C++ DividendVanillaOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff, exercise, dividendDates, dividends):
        r"""__init__(DividendVanillaOption self, ext::shared_ptr< StrikedTypePayoff > const & payoff, ext::shared_ptr< Exercise > const & exercise, DateVector dividendDates, std::vector< Real,std::allocator< Real > > const & dividends) -> DividendVanillaOption"""
        _quantlib_risks.DividendVanillaOption_swiginit(self, _quantlib_risks.new_DividendVanillaOption(payoff, exercise, dividendDates, dividends))

    def impliedVolatility(self, targetValue, process, accuracy=1.0e-4, maxEvaluations=100, minVol=1.0e-4, maxVol=4.0):
        r"""impliedVolatility(DividendVanillaOption self, Real targetValue, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, Real accuracy=1.0e-4, Size maxEvaluations=100, Volatility minVol=1.0e-4, Volatility maxVol=4.0) -> Volatility"""
        return _quantlib_risks.DividendVanillaOption_impliedVolatility(self, targetValue, process, accuracy, maxEvaluations, minVol, maxVol)
    __swig_destroy__ = _quantlib_risks.delete_DividendVanillaOption

# Register DividendVanillaOption in _quantlib_risks:
_quantlib_risks.DividendVanillaOption_swigregister(DividendVanillaOption)
class AnalyticDividendEuropeanEngine(PricingEngine):
    r"""Proxy of C++ AnalyticDividendEuropeanEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(AnalyticDividendEuropeanEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process) -> AnalyticDividendEuropeanEngine
        __init__(AnalyticDividendEuropeanEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, DividendSchedule dividends) -> AnalyticDividendEuropeanEngine
        """
        _quantlib_risks.AnalyticDividendEuropeanEngine_swiginit(self, _quantlib_risks.new_AnalyticDividendEuropeanEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticDividendEuropeanEngine

# Register AnalyticDividendEuropeanEngine in _quantlib_risks:
_quantlib_risks.AnalyticDividendEuropeanEngine_swigregister(AnalyticDividendEuropeanEngine)
class QdPlusAmericanEngine(PricingEngine):
    r"""Proxy of C++ QdPlusAmericanEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Brent = _quantlib_risks.QdPlusAmericanEngine_Brent
    
    Newton = _quantlib_risks.QdPlusAmericanEngine_Newton
    
    Ridder = _quantlib_risks.QdPlusAmericanEngine_Ridder
    
    Halley = _quantlib_risks.QdPlusAmericanEngine_Halley
    
    SuperHalley = _quantlib_risks.QdPlusAmericanEngine_SuperHalley
    

    def __init__(self, *args, **kwargs):
        r"""__init__(QdPlusAmericanEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > process, Size interpolationPoints=8, QdPlusAmericanEngine::SolverType solverType=Halley, Real eps=1e-6, Size maxIter=Null< Size >()) -> QdPlusAmericanEngine"""
        _quantlib_risks.QdPlusAmericanEngine_swiginit(self, _quantlib_risks.new_QdPlusAmericanEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_QdPlusAmericanEngine

# Register QdPlusAmericanEngine in _quantlib_risks:
_quantlib_risks.QdPlusAmericanEngine_swigregister(QdPlusAmericanEngine)
class QdFpIterationScheme(object):
    r"""Proxy of C++ QdFpIterationScheme class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _quantlib_risks.delete_QdFpIterationScheme

# Register QdFpIterationScheme in _quantlib_risks:
_quantlib_risks.QdFpIterationScheme_swigregister(QdFpIterationScheme)
class QdFpLegendreScheme(QdFpIterationScheme):
    r"""Proxy of C++ QdFpLegendreScheme class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, l, m, n, p):
        r"""__init__(QdFpLegendreScheme self, Size l, Size m, Size n, Size p) -> QdFpLegendreScheme"""
        _quantlib_risks.QdFpLegendreScheme_swiginit(self, _quantlib_risks.new_QdFpLegendreScheme(l, m, n, p))
    __swig_destroy__ = _quantlib_risks.delete_QdFpLegendreScheme

# Register QdFpLegendreScheme in _quantlib_risks:
_quantlib_risks.QdFpLegendreScheme_swigregister(QdFpLegendreScheme)
class QdFpLegendreTanhSinhScheme(QdFpLegendreScheme):
    r"""Proxy of C++ QdFpLegendreTanhSinhScheme class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, l, m, n, eps):
        r"""__init__(QdFpLegendreTanhSinhScheme self, Size l, Size m, Size n, Real eps) -> QdFpLegendreTanhSinhScheme"""
        _quantlib_risks.QdFpLegendreTanhSinhScheme_swiginit(self, _quantlib_risks.new_QdFpLegendreTanhSinhScheme(l, m, n, eps))
    __swig_destroy__ = _quantlib_risks.delete_QdFpLegendreTanhSinhScheme

# Register QdFpLegendreTanhSinhScheme in _quantlib_risks:
_quantlib_risks.QdFpLegendreTanhSinhScheme_swigregister(QdFpLegendreTanhSinhScheme)
class QdFpTanhSinhIterationScheme(QdFpIterationScheme):
    r"""Proxy of C++ QdFpTanhSinhIterationScheme class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, m, n, eps):
        r"""__init__(QdFpTanhSinhIterationScheme self, Size m, Size n, Real eps) -> QdFpTanhSinhIterationScheme"""
        _quantlib_risks.QdFpTanhSinhIterationScheme_swiginit(self, _quantlib_risks.new_QdFpTanhSinhIterationScheme(m, n, eps))
    __swig_destroy__ = _quantlib_risks.delete_QdFpTanhSinhIterationScheme

# Register QdFpTanhSinhIterationScheme in _quantlib_risks:
_quantlib_risks.QdFpTanhSinhIterationScheme_swigregister(QdFpTanhSinhIterationScheme)
class QdFpAmericanEngine(PricingEngine):
    r"""Proxy of C++ QdFpAmericanEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FP_A = _quantlib_risks.QdFpAmericanEngine_FP_A
    
    FP_B = _quantlib_risks.QdFpAmericanEngine_FP_B
    
    Auto = _quantlib_risks.QdFpAmericanEngine_Auto
    

    def __init__(self, *args):
        r"""__init__(QdFpAmericanEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > bsProcess, ext::shared_ptr< QdFpIterationScheme > iterationScheme=accurateScheme(), QdFpAmericanEngine::FixedPointEquation fpEquation=Auto) -> QdFpAmericanEngine"""
        _quantlib_risks.QdFpAmericanEngine_swiginit(self, _quantlib_risks.new_QdFpAmericanEngine(*args))

    @staticmethod
    def fastScheme():
        r"""fastScheme() -> ext::shared_ptr< QdFpIterationScheme >"""
        return _quantlib_risks.QdFpAmericanEngine_fastScheme()

    @staticmethod
    def accurateScheme():
        r"""accurateScheme() -> ext::shared_ptr< QdFpIterationScheme >"""
        return _quantlib_risks.QdFpAmericanEngine_accurateScheme()

    @staticmethod
    def highPrecisionScheme():
        r"""highPrecisionScheme() -> ext::shared_ptr< QdFpIterationScheme >"""
        return _quantlib_risks.QdFpAmericanEngine_highPrecisionScheme()
    __swig_destroy__ = _quantlib_risks.delete_QdFpAmericanEngine

# Register QdFpAmericanEngine in _quantlib_risks:
_quantlib_risks.QdFpAmericanEngine_swigregister(QdFpAmericanEngine)
class FdmSchemeDesc(object):
    r"""Proxy of C++ FdmSchemeDesc class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HundsdorferType = _quantlib_risks.FdmSchemeDesc_HundsdorferType
    
    DouglasType = _quantlib_risks.FdmSchemeDesc_DouglasType
    
    CraigSneydType = _quantlib_risks.FdmSchemeDesc_CraigSneydType
    
    ModifiedCraigSneydType = _quantlib_risks.FdmSchemeDesc_ModifiedCraigSneydType
    
    ImplicitEulerType = _quantlib_risks.FdmSchemeDesc_ImplicitEulerType
    
    ExplicitEulerType = _quantlib_risks.FdmSchemeDesc_ExplicitEulerType
    
    MethodOfLinesType = _quantlib_risks.FdmSchemeDesc_MethodOfLinesType
    
    TrBDF2Type = _quantlib_risks.FdmSchemeDesc_TrBDF2Type
    
    CrankNicolsonType = _quantlib_risks.FdmSchemeDesc_CrankNicolsonType
    

    def __init__(self, type, theta, mu):
        r"""__init__(FdmSchemeDesc self, FdmSchemeDesc::FdmSchemeType type, Real theta, Real mu) -> FdmSchemeDesc"""
        _quantlib_risks.FdmSchemeDesc_swiginit(self, _quantlib_risks.new_FdmSchemeDesc(type, theta, mu))
    type = property(_quantlib_risks.FdmSchemeDesc_type_get, doc=r"""type : q(const).FdmSchemeDesc::FdmSchemeType""")
    theta = property(_quantlib_risks.FdmSchemeDesc_theta_get, doc=r"""theta : q(const).Real""")
    mu = property(_quantlib_risks.FdmSchemeDesc_mu_get, doc=r"""mu : q(const).Real""")

    @staticmethod
    def Douglas():
        r"""Douglas() -> FdmSchemeDesc"""
        return _quantlib_risks.FdmSchemeDesc_Douglas()

    @staticmethod
    def CrankNicolson():
        r"""CrankNicolson() -> FdmSchemeDesc"""
        return _quantlib_risks.FdmSchemeDesc_CrankNicolson()

    @staticmethod
    def ImplicitEuler():
        r"""ImplicitEuler() -> FdmSchemeDesc"""
        return _quantlib_risks.FdmSchemeDesc_ImplicitEuler()

    @staticmethod
    def ExplicitEuler():
        r"""ExplicitEuler() -> FdmSchemeDesc"""
        return _quantlib_risks.FdmSchemeDesc_ExplicitEuler()

    @staticmethod
    def CraigSneyd():
        r"""CraigSneyd() -> FdmSchemeDesc"""
        return _quantlib_risks.FdmSchemeDesc_CraigSneyd()

    @staticmethod
    def ModifiedCraigSneyd():
        r"""ModifiedCraigSneyd() -> FdmSchemeDesc"""
        return _quantlib_risks.FdmSchemeDesc_ModifiedCraigSneyd()

    @staticmethod
    def Hundsdorfer():
        r"""Hundsdorfer() -> FdmSchemeDesc"""
        return _quantlib_risks.FdmSchemeDesc_Hundsdorfer()

    @staticmethod
    def ModifiedHundsdorfer():
        r"""ModifiedHundsdorfer() -> FdmSchemeDesc"""
        return _quantlib_risks.FdmSchemeDesc_ModifiedHundsdorfer()

    @staticmethod
    def MethodOfLines(eps=0.001, relInitStepSize=0.01):
        r"""MethodOfLines(Real eps=0.001, Real relInitStepSize=0.01) -> FdmSchemeDesc"""
        return _quantlib_risks.FdmSchemeDesc_MethodOfLines(eps, relInitStepSize)

    @staticmethod
    def TrBDF2():
        r"""TrBDF2() -> FdmSchemeDesc"""
        return _quantlib_risks.FdmSchemeDesc_TrBDF2()
    __swig_destroy__ = _quantlib_risks.delete_FdmSchemeDesc

# Register FdmSchemeDesc in _quantlib_risks:
_quantlib_risks.FdmSchemeDesc_swigregister(FdmSchemeDesc)
class FdmQuantoHelper(object):
    r"""Proxy of C++ FdmQuantoHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rTS, fTS, fxVolTS, equityFxCorrelation, exchRateATMlevel):
        r"""__init__(FdmQuantoHelper self, ext::shared_ptr< YieldTermStructure > const & rTS, ext::shared_ptr< YieldTermStructure > const & fTS, ext::shared_ptr< BlackVolTermStructure > const & fxVolTS, Real equityFxCorrelation, Real exchRateATMlevel) -> FdmQuantoHelper"""
        _quantlib_risks.FdmQuantoHelper_swiginit(self, _quantlib_risks.new_FdmQuantoHelper(rTS, fTS, fxVolTS, equityFxCorrelation, exchRateATMlevel))
    __swig_destroy__ = _quantlib_risks.delete_FdmQuantoHelper

# Register FdmQuantoHelper in _quantlib_risks:
_quantlib_risks.FdmQuantoHelper_swigregister(FdmQuantoHelper)
class FdBlackScholesVanillaEngine(PricingEngine):
    r"""Proxy of C++ FdBlackScholesVanillaEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Spot = _quantlib_risks.FdBlackScholesVanillaEngine_Spot
    
    Escrowed = _quantlib_risks.FdBlackScholesVanillaEngine_Escrowed
    

    def __init__(self, *args):
        r"""
        __init__(FdBlackScholesVanillaEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, Size tGrid=100, Size xGrid=100, Size dampingSteps=0, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Douglas(), bool localVol=False, Real illegalLocalVolOverwrite=-Null< Real >(), FdBlackScholesVanillaEngine::CashDividendModel cashDividendModel=Spot) -> FdBlackScholesVanillaEngine
        __init__(FdBlackScholesVanillaEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2, ext::shared_ptr< FdmQuantoHelper > const & quantoHelper, Size tGrid=100, Size xGrid=100, Size dampingSteps=0, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Douglas(), bool localVol=False, Real illegalLocalVolOverwrite=-Null< Real >(), FdBlackScholesVanillaEngine::CashDividendModel cashDividendModel=Spot) -> FdBlackScholesVanillaEngine
        __init__(FdBlackScholesVanillaEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, DividendSchedule dividends, Size tGrid=100, Size xGrid=100, Size dampingSteps=0, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Douglas(), bool localVol=False, Real illegalLocalVolOverwrite=-Null< Real >(), FdBlackScholesVanillaEngine::CashDividendModel cashDividendModel=Spot) -> FdBlackScholesVanillaEngine
        __init__(FdBlackScholesVanillaEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2, DividendSchedule dividends, ext::shared_ptr< FdmQuantoHelper > const & quantoHelper, Size tGrid=100, Size xGrid=100, Size dampingSteps=0, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Douglas(), bool localVol=False, Real illegalLocalVolOverwrite=-Null< Real >(), FdBlackScholesVanillaEngine::CashDividendModel cashDividendModel=Spot) -> FdBlackScholesVanillaEngine
        """
        _quantlib_risks.FdBlackScholesVanillaEngine_swiginit(self, _quantlib_risks.new_FdBlackScholesVanillaEngine(*args))

    @staticmethod
    def make(*args, **kwargs):
        r"""make(ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, DividendSchedule dividends={}, ext::shared_ptr< FdmQuantoHelper > const & quantoHelper={}, Size tGrid=100, Size xGrid=100, Size dampingSteps=0, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Douglas(), bool localVol=False, Real illegalLocalVolOverwrite=-Null< Real >(), FdBlackScholesVanillaEngine::CashDividendModel cashDividendModel=Spot) -> ext::shared_ptr< FdBlackScholesVanillaEngine >"""
        return _quantlib_risks.FdBlackScholesVanillaEngine_make(*args, **kwargs)
    __swig_destroy__ = _quantlib_risks.delete_FdBlackScholesVanillaEngine

# Register FdBlackScholesVanillaEngine in _quantlib_risks:
_quantlib_risks.FdBlackScholesVanillaEngine_swigregister(FdBlackScholesVanillaEngine)
class FdBlackScholesShoutEngine(PricingEngine):
    r"""Proxy of C++ FdBlackScholesShoutEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FdBlackScholesShoutEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, Size tGrid=100, Size xGrid=100, Size dampingSteps=0, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Douglas()) -> FdBlackScholesShoutEngine
        __init__(FdBlackScholesShoutEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, DividendSchedule dividends, Size tGrid=100, Size xGrid=100, Size dampingSteps=0, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Douglas()) -> FdBlackScholesShoutEngine
        """
        _quantlib_risks.FdBlackScholesShoutEngine_swiginit(self, _quantlib_risks.new_FdBlackScholesShoutEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_FdBlackScholesShoutEngine

# Register FdBlackScholesShoutEngine in _quantlib_risks:
_quantlib_risks.FdBlackScholesShoutEngine_swigregister(FdBlackScholesShoutEngine)
class FdOrnsteinUhlenbeckVanillaEngine(PricingEngine):
    r"""Proxy of C++ FdOrnsteinUhlenbeckVanillaEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FdOrnsteinUhlenbeckVanillaEngine self, ext::shared_ptr< OrnsteinUhlenbeckProcess > const & arg2, ext::shared_ptr< YieldTermStructure > const & rTS, Size tGrid=100, Size xGrid=100, Size dampingSteps=0, Real epsilon=0.0001, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Douglas()) -> FdOrnsteinUhlenbeckVanillaEngine
        __init__(FdOrnsteinUhlenbeckVanillaEngine self, ext::shared_ptr< OrnsteinUhlenbeckProcess > const & arg2, ext::shared_ptr< YieldTermStructure > const & rTS, DividendSchedule dividends, Size tGrid=100, Size xGrid=100, Size dampingSteps=0, Real epsilon=0.0001, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Douglas()) -> FdOrnsteinUhlenbeckVanillaEngine
        """
        _quantlib_risks.FdOrnsteinUhlenbeckVanillaEngine_swiginit(self, _quantlib_risks.new_FdOrnsteinUhlenbeckVanillaEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_FdOrnsteinUhlenbeckVanillaEngine

# Register FdOrnsteinUhlenbeckVanillaEngine in _quantlib_risks:
_quantlib_risks.FdOrnsteinUhlenbeckVanillaEngine_swigregister(FdOrnsteinUhlenbeckVanillaEngine)
class FdBatesVanillaEngine(PricingEngine):
    r"""Proxy of C++ FdBatesVanillaEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FdBatesVanillaEngine self, ext::shared_ptr< BatesModel > const & model, Size tGrid=100, Size xGrid=100, Size vGrid=50, Size dampingSteps=0, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Hundsdorfer()) -> FdBatesVanillaEngine
        __init__(FdBatesVanillaEngine self, ext::shared_ptr< BatesModel > const & model, DividendSchedule dividends, Size tGrid=100, Size xGrid=100, Size vGrid=50, Size dampingSteps=0, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Hundsdorfer()) -> FdBatesVanillaEngine
        """
        _quantlib_risks.FdBatesVanillaEngine_swiginit(self, _quantlib_risks.new_FdBatesVanillaEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_FdBatesVanillaEngine

# Register FdBatesVanillaEngine in _quantlib_risks:
_quantlib_risks.FdBatesVanillaEngine_swigregister(FdBatesVanillaEngine)
class FdHestonVanillaEngine(PricingEngine):
    r"""Proxy of C++ FdHestonVanillaEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FdHestonVanillaEngine self, ext::shared_ptr< HestonModel > const & model, Size tGrid=100, Size xGrid=100, Size vGrid=50, Size dampingSteps=0, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Hundsdorfer(), ext::shared_ptr< LocalVolTermStructure > const & leverageFct={}, Real const mixingFactor=1.0) -> FdHestonVanillaEngine
        __init__(FdHestonVanillaEngine self, ext::shared_ptr< HestonModel > const & model, ext::shared_ptr< FdmQuantoHelper > const & quantoHelper, Size tGrid=100, Size xGrid=100, Size vGrid=50, Size dampingSteps=0, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Hundsdorfer(), ext::shared_ptr< LocalVolTermStructure > const & leverageFct={}, Real const mixingFactor=1.0) -> FdHestonVanillaEngine
        __init__(FdHestonVanillaEngine self, ext::shared_ptr< HestonModel > const & model, DividendSchedule dividends, Size tGrid=100, Size xGrid=100, Size vGrid=50, Size dampingSteps=0, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Hundsdorfer(), ext::shared_ptr< LocalVolTermStructure > const & leverageFct={}, Real const mixingFactor=1.0) -> FdHestonVanillaEngine
        __init__(FdHestonVanillaEngine self, ext::shared_ptr< HestonModel > const & model, DividendSchedule dividends, ext::shared_ptr< FdmQuantoHelper > const & quantoHelper, Size tGrid=100, Size xGrid=100, Size vGrid=50, Size dampingSteps=0, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Hundsdorfer(), ext::shared_ptr< LocalVolTermStructure > const & leverageFct={}, Real const mixingFactor=1.0) -> FdHestonVanillaEngine
        """
        _quantlib_risks.FdHestonVanillaEngine_swiginit(self, _quantlib_risks.new_FdHestonVanillaEngine(*args))

    @staticmethod
    def make(*args, **kwargs):
        r"""make(ext::shared_ptr< HestonModel > const & model, DividendSchedule dividends={}, ext::shared_ptr< FdmQuantoHelper > const & quantoHelper={}, Size tGrid=100, Size xGrid=100, Size vGrid=50, Size dampingSteps=0, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Hundsdorfer(), ext::shared_ptr< LocalVolTermStructure > const & leverageFct={}, Real const mixingFactor=1.0) -> ext::shared_ptr< FdHestonVanillaEngine >"""
        return _quantlib_risks.FdHestonVanillaEngine_make(*args, **kwargs)
    __swig_destroy__ = _quantlib_risks.delete_FdHestonVanillaEngine

# Register FdHestonVanillaEngine in _quantlib_risks:
_quantlib_risks.FdHestonVanillaEngine_swigregister(FdHestonVanillaEngine)
class AnalyticCEVEngine(PricingEngine):
    r"""Proxy of C++ AnalyticCEVEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, f0, alpha, beta, rTS):
        r"""__init__(AnalyticCEVEngine self, Real f0, Real alpha, Real beta, YieldTermStructureHandle rTS) -> AnalyticCEVEngine"""
        _quantlib_risks.AnalyticCEVEngine_swiginit(self, _quantlib_risks.new_AnalyticCEVEngine(f0, alpha, beta, rTS))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticCEVEngine

# Register AnalyticCEVEngine in _quantlib_risks:
_quantlib_risks.AnalyticCEVEngine_swigregister(AnalyticCEVEngine)
class FdCEVVanillaEngine(PricingEngine):
    r"""Proxy of C++ FdCEVVanillaEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(FdCEVVanillaEngine self, Real f0, Real alpha, Real beta, YieldTermStructureHandle rTS, Size tGrid=50, Size xGrid=400, Size dampingSteps=0, Real scalingFactor=1.0, Real eps=1e-4, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Douglas()) -> FdCEVVanillaEngine"""
        _quantlib_risks.FdCEVVanillaEngine_swiginit(self, _quantlib_risks.new_FdCEVVanillaEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_FdCEVVanillaEngine

# Register FdCEVVanillaEngine in _quantlib_risks:
_quantlib_risks.FdCEVVanillaEngine_swigregister(FdCEVVanillaEngine)
class FdSabrVanillaEngine(PricingEngine):
    r"""Proxy of C++ FdSabrVanillaEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(FdSabrVanillaEngine self, Real f0, Real alpha, Real beta, Real nu, Real rho, YieldTermStructureHandle rTS, Size tGrid=50, Size fGrid=400, Size xGrid=50, Size dampingSteps=0, Real scalingFactor=1.0, Real eps=1e-4, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Hundsdorfer()) -> FdSabrVanillaEngine"""
        _quantlib_risks.FdSabrVanillaEngine_swiginit(self, _quantlib_risks.new_FdSabrVanillaEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_FdSabrVanillaEngine

# Register FdSabrVanillaEngine in _quantlib_risks:
_quantlib_risks.FdSabrVanillaEngine_swigregister(FdSabrVanillaEngine)
class FdHestonHullWhiteVanillaEngine(PricingEngine):
    r"""Proxy of C++ FdHestonHullWhiteVanillaEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FdHestonHullWhiteVanillaEngine self, ext::shared_ptr< HestonModel > const & model, ext::shared_ptr< HullWhiteProcess > hwProcess, Real corrEquityShortRate, Size tGrid=50, Size xGrid=100, Size vGrid=40, Size rGrid=20, Size dampingSteps=0, bool controlVariate=True, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Hundsdorfer()) -> FdHestonHullWhiteVanillaEngine
        __init__(FdHestonHullWhiteVanillaEngine self, ext::shared_ptr< HestonModel > const & model, ext::shared_ptr< HullWhiteProcess > hwProcess, DividendSchedule dividends, Real corrEquityShortRate, Size tGrid=50, Size xGrid=100, Size vGrid=40, Size rGrid=20, Size dampingSteps=0, bool controlVariate=True, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Hundsdorfer()) -> FdHestonHullWhiteVanillaEngine
        """
        _quantlib_risks.FdHestonHullWhiteVanillaEngine_swiginit(self, _quantlib_risks.new_FdHestonHullWhiteVanillaEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_FdHestonHullWhiteVanillaEngine

# Register FdHestonHullWhiteVanillaEngine in _quantlib_risks:
_quantlib_risks.FdHestonHullWhiteVanillaEngine_swigregister(FdHestonHullWhiteVanillaEngine)
class AnalyticHestonHullWhiteEngine(PricingEngine):
    r"""Proxy of C++ AnalyticHestonHullWhiteEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(AnalyticHestonHullWhiteEngine self, ext::shared_ptr< HestonModel > const & hestonModel, ext::shared_ptr< HullWhite > hullWhiteModel, Size integrationOrder=144) -> AnalyticHestonHullWhiteEngine
        __init__(AnalyticHestonHullWhiteEngine self, ext::shared_ptr< HestonModel > const & model, ext::shared_ptr< HullWhite > hullWhiteModel, Real relTolerance, Size maxEvaluations) -> AnalyticHestonHullWhiteEngine
        """
        _quantlib_risks.AnalyticHestonHullWhiteEngine_swiginit(self, _quantlib_risks.new_AnalyticHestonHullWhiteEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticHestonHullWhiteEngine

# Register AnalyticHestonHullWhiteEngine in _quantlib_risks:
_quantlib_risks.AnalyticHestonHullWhiteEngine_swigregister(AnalyticHestonHullWhiteEngine)
class AnalyticH1HWEngine(PricingEngine):
    r"""Proxy of C++ AnalyticH1HWEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(AnalyticH1HWEngine self, ext::shared_ptr< HestonModel > const & hestonModel, ext::shared_ptr< HullWhite > const & hullWhiteModel, Real rhoSr, Size integrationOrder=144) -> AnalyticH1HWEngine
        __init__(AnalyticH1HWEngine self, ext::shared_ptr< HestonModel > const & model, ext::shared_ptr< HullWhite > const & hullWhiteModel, Real rhoSr, Real relTolerance, Size maxEvaluations) -> AnalyticH1HWEngine
        """
        _quantlib_risks.AnalyticH1HWEngine_swiginit(self, _quantlib_risks.new_AnalyticH1HWEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticH1HWEngine

# Register AnalyticH1HWEngine in _quantlib_risks:
_quantlib_risks.AnalyticH1HWEngine_swigregister(AnalyticH1HWEngine)
class ForwardEuropeanEngine(PricingEngine):
    r"""Proxy of C++ ForwardEuropeanEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2):
        r"""__init__(ForwardEuropeanEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2) -> ForwardEuropeanEngine"""
        _quantlib_risks.ForwardEuropeanEngine_swiginit(self, _quantlib_risks.new_ForwardEuropeanEngine(arg2))
    __swig_destroy__ = _quantlib_risks.delete_ForwardEuropeanEngine

# Register ForwardEuropeanEngine in _quantlib_risks:
_quantlib_risks.ForwardEuropeanEngine_swigregister(ForwardEuropeanEngine)
class QuantoEuropeanEngine(PricingEngine):
    r"""Proxy of C++ QuantoEuropeanEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process, foreignRiskFreeRate, exchangeRateVolatility, correlation):
        r"""__init__(QuantoEuropeanEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, YieldTermStructureHandle foreignRiskFreeRate, BlackVolTermStructureHandle exchangeRateVolatility, QuoteHandle correlation) -> QuantoEuropeanEngine"""
        _quantlib_risks.QuantoEuropeanEngine_swiginit(self, _quantlib_risks.new_QuantoEuropeanEngine(process, foreignRiskFreeRate, exchangeRateVolatility, correlation))
    __swig_destroy__ = _quantlib_risks.delete_QuantoEuropeanEngine

# Register QuantoEuropeanEngine in _quantlib_risks:
_quantlib_risks.QuantoEuropeanEngine_swigregister(QuantoEuropeanEngine)
class QuantoForwardEuropeanEngine(PricingEngine):
    r"""Proxy of C++ QuantoForwardEuropeanEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process, foreignRiskFreeRate, exchangeRateVolatility, correlation):
        r"""__init__(QuantoForwardEuropeanEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, YieldTermStructureHandle foreignRiskFreeRate, BlackVolTermStructureHandle exchangeRateVolatility, QuoteHandle correlation) -> QuantoForwardEuropeanEngine"""
        _quantlib_risks.QuantoForwardEuropeanEngine_swiginit(self, _quantlib_risks.new_QuantoForwardEuropeanEngine(process, foreignRiskFreeRate, exchangeRateVolatility, correlation))
    __swig_destroy__ = _quantlib_risks.delete_QuantoForwardEuropeanEngine

# Register QuantoForwardEuropeanEngine in _quantlib_risks:
_quantlib_risks.QuantoForwardEuropeanEngine_swigregister(QuantoForwardEuropeanEngine)
class AnalyticHestonForwardEuropeanEngine(PricingEngine):
    r"""Proxy of C++ AnalyticHestonForwardEuropeanEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process, integrationOrder=144):
        r"""__init__(AnalyticHestonForwardEuropeanEngine self, ext::shared_ptr< HestonProcess > const & process, Size integrationOrder=144) -> AnalyticHestonForwardEuropeanEngine"""
        _quantlib_risks.AnalyticHestonForwardEuropeanEngine_swiginit(self, _quantlib_risks.new_AnalyticHestonForwardEuropeanEngine(process, integrationOrder))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticHestonForwardEuropeanEngine

# Register AnalyticHestonForwardEuropeanEngine in _quantlib_risks:
_quantlib_risks.AnalyticHestonForwardEuropeanEngine_swigregister(AnalyticHestonForwardEuropeanEngine)
class MCPRForwardEuropeanBSEngine(PricingEngine):
    r"""Proxy of C++ MCForwardEuropeanBSEngine< PseudoRandom > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCPRForwardEuropeanBSEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, intOrNull timeSteps=Null< Size >(), intOrNull timeStepsPerYear=Null< Size >(), bool brownianBridge=False, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0) -> MCPRForwardEuropeanBSEngine"""
        _quantlib_risks.MCPRForwardEuropeanBSEngine_swiginit(self, _quantlib_risks.new_MCPRForwardEuropeanBSEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCPRForwardEuropeanBSEngine

# Register MCPRForwardEuropeanBSEngine in _quantlib_risks:
_quantlib_risks.MCPRForwardEuropeanBSEngine_swigregister(MCPRForwardEuropeanBSEngine)
class MCLDForwardEuropeanBSEngine(PricingEngine):
    r"""Proxy of C++ MCForwardEuropeanBSEngine< LowDiscrepancy > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCLDForwardEuropeanBSEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, intOrNull timeSteps=Null< Size >(), intOrNull timeStepsPerYear=Null< Size >(), bool brownianBridge=False, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0) -> MCLDForwardEuropeanBSEngine"""
        _quantlib_risks.MCLDForwardEuropeanBSEngine_swiginit(self, _quantlib_risks.new_MCLDForwardEuropeanBSEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCLDForwardEuropeanBSEngine

# Register MCLDForwardEuropeanBSEngine in _quantlib_risks:
_quantlib_risks.MCLDForwardEuropeanBSEngine_swigregister(MCLDForwardEuropeanBSEngine)

def MCForwardEuropeanBSEngine(process,
                              traits,
                              timeSteps=None,
                              timeStepsPerYear=None,
                              brownianBridge=False,
                              antitheticVariate=False,
                              requiredSamples=None,
                              requiredTolerance=None,
                              maxSamples=None,
                              seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRForwardEuropeanBSEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDForwardEuropeanBSEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               timeSteps,
               timeStepsPerYear,
               brownianBridge,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed)

class MCPRForwardEuropeanHestonEngine(PricingEngine):
    r"""Proxy of C++ MCForwardEuropeanHestonEngine< PseudoRandom > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCPRForwardEuropeanHestonEngine self, ext::shared_ptr< HestonProcess > const & process, intOrNull timeSteps=Null< Size >(), intOrNull timeStepsPerYear=Null< Size >(), bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0, bool controlVariate=False) -> MCPRForwardEuropeanHestonEngine"""
        _quantlib_risks.MCPRForwardEuropeanHestonEngine_swiginit(self, _quantlib_risks.new_MCPRForwardEuropeanHestonEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCPRForwardEuropeanHestonEngine

# Register MCPRForwardEuropeanHestonEngine in _quantlib_risks:
_quantlib_risks.MCPRForwardEuropeanHestonEngine_swigregister(MCPRForwardEuropeanHestonEngine)
class MCLDForwardEuropeanHestonEngine(PricingEngine):
    r"""Proxy of C++ MCForwardEuropeanHestonEngine< LowDiscrepancy > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCLDForwardEuropeanHestonEngine self, ext::shared_ptr< HestonProcess > const & process, intOrNull timeSteps=Null< Size >(), intOrNull timeStepsPerYear=Null< Size >(), bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0, bool controlVariate=False) -> MCLDForwardEuropeanHestonEngine"""
        _quantlib_risks.MCLDForwardEuropeanHestonEngine_swiginit(self, _quantlib_risks.new_MCLDForwardEuropeanHestonEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCLDForwardEuropeanHestonEngine

# Register MCLDForwardEuropeanHestonEngine in _quantlib_risks:
_quantlib_risks.MCLDForwardEuropeanHestonEngine_swigregister(MCLDForwardEuropeanHestonEngine)

def MCForwardEuropeanHestonEngine(process,
                                  traits,
                                  timeSteps=None,
                                  timeStepsPerYear=None,
                                  antitheticVariate=False,
                                  requiredSamples=None,
                                  requiredTolerance=None,
                                  maxSamples=None,
                                  seed=0,
                                  controlVariate=False):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRForwardEuropeanHestonEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDForwardEuropeanHestonEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               timeSteps,
               timeStepsPerYear,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed,
               controlVariate)

class BlackCalculator(object):
    r"""Proxy of C++ BlackCalculator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff, forward, stdDev, discount=1.0):
        r"""__init__(BlackCalculator self, ext::shared_ptr< StrikedTypePayoff > const & payoff, Real forward, Real stdDev, Real discount=1.0) -> BlackCalculator"""
        _quantlib_risks.BlackCalculator_swiginit(self, _quantlib_risks.new_BlackCalculator(payoff, forward, stdDev, discount))

    def value(self):
        r"""value(BlackCalculator self) -> Real"""
        return _quantlib_risks.BlackCalculator_value(self)

    def deltaForward(self):
        r"""deltaForward(BlackCalculator self) -> Real"""
        return _quantlib_risks.BlackCalculator_deltaForward(self)

    def delta(self, spot):
        r"""delta(BlackCalculator self, Real spot) -> Real"""
        return _quantlib_risks.BlackCalculator_delta(self, spot)

    def elasticityForward(self):
        r"""elasticityForward(BlackCalculator self) -> Real"""
        return _quantlib_risks.BlackCalculator_elasticityForward(self)

    def elasticity(self, spot):
        r"""elasticity(BlackCalculator self, Real spot) -> Real"""
        return _quantlib_risks.BlackCalculator_elasticity(self, spot)

    def gammaForward(self):
        r"""gammaForward(BlackCalculator self) -> Real"""
        return _quantlib_risks.BlackCalculator_gammaForward(self)

    def gamma(self, spot):
        r"""gamma(BlackCalculator self, Real spot) -> Real"""
        return _quantlib_risks.BlackCalculator_gamma(self, spot)

    def theta(self, spot, maturity):
        r"""theta(BlackCalculator self, Real spot, Time maturity) -> Real"""
        return _quantlib_risks.BlackCalculator_theta(self, spot, maturity)

    def thetaPerDay(self, spot, maturity):
        r"""thetaPerDay(BlackCalculator self, Real spot, Time maturity) -> Real"""
        return _quantlib_risks.BlackCalculator_thetaPerDay(self, spot, maturity)

    def vega(self, maturity):
        r"""vega(BlackCalculator self, Time maturity) -> Real"""
        return _quantlib_risks.BlackCalculator_vega(self, maturity)

    def rho(self, maturity):
        r"""rho(BlackCalculator self, Time maturity) -> Real"""
        return _quantlib_risks.BlackCalculator_rho(self, maturity)

    def dividendRho(self, maturity):
        r"""dividendRho(BlackCalculator self, Time maturity) -> Real"""
        return _quantlib_risks.BlackCalculator_dividendRho(self, maturity)

    def itmCashProbability(self):
        r"""itmCashProbability(BlackCalculator self) -> Real"""
        return _quantlib_risks.BlackCalculator_itmCashProbability(self)

    def itmAssetProbability(self):
        r"""itmAssetProbability(BlackCalculator self) -> Real"""
        return _quantlib_risks.BlackCalculator_itmAssetProbability(self)

    def strikeSensitivity(self):
        r"""strikeSensitivity(BlackCalculator self) -> Real"""
        return _quantlib_risks.BlackCalculator_strikeSensitivity(self)

    def strikeGamma(self):
        r"""strikeGamma(BlackCalculator self) -> Real"""
        return _quantlib_risks.BlackCalculator_strikeGamma(self)

    def alpha(self):
        r"""alpha(BlackCalculator self) -> Real"""
        return _quantlib_risks.BlackCalculator_alpha(self)

    def beta(self):
        r"""beta(BlackCalculator self) -> Real"""
        return _quantlib_risks.BlackCalculator_beta(self)
    __swig_destroy__ = _quantlib_risks.delete_BlackCalculator

# Register BlackCalculator in _quantlib_risks:
_quantlib_risks.BlackCalculator_swigregister(BlackCalculator)
class VarianceGammaEngine(PricingEngine):
    r"""Proxy of C++ VarianceGammaEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(VarianceGammaEngine self, ext::shared_ptr< VarianceGammaProcess > const & process) -> VarianceGammaEngine"""
        _quantlib_risks.VarianceGammaEngine_swiginit(self, _quantlib_risks.new_VarianceGammaEngine(process))
    __swig_destroy__ = _quantlib_risks.delete_VarianceGammaEngine

# Register VarianceGammaEngine in _quantlib_risks:
_quantlib_risks.VarianceGammaEngine_swigregister(VarianceGammaEngine)
class FFTVarianceGammaEngine(PricingEngine):
    r"""Proxy of C++ FFTVarianceGammaEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process, logStrikeSpacing=0.001):
        r"""__init__(FFTVarianceGammaEngine self, ext::shared_ptr< VarianceGammaProcess > const & process, Real logStrikeSpacing=0.001) -> FFTVarianceGammaEngine"""
        _quantlib_risks.FFTVarianceGammaEngine_swiginit(self, _quantlib_risks.new_FFTVarianceGammaEngine(process, logStrikeSpacing))

    def precalculate(self, optionList):
        r"""precalculate(FFTVarianceGammaEngine self, InstrumentVector optionList)"""
        return _quantlib_risks.FFTVarianceGammaEngine_precalculate(self, optionList)
    __swig_destroy__ = _quantlib_risks.delete_FFTVarianceGammaEngine

# Register FFTVarianceGammaEngine in _quantlib_risks:
_quantlib_risks.FFTVarianceGammaEngine_swigregister(FFTVarianceGammaEngine)
class GJRGARCHModel(CalibratedModel):
    r"""Proxy of C++ GJRGARCHModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(GJRGARCHModel self, ext::shared_ptr< GJRGARCHProcess > const & process) -> GJRGARCHModel"""
        _quantlib_risks.GJRGARCHModel_swiginit(self, _quantlib_risks.new_GJRGARCHModel(process))

    def omega(self):
        r"""omega(GJRGARCHModel self) -> Real"""
        return _quantlib_risks.GJRGARCHModel_omega(self)

    def alpha(self):
        r"""alpha(GJRGARCHModel self) -> Real"""
        return _quantlib_risks.GJRGARCHModel_alpha(self)

    def beta(self):
        r"""beta(GJRGARCHModel self) -> Real"""
        return _quantlib_risks.GJRGARCHModel_beta(self)

    def gamma(self):
        r"""gamma(GJRGARCHModel self) -> Real"""
        return _quantlib_risks.GJRGARCHModel_gamma(self)

    def lambda_parameter(self):
        r"""lambda_parameter(GJRGARCHModel self) -> Real"""
        return _quantlib_risks.GJRGARCHModel_lambda_parameter(self)

    def v0(self):
        r"""v0(GJRGARCHModel self) -> Real"""
        return _quantlib_risks.GJRGARCHModel_v0(self)
    __swig_destroy__ = _quantlib_risks.delete_GJRGARCHModel

# Register GJRGARCHModel in _quantlib_risks:
_quantlib_risks.GJRGARCHModel_swigregister(GJRGARCHModel)
class AnalyticGJRGARCHEngine(PricingEngine):
    r"""Proxy of C++ AnalyticGJRGARCHEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(AnalyticGJRGARCHEngine self, ext::shared_ptr< GJRGARCHModel > const & process) -> AnalyticGJRGARCHEngine"""
        _quantlib_risks.AnalyticGJRGARCHEngine_swiginit(self, _quantlib_risks.new_AnalyticGJRGARCHEngine(process))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticGJRGARCHEngine

# Register AnalyticGJRGARCHEngine in _quantlib_risks:
_quantlib_risks.AnalyticGJRGARCHEngine_swigregister(AnalyticGJRGARCHEngine)
class MCPREuropeanGJRGARCHEngine(PricingEngine):
    r"""Proxy of C++ MCEuropeanGJRGARCHEngine< PseudoRandom > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCPREuropeanGJRGARCHEngine self, ext::shared_ptr< GJRGARCHProcess > const & process, intOrNull timeSteps=Null< Size >(), intOrNull timeStepsPerYear=Null< Size >(), bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0) -> MCPREuropeanGJRGARCHEngine"""
        _quantlib_risks.MCPREuropeanGJRGARCHEngine_swiginit(self, _quantlib_risks.new_MCPREuropeanGJRGARCHEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCPREuropeanGJRGARCHEngine

# Register MCPREuropeanGJRGARCHEngine in _quantlib_risks:
_quantlib_risks.MCPREuropeanGJRGARCHEngine_swigregister(MCPREuropeanGJRGARCHEngine)
class MCLDEuropeanGJRGARCHEngine(PricingEngine):
    r"""Proxy of C++ MCEuropeanGJRGARCHEngine< LowDiscrepancy > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCLDEuropeanGJRGARCHEngine self, ext::shared_ptr< GJRGARCHProcess > const & process, intOrNull timeSteps=Null< Size >(), intOrNull timeStepsPerYear=Null< Size >(), bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0) -> MCLDEuropeanGJRGARCHEngine"""
        _quantlib_risks.MCLDEuropeanGJRGARCHEngine_swiginit(self, _quantlib_risks.new_MCLDEuropeanGJRGARCHEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCLDEuropeanGJRGARCHEngine

# Register MCLDEuropeanGJRGARCHEngine in _quantlib_risks:
_quantlib_risks.MCLDEuropeanGJRGARCHEngine_swigregister(MCLDEuropeanGJRGARCHEngine)

def MCEuropeanGJRGARCHEngine(process,
                             traits,
                             timeSteps=None,
                             timeStepsPerYear=None,
                             antitheticVariate=False,
                             requiredSamples=None,
                             requiredTolerance=None,
                             maxSamples=None,
                             seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPREuropeanGJRGARCHEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDEuropeanGJRGARCHEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               timeSteps,
               timeStepsPerYear,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed)

class MargrabeOption(MultiAssetOption):
    r"""Proxy of C++ MargrabeOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Q1, Q2, arg4):
        r"""__init__(MargrabeOption self, Integer Q1, Integer Q2, ext::shared_ptr< Exercise > const & arg4) -> MargrabeOption"""
        _quantlib_risks.MargrabeOption_swiginit(self, _quantlib_risks.new_MargrabeOption(Q1, Q2, arg4))

    def delta1(self):
        r"""delta1(MargrabeOption self) -> Real"""
        return _quantlib_risks.MargrabeOption_delta1(self)

    def delta2(self):
        r"""delta2(MargrabeOption self) -> Real"""
        return _quantlib_risks.MargrabeOption_delta2(self)

    def gamma1(self):
        r"""gamma1(MargrabeOption self) -> Real"""
        return _quantlib_risks.MargrabeOption_gamma1(self)

    def gamma2(self):
        r"""gamma2(MargrabeOption self) -> Real"""
        return _quantlib_risks.MargrabeOption_gamma2(self)
    __swig_destroy__ = _quantlib_risks.delete_MargrabeOption

# Register MargrabeOption in _quantlib_risks:
_quantlib_risks.MargrabeOption_swigregister(MargrabeOption)
class AnalyticEuropeanMargrabeEngine(PricingEngine):
    r"""Proxy of C++ AnalyticEuropeanMargrabeEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process1, process2, correlation):
        r"""__init__(AnalyticEuropeanMargrabeEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > process1, ext::shared_ptr< GeneralizedBlackScholesProcess > process2, Real correlation) -> AnalyticEuropeanMargrabeEngine"""
        _quantlib_risks.AnalyticEuropeanMargrabeEngine_swiginit(self, _quantlib_risks.new_AnalyticEuropeanMargrabeEngine(process1, process2, correlation))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticEuropeanMargrabeEngine

# Register AnalyticEuropeanMargrabeEngine in _quantlib_risks:
_quantlib_risks.AnalyticEuropeanMargrabeEngine_swigregister(AnalyticEuropeanMargrabeEngine)
class AnalyticAmericanMargrabeEngine(PricingEngine):
    r"""Proxy of C++ AnalyticAmericanMargrabeEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process1, process2, correlation):
        r"""__init__(AnalyticAmericanMargrabeEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > process1, ext::shared_ptr< GeneralizedBlackScholesProcess > process2, Real correlation) -> AnalyticAmericanMargrabeEngine"""
        _quantlib_risks.AnalyticAmericanMargrabeEngine_swiginit(self, _quantlib_risks.new_AnalyticAmericanMargrabeEngine(process1, process2, correlation))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticAmericanMargrabeEngine

# Register AnalyticAmericanMargrabeEngine in _quantlib_risks:
_quantlib_risks.AnalyticAmericanMargrabeEngine_swigregister(AnalyticAmericanMargrabeEngine)
class CompoundOption(OneAssetOption):
    r"""Proxy of C++ CompoundOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, motherPayoff, motherExercise, daughterPayoff, daughterExercise):
        r"""__init__(CompoundOption self, ext::shared_ptr< StrikedTypePayoff > const & motherPayoff, ext::shared_ptr< Exercise > const & motherExercise, ext::shared_ptr< StrikedTypePayoff > daughterPayoff, ext::shared_ptr< Exercise > daughterExercise) -> CompoundOption"""
        _quantlib_risks.CompoundOption_swiginit(self, _quantlib_risks.new_CompoundOption(motherPayoff, motherExercise, daughterPayoff, daughterExercise))
    __swig_destroy__ = _quantlib_risks.delete_CompoundOption

# Register CompoundOption in _quantlib_risks:
_quantlib_risks.CompoundOption_swigregister(CompoundOption)
class AnalyticCompoundOptionEngine(PricingEngine):
    r"""Proxy of C++ AnalyticCompoundOptionEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(AnalyticCompoundOptionEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > process) -> AnalyticCompoundOptionEngine"""
        _quantlib_risks.AnalyticCompoundOptionEngine_swiginit(self, _quantlib_risks.new_AnalyticCompoundOptionEngine(process))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticCompoundOptionEngine

# Register AnalyticCompoundOptionEngine in _quantlib_risks:
_quantlib_risks.AnalyticCompoundOptionEngine_swigregister(AnalyticCompoundOptionEngine)
class SimpleChooserOption(OneAssetOption):
    r"""Proxy of C++ SimpleChooserOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, choosingDate, strike, exercise):
        r"""__init__(SimpleChooserOption self, Date choosingDate, Real strike, ext::shared_ptr< Exercise > const & exercise) -> SimpleChooserOption"""
        _quantlib_risks.SimpleChooserOption_swiginit(self, _quantlib_risks.new_SimpleChooserOption(choosingDate, strike, exercise))
    __swig_destroy__ = _quantlib_risks.delete_SimpleChooserOption

# Register SimpleChooserOption in _quantlib_risks:
_quantlib_risks.SimpleChooserOption_swigregister(SimpleChooserOption)
class AnalyticSimpleChooserEngine(PricingEngine):
    r"""Proxy of C++ AnalyticSimpleChooserEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(AnalyticSimpleChooserEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > process) -> AnalyticSimpleChooserEngine"""
        _quantlib_risks.AnalyticSimpleChooserEngine_swiginit(self, _quantlib_risks.new_AnalyticSimpleChooserEngine(process))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticSimpleChooserEngine

# Register AnalyticSimpleChooserEngine in _quantlib_risks:
_quantlib_risks.AnalyticSimpleChooserEngine_swigregister(AnalyticSimpleChooserEngine)
class ComplexChooserOption(OneAssetOption):
    r"""Proxy of C++ ComplexChooserOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, choosingDate, strikeCall, strikePut, exerciseCall, exercisePut):
        r"""__init__(ComplexChooserOption self, Date choosingDate, Real strikeCall, Real strikePut, ext::shared_ptr< Exercise > const & exerciseCall, ext::shared_ptr< Exercise > const & exercisePut) -> ComplexChooserOption"""
        _quantlib_risks.ComplexChooserOption_swiginit(self, _quantlib_risks.new_ComplexChooserOption(choosingDate, strikeCall, strikePut, exerciseCall, exercisePut))
    __swig_destroy__ = _quantlib_risks.delete_ComplexChooserOption

# Register ComplexChooserOption in _quantlib_risks:
_quantlib_risks.ComplexChooserOption_swigregister(ComplexChooserOption)
class AnalyticComplexChooserEngine(PricingEngine):
    r"""Proxy of C++ AnalyticComplexChooserEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(AnalyticComplexChooserEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > process) -> AnalyticComplexChooserEngine"""
        _quantlib_risks.AnalyticComplexChooserEngine_swiginit(self, _quantlib_risks.new_AnalyticComplexChooserEngine(process))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticComplexChooserEngine

# Register AnalyticComplexChooserEngine in _quantlib_risks:
_quantlib_risks.AnalyticComplexChooserEngine_swigregister(AnalyticComplexChooserEngine)
class Average(object):
    r"""Proxy of C++ Average class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Arithmetic = _quantlib_risks.Average_Arithmetic
    
    Geometric = _quantlib_risks.Average_Geometric
    

    def __init__(self):
        r"""__init__(Average self) -> Average"""
        _quantlib_risks.Average_swiginit(self, _quantlib_risks.new_Average())
    __swig_destroy__ = _quantlib_risks.delete_Average

# Register Average in _quantlib_risks:
_quantlib_risks.Average_swigregister(Average)
class ContinuousAveragingAsianOption(OneAssetOption):
    r"""Proxy of C++ ContinuousAveragingAsianOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, averageType, payoff, exercise):
        r"""__init__(ContinuousAveragingAsianOption self, Average::Type averageType, ext::shared_ptr< StrikedTypePayoff > const & payoff, ext::shared_ptr< Exercise > const & exercise) -> ContinuousAveragingAsianOption"""
        _quantlib_risks.ContinuousAveragingAsianOption_swiginit(self, _quantlib_risks.new_ContinuousAveragingAsianOption(averageType, payoff, exercise))
    __swig_destroy__ = _quantlib_risks.delete_ContinuousAveragingAsianOption

# Register ContinuousAveragingAsianOption in _quantlib_risks:
_quantlib_risks.ContinuousAveragingAsianOption_swigregister(ContinuousAveragingAsianOption)
class DiscreteAveragingAsianOption(OneAssetOption):
    r"""Proxy of C++ DiscreteAveragingAsianOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DiscreteAveragingAsianOption self, Average::Type averageType, Real runningAccumulator, Size pastFixings, DateVector fixingDates, ext::shared_ptr< StrikedTypePayoff > const & payoff, ext::shared_ptr< Exercise > const & exercise) -> DiscreteAveragingAsianOption
        __init__(DiscreteAveragingAsianOption self, Average::Type averageType, DateVector fixingDates, ext::shared_ptr< StrikedTypePayoff > const & payoff, ext::shared_ptr< Exercise > const & exercise, std::vector< Real,std::allocator< Real > > allPastFixings=std::vector< Real >()) -> DiscreteAveragingAsianOption
        """
        _quantlib_risks.DiscreteAveragingAsianOption_swiginit(self, _quantlib_risks.new_DiscreteAveragingAsianOption(*args))

    def timeGrid(self):
        r"""timeGrid(DiscreteAveragingAsianOption self) -> TimeGrid"""
        return _quantlib_risks.DiscreteAveragingAsianOption_timeGrid(self)
    __swig_destroy__ = _quantlib_risks.delete_DiscreteAveragingAsianOption

# Register DiscreteAveragingAsianOption in _quantlib_risks:
_quantlib_risks.DiscreteAveragingAsianOption_swigregister(DiscreteAveragingAsianOption)
class AnalyticContinuousGeometricAveragePriceAsianEngine(PricingEngine):
    r"""Proxy of C++ AnalyticContinuousGeometricAveragePriceAsianEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(AnalyticContinuousGeometricAveragePriceAsianEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process) -> AnalyticContinuousGeometricAveragePriceAsianEngine"""
        _quantlib_risks.AnalyticContinuousGeometricAveragePriceAsianEngine_swiginit(self, _quantlib_risks.new_AnalyticContinuousGeometricAveragePriceAsianEngine(process))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticContinuousGeometricAveragePriceAsianEngine

# Register AnalyticContinuousGeometricAveragePriceAsianEngine in _quantlib_risks:
_quantlib_risks.AnalyticContinuousGeometricAveragePriceAsianEngine_swigregister(AnalyticContinuousGeometricAveragePriceAsianEngine)
class AnalyticContinuousGeometricAveragePriceAsianHestonEngine(PricingEngine):
    r"""Proxy of C++ AnalyticContinuousGeometricAveragePriceAsianHestonEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process, summationCutoff=50, xiRightLimit=100.0):
        r"""__init__(AnalyticContinuousGeometricAveragePriceAsianHestonEngine self, ext::shared_ptr< HestonProcess > const & process, Size summationCutoff=50, Real xiRightLimit=100.0) -> AnalyticContinuousGeometricAveragePriceAsianHestonEngine"""
        _quantlib_risks.AnalyticContinuousGeometricAveragePriceAsianHestonEngine_swiginit(self, _quantlib_risks.new_AnalyticContinuousGeometricAveragePriceAsianHestonEngine(process, summationCutoff, xiRightLimit))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticContinuousGeometricAveragePriceAsianHestonEngine

# Register AnalyticContinuousGeometricAveragePriceAsianHestonEngine in _quantlib_risks:
_quantlib_risks.AnalyticContinuousGeometricAveragePriceAsianHestonEngine_swigregister(AnalyticContinuousGeometricAveragePriceAsianHestonEngine)
class AnalyticDiscreteGeometricAveragePriceAsianEngine(PricingEngine):
    r"""Proxy of C++ AnalyticDiscreteGeometricAveragePriceAsianEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(AnalyticDiscreteGeometricAveragePriceAsianEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process) -> AnalyticDiscreteGeometricAveragePriceAsianEngine"""
        _quantlib_risks.AnalyticDiscreteGeometricAveragePriceAsianEngine_swiginit(self, _quantlib_risks.new_AnalyticDiscreteGeometricAveragePriceAsianEngine(process))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticDiscreteGeometricAveragePriceAsianEngine

# Register AnalyticDiscreteGeometricAveragePriceAsianEngine in _quantlib_risks:
_quantlib_risks.AnalyticDiscreteGeometricAveragePriceAsianEngine_swigregister(AnalyticDiscreteGeometricAveragePriceAsianEngine)
class AnalyticDiscreteGeometricAveragePriceAsianHestonEngine(PricingEngine):
    r"""Proxy of C++ AnalyticDiscreteGeometricAveragePriceAsianHestonEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process, xiRightLimit=100.0):
        r"""__init__(AnalyticDiscreteGeometricAveragePriceAsianHestonEngine self, ext::shared_ptr< HestonProcess > const & process, Real xiRightLimit=100.0) -> AnalyticDiscreteGeometricAveragePriceAsianHestonEngine"""
        _quantlib_risks.AnalyticDiscreteGeometricAveragePriceAsianHestonEngine_swiginit(self, _quantlib_risks.new_AnalyticDiscreteGeometricAveragePriceAsianHestonEngine(process, xiRightLimit))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticDiscreteGeometricAveragePriceAsianHestonEngine

# Register AnalyticDiscreteGeometricAveragePriceAsianHestonEngine in _quantlib_risks:
_quantlib_risks.AnalyticDiscreteGeometricAveragePriceAsianHestonEngine_swigregister(AnalyticDiscreteGeometricAveragePriceAsianHestonEngine)
class AnalyticDiscreteGeometricAverageStrikeAsianEngine(PricingEngine):
    r"""Proxy of C++ AnalyticDiscreteGeometricAverageStrikeAsianEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(AnalyticDiscreteGeometricAverageStrikeAsianEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process) -> AnalyticDiscreteGeometricAverageStrikeAsianEngine"""
        _quantlib_risks.AnalyticDiscreteGeometricAverageStrikeAsianEngine_swiginit(self, _quantlib_risks.new_AnalyticDiscreteGeometricAverageStrikeAsianEngine(process))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticDiscreteGeometricAverageStrikeAsianEngine

# Register AnalyticDiscreteGeometricAverageStrikeAsianEngine in _quantlib_risks:
_quantlib_risks.AnalyticDiscreteGeometricAverageStrikeAsianEngine_swigregister(AnalyticDiscreteGeometricAverageStrikeAsianEngine)
class MCPRDiscreteArithmeticAPEngine(PricingEngine):
    r"""Proxy of C++ MCDiscreteArithmeticAPEngine< PseudoRandom > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCPRDiscreteArithmeticAPEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, bool brownianBridge=False, bool antitheticVariate=False, bool controlVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0) -> MCPRDiscreteArithmeticAPEngine"""
        _quantlib_risks.MCPRDiscreteArithmeticAPEngine_swiginit(self, _quantlib_risks.new_MCPRDiscreteArithmeticAPEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCPRDiscreteArithmeticAPEngine

# Register MCPRDiscreteArithmeticAPEngine in _quantlib_risks:
_quantlib_risks.MCPRDiscreteArithmeticAPEngine_swigregister(MCPRDiscreteArithmeticAPEngine)
class MCLDDiscreteArithmeticAPEngine(PricingEngine):
    r"""Proxy of C++ MCDiscreteArithmeticAPEngine< LowDiscrepancy > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCLDDiscreteArithmeticAPEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, bool brownianBridge=False, bool antitheticVariate=False, bool controlVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0) -> MCLDDiscreteArithmeticAPEngine"""
        _quantlib_risks.MCLDDiscreteArithmeticAPEngine_swiginit(self, _quantlib_risks.new_MCLDDiscreteArithmeticAPEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCLDDiscreteArithmeticAPEngine

# Register MCLDDiscreteArithmeticAPEngine in _quantlib_risks:
_quantlib_risks.MCLDDiscreteArithmeticAPEngine_swigregister(MCLDDiscreteArithmeticAPEngine)

def MCDiscreteArithmeticAPEngine(process,
                                 traits,
                                 brownianBridge=False,
                                 antitheticVariate=False,
                                 controlVariate=False,
                                 requiredSamples=None,
                                 requiredTolerance=None,
                                 maxSamples=None,
                                 seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRDiscreteArithmeticAPEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDDiscreteArithmeticAPEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               brownianBridge,
               antitheticVariate,
               controlVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed)

class MCPRDiscreteArithmeticAPHestonEngine(PricingEngine):
    r"""Proxy of C++ MCDiscreteArithmeticAPHestonEngine< PseudoRandom > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCPRDiscreteArithmeticAPHestonEngine self, ext::shared_ptr< HestonProcess > const & process, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0, intOrNull timeSteps=Null< Size >(), intOrNull timeStepsPerYear=Null< Size >(), bool controlVariate=False) -> MCPRDiscreteArithmeticAPHestonEngine"""
        _quantlib_risks.MCPRDiscreteArithmeticAPHestonEngine_swiginit(self, _quantlib_risks.new_MCPRDiscreteArithmeticAPHestonEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCPRDiscreteArithmeticAPHestonEngine

# Register MCPRDiscreteArithmeticAPHestonEngine in _quantlib_risks:
_quantlib_risks.MCPRDiscreteArithmeticAPHestonEngine_swigregister(MCPRDiscreteArithmeticAPHestonEngine)
class MCLDDiscreteArithmeticAPHestonEngine(PricingEngine):
    r"""Proxy of C++ MCDiscreteArithmeticAPHestonEngine< LowDiscrepancy > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCLDDiscreteArithmeticAPHestonEngine self, ext::shared_ptr< HestonProcess > const & process, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0, intOrNull timeSteps=Null< Size >(), intOrNull timeStepsPerYear=Null< Size >(), bool controlVariate=False) -> MCLDDiscreteArithmeticAPHestonEngine"""
        _quantlib_risks.MCLDDiscreteArithmeticAPHestonEngine_swiginit(self, _quantlib_risks.new_MCLDDiscreteArithmeticAPHestonEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCLDDiscreteArithmeticAPHestonEngine

# Register MCLDDiscreteArithmeticAPHestonEngine in _quantlib_risks:
_quantlib_risks.MCLDDiscreteArithmeticAPHestonEngine_swigregister(MCLDDiscreteArithmeticAPHestonEngine)

def MCDiscreteArithmeticAPHestonEngine(process,
                                       traits,
                                       antitheticVariate=False,
                                       requiredSamples=None,
                                       requiredTolerance=None,
                                       maxSamples=None,
                                       seed=0,
                                       timeSteps=None,
                                       timeStepsPerYear=None,
                                       controlVariate=False):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRDiscreteArithmeticAPHestonEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDDiscreteArithmeticAPHestonEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed,
               timeSteps,
               timeStepsPerYear,
               controlVariate)

class MCPRDiscreteArithmeticASEngine(PricingEngine):
    r"""Proxy of C++ MCDiscreteArithmeticASEngine< PseudoRandom > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCPRDiscreteArithmeticASEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, bool brownianBridge=False, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0) -> MCPRDiscreteArithmeticASEngine"""
        _quantlib_risks.MCPRDiscreteArithmeticASEngine_swiginit(self, _quantlib_risks.new_MCPRDiscreteArithmeticASEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCPRDiscreteArithmeticASEngine

# Register MCPRDiscreteArithmeticASEngine in _quantlib_risks:
_quantlib_risks.MCPRDiscreteArithmeticASEngine_swigregister(MCPRDiscreteArithmeticASEngine)
class MCLDDiscreteArithmeticASEngine(PricingEngine):
    r"""Proxy of C++ MCDiscreteArithmeticASEngine< LowDiscrepancy > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCLDDiscreteArithmeticASEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, bool brownianBridge=False, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0) -> MCLDDiscreteArithmeticASEngine"""
        _quantlib_risks.MCLDDiscreteArithmeticASEngine_swiginit(self, _quantlib_risks.new_MCLDDiscreteArithmeticASEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCLDDiscreteArithmeticASEngine

# Register MCLDDiscreteArithmeticASEngine in _quantlib_risks:
_quantlib_risks.MCLDDiscreteArithmeticASEngine_swigregister(MCLDDiscreteArithmeticASEngine)

def MCDiscreteArithmeticASEngine(process,
                                 traits,
                                 brownianBridge=False,
                                 antitheticVariate=False,
                                 requiredSamples=None,
                                 requiredTolerance=None,
                                 maxSamples=None,
                                 seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRDiscreteArithmeticASEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDDiscreteArithmeticASEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               brownianBridge,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed)

class MCPRDiscreteGeometricAPEngine(PricingEngine):
    r"""Proxy of C++ MCDiscreteGeometricAPEngine< PseudoRandom > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCPRDiscreteGeometricAPEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, bool brownianBridge=False, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0) -> MCPRDiscreteGeometricAPEngine"""
        _quantlib_risks.MCPRDiscreteGeometricAPEngine_swiginit(self, _quantlib_risks.new_MCPRDiscreteGeometricAPEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCPRDiscreteGeometricAPEngine

# Register MCPRDiscreteGeometricAPEngine in _quantlib_risks:
_quantlib_risks.MCPRDiscreteGeometricAPEngine_swigregister(MCPRDiscreteGeometricAPEngine)
class MCLDDiscreteGeometricAPEngine(PricingEngine):
    r"""Proxy of C++ MCDiscreteGeometricAPEngine< LowDiscrepancy > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCLDDiscreteGeometricAPEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, bool brownianBridge=False, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0) -> MCLDDiscreteGeometricAPEngine"""
        _quantlib_risks.MCLDDiscreteGeometricAPEngine_swiginit(self, _quantlib_risks.new_MCLDDiscreteGeometricAPEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCLDDiscreteGeometricAPEngine

# Register MCLDDiscreteGeometricAPEngine in _quantlib_risks:
_quantlib_risks.MCLDDiscreteGeometricAPEngine_swigregister(MCLDDiscreteGeometricAPEngine)

def MCDiscreteGeometricAPEngine(process,
                                 traits,
                                 brownianBridge=False,
                                 antitheticVariate=False,
                                 requiredSamples=None,
                                 requiredTolerance=None,
                                 maxSamples=None,
                                 seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRDiscreteGeometricAPEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDDiscreteGeometricAPEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               brownianBridge,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed)

class MCPRDiscreteGeometricAPHestonEngine(PricingEngine):
    r"""Proxy of C++ MCDiscreteGeometricAPHestonEngine< PseudoRandom > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCPRDiscreteGeometricAPHestonEngine self, ext::shared_ptr< HestonProcess > const & process, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0, intOrNull timeSteps=Null< Size >(), intOrNull timeStepsPerYear=Null< Size >()) -> MCPRDiscreteGeometricAPHestonEngine"""
        _quantlib_risks.MCPRDiscreteGeometricAPHestonEngine_swiginit(self, _quantlib_risks.new_MCPRDiscreteGeometricAPHestonEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCPRDiscreteGeometricAPHestonEngine

# Register MCPRDiscreteGeometricAPHestonEngine in _quantlib_risks:
_quantlib_risks.MCPRDiscreteGeometricAPHestonEngine_swigregister(MCPRDiscreteGeometricAPHestonEngine)
class MCLDDiscreteGeometricAPHestonEngine(PricingEngine):
    r"""Proxy of C++ MCDiscreteGeometricAPHestonEngine< LowDiscrepancy > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCLDDiscreteGeometricAPHestonEngine self, ext::shared_ptr< HestonProcess > const & process, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0, intOrNull timeSteps=Null< Size >(), intOrNull timeStepsPerYear=Null< Size >()) -> MCLDDiscreteGeometricAPHestonEngine"""
        _quantlib_risks.MCLDDiscreteGeometricAPHestonEngine_swiginit(self, _quantlib_risks.new_MCLDDiscreteGeometricAPHestonEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCLDDiscreteGeometricAPHestonEngine

# Register MCLDDiscreteGeometricAPHestonEngine in _quantlib_risks:
_quantlib_risks.MCLDDiscreteGeometricAPHestonEngine_swigregister(MCLDDiscreteGeometricAPHestonEngine)

def MCDiscreteGeometricAPHestonEngine(process,
                                      traits,
                                      antitheticVariate=False,
                                      requiredSamples=None,
                                      requiredTolerance=None,
                                      maxSamples=None,
                                      seed=0,
                                      timeSteps=None,
                                      timeStepsPerYear=None):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRDiscreteGeometricAPHestonEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDDiscreteGeometricAPHestonEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed,
               timeSteps,
               timeStepsPerYear)

class ContinuousArithmeticAsianLevyEngine(PricingEngine):
    r"""Proxy of C++ ContinuousArithmeticAsianLevyEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process, runningAverage, startDate):
        r"""__init__(ContinuousArithmeticAsianLevyEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, QuoteHandle runningAverage, Date startDate) -> ContinuousArithmeticAsianLevyEngine"""
        _quantlib_risks.ContinuousArithmeticAsianLevyEngine_swiginit(self, _quantlib_risks.new_ContinuousArithmeticAsianLevyEngine(process, runningAverage, startDate))
    __swig_destroy__ = _quantlib_risks.delete_ContinuousArithmeticAsianLevyEngine

# Register ContinuousArithmeticAsianLevyEngine in _quantlib_risks:
_quantlib_risks.ContinuousArithmeticAsianLevyEngine_swigregister(ContinuousArithmeticAsianLevyEngine)
class FdBlackScholesAsianEngine(PricingEngine):
    r"""Proxy of C++ FdBlackScholesAsianEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process, tGrid, xGrid, aGrid):
        r"""__init__(FdBlackScholesAsianEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, Size tGrid, Size xGrid, Size aGrid) -> FdBlackScholesAsianEngine"""
        _quantlib_risks.FdBlackScholesAsianEngine_swiginit(self, _quantlib_risks.new_FdBlackScholesAsianEngine(process, tGrid, xGrid, aGrid))
    __swig_destroy__ = _quantlib_risks.delete_FdBlackScholesAsianEngine

# Register FdBlackScholesAsianEngine in _quantlib_risks:
_quantlib_risks.FdBlackScholesAsianEngine_swigregister(FdBlackScholesAsianEngine)
class TurnbullWakemanAsianEngine(PricingEngine):
    r"""Proxy of C++ TurnbullWakemanAsianEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(TurnbullWakemanAsianEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process) -> TurnbullWakemanAsianEngine"""
        _quantlib_risks.TurnbullWakemanAsianEngine_swiginit(self, _quantlib_risks.new_TurnbullWakemanAsianEngine(process))
    __swig_destroy__ = _quantlib_risks.delete_TurnbullWakemanAsianEngine

# Register TurnbullWakemanAsianEngine in _quantlib_risks:
_quantlib_risks.TurnbullWakemanAsianEngine_swigregister(TurnbullWakemanAsianEngine)
class Barrier(object):
    r"""Proxy of C++ Barrier class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DownIn = _quantlib_risks.Barrier_DownIn
    
    UpIn = _quantlib_risks.Barrier_UpIn
    
    DownOut = _quantlib_risks.Barrier_DownOut
    
    UpOut = _quantlib_risks.Barrier_UpOut
    

    def __init__(self):
        r"""__init__(Barrier self) -> Barrier"""
        _quantlib_risks.Barrier_swiginit(self, _quantlib_risks.new_Barrier())
    __swig_destroy__ = _quantlib_risks.delete_Barrier

# Register Barrier in _quantlib_risks:
_quantlib_risks.Barrier_swigregister(Barrier)
class BarrierOption(OneAssetOption):
    r"""Proxy of C++ BarrierOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, barrierType, barrier, rebate, payoff, exercise):
        r"""__init__(BarrierOption self, Barrier::Type barrierType, Real barrier, Real rebate, ext::shared_ptr< StrikedTypePayoff > const & payoff, ext::shared_ptr< Exercise > const & exercise) -> BarrierOption"""
        _quantlib_risks.BarrierOption_swiginit(self, _quantlib_risks.new_BarrierOption(barrierType, barrier, rebate, payoff, exercise))

    def impliedVolatility(self, *args):
        r"""
        impliedVolatility(BarrierOption self, Real targetValue, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, Real accuracy=1.0e-4, Size maxEvaluations=100, Volatility minVol=1.0e-4, Volatility maxVol=4.0) -> Volatility
        impliedVolatility(BarrierOption self, Real targetValue, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, DividendSchedule dividends, Real accuracy=1.0e-4, Size maxEvaluations=100, Volatility minVol=1.0e-4, Volatility maxVol=4.0) -> Volatility
        """
        return _quantlib_risks.BarrierOption_impliedVolatility(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_BarrierOption

# Register BarrierOption in _quantlib_risks:
_quantlib_risks.BarrierOption_swigregister(BarrierOption)
class QuantoBarrierOption(BarrierOption):
    r"""Proxy of C++ QuantoBarrierOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, barrierType, barrier, rebate, payoff, exercise):
        r"""__init__(QuantoBarrierOption self, Barrier::Type barrierType, Real barrier, Real rebate, ext::shared_ptr< StrikedTypePayoff > const & payoff, ext::shared_ptr< Exercise > const & exercise) -> QuantoBarrierOption"""
        _quantlib_risks.QuantoBarrierOption_swiginit(self, _quantlib_risks.new_QuantoBarrierOption(barrierType, barrier, rebate, payoff, exercise))
    __swig_destroy__ = _quantlib_risks.delete_QuantoBarrierOption

# Register QuantoBarrierOption in _quantlib_risks:
_quantlib_risks.QuantoBarrierOption_swigregister(QuantoBarrierOption)
class PartialBarrier(Barrier):
    r"""Proxy of C++ PartialBarrier class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Start = _quantlib_risks.PartialBarrier_Start
    
    End = _quantlib_risks.PartialBarrier_End
    
    EndB1 = _quantlib_risks.PartialBarrier_EndB1
    
    EndB2 = _quantlib_risks.PartialBarrier_EndB2
    

    def __init__(self):
        r"""__init__(PartialBarrier self) -> PartialBarrier"""
        _quantlib_risks.PartialBarrier_swiginit(self, _quantlib_risks.new_PartialBarrier())
    __swig_destroy__ = _quantlib_risks.delete_PartialBarrier

# Register PartialBarrier in _quantlib_risks:
_quantlib_risks.PartialBarrier_swigregister(PartialBarrier)
class PartialTimeBarrierOption(OneAssetOption):
    r"""Proxy of C++ PartialTimeBarrierOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, barrierType, barrierRange, barrier, rebate, coverEventDate, payoff, exercise):
        r"""__init__(PartialTimeBarrierOption self, PartialBarrier::Type barrierType, PartialBarrier::Range barrierRange, Real barrier, Real rebate, Date coverEventDate, ext::shared_ptr< StrikedTypePayoff > const & payoff, ext::shared_ptr< Exercise > const & exercise) -> PartialTimeBarrierOption"""
        _quantlib_risks.PartialTimeBarrierOption_swiginit(self, _quantlib_risks.new_PartialTimeBarrierOption(barrierType, barrierRange, barrier, rebate, coverEventDate, payoff, exercise))
    __swig_destroy__ = _quantlib_risks.delete_PartialTimeBarrierOption

# Register PartialTimeBarrierOption in _quantlib_risks:
_quantlib_risks.PartialTimeBarrierOption_swigregister(PartialTimeBarrierOption)
class AnalyticPartialTimeBarrierOptionEngine(PricingEngine):
    r"""Partial Time Barrier Option Engine"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""
        __init__(AnalyticPartialTimeBarrierOptionEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process) -> AnalyticPartialTimeBarrierOptionEngine
        Partial Time Barrier Option Engine
        """
        _quantlib_risks.AnalyticPartialTimeBarrierOptionEngine_swiginit(self, _quantlib_risks.new_AnalyticPartialTimeBarrierOptionEngine(process))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticPartialTimeBarrierOptionEngine

# Register AnalyticPartialTimeBarrierOptionEngine in _quantlib_risks:
_quantlib_risks.AnalyticPartialTimeBarrierOptionEngine_swigregister(AnalyticPartialTimeBarrierOptionEngine)
class DividendBarrierOption(BarrierOption):
    r"""Proxy of C++ DividendBarrierOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, barrierType, barrier, rebate, payoff, exercise, dividendDates, dividends):
        r"""__init__(DividendBarrierOption self, Barrier::Type barrierType, Real barrier, Real rebate, ext::shared_ptr< StrikedTypePayoff > const & payoff, ext::shared_ptr< Exercise > const & exercise, DateVector dividendDates, std::vector< Real,std::allocator< Real > > const & dividends) -> DividendBarrierOption"""
        _quantlib_risks.DividendBarrierOption_swiginit(self, _quantlib_risks.new_DividendBarrierOption(barrierType, barrier, rebate, payoff, exercise, dividendDates, dividends))
    __swig_destroy__ = _quantlib_risks.delete_DividendBarrierOption

# Register DividendBarrierOption in _quantlib_risks:
_quantlib_risks.DividendBarrierOption_swigregister(DividendBarrierOption)
class AnalyticBarrierEngine(PricingEngine):
    r"""Proxy of C++ AnalyticBarrierEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2):
        r"""__init__(AnalyticBarrierEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2) -> AnalyticBarrierEngine"""
        _quantlib_risks.AnalyticBarrierEngine_swiginit(self, _quantlib_risks.new_AnalyticBarrierEngine(arg2))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticBarrierEngine

# Register AnalyticBarrierEngine in _quantlib_risks:
_quantlib_risks.AnalyticBarrierEngine_swigregister(AnalyticBarrierEngine)
class MCPRBarrierEngine(PricingEngine):
    r"""Proxy of C++ MCBarrierEngine< PseudoRandom > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCPRBarrierEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, intOrNull timeSteps=Null< Size >(), intOrNull timeStepsPerYear=Null< Size >(), bool brownianBridge=False, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), bool isBiased=False, BigInteger seed=0) -> MCPRBarrierEngine"""
        _quantlib_risks.MCPRBarrierEngine_swiginit(self, _quantlib_risks.new_MCPRBarrierEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCPRBarrierEngine

# Register MCPRBarrierEngine in _quantlib_risks:
_quantlib_risks.MCPRBarrierEngine_swigregister(MCPRBarrierEngine)
class MCLDBarrierEngine(PricingEngine):
    r"""Proxy of C++ MCBarrierEngine< LowDiscrepancy > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCLDBarrierEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, intOrNull timeSteps=Null< Size >(), intOrNull timeStepsPerYear=Null< Size >(), bool brownianBridge=False, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), bool isBiased=False, BigInteger seed=0) -> MCLDBarrierEngine"""
        _quantlib_risks.MCLDBarrierEngine_swiginit(self, _quantlib_risks.new_MCLDBarrierEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCLDBarrierEngine

# Register MCLDBarrierEngine in _quantlib_risks:
_quantlib_risks.MCLDBarrierEngine_swigregister(MCLDBarrierEngine)

def MCBarrierEngine(process,
                    traits,
                    timeSteps=None,
                    timeStepsPerYear=None,
                    brownianBridge=False,
                    antitheticVariate=False,
                    requiredSamples=None,
                    requiredTolerance=None,
                    maxSamples=None,
                    isBiased=False,
                    seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRBarrierEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDBarrierEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               timeSteps,
               timeStepsPerYear,
               brownianBridge,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               isBiased,
               seed)

class QuantoBarrierEngine(PricingEngine):
    r"""Proxy of C++ QuantoBarrierEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, foreignRiskFreeRate, exchangeRateVolatility, correlation):
        r"""__init__(QuantoBarrierEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > arg2, YieldTermStructureHandle foreignRiskFreeRate, BlackVolTermStructureHandle exchangeRateVolatility, QuoteHandle correlation) -> QuantoBarrierEngine"""
        _quantlib_risks.QuantoBarrierEngine_swiginit(self, _quantlib_risks.new_QuantoBarrierEngine(arg2, foreignRiskFreeRate, exchangeRateVolatility, correlation))
    __swig_destroy__ = _quantlib_risks.delete_QuantoBarrierEngine

# Register QuantoBarrierEngine in _quantlib_risks:
_quantlib_risks.QuantoBarrierEngine_swigregister(QuantoBarrierEngine)
class FdBlackScholesBarrierEngine(PricingEngine):
    r"""Proxy of C++ FdBlackScholesBarrierEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FdBlackScholesBarrierEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, Size tGrid=100, Size xGrid=100, Size dampingSteps=0, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Douglas(), bool localVol=False, Real illegalLocalVolOverwrite=-Null< Real >()) -> FdBlackScholesBarrierEngine
        __init__(FdBlackScholesBarrierEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, DividendSchedule dividends, Size tGrid=100, Size xGrid=100, Size dampingSteps=0, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Douglas(), bool localVol=False, Real illegalLocalVolOverwrite=-Null< Real >()) -> FdBlackScholesBarrierEngine
        """
        _quantlib_risks.FdBlackScholesBarrierEngine_swiginit(self, _quantlib_risks.new_FdBlackScholesBarrierEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_FdBlackScholesBarrierEngine

# Register FdBlackScholesBarrierEngine in _quantlib_risks:
_quantlib_risks.FdBlackScholesBarrierEngine_swigregister(FdBlackScholesBarrierEngine)
class FdBlackScholesRebateEngine(PricingEngine):
    r"""Proxy of C++ FdBlackScholesRebateEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FdBlackScholesRebateEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, Size tGrid=100, Size xGrid=100, Size dampingSteps=0, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Douglas(), bool localVol=False, Real illegalLocalVolOverwrite=-Null< Real >()) -> FdBlackScholesRebateEngine
        __init__(FdBlackScholesRebateEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, DividendSchedule dividends, Size tGrid=100, Size xGrid=100, Size dampingSteps=0, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Douglas(), bool localVol=False, Real illegalLocalVolOverwrite=-Null< Real >()) -> FdBlackScholesRebateEngine
        """
        _quantlib_risks.FdBlackScholesRebateEngine_swiginit(self, _quantlib_risks.new_FdBlackScholesRebateEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_FdBlackScholesRebateEngine

# Register FdBlackScholesRebateEngine in _quantlib_risks:
_quantlib_risks.FdBlackScholesRebateEngine_swigregister(FdBlackScholesRebateEngine)
class FdHestonBarrierEngine(PricingEngine):
    r"""Proxy of C++ FdHestonBarrierEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FdHestonBarrierEngine self, ext::shared_ptr< HestonModel > const & model, Size tGrid=100, Size xGrid=100, Size vGrid=50, Size dampingSteps=0, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Hundsdorfer(), ext::shared_ptr< LocalVolTermStructure > const & leverageFct={}, Real const mixingFactor=1.0) -> FdHestonBarrierEngine
        __init__(FdHestonBarrierEngine self, ext::shared_ptr< HestonModel > const & model, DividendSchedule dividends, Size tGrid=100, Size xGrid=100, Size vGrid=50, Size dampingSteps=0, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Hundsdorfer(), ext::shared_ptr< LocalVolTermStructure > const & leverageFct={}, Real const mixingFactor=1.0) -> FdHestonBarrierEngine
        """
        _quantlib_risks.FdHestonBarrierEngine_swiginit(self, _quantlib_risks.new_FdHestonBarrierEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_FdHestonBarrierEngine

# Register FdHestonBarrierEngine in _quantlib_risks:
_quantlib_risks.FdHestonBarrierEngine_swigregister(FdHestonBarrierEngine)
class FdHestonRebateEngine(PricingEngine):
    r"""Proxy of C++ FdHestonRebateEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FdHestonRebateEngine self, ext::shared_ptr< HestonModel > const & model, Size tGrid=100, Size xGrid=100, Size vGrid=50, Size dampingSteps=0, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Hundsdorfer(), ext::shared_ptr< LocalVolTermStructure > const & leverageFct={}, Real const mixingFactor=1.0) -> FdHestonRebateEngine
        __init__(FdHestonRebateEngine self, ext::shared_ptr< HestonModel > const & model, DividendSchedule dividends, Size tGrid=100, Size xGrid=100, Size vGrid=50, Size dampingSteps=0, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Hundsdorfer(), ext::shared_ptr< LocalVolTermStructure > const & leverageFct={}, Real const mixingFactor=1.0) -> FdHestonRebateEngine
        """
        _quantlib_risks.FdHestonRebateEngine_swiginit(self, _quantlib_risks.new_FdHestonRebateEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_FdHestonRebateEngine

# Register FdHestonRebateEngine in _quantlib_risks:
_quantlib_risks.FdHestonRebateEngine_swigregister(FdHestonRebateEngine)
class AnalyticBinaryBarrierEngine(PricingEngine):
    r"""Proxy of C++ AnalyticBinaryBarrierEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(AnalyticBinaryBarrierEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process) -> AnalyticBinaryBarrierEngine"""
        _quantlib_risks.AnalyticBinaryBarrierEngine_swiginit(self, _quantlib_risks.new_AnalyticBinaryBarrierEngine(process))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticBinaryBarrierEngine

# Register AnalyticBinaryBarrierEngine in _quantlib_risks:
_quantlib_risks.AnalyticBinaryBarrierEngine_swigregister(AnalyticBinaryBarrierEngine)
class BinomialCRRBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
    up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    Boyle-Lau adjustment is controlled by parameter max_steps.
    If max_steps is equal to steps Boyle-Lau is disabled.
    Il max_steps is 0 (default value), max_steps is calculated by capping it to
    5*steps when Boyle-Lau would need more than 1000 steps.
    If max_steps is specified, it would limit binomial steps to this value.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps, max_steps=0):
        r"""
        __init__(BinomialCRRBarrierEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2, Size steps, Size max_steps=0) -> BinomialCRRBarrierEngine
        Binomial Engine for barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
        up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        Boyle-Lau adjustment is controlled by parameter max_steps.
        If max_steps is equal to steps Boyle-Lau is disabled.
        Il max_steps is 0 (default value), max_steps is calculated by capping it to
        5*steps when Boyle-Lau would need more than 1000 steps.
        If max_steps is specified, it would limit binomial steps to this value.

        """
        _quantlib_risks.BinomialCRRBarrierEngine_swiginit(self, _quantlib_risks.new_BinomialCRRBarrierEngine(arg2, steps, max_steps))
    __swig_destroy__ = _quantlib_risks.delete_BinomialCRRBarrierEngine

# Register BinomialCRRBarrierEngine in _quantlib_risks:
_quantlib_risks.BinomialCRRBarrierEngine_swigregister(BinomialCRRBarrierEngine)
class BinomialJRBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
    up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    Boyle-Lau adjustment is controlled by parameter max_steps.
    If max_steps is equal to steps Boyle-Lau is disabled.
    Il max_steps is 0 (default value), max_steps is calculated by capping it to
    5*steps when Boyle-Lau would need more than 1000 steps.
    If max_steps is specified, it would limit binomial steps to this value.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps, max_steps=0):
        r"""
        __init__(BinomialJRBarrierEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2, Size steps, Size max_steps=0) -> BinomialJRBarrierEngine
        Binomial Engine for barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
        up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        Boyle-Lau adjustment is controlled by parameter max_steps.
        If max_steps is equal to steps Boyle-Lau is disabled.
        Il max_steps is 0 (default value), max_steps is calculated by capping it to
        5*steps when Boyle-Lau would need more than 1000 steps.
        If max_steps is specified, it would limit binomial steps to this value.

        """
        _quantlib_risks.BinomialJRBarrierEngine_swiginit(self, _quantlib_risks.new_BinomialJRBarrierEngine(arg2, steps, max_steps))
    __swig_destroy__ = _quantlib_risks.delete_BinomialJRBarrierEngine

# Register BinomialJRBarrierEngine in _quantlib_risks:
_quantlib_risks.BinomialJRBarrierEngine_swigregister(BinomialJRBarrierEngine)
class BinomialEQPBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
    up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    Boyle-Lau adjustment is controlled by parameter max_steps.
    If max_steps is equal to steps Boyle-Lau is disabled.
    Il max_steps is 0 (default value), max_steps is calculated by capping it to
    5*steps when Boyle-Lau would need more than 1000 steps.
    If max_steps is specified, it would limit binomial steps to this value.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps, max_steps=0):
        r"""
        __init__(BinomialEQPBarrierEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2, Size steps, Size max_steps=0) -> BinomialEQPBarrierEngine
        Binomial Engine for barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
        up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        Boyle-Lau adjustment is controlled by parameter max_steps.
        If max_steps is equal to steps Boyle-Lau is disabled.
        Il max_steps is 0 (default value), max_steps is calculated by capping it to
        5*steps when Boyle-Lau would need more than 1000 steps.
        If max_steps is specified, it would limit binomial steps to this value.

        """
        _quantlib_risks.BinomialEQPBarrierEngine_swiginit(self, _quantlib_risks.new_BinomialEQPBarrierEngine(arg2, steps, max_steps))
    __swig_destroy__ = _quantlib_risks.delete_BinomialEQPBarrierEngine

# Register BinomialEQPBarrierEngine in _quantlib_risks:
_quantlib_risks.BinomialEQPBarrierEngine_swigregister(BinomialEQPBarrierEngine)
class BinomialTrigeorgisBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
    up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    Boyle-Lau adjustment is controlled by parameter max_steps.
    If max_steps is equal to steps Boyle-Lau is disabled.
    Il max_steps is 0 (default value), max_steps is calculated by capping it to
    5*steps when Boyle-Lau would need more than 1000 steps.
    If max_steps is specified, it would limit binomial steps to this value.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps, max_steps=0):
        r"""
        __init__(BinomialTrigeorgisBarrierEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2, Size steps, Size max_steps=0) -> BinomialTrigeorgisBarrierEngine
        Binomial Engine for barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
        up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        Boyle-Lau adjustment is controlled by parameter max_steps.
        If max_steps is equal to steps Boyle-Lau is disabled.
        Il max_steps is 0 (default value), max_steps is calculated by capping it to
        5*steps when Boyle-Lau would need more than 1000 steps.
        If max_steps is specified, it would limit binomial steps to this value.

        """
        _quantlib_risks.BinomialTrigeorgisBarrierEngine_swiginit(self, _quantlib_risks.new_BinomialTrigeorgisBarrierEngine(arg2, steps, max_steps))
    __swig_destroy__ = _quantlib_risks.delete_BinomialTrigeorgisBarrierEngine

# Register BinomialTrigeorgisBarrierEngine in _quantlib_risks:
_quantlib_risks.BinomialTrigeorgisBarrierEngine_swigregister(BinomialTrigeorgisBarrierEngine)
class BinomialTianBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
    up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    Boyle-Lau adjustment is controlled by parameter max_steps.
    If max_steps is equal to steps Boyle-Lau is disabled.
    Il max_steps is 0 (default value), max_steps is calculated by capping it to
    5*steps when Boyle-Lau would need more than 1000 steps.
    If max_steps is specified, it would limit binomial steps to this value.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps, max_steps=0):
        r"""
        __init__(BinomialTianBarrierEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2, Size steps, Size max_steps=0) -> BinomialTianBarrierEngine
        Binomial Engine for barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
        up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        Boyle-Lau adjustment is controlled by parameter max_steps.
        If max_steps is equal to steps Boyle-Lau is disabled.
        Il max_steps is 0 (default value), max_steps is calculated by capping it to
        5*steps when Boyle-Lau would need more than 1000 steps.
        If max_steps is specified, it would limit binomial steps to this value.

        """
        _quantlib_risks.BinomialTianBarrierEngine_swiginit(self, _quantlib_risks.new_BinomialTianBarrierEngine(arg2, steps, max_steps))
    __swig_destroy__ = _quantlib_risks.delete_BinomialTianBarrierEngine

# Register BinomialTianBarrierEngine in _quantlib_risks:
_quantlib_risks.BinomialTianBarrierEngine_swigregister(BinomialTianBarrierEngine)
class BinomialLRBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
    up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    Boyle-Lau adjustment is controlled by parameter max_steps.
    If max_steps is equal to steps Boyle-Lau is disabled.
    Il max_steps is 0 (default value), max_steps is calculated by capping it to
    5*steps when Boyle-Lau would need more than 1000 steps.
    If max_steps is specified, it would limit binomial steps to this value.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps, max_steps=0):
        r"""
        __init__(BinomialLRBarrierEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2, Size steps, Size max_steps=0) -> BinomialLRBarrierEngine
        Binomial Engine for barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
        up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        Boyle-Lau adjustment is controlled by parameter max_steps.
        If max_steps is equal to steps Boyle-Lau is disabled.
        Il max_steps is 0 (default value), max_steps is calculated by capping it to
        5*steps when Boyle-Lau would need more than 1000 steps.
        If max_steps is specified, it would limit binomial steps to this value.

        """
        _quantlib_risks.BinomialLRBarrierEngine_swiginit(self, _quantlib_risks.new_BinomialLRBarrierEngine(arg2, steps, max_steps))
    __swig_destroy__ = _quantlib_risks.delete_BinomialLRBarrierEngine

# Register BinomialLRBarrierEngine in _quantlib_risks:
_quantlib_risks.BinomialLRBarrierEngine_swigregister(BinomialLRBarrierEngine)
class BinomialJ4BarrierEngine(PricingEngine):
    r"""
    Binomial Engine for barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
    up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    Boyle-Lau adjustment is controlled by parameter max_steps.
    If max_steps is equal to steps Boyle-Lau is disabled.
    Il max_steps is 0 (default value), max_steps is calculated by capping it to
    5*steps when Boyle-Lau would need more than 1000 steps.
    If max_steps is specified, it would limit binomial steps to this value.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps, max_steps=0):
        r"""
        __init__(BinomialJ4BarrierEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2, Size steps, Size max_steps=0) -> BinomialJ4BarrierEngine
        Binomial Engine for barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Boyle-Lau adjustment for optimize steps and Derman-Kani optimization to speed
        up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        Boyle-Lau adjustment is controlled by parameter max_steps.
        If max_steps is equal to steps Boyle-Lau is disabled.
        Il max_steps is 0 (default value), max_steps is calculated by capping it to
        5*steps when Boyle-Lau would need more than 1000 steps.
        If max_steps is specified, it would limit binomial steps to this value.

        """
        _quantlib_risks.BinomialJ4BarrierEngine_swiginit(self, _quantlib_risks.new_BinomialJ4BarrierEngine(arg2, steps, max_steps))
    __swig_destroy__ = _quantlib_risks.delete_BinomialJ4BarrierEngine

# Register BinomialJ4BarrierEngine in _quantlib_risks:
_quantlib_risks.BinomialJ4BarrierEngine_swigregister(BinomialJ4BarrierEngine)

def BinomialBarrierEngine(process, type, steps):
    type = type.lower()
    if type == "crr" or type == "coxrossrubinstein":
        cls = BinomialCRRBarrierEngine
    elif type == "jr" or type == "jarrowrudd":
        cls = BinomialJRBarrierEngine
    elif type == "eqp":
        cls = BinomialEQPBarrierEngine
    elif type == "trigeorgis":
        cls = BinomialTrigeorgisBarrierEngine
    elif type == "tian":
        cls = BinomialTianBarrierEngine
    elif type == "lr" or type == "leisenreimer":
        cls = BinomialLRBarrierEngine
    elif type == "j4" or type == "joshi4":
        cls = BinomialJ4BarrierEngine
    else:
        raise RuntimeError("unknown binomial engine type: %s" % type);
    return cls(process, steps)

class VannaVolgaBarrierEngine(PricingEngine):
    r"""Proxy of C++ VannaVolgaBarrierEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, atmVol, vol25Put, vol25Call, spotFX, domesticTS, foreignTS, adaptVanDelta=False, bsPriceWithSmile=0.0):
        r"""__init__(VannaVolgaBarrierEngine self, DeltaVolQuoteHandle atmVol, DeltaVolQuoteHandle vol25Put, DeltaVolQuoteHandle vol25Call, QuoteHandle spotFX, YieldTermStructureHandle domesticTS, YieldTermStructureHandle foreignTS, bool const adaptVanDelta=False, Real const bsPriceWithSmile=0.0) -> VannaVolgaBarrierEngine"""
        _quantlib_risks.VannaVolgaBarrierEngine_swiginit(self, _quantlib_risks.new_VannaVolgaBarrierEngine(atmVol, vol25Put, vol25Call, spotFX, domesticTS, foreignTS, adaptVanDelta, bsPriceWithSmile))
    __swig_destroy__ = _quantlib_risks.delete_VannaVolgaBarrierEngine

# Register VannaVolgaBarrierEngine in _quantlib_risks:
_quantlib_risks.VannaVolgaBarrierEngine_swigregister(VannaVolgaBarrierEngine)
class DoubleBarrier(object):
    r"""Proxy of C++ DoubleBarrier class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    KnockIn = _quantlib_risks.DoubleBarrier_KnockIn
    
    KnockOut = _quantlib_risks.DoubleBarrier_KnockOut
    
    KIKO = _quantlib_risks.DoubleBarrier_KIKO
    
    KOKI = _quantlib_risks.DoubleBarrier_KOKI
    

    def __init__(self):
        r"""__init__(DoubleBarrier self) -> DoubleBarrier"""
        _quantlib_risks.DoubleBarrier_swiginit(self, _quantlib_risks.new_DoubleBarrier())
    __swig_destroy__ = _quantlib_risks.delete_DoubleBarrier

# Register DoubleBarrier in _quantlib_risks:
_quantlib_risks.DoubleBarrier_swigregister(DoubleBarrier)
class DoubleBarrierOption(OneAssetOption):
    r"""Proxy of C++ DoubleBarrierOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, barrierType, barrier_lo, barrier_hi, rebate, payoff, exercise):
        r"""__init__(DoubleBarrierOption self, DoubleBarrier::Type barrierType, Real barrier_lo, Real barrier_hi, Real rebate, ext::shared_ptr< StrikedTypePayoff > const & payoff, ext::shared_ptr< Exercise > const & exercise) -> DoubleBarrierOption"""
        _quantlib_risks.DoubleBarrierOption_swiginit(self, _quantlib_risks.new_DoubleBarrierOption(barrierType, barrier_lo, barrier_hi, rebate, payoff, exercise))
    __swig_destroy__ = _quantlib_risks.delete_DoubleBarrierOption

# Register DoubleBarrierOption in _quantlib_risks:
_quantlib_risks.DoubleBarrierOption_swigregister(DoubleBarrierOption)
class QuantoDoubleBarrierOption(DoubleBarrierOption):
    r"""Proxy of C++ QuantoDoubleBarrierOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, barrierType, barrier_lo, barrier_hi, rebate, payoff, exercise):
        r"""__init__(QuantoDoubleBarrierOption self, DoubleBarrier::Type barrierType, Real barrier_lo, Real barrier_hi, Real rebate, ext::shared_ptr< StrikedTypePayoff > const & payoff, ext::shared_ptr< Exercise > const & exercise) -> QuantoDoubleBarrierOption"""
        _quantlib_risks.QuantoDoubleBarrierOption_swiginit(self, _quantlib_risks.new_QuantoDoubleBarrierOption(barrierType, barrier_lo, barrier_hi, rebate, payoff, exercise))

    def qvega(self):
        r"""qvega(QuantoDoubleBarrierOption self) -> Real"""
        return _quantlib_risks.QuantoDoubleBarrierOption_qvega(self)

    def qrho(self):
        r"""qrho(QuantoDoubleBarrierOption self) -> Real"""
        return _quantlib_risks.QuantoDoubleBarrierOption_qrho(self)

    def qlambda(self):
        r"""qlambda(QuantoDoubleBarrierOption self) -> Real"""
        return _quantlib_risks.QuantoDoubleBarrierOption_qlambda(self)
    __swig_destroy__ = _quantlib_risks.delete_QuantoDoubleBarrierOption

# Register QuantoDoubleBarrierOption in _quantlib_risks:
_quantlib_risks.QuantoDoubleBarrierOption_swigregister(QuantoDoubleBarrierOption)
class AnalyticDoubleBarrierEngine(PricingEngine):
    r"""Double barrier engine implementing Ikeda-Kunitomo series."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process, series=5):
        r"""
        __init__(AnalyticDoubleBarrierEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, int series=5) -> AnalyticDoubleBarrierEngine
        Double barrier engine implementing Ikeda-Kunitomo series.
        """
        _quantlib_risks.AnalyticDoubleBarrierEngine_swiginit(self, _quantlib_risks.new_AnalyticDoubleBarrierEngine(process, series))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticDoubleBarrierEngine

# Register AnalyticDoubleBarrierEngine in _quantlib_risks:
_quantlib_risks.AnalyticDoubleBarrierEngine_swigregister(AnalyticDoubleBarrierEngine)
class FdHestonDoubleBarrierEngine(PricingEngine):
    r"""Proxy of C++ FdHestonDoubleBarrierEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(FdHestonDoubleBarrierEngine self, ext::shared_ptr< HestonModel > const & model, Size tGrid=100, Size xGrid=100, Size vGrid=50, Size dampingSteps=0, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Hundsdorfer(), ext::shared_ptr< LocalVolTermStructure > const & leverageFct=ext::shared_ptr< LocalVolTermStructure >(), Real const mixingFactor=1.0) -> FdHestonDoubleBarrierEngine"""
        _quantlib_risks.FdHestonDoubleBarrierEngine_swiginit(self, _quantlib_risks.new_FdHestonDoubleBarrierEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_FdHestonDoubleBarrierEngine

# Register FdHestonDoubleBarrierEngine in _quantlib_risks:
_quantlib_risks.FdHestonDoubleBarrierEngine_swigregister(FdHestonDoubleBarrierEngine)
class SuoWangDoubleBarrierEngine(PricingEngine):
    r"""Proxy of C++ SuoWangDoubleBarrierEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process, series=5):
        r"""__init__(SuoWangDoubleBarrierEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, int series=5) -> SuoWangDoubleBarrierEngine"""
        _quantlib_risks.SuoWangDoubleBarrierEngine_swiginit(self, _quantlib_risks.new_SuoWangDoubleBarrierEngine(process, series))
    __swig_destroy__ = _quantlib_risks.delete_SuoWangDoubleBarrierEngine

# Register SuoWangDoubleBarrierEngine in _quantlib_risks:
_quantlib_risks.SuoWangDoubleBarrierEngine_swigregister(SuoWangDoubleBarrierEngine)
class VannaVolgaIKDoubleBarrierEngine(PricingEngine):
    r"""Proxy of C++ VannaVolgaDoubleBarrierEngine< AnalyticDoubleBarrierEngine > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, atmVol, vol25Put, vol25Call, spotFX, domesticTS, foreignTS, adaptVanDelta=False, bsPriceWithSmile=0.0, series=5):
        r"""__init__(VannaVolgaIKDoubleBarrierEngine self, DeltaVolQuoteHandle atmVol, DeltaVolQuoteHandle vol25Put, DeltaVolQuoteHandle vol25Call, QuoteHandle spotFX, YieldTermStructureHandle domesticTS, YieldTermStructureHandle foreignTS, bool const adaptVanDelta=False, Real const bsPriceWithSmile=0.0, int series=5) -> VannaVolgaIKDoubleBarrierEngine"""
        _quantlib_risks.VannaVolgaIKDoubleBarrierEngine_swiginit(self, _quantlib_risks.new_VannaVolgaIKDoubleBarrierEngine(atmVol, vol25Put, vol25Call, spotFX, domesticTS, foreignTS, adaptVanDelta, bsPriceWithSmile, series))
    __swig_destroy__ = _quantlib_risks.delete_VannaVolgaIKDoubleBarrierEngine

# Register VannaVolgaIKDoubleBarrierEngine in _quantlib_risks:
_quantlib_risks.VannaVolgaIKDoubleBarrierEngine_swigregister(VannaVolgaIKDoubleBarrierEngine)
class VannaVolgaWODoubleBarrierEngine(PricingEngine):
    r"""Proxy of C++ VannaVolgaDoubleBarrierEngine< SuoWangDoubleBarrierEngine > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, atmVol, vol25Put, vol25Call, spotFX, domesticTS, foreignTS, adaptVanDelta=False, bsPriceWithSmile=0.0, series=5):
        r"""__init__(VannaVolgaWODoubleBarrierEngine self, DeltaVolQuoteHandle atmVol, DeltaVolQuoteHandle vol25Put, DeltaVolQuoteHandle vol25Call, QuoteHandle spotFX, YieldTermStructureHandle domesticTS, YieldTermStructureHandle foreignTS, bool const adaptVanDelta=False, Real const bsPriceWithSmile=0.0, int series=5) -> VannaVolgaWODoubleBarrierEngine"""
        _quantlib_risks.VannaVolgaWODoubleBarrierEngine_swiginit(self, _quantlib_risks.new_VannaVolgaWODoubleBarrierEngine(atmVol, vol25Put, vol25Call, spotFX, domesticTS, foreignTS, adaptVanDelta, bsPriceWithSmile, series))
    __swig_destroy__ = _quantlib_risks.delete_VannaVolgaWODoubleBarrierEngine

# Register VannaVolgaWODoubleBarrierEngine in _quantlib_risks:
_quantlib_risks.VannaVolgaWODoubleBarrierEngine_swigregister(VannaVolgaWODoubleBarrierEngine)
class AnalyticDoubleBarrierBinaryEngine(PricingEngine):
    r"""Proxy of C++ AnalyticDoubleBarrierBinaryEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(AnalyticDoubleBarrierBinaryEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process) -> AnalyticDoubleBarrierBinaryEngine"""
        _quantlib_risks.AnalyticDoubleBarrierBinaryEngine_swiginit(self, _quantlib_risks.new_AnalyticDoubleBarrierBinaryEngine(process))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticDoubleBarrierBinaryEngine

# Register AnalyticDoubleBarrierBinaryEngine in _quantlib_risks:
_quantlib_risks.AnalyticDoubleBarrierBinaryEngine_swigregister(AnalyticDoubleBarrierBinaryEngine)
class BinomialCRRDoubleBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for double barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Derman-Kani optimization to speed up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        r"""
        __init__(BinomialCRRDoubleBarrierEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2, Size steps) -> BinomialCRRDoubleBarrierEngine
        Binomial Engine for double barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Derman-Kani optimization to speed up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        """
        _quantlib_risks.BinomialCRRDoubleBarrierEngine_swiginit(self, _quantlib_risks.new_BinomialCRRDoubleBarrierEngine(arg2, steps))
    __swig_destroy__ = _quantlib_risks.delete_BinomialCRRDoubleBarrierEngine

# Register BinomialCRRDoubleBarrierEngine in _quantlib_risks:
_quantlib_risks.BinomialCRRDoubleBarrierEngine_swigregister(BinomialCRRDoubleBarrierEngine)
class BinomialJRDoubleBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for double barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Derman-Kani optimization to speed up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        r"""
        __init__(BinomialJRDoubleBarrierEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2, Size steps) -> BinomialJRDoubleBarrierEngine
        Binomial Engine for double barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Derman-Kani optimization to speed up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        """
        _quantlib_risks.BinomialJRDoubleBarrierEngine_swiginit(self, _quantlib_risks.new_BinomialJRDoubleBarrierEngine(arg2, steps))
    __swig_destroy__ = _quantlib_risks.delete_BinomialJRDoubleBarrierEngine

# Register BinomialJRDoubleBarrierEngine in _quantlib_risks:
_quantlib_risks.BinomialJRDoubleBarrierEngine_swigregister(BinomialJRDoubleBarrierEngine)
class BinomialEQPDoubleBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for double barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Derman-Kani optimization to speed up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        r"""
        __init__(BinomialEQPDoubleBarrierEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2, Size steps) -> BinomialEQPDoubleBarrierEngine
        Binomial Engine for double barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Derman-Kani optimization to speed up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        """
        _quantlib_risks.BinomialEQPDoubleBarrierEngine_swiginit(self, _quantlib_risks.new_BinomialEQPDoubleBarrierEngine(arg2, steps))
    __swig_destroy__ = _quantlib_risks.delete_BinomialEQPDoubleBarrierEngine

# Register BinomialEQPDoubleBarrierEngine in _quantlib_risks:
_quantlib_risks.BinomialEQPDoubleBarrierEngine_swigregister(BinomialEQPDoubleBarrierEngine)
class BinomialTrigeorgisDoubleBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for double barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Derman-Kani optimization to speed up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        r"""
        __init__(BinomialTrigeorgisDoubleBarrierEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2, Size steps) -> BinomialTrigeorgisDoubleBarrierEngine
        Binomial Engine for double barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Derman-Kani optimization to speed up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        """
        _quantlib_risks.BinomialTrigeorgisDoubleBarrierEngine_swiginit(self, _quantlib_risks.new_BinomialTrigeorgisDoubleBarrierEngine(arg2, steps))
    __swig_destroy__ = _quantlib_risks.delete_BinomialTrigeorgisDoubleBarrierEngine

# Register BinomialTrigeorgisDoubleBarrierEngine in _quantlib_risks:
_quantlib_risks.BinomialTrigeorgisDoubleBarrierEngine_swigregister(BinomialTrigeorgisDoubleBarrierEngine)
class BinomialTianDoubleBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for double barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Derman-Kani optimization to speed up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        r"""
        __init__(BinomialTianDoubleBarrierEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2, Size steps) -> BinomialTianDoubleBarrierEngine
        Binomial Engine for double barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Derman-Kani optimization to speed up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        """
        _quantlib_risks.BinomialTianDoubleBarrierEngine_swiginit(self, _quantlib_risks.new_BinomialTianDoubleBarrierEngine(arg2, steps))
    __swig_destroy__ = _quantlib_risks.delete_BinomialTianDoubleBarrierEngine

# Register BinomialTianDoubleBarrierEngine in _quantlib_risks:
_quantlib_risks.BinomialTianDoubleBarrierEngine_swigregister(BinomialTianDoubleBarrierEngine)
class BinomialLRDoubleBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for double barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Derman-Kani optimization to speed up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        r"""
        __init__(BinomialLRDoubleBarrierEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2, Size steps) -> BinomialLRDoubleBarrierEngine
        Binomial Engine for double barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Derman-Kani optimization to speed up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        """
        _quantlib_risks.BinomialLRDoubleBarrierEngine_swiginit(self, _quantlib_risks.new_BinomialLRDoubleBarrierEngine(arg2, steps))
    __swig_destroy__ = _quantlib_risks.delete_BinomialLRDoubleBarrierEngine

# Register BinomialLRDoubleBarrierEngine in _quantlib_risks:
_quantlib_risks.BinomialLRDoubleBarrierEngine_swigregister(BinomialLRDoubleBarrierEngine)
class BinomialJ4DoubleBarrierEngine(PricingEngine):
    r"""
    Binomial Engine for double barrier options.
    Features different binomial models, selected by the type parameters.
    Uses Derman-Kani optimization to speed up convergence.
    Type values:
        crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
        jr  or jarrowrudd:               Jarrow-Rudd model
        eqp or additiveeqpbinomialtree:  Additive EQP model
        trigeorgis:                      Trigeorgis model
        tian:                            Tian model
        lr  or leisenreimer              Leisen-Reimer model
        j4  or joshi4:                   Joshi 4th (smoothed) model

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, steps):
        r"""
        __init__(BinomialJ4DoubleBarrierEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg2, Size steps) -> BinomialJ4DoubleBarrierEngine
        Binomial Engine for double barrier options.
        Features different binomial models, selected by the type parameters.
        Uses Derman-Kani optimization to speed up convergence.
        Type values:
            crr or coxrossrubinstein:        Cox-Ross-Rubinstein model
            jr  or jarrowrudd:               Jarrow-Rudd model
            eqp or additiveeqpbinomialtree:  Additive EQP model
            trigeorgis:                      Trigeorgis model
            tian:                            Tian model
            lr  or leisenreimer              Leisen-Reimer model
            j4  or joshi4:                   Joshi 4th (smoothed) model

        """
        _quantlib_risks.BinomialJ4DoubleBarrierEngine_swiginit(self, _quantlib_risks.new_BinomialJ4DoubleBarrierEngine(arg2, steps))
    __swig_destroy__ = _quantlib_risks.delete_BinomialJ4DoubleBarrierEngine

# Register BinomialJ4DoubleBarrierEngine in _quantlib_risks:
_quantlib_risks.BinomialJ4DoubleBarrierEngine_swigregister(BinomialJ4DoubleBarrierEngine)

def BinomialDoubleBarrierEngine(process, type, steps):
    type = type.lower()
    if type == "crr" or type == "coxrossrubinstein":
        cls = BinomialCRRDoubleBarrierEngine
    elif type == "jr" or type == "jarrowrudd":
        cls = BinomialJRDoubleBarrierEngine
    elif type == "eqp":
        cls = BinomialEQPDoubleBarrierEngine
    elif type == "trigeorgis":
        cls = BinomialTrigeorgisDoubleBarrierEngine
    elif type == "tian":
        cls = BinomialTianDoubleBarrierEngine
    elif type == "lr" or type == "leisenreimer":
        cls = BinomialLRDoubleBarrierEngine
    elif type == "j4" or type == "joshi4":
        cls = BinomialJ4DoubleBarrierEngine
    else:
        raise RuntimeError("unknown binomial engine type: %s" % type);
    return cls(process, steps)

class PlainVanillaPayoff(StrikedTypePayoff):
    r"""Proxy of C++ PlainVanillaPayoff class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type, strike):
        r"""__init__(PlainVanillaPayoff self, Option::Type type, Real strike) -> PlainVanillaPayoff"""
        _quantlib_risks.PlainVanillaPayoff_swiginit(self, _quantlib_risks.new_PlainVanillaPayoff(type, strike))
    __swig_destroy__ = _quantlib_risks.delete_PlainVanillaPayoff

# Register PlainVanillaPayoff in _quantlib_risks:
_quantlib_risks.PlainVanillaPayoff_swigregister(PlainVanillaPayoff)

def as_plain_vanilla_payoff(payoff):
    r"""as_plain_vanilla_payoff(ext::shared_ptr< Payoff > const & payoff) -> ext::shared_ptr< PlainVanillaPayoff > const"""
    return _quantlib_risks.as_plain_vanilla_payoff(payoff)
class PercentageStrikePayoff(StrikedTypePayoff):
    r"""Proxy of C++ PercentageStrikePayoff class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type, moneyness):
        r"""__init__(PercentageStrikePayoff self, Option::Type type, Real moneyness) -> PercentageStrikePayoff"""
        _quantlib_risks.PercentageStrikePayoff_swiginit(self, _quantlib_risks.new_PercentageStrikePayoff(type, moneyness))
    __swig_destroy__ = _quantlib_risks.delete_PercentageStrikePayoff

# Register PercentageStrikePayoff in _quantlib_risks:
_quantlib_risks.PercentageStrikePayoff_swigregister(PercentageStrikePayoff)
class CashOrNothingPayoff(StrikedTypePayoff):
    r"""Proxy of C++ CashOrNothingPayoff class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type, strike, payoff):
        r"""__init__(CashOrNothingPayoff self, Option::Type type, Real strike, Real payoff) -> CashOrNothingPayoff"""
        _quantlib_risks.CashOrNothingPayoff_swiginit(self, _quantlib_risks.new_CashOrNothingPayoff(type, strike, payoff))
    __swig_destroy__ = _quantlib_risks.delete_CashOrNothingPayoff

# Register CashOrNothingPayoff in _quantlib_risks:
_quantlib_risks.CashOrNothingPayoff_swigregister(CashOrNothingPayoff)
class AssetOrNothingPayoff(StrikedTypePayoff):
    r"""Proxy of C++ AssetOrNothingPayoff class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type, strike):
        r"""__init__(AssetOrNothingPayoff self, Option::Type type, Real strike) -> AssetOrNothingPayoff"""
        _quantlib_risks.AssetOrNothingPayoff_swiginit(self, _quantlib_risks.new_AssetOrNothingPayoff(type, strike))
    __swig_destroy__ = _quantlib_risks.delete_AssetOrNothingPayoff

# Register AssetOrNothingPayoff in _quantlib_risks:
_quantlib_risks.AssetOrNothingPayoff_swigregister(AssetOrNothingPayoff)
class SuperSharePayoff(StrikedTypePayoff):
    r"""Proxy of C++ SuperSharePayoff class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type, strike, increment):
        r"""__init__(SuperSharePayoff self, Option::Type type, Real strike, Real increment) -> SuperSharePayoff"""
        _quantlib_risks.SuperSharePayoff_swiginit(self, _quantlib_risks.new_SuperSharePayoff(type, strike, increment))
    __swig_destroy__ = _quantlib_risks.delete_SuperSharePayoff

# Register SuperSharePayoff in _quantlib_risks:
_quantlib_risks.SuperSharePayoff_swigregister(SuperSharePayoff)
class GapPayoff(StrikedTypePayoff):
    r"""Proxy of C++ GapPayoff class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type, strike, strikePayoff):
        r"""__init__(GapPayoff self, Option::Type type, Real strike, Real strikePayoff) -> GapPayoff"""
        _quantlib_risks.GapPayoff_swiginit(self, _quantlib_risks.new_GapPayoff(type, strike, strikePayoff))
    __swig_destroy__ = _quantlib_risks.delete_GapPayoff

# Register GapPayoff in _quantlib_risks:
_quantlib_risks.GapPayoff_swigregister(GapPayoff)
class VanillaForwardPayoff(StrikedTypePayoff):
    r"""Proxy of C++ VanillaForwardPayoff class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type, strike):
        r"""__init__(VanillaForwardPayoff self, Option::Type type, Real strike) -> VanillaForwardPayoff"""
        _quantlib_risks.VanillaForwardPayoff_swiginit(self, _quantlib_risks.new_VanillaForwardPayoff(type, strike))
    __swig_destroy__ = _quantlib_risks.delete_VanillaForwardPayoff

# Register VanillaForwardPayoff in _quantlib_risks:
_quantlib_risks.VanillaForwardPayoff_swigregister(VanillaForwardPayoff)
class BasketPayoff(Payoff):
    r"""Proxy of C++ BasketPayoff class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _quantlib_risks.delete_BasketPayoff

# Register BasketPayoff in _quantlib_risks:
_quantlib_risks.BasketPayoff_swigregister(BasketPayoff)
class MinBasketPayoff(BasketPayoff):
    r"""Proxy of C++ MinBasketPayoff class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p):
        r"""__init__(MinBasketPayoff self, ext::shared_ptr< Payoff > const p) -> MinBasketPayoff"""
        _quantlib_risks.MinBasketPayoff_swiginit(self, _quantlib_risks.new_MinBasketPayoff(p))
    __swig_destroy__ = _quantlib_risks.delete_MinBasketPayoff

# Register MinBasketPayoff in _quantlib_risks:
_quantlib_risks.MinBasketPayoff_swigregister(MinBasketPayoff)
class MaxBasketPayoff(BasketPayoff):
    r"""Proxy of C++ MaxBasketPayoff class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p):
        r"""__init__(MaxBasketPayoff self, ext::shared_ptr< Payoff > const p) -> MaxBasketPayoff"""
        _quantlib_risks.MaxBasketPayoff_swiginit(self, _quantlib_risks.new_MaxBasketPayoff(p))
    __swig_destroy__ = _quantlib_risks.delete_MaxBasketPayoff

# Register MaxBasketPayoff in _quantlib_risks:
_quantlib_risks.MaxBasketPayoff_swigregister(MaxBasketPayoff)
class AverageBasketPayoff(BasketPayoff):
    r"""Proxy of C++ AverageBasketPayoff class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(AverageBasketPayoff self, ext::shared_ptr< Payoff > const p, Array a) -> AverageBasketPayoff
        __init__(AverageBasketPayoff self, ext::shared_ptr< Payoff > const p, Size n) -> AverageBasketPayoff
        """
        _quantlib_risks.AverageBasketPayoff_swiginit(self, _quantlib_risks.new_AverageBasketPayoff(*args))
    __swig_destroy__ = _quantlib_risks.delete_AverageBasketPayoff

# Register AverageBasketPayoff in _quantlib_risks:
_quantlib_risks.AverageBasketPayoff_swigregister(AverageBasketPayoff)
class SpreadBasketPayoff(BasketPayoff):
    r"""Proxy of C++ SpreadBasketPayoff class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p):
        r"""__init__(SpreadBasketPayoff self, ext::shared_ptr< Payoff > const p) -> SpreadBasketPayoff"""
        _quantlib_risks.SpreadBasketPayoff_swiginit(self, _quantlib_risks.new_SpreadBasketPayoff(p))
    __swig_destroy__ = _quantlib_risks.delete_SpreadBasketPayoff

# Register SpreadBasketPayoff in _quantlib_risks:
_quantlib_risks.SpreadBasketPayoff_swigregister(SpreadBasketPayoff)
class BasketOption(MultiAssetOption):
    r"""Proxy of C++ BasketOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff, exercise):
        r"""__init__(BasketOption self, ext::shared_ptr< BasketPayoff > const & payoff, ext::shared_ptr< Exercise > const & exercise) -> BasketOption"""
        _quantlib_risks.BasketOption_swiginit(self, _quantlib_risks.new_BasketOption(payoff, exercise))
    __swig_destroy__ = _quantlib_risks.delete_BasketOption

# Register BasketOption in _quantlib_risks:
_quantlib_risks.BasketOption_swigregister(BasketOption)
class MCPREuropeanBasketEngine(PricingEngine):
    r"""Proxy of C++ MCEuropeanBasketEngine< PseudoRandom > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCPREuropeanBasketEngine self, ext::shared_ptr< StochasticProcessArray > const & process, intOrNull timeSteps=Null< Size >(), intOrNull timeStepsPerYear=Null< Size >(), bool brownianBridge=False, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0) -> MCPREuropeanBasketEngine"""
        _quantlib_risks.MCPREuropeanBasketEngine_swiginit(self, _quantlib_risks.new_MCPREuropeanBasketEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCPREuropeanBasketEngine

# Register MCPREuropeanBasketEngine in _quantlib_risks:
_quantlib_risks.MCPREuropeanBasketEngine_swigregister(MCPREuropeanBasketEngine)
class MCLDEuropeanBasketEngine(PricingEngine):
    r"""Proxy of C++ MCEuropeanBasketEngine< LowDiscrepancy > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCLDEuropeanBasketEngine self, ext::shared_ptr< StochasticProcessArray > const & process, intOrNull timeSteps=Null< Size >(), intOrNull timeStepsPerYear=Null< Size >(), bool brownianBridge=False, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0) -> MCLDEuropeanBasketEngine"""
        _quantlib_risks.MCLDEuropeanBasketEngine_swiginit(self, _quantlib_risks.new_MCLDEuropeanBasketEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCLDEuropeanBasketEngine

# Register MCLDEuropeanBasketEngine in _quantlib_risks:
_quantlib_risks.MCLDEuropeanBasketEngine_swigregister(MCLDEuropeanBasketEngine)

def MCEuropeanBasketEngine(process,
                           traits,
                           timeSteps=None,
                           timeStepsPerYear=None,
                           brownianBridge=False,
                           antitheticVariate=False,
                           requiredSamples=None,
                           requiredTolerance=None,
                           maxSamples=None,
                           seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPREuropeanBasketEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDEuropeanBasketEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               timeSteps,
               timeStepsPerYear,
               brownianBridge,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed)

class MCPRAmericanBasketEngine(PricingEngine):
    r"""Proxy of C++ MCAmericanBasketEngine< PseudoRandom > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCPRAmericanBasketEngine self, ext::shared_ptr< StochasticProcessArray > const & process, intOrNull timeSteps=Null< Size >(), intOrNull timeStepsPerYear=Null< Size >(), bool brownianBridge=False, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0, Size nCalibrationSamples=Null< Size >(), Size polynomOrder=2, LsmBasisSystem::PolynomialType polynomType=Monomial) -> MCPRAmericanBasketEngine"""
        _quantlib_risks.MCPRAmericanBasketEngine_swiginit(self, _quantlib_risks.new_MCPRAmericanBasketEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCPRAmericanBasketEngine

# Register MCPRAmericanBasketEngine in _quantlib_risks:
_quantlib_risks.MCPRAmericanBasketEngine_swigregister(MCPRAmericanBasketEngine)
class MCLDAmericanBasketEngine(PricingEngine):
    r"""Proxy of C++ MCAmericanBasketEngine< LowDiscrepancy > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCLDAmericanBasketEngine self, ext::shared_ptr< StochasticProcessArray > const & process, intOrNull timeSteps=Null< Size >(), intOrNull timeStepsPerYear=Null< Size >(), bool brownianBridge=False, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0, Size nCalibrationSamples=Null< Size >(), Size polynomOrder=2, LsmBasisSystem::PolynomialType polynomType=Monomial) -> MCLDAmericanBasketEngine"""
        _quantlib_risks.MCLDAmericanBasketEngine_swiginit(self, _quantlib_risks.new_MCLDAmericanBasketEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCLDAmericanBasketEngine

# Register MCLDAmericanBasketEngine in _quantlib_risks:
_quantlib_risks.MCLDAmericanBasketEngine_swigregister(MCLDAmericanBasketEngine)

def MCAmericanBasketEngine(process,
                           traits,
                           timeSteps=None,
                           timeStepsPerYear=None,
                           brownianBridge=False,
                           antitheticVariate=False,
                           requiredSamples=None,
                           requiredTolerance=None,
                           maxSamples=None,
                           seed=0,
                           nCalibrationSamples=2048,
                           polynomOrder=2,
                           polynomType=LsmBasisSystem.Monomial):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRAmericanBasketEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDAmericanBasketEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               timeSteps,
               timeStepsPerYear,
               brownianBridge,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed,
               nCalibrationSamples,
               polynomOrder,
               polynomType)

class StulzEngine(PricingEngine):
    r"""Proxy of C++ StulzEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process1, process2, correlation):
        r"""__init__(StulzEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process1, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process2, Real correlation) -> StulzEngine"""
        _quantlib_risks.StulzEngine_swiginit(self, _quantlib_risks.new_StulzEngine(process1, process2, correlation))
    __swig_destroy__ = _quantlib_risks.delete_StulzEngine

# Register StulzEngine in _quantlib_risks:
_quantlib_risks.StulzEngine_swigregister(StulzEngine)
class KirkEngine(PricingEngine):
    r"""Proxy of C++ KirkEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process1, process2, correlation):
        r"""__init__(KirkEngine self, ext::shared_ptr< BlackProcess > const & process1, ext::shared_ptr< BlackProcess > const & process2, Real correlation) -> KirkEngine"""
        _quantlib_risks.KirkEngine_swiginit(self, _quantlib_risks.new_KirkEngine(process1, process2, correlation))
    __swig_destroy__ = _quantlib_risks.delete_KirkEngine

# Register KirkEngine in _quantlib_risks:
_quantlib_risks.KirkEngine_swigregister(KirkEngine)
class Fd2dBlackScholesVanillaEngine(PricingEngine):
    r"""Proxy of C++ Fd2dBlackScholesVanillaEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Fd2dBlackScholesVanillaEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & p1, ext::shared_ptr< GeneralizedBlackScholesProcess > const & p2, Real correlation, Size xGrid=100, Size yGrid=100, Size tGrid=50, Size dampingSteps=0, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Hundsdorfer(), bool localVol=False, Real illegalLocalVolOverwrite=-Null< Real >()) -> Fd2dBlackScholesVanillaEngine"""
        _quantlib_risks.Fd2dBlackScholesVanillaEngine_swiginit(self, _quantlib_risks.new_Fd2dBlackScholesVanillaEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_Fd2dBlackScholesVanillaEngine

# Register Fd2dBlackScholesVanillaEngine in _quantlib_risks:
_quantlib_risks.Fd2dBlackScholesVanillaEngine_swigregister(Fd2dBlackScholesVanillaEngine)
class EverestOption(MultiAssetOption):
    r"""Proxy of C++ EverestOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, notional, guarantee, exercise):
        r"""__init__(EverestOption self, Real notional, Rate guarantee, ext::shared_ptr< Exercise > const & exercise) -> EverestOption"""
        _quantlib_risks.EverestOption_swiginit(self, _quantlib_risks.new_EverestOption(notional, guarantee, exercise))
    __swig_destroy__ = _quantlib_risks.delete_EverestOption

# Register EverestOption in _quantlib_risks:
_quantlib_risks.EverestOption_swigregister(EverestOption)
class MCPREverestEngine(PricingEngine):
    r"""Proxy of C++ MCEverestEngine< PseudoRandom > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCPREverestEngine self, ext::shared_ptr< StochasticProcessArray > const & process, Size timeSteps=Null< Size >(), Size timeStepsPerYear=Null< Size >(), bool brownianBridge=False, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0) -> MCPREverestEngine"""
        _quantlib_risks.MCPREverestEngine_swiginit(self, _quantlib_risks.new_MCPREverestEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCPREverestEngine

# Register MCPREverestEngine in _quantlib_risks:
_quantlib_risks.MCPREverestEngine_swigregister(MCPREverestEngine)
class MCLDEverestEngine(PricingEngine):
    r"""Proxy of C++ MCEverestEngine< LowDiscrepancy > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCLDEverestEngine self, ext::shared_ptr< StochasticProcessArray > const & process, Size timeSteps=Null< Size >(), Size timeStepsPerYear=Null< Size >(), bool brownianBridge=False, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0) -> MCLDEverestEngine"""
        _quantlib_risks.MCLDEverestEngine_swiginit(self, _quantlib_risks.new_MCLDEverestEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCLDEverestEngine

# Register MCLDEverestEngine in _quantlib_risks:
_quantlib_risks.MCLDEverestEngine_swigregister(MCLDEverestEngine)

def MCEverestEngine(process,
                    traits,
                    timeSteps=None,
                    timeStepsPerYear=None,
                    brownianBridge=False,
                    antitheticVariate=False,
                    requiredSamples=None,
                    requiredTolerance=None,
                    maxSamples=None,
                    seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPREverestEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDEverestEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               timeSteps,
               timeStepsPerYear,
               brownianBridge,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed)

class HimalayaOption(MultiAssetOption):
    r"""Proxy of C++ HimalayaOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fixingDates, strike):
        r"""__init__(HimalayaOption self, DateVector fixingDates, Real strike) -> HimalayaOption"""
        _quantlib_risks.HimalayaOption_swiginit(self, _quantlib_risks.new_HimalayaOption(fixingDates, strike))
    __swig_destroy__ = _quantlib_risks.delete_HimalayaOption

# Register HimalayaOption in _quantlib_risks:
_quantlib_risks.HimalayaOption_swigregister(HimalayaOption)
class MCPRHimalayaEngine(PricingEngine):
    r"""Proxy of C++ MCHimalayaEngine< PseudoRandom > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCPRHimalayaEngine self, ext::shared_ptr< StochasticProcessArray > const & process, bool brownianBridge=False, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0) -> MCPRHimalayaEngine"""
        _quantlib_risks.MCPRHimalayaEngine_swiginit(self, _quantlib_risks.new_MCPRHimalayaEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCPRHimalayaEngine

# Register MCPRHimalayaEngine in _quantlib_risks:
_quantlib_risks.MCPRHimalayaEngine_swigregister(MCPRHimalayaEngine)
class MCLDHimalayaEngine(PricingEngine):
    r"""Proxy of C++ MCHimalayaEngine< LowDiscrepancy > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCLDHimalayaEngine self, ext::shared_ptr< StochasticProcessArray > const & process, bool brownianBridge=False, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0) -> MCLDHimalayaEngine"""
        _quantlib_risks.MCLDHimalayaEngine_swiginit(self, _quantlib_risks.new_MCLDHimalayaEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCLDHimalayaEngine

# Register MCLDHimalayaEngine in _quantlib_risks:
_quantlib_risks.MCLDHimalayaEngine_swigregister(MCLDHimalayaEngine)

def MCHimalayaEngine(process,
                     traits,
                     brownianBridge=False,
                     antitheticVariate=False,
                     requiredSamples=None,
                     requiredTolerance=None,
                     maxSamples=None,
                     seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRHimalayaEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDHimalayaEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               brownianBridge,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed)


def blackFormula(optionType, strike, forward, stdDev, discount=1.0, displacement=0.0):
    r"""blackFormula(Option::Type optionType, Real strike, Real forward, Real stdDev, Real discount=1.0, Real displacement=0.0) -> Real"""
    return _quantlib_risks.blackFormula(optionType, strike, forward, stdDev, discount, displacement)

def blackFormulaImpliedStdDev(*args):
    r"""blackFormulaImpliedStdDev(Option::Type optionType, Real strike, Real forward, Real blackPrice, Real discount=1.0, Real displacement=0.0, Real guess=Null< Real >(), Real accuracy=1.0e-6, Natural maxIterations=100) -> Real"""
    return _quantlib_risks.blackFormulaImpliedStdDev(*args)

def blackFormulaImpliedStdDevLiRS(*args):
    r"""
    blackFormulaImpliedStdDevLiRS(Option::Type optionType, Real strike, Real forward, Real blackPrice, Real discount=1.0, Real displacement=0.0, Real guess=Null< Real >(), Real omega=1.0, Real accuracy=1.0e-6, Natural maxIterations=100) -> Real
    blackFormulaImpliedStdDevLiRS(ext::shared_ptr< PlainVanillaPayoff > const & payoff, Real forward, Real blackPrice, Real discount=1.0, Real displacement=0.0, Real guess=Null< Real >(), Real omega=1.0, Real accuracy=1.0e-6, Natural maxIterations=100) -> Real
    """
    return _quantlib_risks.blackFormulaImpliedStdDevLiRS(*args)

def blackFormulaCashItmProbability(*args):
    r"""
    blackFormulaCashItmProbability(Option::Type optionType, Real strike, Real forward, Real stdDev, Real displacement=0.0) -> Real
    blackFormulaCashItmProbability(ext::shared_ptr< PlainVanillaPayoff > const & payoff, Real forward, Real stdDev, Real displacement=0.0) -> Real
    """
    return _quantlib_risks.blackFormulaCashItmProbability(*args)

def blackFormulaAssetItmProbability(*args):
    r"""
    blackFormulaAssetItmProbability(Option::Type optionType, Real strike, Real forward, Real stdDev, Real displacement=0.0) -> Real
    blackFormulaAssetItmProbability(ext::shared_ptr< PlainVanillaPayoff > const & payoff, Real forward, Real stdDev, Real displacement=0.0) -> Real
    """
    return _quantlib_risks.blackFormulaAssetItmProbability(*args)

def bachelierBlackFormula(optionType, strike, forward, stdDev, discount=1.0):
    r"""bachelierBlackFormula(Option::Type optionType, Real strike, Real forward, Real stdDev, Real discount=1.0) -> Real"""
    return _quantlib_risks.bachelierBlackFormula(optionType, strike, forward, stdDev, discount)

def bachelierBlackFormulaImpliedVol(optionType, strike, forward, tte, bachelierPrice, discount=1.0):
    r"""bachelierBlackFormulaImpliedVol(Option::Type optionType, Real strike, Real forward, Real tte, Real bachelierPrice, Real discount=1.0) -> Real"""
    return _quantlib_risks.bachelierBlackFormulaImpliedVol(optionType, strike, forward, tte, bachelierPrice, discount)

def bachelierBlackFormulaAssetItmProbability(*args):
    r"""
    bachelierBlackFormulaAssetItmProbability(Option::Type optionType, Real strike, Real forward, Real stdDev) -> Real
    bachelierBlackFormulaAssetItmProbability(ext::shared_ptr< PlainVanillaPayoff > const & payoff, Real forward, Real stdDev) -> Real
    """
    return _quantlib_risks.bachelierBlackFormulaAssetItmProbability(*args)
class BlackDeltaCalculator(object):
    r"""Proxy of C++ BlackDeltaCalculator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ot, dt, spot, dDiscount, fDiscount, stDev):
        r"""__init__(BlackDeltaCalculator self, Option::Type ot, DeltaVolQuote::DeltaType dt, Real spot, DiscountFactor dDiscount, DiscountFactor fDiscount, Real stDev) -> BlackDeltaCalculator"""
        _quantlib_risks.BlackDeltaCalculator_swiginit(self, _quantlib_risks.new_BlackDeltaCalculator(ot, dt, spot, dDiscount, fDiscount, stDev))

    def deltaFromStrike(self, strike):
        r"""deltaFromStrike(BlackDeltaCalculator self, Real strike) -> Real"""
        return _quantlib_risks.BlackDeltaCalculator_deltaFromStrike(self, strike)

    def strikeFromDelta(self, delta):
        r"""strikeFromDelta(BlackDeltaCalculator self, Real delta) -> Real"""
        return _quantlib_risks.BlackDeltaCalculator_strikeFromDelta(self, delta)

    def atmStrike(self, atmT):
        r"""atmStrike(BlackDeltaCalculator self, DeltaVolQuote::AtmType atmT) -> Real"""
        return _quantlib_risks.BlackDeltaCalculator_atmStrike(self, atmT)
    __swig_destroy__ = _quantlib_risks.delete_BlackDeltaCalculator

# Register BlackDeltaCalculator in _quantlib_risks:
_quantlib_risks.BlackDeltaCalculator_swigregister(BlackDeltaCalculator)
class TimeBasket(object):
    r"""Proxy of C++ TimeBasket class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TimeBasket self) -> TimeBasket
        __init__(TimeBasket self, DateVector arg2, std::vector< Real,std::allocator< Real > > const & arg3) -> TimeBasket
        """
        _quantlib_risks.TimeBasket_swiginit(self, _quantlib_risks.new_TimeBasket(*args))

    def __len__(self):
        r"""__len__(TimeBasket self) -> Size"""
        return _quantlib_risks.TimeBasket___len__(self)

    def rebin(self, arg2):
        r"""rebin(TimeBasket self, DateVector arg2) -> TimeBasket"""
        return _quantlib_risks.TimeBasket_rebin(self, arg2)

    def __getitem__(self, d):
        r"""__getitem__(TimeBasket self, Date d) -> Real"""
        return _quantlib_risks.TimeBasket___getitem__(self, d)

    def __setitem__(self, d, value):
        r"""__setitem__(TimeBasket self, Date d, Real value)"""
        return _quantlib_risks.TimeBasket___setitem__(self, d, value)

    def items(self):
        r"""items(TimeBasket self) -> PyObject *"""
        return _quantlib_risks.TimeBasket_items(self)

    def __contains__(self, d):
        r"""__contains__(TimeBasket self, Date d) -> bool"""
        return _quantlib_risks.TimeBasket___contains__(self, d)

    def __iter__(self):
        r"""__iter__(TimeBasket self) -> PyObject *"""
        return _quantlib_risks.TimeBasket___iter__(self)
    __swig_destroy__ = _quantlib_risks.delete_TimeBasket

# Register TimeBasket in _quantlib_risks:
_quantlib_risks.TimeBasket_swigregister(TimeBasket)
class Swap(Instrument):
    r"""Proxy of C++ Swap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Receiver = _quantlib_risks.Swap_Receiver
    
    Payer = _quantlib_risks.Swap_Payer
    

    def __init__(self, *args):
        r"""
        __init__(Swap self, Leg firstLeg, Leg secondLeg) -> Swap
        __init__(Swap self, LegVector legs, BoolVector payer) -> Swap
        """
        _quantlib_risks.Swap_swiginit(self, _quantlib_risks.new_Swap(*args))

    def numberOfLegs(self):
        r"""numberOfLegs(Swap self) -> Size"""
        return _quantlib_risks.Swap_numberOfLegs(self)

    def startDate(self):
        r"""startDate(Swap self) -> Date"""
        return _quantlib_risks.Swap_startDate(self)

    def maturityDate(self):
        r"""maturityDate(Swap self) -> Date"""
        return _quantlib_risks.Swap_maturityDate(self)

    def leg(self, i):
        r"""leg(Swap self, Size i) -> Leg"""
        return _quantlib_risks.Swap_leg(self, i)

    def legNPV(self, j):
        r"""legNPV(Swap self, Size j) -> Real"""
        return _quantlib_risks.Swap_legNPV(self, j)

    def legBPS(self, k):
        r"""legBPS(Swap self, Size k) -> Real"""
        return _quantlib_risks.Swap_legBPS(self, k)

    def startDiscounts(self, j):
        r"""startDiscounts(Swap self, Size j) -> DiscountFactor"""
        return _quantlib_risks.Swap_startDiscounts(self, j)

    def endDiscounts(self, j):
        r"""endDiscounts(Swap self, Size j) -> DiscountFactor"""
        return _quantlib_risks.Swap_endDiscounts(self, j)

    def npvDateDiscount(self):
        r"""npvDateDiscount(Swap self) -> DiscountFactor"""
        return _quantlib_risks.Swap_npvDateDiscount(self)

    def payer(self, j):
        r"""payer(Swap self, Size j) -> bool"""
        return _quantlib_risks.Swap_payer(self, j)
    __swig_destroy__ = _quantlib_risks.delete_Swap

# Register Swap in _quantlib_risks:
_quantlib_risks.Swap_swigregister(Swap)
class VanillaSwap(Swap):
    r"""Proxy of C++ VanillaSwap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(VanillaSwap self, Swap::Type type, Real nominal, Schedule fixedSchedule, Rate fixedRate, DayCounter fixedDayCount, Schedule floatSchedule, ext::shared_ptr< IborIndex > const & index, Spread spread, DayCounter floatingDayCount, ext::optional< bool > withIndexedCoupons=ext::nullopt) -> VanillaSwap"""
        _quantlib_risks.VanillaSwap_swiginit(self, _quantlib_risks.new_VanillaSwap(*args))

    def type(self):
        r"""type(VanillaSwap self) -> Swap::Type"""
        return _quantlib_risks.VanillaSwap_type(self)

    def fairRate(self):
        r"""fairRate(VanillaSwap self) -> Rate"""
        return _quantlib_risks.VanillaSwap_fairRate(self)

    def fairSpread(self):
        r"""fairSpread(VanillaSwap self) -> Spread"""
        return _quantlib_risks.VanillaSwap_fairSpread(self)

    def fixedLegBPS(self):
        r"""fixedLegBPS(VanillaSwap self) -> Real"""
        return _quantlib_risks.VanillaSwap_fixedLegBPS(self)

    def floatingLegBPS(self):
        r"""floatingLegBPS(VanillaSwap self) -> Real"""
        return _quantlib_risks.VanillaSwap_floatingLegBPS(self)

    def fixedLegNPV(self):
        r"""fixedLegNPV(VanillaSwap self) -> Real"""
        return _quantlib_risks.VanillaSwap_fixedLegNPV(self)

    def floatingLegNPV(self):
        r"""floatingLegNPV(VanillaSwap self) -> Real"""
        return _quantlib_risks.VanillaSwap_floatingLegNPV(self)

    def fixedLeg(self):
        r"""fixedLeg(VanillaSwap self) -> Leg"""
        return _quantlib_risks.VanillaSwap_fixedLeg(self)

    def floatingLeg(self):
        r"""floatingLeg(VanillaSwap self) -> Leg"""
        return _quantlib_risks.VanillaSwap_floatingLeg(self)

    def nominal(self):
        r"""nominal(VanillaSwap self) -> Real"""
        return _quantlib_risks.VanillaSwap_nominal(self)

    def fixedSchedule(self):
        r"""fixedSchedule(VanillaSwap self) -> Schedule"""
        return _quantlib_risks.VanillaSwap_fixedSchedule(self)

    def floatingSchedule(self):
        r"""floatingSchedule(VanillaSwap self) -> Schedule"""
        return _quantlib_risks.VanillaSwap_floatingSchedule(self)

    def fixedRate(self):
        r"""fixedRate(VanillaSwap self) -> Rate"""
        return _quantlib_risks.VanillaSwap_fixedRate(self)

    def spread(self):
        r"""spread(VanillaSwap self) -> Spread"""
        return _quantlib_risks.VanillaSwap_spread(self)

    def floatingDayCount(self):
        r"""floatingDayCount(VanillaSwap self) -> DayCounter"""
        return _quantlib_risks.VanillaSwap_floatingDayCount(self)

    def fixedDayCount(self):
        r"""fixedDayCount(VanillaSwap self) -> DayCounter"""
        return _quantlib_risks.VanillaSwap_fixedDayCount(self)
    __swig_destroy__ = _quantlib_risks.delete_VanillaSwap

# Register VanillaSwap in _quantlib_risks:
_quantlib_risks.VanillaSwap_swigregister(VanillaSwap)
class _MakeVanillaSwap(object):
    r"""Proxy of C++ MakeVanillaSwap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def receiveFixed(self, flag=True):
        r"""receiveFixed(_MakeVanillaSwap self, bool flag=True) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_receiveFixed(self, flag)

    def withType(self, type):
        r"""withType(_MakeVanillaSwap self, Swap::Type type) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withType(self, type)

    def withNominal(self, n):
        r"""withNominal(_MakeVanillaSwap self, Real n) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withNominal(self, n)

    def withSettlementDays(self, settlementDays):
        r"""withSettlementDays(_MakeVanillaSwap self, Natural settlementDays) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withSettlementDays(self, settlementDays)

    def withEffectiveDate(self, arg2):
        r"""withEffectiveDate(_MakeVanillaSwap self, Date arg2) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withEffectiveDate(self, arg2)

    def withTerminationDate(self, arg2):
        r"""withTerminationDate(_MakeVanillaSwap self, Date arg2) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withTerminationDate(self, arg2)

    def withRule(self, r):
        r"""withRule(_MakeVanillaSwap self, DateGeneration::Rule r) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withRule(self, r)

    def withFixedLegTenor(self, t):
        r"""withFixedLegTenor(_MakeVanillaSwap self, Period t) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withFixedLegTenor(self, t)

    def withFixedLegCalendar(self, cal):
        r"""withFixedLegCalendar(_MakeVanillaSwap self, Calendar cal) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withFixedLegCalendar(self, cal)

    def withFixedLegConvention(self, bdc):
        r"""withFixedLegConvention(_MakeVanillaSwap self, BusinessDayConvention bdc) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withFixedLegConvention(self, bdc)

    def withFixedLegTerminationDateConvention(self, bdc):
        r"""withFixedLegTerminationDateConvention(_MakeVanillaSwap self, BusinessDayConvention bdc) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withFixedLegTerminationDateConvention(self, bdc)

    def withFixedLegRule(self, r):
        r"""withFixedLegRule(_MakeVanillaSwap self, DateGeneration::Rule r) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withFixedLegRule(self, r)

    def withFixedLegEndOfMonth(self, flag=True):
        r"""withFixedLegEndOfMonth(_MakeVanillaSwap self, bool flag=True) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withFixedLegEndOfMonth(self, flag)

    def withFixedLegFirstDate(self, d):
        r"""withFixedLegFirstDate(_MakeVanillaSwap self, Date d) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withFixedLegFirstDate(self, d)

    def withFixedLegNextToLastDate(self, d):
        r"""withFixedLegNextToLastDate(_MakeVanillaSwap self, Date d) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withFixedLegNextToLastDate(self, d)

    def withFixedLegDayCount(self, dc):
        r"""withFixedLegDayCount(_MakeVanillaSwap self, DayCounter dc) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withFixedLegDayCount(self, dc)

    def withFloatingLegTenor(self, t):
        r"""withFloatingLegTenor(_MakeVanillaSwap self, Period t) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withFloatingLegTenor(self, t)

    def withFloatingLegCalendar(self, cal):
        r"""withFloatingLegCalendar(_MakeVanillaSwap self, Calendar cal) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withFloatingLegCalendar(self, cal)

    def withFloatingLegConvention(self, bdc):
        r"""withFloatingLegConvention(_MakeVanillaSwap self, BusinessDayConvention bdc) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withFloatingLegConvention(self, bdc)

    def withFloatingLegTerminationDateConvention(self, bdc):
        r"""withFloatingLegTerminationDateConvention(_MakeVanillaSwap self, BusinessDayConvention bdc) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withFloatingLegTerminationDateConvention(self, bdc)

    def withFloatingLegRule(self, r):
        r"""withFloatingLegRule(_MakeVanillaSwap self, DateGeneration::Rule r) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withFloatingLegRule(self, r)

    def withFloatingLegEndOfMonth(self, flag=True):
        r"""withFloatingLegEndOfMonth(_MakeVanillaSwap self, bool flag=True) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withFloatingLegEndOfMonth(self, flag)

    def withFloatingLegFirstDate(self, d):
        r"""withFloatingLegFirstDate(_MakeVanillaSwap self, Date d) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withFloatingLegFirstDate(self, d)

    def withFloatingLegNextToLastDate(self, d):
        r"""withFloatingLegNextToLastDate(_MakeVanillaSwap self, Date d) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withFloatingLegNextToLastDate(self, d)

    def withFloatingLegDayCount(self, dc):
        r"""withFloatingLegDayCount(_MakeVanillaSwap self, DayCounter dc) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withFloatingLegDayCount(self, dc)

    def withFloatingLegSpread(self, sp):
        r"""withFloatingLegSpread(_MakeVanillaSwap self, Spread sp) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withFloatingLegSpread(self, sp)

    def withDiscountingTermStructure(self, discountCurve):
        r"""withDiscountingTermStructure(_MakeVanillaSwap self, YieldTermStructureHandle discountCurve) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withDiscountingTermStructure(self, discountCurve)

    def withPricingEngine(self, engine):
        r"""withPricingEngine(_MakeVanillaSwap self, ext::shared_ptr< PricingEngine > const & engine) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withPricingEngine(self, engine)

    def withIndexedCoupons(self, flag=True):
        r"""withIndexedCoupons(_MakeVanillaSwap self, bool flag=True) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withIndexedCoupons(self, flag)

    def withAtParCoupons(self, flag=True):
        r"""withAtParCoupons(_MakeVanillaSwap self, bool flag=True) -> _MakeVanillaSwap"""
        return _quantlib_risks._MakeVanillaSwap_withAtParCoupons(self, flag)

    def __init__(self, swapTenor, index, fixedRate, forwardStart):
        r"""__init__(_MakeVanillaSwap self, Period swapTenor, ext::shared_ptr< IborIndex > const & index, Rate fixedRate, Period forwardStart) -> _MakeVanillaSwap"""
        _quantlib_risks._MakeVanillaSwap_swiginit(self, _quantlib_risks.new__MakeVanillaSwap(swapTenor, index, fixedRate, forwardStart))

    def makeVanillaSwap(self):
        r"""makeVanillaSwap(_MakeVanillaSwap self) -> ext::shared_ptr< VanillaSwap >"""
        return _quantlib_risks._MakeVanillaSwap_makeVanillaSwap(self)
    __swig_destroy__ = _quantlib_risks.delete__MakeVanillaSwap

# Register _MakeVanillaSwap in _quantlib_risks:
_quantlib_risks._MakeVanillaSwap_swigregister(_MakeVanillaSwap)

def MakeVanillaSwap(swapTenor, iborIndex, fixedRate, forwardStart,
    receiveFixed=None, swapType=None, Nominal=None, settlementDays=None,
    effectiveDate=None, terminationDate=None, dateGenerationRule=None,
    fixedLegTenor=None, fixedLegCalendar=None, fixedLegConvention=None,
    fixedLegDayCount=None, floatingLegTenor=None, floatingLegCalendar=None,
    floatingLegConvention=None, floatingLegDayCount=None, floatingLegSpread=None,
    discountingTermStructure=None, pricingEngine=None,
    fixedLegTerminationDateConvention=None,  fixedLegDateGenRule=None,
    fixedLegEndOfMonth=None, fixedLegFirstDate=None, fixedLegNextToLastDate=None,
    floatingLegTerminationDateConvention=None, floatingLegDateGenRule=None,
    floatingLegEndOfMonth=None, floatingLegFirstDate=None, floatingLegNextToLastDate=None,
    withIndexedCoupons=None):
    mv = _MakeVanillaSwap(swapTenor, iborIndex, fixedRate, forwardStart)
    if receiveFixed is not None:
        mv.receiveFixed(receiveFixed)
    if swapType is not None:
        mv.withType(swapType)
    if Nominal is not None:
        mv.withNominal(Nominal)
    if settlementDays is not None:
        mv.withSettlementDays(settlementDays)
    if effectiveDate is not None:
        mv.withEffectiveDate(effectiveDate)
    if terminationDate is not None:
        mv.withTerminationDate(terminationDate)
    if dateGenerationRule is not None:
        mv.withRule(dateGenerationRule)
    if fixedLegTenor is not None:
        mv.withFixedLegTenor(fixedLegTenor)
    if fixedLegCalendar is not None:
        mv.withFixedLegCalendar(fixedLegCalendar)
    if fixedLegConvention is not None:
        mv.withFixedLegConvention(fixedLegConvention)
    if fixedLegDayCount is not None:
        mv.withFixedLegDayCount(fixedLegDayCount)
    if floatingLegTenor is not None:
        mv.withFloatingLegTenor(floatingLegTenor)
    if floatingLegCalendar is not None:
        mv.withFloatingLegCalendar(floatingLegCalendar)
    if floatingLegConvention is not None:
        mv.withFloatingLegConvention(floatingLegConvention)
    if floatingLegDayCount is not None:
        mv.withFloatingLegDayCount(floatingLegDayCount)
    if floatingLegSpread is not None:
        mv.withFloatingLegSpread(floatingLegSpread)
    if discountingTermStructure is not None:
        mv.withDiscountingTermStructure(discountingTermStructure)
    if pricingEngine is not None:
        mv.withPricingEngine(pricingEngine)
    if fixedLegTerminationDateConvention is not None:
        mv.withFixedLegTerminationDateConvention(fixedLegTerminationDateConvention)
    if fixedLegDateGenRule is not None:
        mv.withFixedLegRule(fixedLegDateGenRule)
    if fixedLegEndOfMonth is not None:
        mv.withFixedLegEndOfMonth(fixedLegEndOfMonth)
    if fixedLegFirstDate is not None:
        mv.withFixedLegFirstDate(fixedLegFirstDate)
    if fixedLegNextToLastDate is not None:
        mv.withFixedLegNextToLastDate(fixedLegNextToLastDate)
    if floatingLegTerminationDateConvention is not None:
        mv.withFloatingLegTerminationDateConvention(floatingLegTerminationDateConvention)
    if floatingLegDateGenRule is not None:
        mv.withFloatingLegRule(floatingLegDateGenRule)
    if floatingLegEndOfMonth is not None:
        mv.withFloatingLegEndOfMonth(floatingLegEndOfMonth)
    if floatingLegFirstDate is not None:
        mv.withFloatingLegFirstDate(floatingLegFirstDate)
    if floatingLegNextToLastDate is not None:
        mv.withFloatingLegNextToLastDate(floatingLegNextToLastDate)
    if withIndexedCoupons is not None:
        mv.withIndexedCoupons(withIndexedCoupons)
    return mv.makeVanillaSwap()

class NonstandardSwap(Swap):
    r"""Proxy of C++ NonstandardSwap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type, fixedNominal, floatingNominal, fixedSchedule, fixedRate, fixedDayCount, floatSchedule, index, gearing, spread, floatDayCount, intermediateCapitalExchange=False, finalCapitalExchange=False, paymentConvention=Following):
        r"""__init__(NonstandardSwap self, Swap::Type type, std::vector< Real,std::allocator< Real > > const & fixedNominal, std::vector< Real,std::allocator< Real > > const & floatingNominal, Schedule fixedSchedule, std::vector< Real,std::allocator< Real > > const & fixedRate, DayCounter fixedDayCount, Schedule floatSchedule, ext::shared_ptr< IborIndex > const & index, std::vector< Real,std::allocator< Real > > const & gearing, std::vector< Spread,std::allocator< Spread > > const & spread, DayCounter floatDayCount, bool const intermediateCapitalExchange=False, bool const finalCapitalExchange=False, BusinessDayConvention paymentConvention=Following) -> NonstandardSwap"""
        _quantlib_risks.NonstandardSwap_swiginit(self, _quantlib_risks.new_NonstandardSwap(type, fixedNominal, floatingNominal, fixedSchedule, fixedRate, fixedDayCount, floatSchedule, index, gearing, spread, floatDayCount, intermediateCapitalExchange, finalCapitalExchange, paymentConvention))

    def type(self):
        r"""type(NonstandardSwap self) -> Swap::Type"""
        return _quantlib_risks.NonstandardSwap_type(self)

    def fixedNominal(self):
        r"""fixedNominal(NonstandardSwap self) -> std::vector< Real,std::allocator< Real > > const &"""
        return _quantlib_risks.NonstandardSwap_fixedNominal(self)

    def floatingNominal(self):
        r"""floatingNominal(NonstandardSwap self) -> std::vector< Real,std::allocator< Real > > const &"""
        return _quantlib_risks.NonstandardSwap_floatingNominal(self)

    def fixedSchedule(self):
        r"""fixedSchedule(NonstandardSwap self) -> Schedule"""
        return _quantlib_risks.NonstandardSwap_fixedSchedule(self)

    def fixedRate(self):
        r"""fixedRate(NonstandardSwap self) -> std::vector< Real,std::allocator< Real > > const &"""
        return _quantlib_risks.NonstandardSwap_fixedRate(self)

    def fixedDayCount(self):
        r"""fixedDayCount(NonstandardSwap self) -> DayCounter"""
        return _quantlib_risks.NonstandardSwap_fixedDayCount(self)

    def floatingSchedule(self):
        r"""floatingSchedule(NonstandardSwap self) -> Schedule"""
        return _quantlib_risks.NonstandardSwap_floatingSchedule(self)

    def iborIndex(self):
        r"""iborIndex(NonstandardSwap self) -> ext::shared_ptr< IborIndex > const &"""
        return _quantlib_risks.NonstandardSwap_iborIndex(self)

    def spread(self):
        r"""spread(NonstandardSwap self) -> Spread"""
        return _quantlib_risks.NonstandardSwap_spread(self)

    def gearing(self):
        r"""gearing(NonstandardSwap self) -> Real"""
        return _quantlib_risks.NonstandardSwap_gearing(self)

    def spreads(self):
        r"""spreads(NonstandardSwap self) -> std::vector< Spread,std::allocator< Spread > > const &"""
        return _quantlib_risks.NonstandardSwap_spreads(self)

    def gearings(self):
        r"""gearings(NonstandardSwap self) -> std::vector< Real,std::allocator< Real > > const &"""
        return _quantlib_risks.NonstandardSwap_gearings(self)

    def floatingDayCount(self):
        r"""floatingDayCount(NonstandardSwap self) -> DayCounter"""
        return _quantlib_risks.NonstandardSwap_floatingDayCount(self)

    def paymentConvention(self):
        r"""paymentConvention(NonstandardSwap self) -> BusinessDayConvention"""
        return _quantlib_risks.NonstandardSwap_paymentConvention(self)

    def fixedLeg(self):
        r"""fixedLeg(NonstandardSwap self) -> Leg"""
        return _quantlib_risks.NonstandardSwap_fixedLeg(self)

    def floatingLeg(self):
        r"""floatingLeg(NonstandardSwap self) -> Leg"""
        return _quantlib_risks.NonstandardSwap_floatingLeg(self)
    __swig_destroy__ = _quantlib_risks.delete_NonstandardSwap

# Register NonstandardSwap in _quantlib_risks:
_quantlib_risks.NonstandardSwap_swigregister(NonstandardSwap)
class DiscountingSwapEngine(PricingEngine):
    r"""Proxy of C++ DiscountingSwapEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DiscountingSwapEngine self, YieldTermStructureHandle discountCurve, bool includeSettlementDateFlows, Date settlementDate=Date(), Date npvDate=Date()) -> DiscountingSwapEngine
        __init__(DiscountingSwapEngine self, YieldTermStructureHandle discountCurve, Date settlementDate=Date(), Date npvDate=Date()) -> DiscountingSwapEngine
        """
        _quantlib_risks.DiscountingSwapEngine_swiginit(self, _quantlib_risks.new_DiscountingSwapEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_DiscountingSwapEngine

# Register DiscountingSwapEngine in _quantlib_risks:
_quantlib_risks.DiscountingSwapEngine_swigregister(DiscountingSwapEngine)
class AssetSwap(Swap):
    r"""Proxy of C++ AssetSwap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(AssetSwap self, bool payFixedRate, ext::shared_ptr< Bond > const & bond, Real bondCleanPrice, ext::shared_ptr< IborIndex > const & index, Spread spread, Schedule floatSchedule=Schedule(), DayCounter floatingDayCount=DayCounter(), bool parAssetSwap=True) -> AssetSwap"""
        _quantlib_risks.AssetSwap_swiginit(self, _quantlib_risks.new_AssetSwap(*args, **kwargs))

    def fairCleanPrice(self):
        r"""fairCleanPrice(AssetSwap self) -> Real"""
        return _quantlib_risks.AssetSwap_fairCleanPrice(self)

    def fairSpread(self):
        r"""fairSpread(AssetSwap self) -> Spread"""
        return _quantlib_risks.AssetSwap_fairSpread(self)
    __swig_destroy__ = _quantlib_risks.delete_AssetSwap

# Register AssetSwap in _quantlib_risks:
_quantlib_risks.AssetSwap_swigregister(AssetSwap)
class FloatFloatSwap(Swap):
    r"""Proxy of C++ FloatFloatSwap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(FloatFloatSwap self, Swap::Type type, std::vector< Real,std::allocator< Real > > const & nominal1, std::vector< Real,std::allocator< Real > > const & nominal2, Schedule schedule1, ext::shared_ptr< InterestRateIndex > const & index1, DayCounter dayCount1, Schedule schedule2, ext::shared_ptr< InterestRateIndex > const & index2, DayCounter dayCount2, bool const intermediateCapitalExchange=False, bool const finalCapitalExchange=False, std::vector< Real,std::allocator< Real > > const & gearing1=std::vector< Real >(), std::vector< Real,std::allocator< Real > > const & spread1=std::vector< Real >(), std::vector< Real,std::allocator< Real > > const & cappedRate1=std::vector< Real >(), std::vector< Real,std::allocator< Real > > const & flooredRate1=std::vector< Real >(), std::vector< Real,std::allocator< Real > > const & gearing2=std::vector< Real >(), std::vector< Real,std::allocator< Real > > const & spread2=std::vector< Real >(), std::vector< Real,std::allocator< Real > > const & cappedRate2=std::vector< Real >(), std::vector< Real,std::allocator< Real > > const & flooredRate2=std::vector< Real >(), BusinessDayConvention paymentConvention1=Following, BusinessDayConvention paymentConvention2=Following) -> FloatFloatSwap"""
        _quantlib_risks.FloatFloatSwap_swiginit(self, _quantlib_risks.new_FloatFloatSwap(*args))
    __swig_destroy__ = _quantlib_risks.delete_FloatFloatSwap

# Register FloatFloatSwap in _quantlib_risks:
_quantlib_risks.FloatFloatSwap_swigregister(FloatFloatSwap)
class OvernightIndexedSwap(Swap):
    r"""Proxy of C++ OvernightIndexedSwap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OvernightIndexedSwap self, Swap::Type type, Real nominal, Schedule schedule, Rate fixedRate, DayCounter fixedDC, ext::shared_ptr< OvernightIndex > const & index, Spread spread=0.0, Integer paymentLag=0, BusinessDayConvention paymentAdjustment=Following, Calendar paymentCalendar=Calendar(), bool telescopicValueDates=False, RateAveraging::Type averagingMethod=Compound) -> OvernightIndexedSwap
        __init__(OvernightIndexedSwap self, Swap::Type type, std::vector< Real,std::allocator< Real > > nominals, Schedule schedule, Rate fixedRate, DayCounter fixedDC, ext::shared_ptr< OvernightIndex > const & index, Spread spread=0.0, Integer paymentLag=0, BusinessDayConvention paymentAdjustment=Following, Calendar paymentCalendar=Calendar(), bool telescopicValueDates=False, RateAveraging::Type averagingMethod=Compound) -> OvernightIndexedSwap
        __init__(OvernightIndexedSwap self, Swap::Type type, std::vector< Real,std::allocator< Real > > const & fixedNominals, Schedule fixedSchedule, Rate fixedRate, DayCounter fixedDC, std::vector< Real,std::allocator< Real > > const & overnightNominals, Schedule overnightSchedule, ext::shared_ptr< OvernightIndex > const & overnightIndex, Spread spread=0.0, Integer paymentLag=0, BusinessDayConvention paymentAdjustment=Following, Calendar paymentCalendar=Calendar(), bool telescopicValueDates=False, RateAveraging::Type averagingMethod=Compound) -> OvernightIndexedSwap
        """
        _quantlib_risks.OvernightIndexedSwap_swiginit(self, _quantlib_risks.new_OvernightIndexedSwap(*args))

    def fixedLegBPS(self):
        r"""fixedLegBPS(OvernightIndexedSwap self) -> Rate"""
        return _quantlib_risks.OvernightIndexedSwap_fixedLegBPS(self)

    def fixedLegNPV(self):
        r"""fixedLegNPV(OvernightIndexedSwap self) -> Real"""
        return _quantlib_risks.OvernightIndexedSwap_fixedLegNPV(self)

    def fairRate(self):
        r"""fairRate(OvernightIndexedSwap self) -> Real"""
        return _quantlib_risks.OvernightIndexedSwap_fairRate(self)

    def overnightLegBPS(self):
        r"""overnightLegBPS(OvernightIndexedSwap self) -> Real"""
        return _quantlib_risks.OvernightIndexedSwap_overnightLegBPS(self)

    def overnightLegNPV(self):
        r"""overnightLegNPV(OvernightIndexedSwap self) -> Real"""
        return _quantlib_risks.OvernightIndexedSwap_overnightLegNPV(self)

    def fairSpread(self):
        r"""fairSpread(OvernightIndexedSwap self) -> Spread"""
        return _quantlib_risks.OvernightIndexedSwap_fairSpread(self)

    def type(self):
        r"""type(OvernightIndexedSwap self) -> Swap::Type"""
        return _quantlib_risks.OvernightIndexedSwap_type(self)

    def nominal(self):
        r"""nominal(OvernightIndexedSwap self) -> Real"""
        return _quantlib_risks.OvernightIndexedSwap_nominal(self)

    def nominals(self):
        r"""nominals(OvernightIndexedSwap self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.OvernightIndexedSwap_nominals(self)

    def paymentFrequency(self):
        r"""paymentFrequency(OvernightIndexedSwap self) -> Frequency"""
        return _quantlib_risks.OvernightIndexedSwap_paymentFrequency(self)

    def fixedRate(self):
        r"""fixedRate(OvernightIndexedSwap self) -> Rate"""
        return _quantlib_risks.OvernightIndexedSwap_fixedRate(self)

    def fixedDayCount(self):
        r"""fixedDayCount(OvernightIndexedSwap self) -> DayCounter"""
        return _quantlib_risks.OvernightIndexedSwap_fixedDayCount(self)

    def overnightIndex(self):
        r"""overnightIndex(OvernightIndexedSwap self) -> ext::shared_ptr< OvernightIndex >"""
        return _quantlib_risks.OvernightIndexedSwap_overnightIndex(self)

    def spread(self):
        r"""spread(OvernightIndexedSwap self) -> Spread"""
        return _quantlib_risks.OvernightIndexedSwap_spread(self)

    def fixedLeg(self):
        r"""fixedLeg(OvernightIndexedSwap self) -> Leg"""
        return _quantlib_risks.OvernightIndexedSwap_fixedLeg(self)

    def overnightLeg(self):
        r"""overnightLeg(OvernightIndexedSwap self) -> Leg"""
        return _quantlib_risks.OvernightIndexedSwap_overnightLeg(self)

    def averagingMethod(self):
        r"""averagingMethod(OvernightIndexedSwap self) -> RateAveraging::Type"""
        return _quantlib_risks.OvernightIndexedSwap_averagingMethod(self)
    __swig_destroy__ = _quantlib_risks.delete_OvernightIndexedSwap

# Register OvernightIndexedSwap in _quantlib_risks:
_quantlib_risks.OvernightIndexedSwap_swigregister(OvernightIndexedSwap)
class _MakeOIS(object):
    r"""Proxy of C++ MakeOIS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(_MakeOIS self, Period swapTenor, ext::shared_ptr< OvernightIndex > const & overnightIndex, Rate fixedRate=Null< Rate >(), Period fwdStart=0*Days) -> _MakeOIS"""
        _quantlib_risks._MakeOIS_swiginit(self, _quantlib_risks.new__MakeOIS(*args))

    def makeOIS(self):
        r"""makeOIS(_MakeOIS self) -> ext::shared_ptr< OvernightIndexedSwap >"""
        return _quantlib_risks._MakeOIS_makeOIS(self)

    def receiveFixed(self, flag=True):
        r"""receiveFixed(_MakeOIS self, bool flag=True) -> _MakeOIS"""
        return _quantlib_risks._MakeOIS_receiveFixed(self, flag)

    def withType(self, type):
        r"""withType(_MakeOIS self, Swap::Type type) -> _MakeOIS"""
        return _quantlib_risks._MakeOIS_withType(self, type)

    def withNominal(self, n):
        r"""withNominal(_MakeOIS self, Real n) -> _MakeOIS"""
        return _quantlib_risks._MakeOIS_withNominal(self, n)

    def withSettlementDays(self, settlementDays):
        r"""withSettlementDays(_MakeOIS self, Natural settlementDays) -> _MakeOIS"""
        return _quantlib_risks._MakeOIS_withSettlementDays(self, settlementDays)

    def withEffectiveDate(self, arg2):
        r"""withEffectiveDate(_MakeOIS self, Date arg2) -> _MakeOIS"""
        return _quantlib_risks._MakeOIS_withEffectiveDate(self, arg2)

    def withTerminationDate(self, arg2):
        r"""withTerminationDate(_MakeOIS self, Date arg2) -> _MakeOIS"""
        return _quantlib_risks._MakeOIS_withTerminationDate(self, arg2)

    def withRule(self, r):
        r"""withRule(_MakeOIS self, DateGeneration::Rule r) -> _MakeOIS"""
        return _quantlib_risks._MakeOIS_withRule(self, r)

    def withPaymentFrequency(self, f):
        r"""withPaymentFrequency(_MakeOIS self, Frequency f) -> _MakeOIS"""
        return _quantlib_risks._MakeOIS_withPaymentFrequency(self, f)

    def withPaymentAdjustment(self, convention):
        r"""withPaymentAdjustment(_MakeOIS self, BusinessDayConvention convention) -> _MakeOIS"""
        return _quantlib_risks._MakeOIS_withPaymentAdjustment(self, convention)

    def withPaymentLag(self, lag):
        r"""withPaymentLag(_MakeOIS self, Integer lag) -> _MakeOIS"""
        return _quantlib_risks._MakeOIS_withPaymentLag(self, lag)

    def withPaymentCalendar(self, cal):
        r"""withPaymentCalendar(_MakeOIS self, Calendar cal) -> _MakeOIS"""
        return _quantlib_risks._MakeOIS_withPaymentCalendar(self, cal)

    def withEndOfMonth(self, flag=True):
        r"""withEndOfMonth(_MakeOIS self, bool flag=True) -> _MakeOIS"""
        return _quantlib_risks._MakeOIS_withEndOfMonth(self, flag)

    def withFixedLegDayCount(self, dc):
        r"""withFixedLegDayCount(_MakeOIS self, DayCounter dc) -> _MakeOIS"""
        return _quantlib_risks._MakeOIS_withFixedLegDayCount(self, dc)

    def withOvernightLegSpread(self, sp):
        r"""withOvernightLegSpread(_MakeOIS self, Spread sp) -> _MakeOIS"""
        return _quantlib_risks._MakeOIS_withOvernightLegSpread(self, sp)

    def withDiscountingTermStructure(self, discountingTermStructure):
        r"""withDiscountingTermStructure(_MakeOIS self, YieldTermStructureHandle discountingTermStructure) -> _MakeOIS"""
        return _quantlib_risks._MakeOIS_withDiscountingTermStructure(self, discountingTermStructure)

    def withTelescopicValueDates(self, telescopicValueDates):
        r"""withTelescopicValueDates(_MakeOIS self, bool telescopicValueDates) -> _MakeOIS"""
        return _quantlib_risks._MakeOIS_withTelescopicValueDates(self, telescopicValueDates)

    def withAveragingMethod(self, averagingMethod):
        r"""withAveragingMethod(_MakeOIS self, RateAveraging::Type averagingMethod) -> _MakeOIS"""
        return _quantlib_risks._MakeOIS_withAveragingMethod(self, averagingMethod)

    def withPricingEngine(self, engine):
        r"""withPricingEngine(_MakeOIS self, ext::shared_ptr< PricingEngine > const & engine) -> _MakeOIS"""
        return _quantlib_risks._MakeOIS_withPricingEngine(self, engine)
    __swig_destroy__ = _quantlib_risks.delete__MakeOIS

# Register _MakeOIS in _quantlib_risks:
_quantlib_risks._MakeOIS_swigregister(_MakeOIS)

def MakeOIS(swapTenor, overnightIndex, fixedRate, fwdStart=Period(0, Days),
            receiveFixed=True,
            swapType=Swap.Payer,
            nominal=1.0,
            settlementDays=2,
            effectiveDate=None,
            terminationDate=None,
            dateGenerationRule=DateGeneration.Backward,
            paymentFrequency=Annual,
            paymentAdjustmentConvention=Following,
            paymentLag=0,
            paymentCalendar=None,
            endOfMonth=True,    
            fixedLegDayCount=None,
            overnightLegSpread=0.0,
            discountingTermStructure=None,
            telescopicValueDates=False,
            pricingEngine=None,
            averagingMethod=None):

    mv = _MakeOIS(swapTenor, overnightIndex, fixedRate, fwdStart)

    if not receiveFixed:
        mv.receiveFixed(receiveFixed)
    if swapType != Swap.Payer:
        mv.withType(swapType)
    if nominal != 1.0:
        mv.withNominal(nominal)
    if settlementDays != 2:
        mv.withSettlementDays(settlementDays)
    if effectiveDate is not None:
        mv.withEffectiveDate(effectiveDate)
    if terminationDate is not None:
        mv.withTerminationDate(terminationDate)
    if dateGenerationRule != DateGeneration.Backward:
        mv.withRule(dateGenerationRule)  
    if paymentFrequency != Annual:
        mv.withPaymentFrequency(paymentFrequency)
    if paymentAdjustmentConvention != Following:
        mv.withPaymentAdjustment(paymentAdjustmentConvention)
    if paymentLag != 0:
        mv.withPaymentLag(paymentLag)
    if paymentCalendar is not None:
        mv.withPaymentCalendar(paymentCalendar)
    if not endOfMonth:
        mv.withEndOfMonth(endOfMonth)
    if fixedLegDayCount is not None:
        mv.withFixedLegDayCount(fixedLegDayCount)
    else:
        mv.withFixedLegDayCount(overnightIndex.dayCounter())
    if overnightLegSpread != 0.0:
        mv.withOvernightLegSpread(overnightLegSpread)
    if discountingTermStructure is not None:
        mv.withDiscountingTermStructure(discountingTermStructure)        
    if telescopicValueDates:
        mv.withTelescopicValueDates(telescopicValueDates)
    if averagingMethod is not None:
        mv.withAveragingMethod(averagingMethod)
    if pricingEngine is not None:
        mv.withPricingEngine(pricingEngine)

    return mv.makeOIS()

class OvernightIndexedSwapIndex(SwapIndex):
    r"""Proxy of C++ OvernightIndexedSwapIndex class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(OvernightIndexedSwapIndex self, std::string const & familyName, Period tenor, Natural settlementDays, Currency currency, ext::shared_ptr< OvernightIndex > const & overnightIndex, bool telescopicValueDates=False, RateAveraging::Type averagingMethod=Compound) -> OvernightIndexedSwapIndex"""
        _quantlib_risks.OvernightIndexedSwapIndex_swiginit(self, _quantlib_risks.new_OvernightIndexedSwapIndex(*args))

    def overnightIndex(self):
        r"""overnightIndex(OvernightIndexedSwapIndex self) -> ext::shared_ptr< OvernightIndex >"""
        return _quantlib_risks.OvernightIndexedSwapIndex_overnightIndex(self)

    def underlyingSwap(self, fixingDate):
        r"""underlyingSwap(OvernightIndexedSwapIndex self, Date fixingDate) -> ext::shared_ptr< OvernightIndexedSwap >"""
        return _quantlib_risks.OvernightIndexedSwapIndex_underlyingSwap(self, fixingDate)
    __swig_destroy__ = _quantlib_risks.delete_OvernightIndexedSwapIndex

# Register OvernightIndexedSwapIndex in _quantlib_risks:
_quantlib_risks.OvernightIndexedSwapIndex_swigregister(OvernightIndexedSwapIndex)

def as_overnight_swap_index(index):
    r"""as_overnight_swap_index(ext::shared_ptr< InterestRateIndex > const & index) -> ext::shared_ptr< OvernightIndexedSwap >"""
    return _quantlib_risks.as_overnight_swap_index(index)
class ZeroCouponSwap(Swap):
    r"""Proxy of C++ ZeroCouponSwap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ZeroCouponSwap self, Swap::Type type, Real baseNominal, Date startDate, Date maturityDate, Real fixedPayment, ext::shared_ptr< IborIndex > iborIndex, Calendar paymentCalendar, BusinessDayConvention paymentConvention=Following, Natural paymentDelay=0) -> ZeroCouponSwap
        __init__(ZeroCouponSwap self, Swap::Type type, Real baseNominal, Date startDate, Date maturityDate, Rate fixedRate, DayCounter fixedDayCounter, ext::shared_ptr< IborIndex > iborIndex, Calendar paymentCalendar, BusinessDayConvention paymentConvention=Following, Natural paymentDelay=0) -> ZeroCouponSwap
        """
        _quantlib_risks.ZeroCouponSwap_swiginit(self, _quantlib_risks.new_ZeroCouponSwap(*args))

    def type(self):
        r"""type(ZeroCouponSwap self) -> Swap::Type"""
        return _quantlib_risks.ZeroCouponSwap_type(self)

    def baseNominal(self):
        r"""baseNominal(ZeroCouponSwap self) -> Real"""
        return _quantlib_risks.ZeroCouponSwap_baseNominal(self)

    def iborIndex(self):
        r"""iborIndex(ZeroCouponSwap self) -> ext::shared_ptr< IborIndex > const &"""
        return _quantlib_risks.ZeroCouponSwap_iborIndex(self)

    def fixedLeg(self):
        r"""fixedLeg(ZeroCouponSwap self) -> Leg"""
        return _quantlib_risks.ZeroCouponSwap_fixedLeg(self)

    def floatingLeg(self):
        r"""floatingLeg(ZeroCouponSwap self) -> Leg"""
        return _quantlib_risks.ZeroCouponSwap_floatingLeg(self)

    def fixedPayment(self):
        r"""fixedPayment(ZeroCouponSwap self) -> Real"""
        return _quantlib_risks.ZeroCouponSwap_fixedPayment(self)

    def fixedLegNPV(self):
        r"""fixedLegNPV(ZeroCouponSwap self) -> Real"""
        return _quantlib_risks.ZeroCouponSwap_fixedLegNPV(self)

    def floatingLegNPV(self):
        r"""floatingLegNPV(ZeroCouponSwap self) -> Real"""
        return _quantlib_risks.ZeroCouponSwap_floatingLegNPV(self)

    def fairFixedPayment(self):
        r"""fairFixedPayment(ZeroCouponSwap self) -> Real"""
        return _quantlib_risks.ZeroCouponSwap_fairFixedPayment(self)

    def fairFixedRate(self, dayCounter):
        r"""fairFixedRate(ZeroCouponSwap self, DayCounter dayCounter) -> Rate"""
        return _quantlib_risks.ZeroCouponSwap_fairFixedRate(self, dayCounter)
    __swig_destroy__ = _quantlib_risks.delete_ZeroCouponSwap

# Register ZeroCouponSwap in _quantlib_risks:
_quantlib_risks.ZeroCouponSwap_swigregister(ZeroCouponSwap)
class EquityTotalReturnSwap(Swap):
    r"""Proxy of C++ EquityTotalReturnSwap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(EquityTotalReturnSwap self, Swap::Type type, Real nominal, Schedule schedule, ext::shared_ptr< EquityIndex > equityIndex, ext::shared_ptr< IborIndex > const & interestRateIndex, DayCounter dayCounter, Rate margin, Real gearing=1.0, Calendar paymentCalendar=Calendar(), BusinessDayConvention paymentConvention=Unadjusted, Natural paymentDelay=0) -> EquityTotalReturnSwap
        __init__(EquityTotalReturnSwap self, Swap::Type type, Real nominal, Schedule schedule, ext::shared_ptr< EquityIndex > equityIndex, ext::shared_ptr< OvernightIndex > const & interestRateIndex, DayCounter dayCounter, Rate margin, Real gearing=1.0, Calendar paymentCalendar=Calendar(), BusinessDayConvention paymentConvention=Unadjusted, Natural paymentDelay=0) -> EquityTotalReturnSwap
        """
        _quantlib_risks.EquityTotalReturnSwap_swiginit(self, _quantlib_risks.new_EquityTotalReturnSwap(*args))

    def type(self):
        r"""type(EquityTotalReturnSwap self) -> Swap::Type"""
        return _quantlib_risks.EquityTotalReturnSwap_type(self)

    def nominal(self):
        r"""nominal(EquityTotalReturnSwap self) -> Real"""
        return _quantlib_risks.EquityTotalReturnSwap_nominal(self)

    def equityIndex(self):
        r"""equityIndex(EquityTotalReturnSwap self) -> ext::shared_ptr< EquityIndex > const &"""
        return _quantlib_risks.EquityTotalReturnSwap_equityIndex(self)

    def interestRateIndex(self):
        r"""interestRateIndex(EquityTotalReturnSwap self) -> ext::shared_ptr< InterestRateIndex > const &"""
        return _quantlib_risks.EquityTotalReturnSwap_interestRateIndex(self)

    def schedule(self):
        r"""schedule(EquityTotalReturnSwap self) -> Schedule"""
        return _quantlib_risks.EquityTotalReturnSwap_schedule(self)

    def dayCounter(self):
        r"""dayCounter(EquityTotalReturnSwap self) -> DayCounter"""
        return _quantlib_risks.EquityTotalReturnSwap_dayCounter(self)

    def margin(self):
        r"""margin(EquityTotalReturnSwap self) -> Rate"""
        return _quantlib_risks.EquityTotalReturnSwap_margin(self)

    def gearing(self):
        r"""gearing(EquityTotalReturnSwap self) -> Real"""
        return _quantlib_risks.EquityTotalReturnSwap_gearing(self)

    def paymentCalendar(self):
        r"""paymentCalendar(EquityTotalReturnSwap self) -> Calendar"""
        return _quantlib_risks.EquityTotalReturnSwap_paymentCalendar(self)

    def paymentConvention(self):
        r"""paymentConvention(EquityTotalReturnSwap self) -> BusinessDayConvention"""
        return _quantlib_risks.EquityTotalReturnSwap_paymentConvention(self)

    def paymentDelay(self):
        r"""paymentDelay(EquityTotalReturnSwap self) -> Natural"""
        return _quantlib_risks.EquityTotalReturnSwap_paymentDelay(self)

    def equityLeg(self):
        r"""equityLeg(EquityTotalReturnSwap self) -> Leg"""
        return _quantlib_risks.EquityTotalReturnSwap_equityLeg(self)

    def interestRateLeg(self):
        r"""interestRateLeg(EquityTotalReturnSwap self) -> Leg"""
        return _quantlib_risks.EquityTotalReturnSwap_interestRateLeg(self)

    def equityLegNPV(self):
        r"""equityLegNPV(EquityTotalReturnSwap self) -> Real"""
        return _quantlib_risks.EquityTotalReturnSwap_equityLegNPV(self)

    def interestRateLegNPV(self):
        r"""interestRateLegNPV(EquityTotalReturnSwap self) -> Real"""
        return _quantlib_risks.EquityTotalReturnSwap_interestRateLegNPV(self)

    def fairMargin(self):
        r"""fairMargin(EquityTotalReturnSwap self) -> Real"""
        return _quantlib_risks.EquityTotalReturnSwap_fairMargin(self)
    __swig_destroy__ = _quantlib_risks.delete_EquityTotalReturnSwap

# Register EquityTotalReturnSwap in _quantlib_risks:
_quantlib_risks.EquityTotalReturnSwap_swigregister(EquityTotalReturnSwap)
class ArithmeticAverageOIS(Swap):
    r"""Proxy of C++ ArithmeticAverageOIS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ArithmeticAverageOIS self, Swap::Type type, Real nominal, Schedule fixedLegSchedule, Rate fixedRate, DayCounter fixedDC, ext::shared_ptr< OvernightIndex > overnightIndex, Schedule overnightLegSchedule, Spread spread=0.0, Real meanReversionSpeed=0.03, Real volatility=0.00, bool byApprox=False) -> ArithmeticAverageOIS
        __init__(ArithmeticAverageOIS self, Swap::Type type, std::vector< Real,std::allocator< Real > > nominals, Schedule fixedLegSchedule, Rate fixedRate, DayCounter fixedDC, ext::shared_ptr< OvernightIndex > overnightIndex, Schedule overnightLegSchedule, Spread spread=0.0, Real meanReversionSpeed=0.03, Real volatility=0.00, bool byApprox=False) -> ArithmeticAverageOIS
        """
        _quantlib_risks.ArithmeticAverageOIS_swiginit(self, _quantlib_risks.new_ArithmeticAverageOIS(*args))

    def type(self):
        r"""type(ArithmeticAverageOIS self) -> Swap::Type"""
        return _quantlib_risks.ArithmeticAverageOIS_type(self)

    def nominal(self):
        r"""nominal(ArithmeticAverageOIS self) -> Real"""
        return _quantlib_risks.ArithmeticAverageOIS_nominal(self)

    def nominals(self):
        r"""nominals(ArithmeticAverageOIS self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.ArithmeticAverageOIS_nominals(self)

    def fixedLegPaymentFrequency(self):
        r"""fixedLegPaymentFrequency(ArithmeticAverageOIS self) -> Frequency"""
        return _quantlib_risks.ArithmeticAverageOIS_fixedLegPaymentFrequency(self)

    def overnightLegPaymentFrequency(self):
        r"""overnightLegPaymentFrequency(ArithmeticAverageOIS self) -> Frequency"""
        return _quantlib_risks.ArithmeticAverageOIS_overnightLegPaymentFrequency(self)

    def fixedRate(self):
        r"""fixedRate(ArithmeticAverageOIS self) -> Rate"""
        return _quantlib_risks.ArithmeticAverageOIS_fixedRate(self)

    def fixedDayCount(self):
        r"""fixedDayCount(ArithmeticAverageOIS self) -> DayCounter"""
        return _quantlib_risks.ArithmeticAverageOIS_fixedDayCount(self)

    def overnightIndex(self):
        r"""overnightIndex(ArithmeticAverageOIS self) -> ext::shared_ptr< OvernightIndex >"""
        return _quantlib_risks.ArithmeticAverageOIS_overnightIndex(self)

    def spread(self):
        r"""spread(ArithmeticAverageOIS self) -> Spread"""
        return _quantlib_risks.ArithmeticAverageOIS_spread(self)

    def fixedLeg(self):
        r"""fixedLeg(ArithmeticAverageOIS self) -> Leg"""
        return _quantlib_risks.ArithmeticAverageOIS_fixedLeg(self)

    def overnightLeg(self):
        r"""overnightLeg(ArithmeticAverageOIS self) -> Leg"""
        return _quantlib_risks.ArithmeticAverageOIS_overnightLeg(self)

    def fixedLegBPS(self):
        r"""fixedLegBPS(ArithmeticAverageOIS self) -> Real"""
        return _quantlib_risks.ArithmeticAverageOIS_fixedLegBPS(self)

    def fixedLegNPV(self):
        r"""fixedLegNPV(ArithmeticAverageOIS self) -> Real"""
        return _quantlib_risks.ArithmeticAverageOIS_fixedLegNPV(self)

    def fairRate(self):
        r"""fairRate(ArithmeticAverageOIS self) -> Real"""
        return _quantlib_risks.ArithmeticAverageOIS_fairRate(self)

    def overnightLegBPS(self):
        r"""overnightLegBPS(ArithmeticAverageOIS self) -> Real"""
        return _quantlib_risks.ArithmeticAverageOIS_overnightLegBPS(self)

    def overnightLegNPV(self):
        r"""overnightLegNPV(ArithmeticAverageOIS self) -> Real"""
        return _quantlib_risks.ArithmeticAverageOIS_overnightLegNPV(self)

    def fairSpread(self):
        r"""fairSpread(ArithmeticAverageOIS self) -> Spread"""
        return _quantlib_risks.ArithmeticAverageOIS_fairSpread(self)
    __swig_destroy__ = _quantlib_risks.delete_ArithmeticAverageOIS

# Register ArithmeticAverageOIS in _quantlib_risks:
_quantlib_risks.ArithmeticAverageOIS_swigregister(ArithmeticAverageOIS)
class Seasonality(object):
    r"""Proxy of C++ Seasonality class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def correctZeroRate(self, d, r, iTS):
        r"""correctZeroRate(Seasonality self, Date d, Rate const r, InflationTermStructure iTS) -> Rate"""
        return _quantlib_risks.Seasonality_correctZeroRate(self, d, r, iTS)

    def correctYoYRate(self, d, r, iTS):
        r"""correctYoYRate(Seasonality self, Date d, Rate const r, InflationTermStructure iTS) -> Rate"""
        return _quantlib_risks.Seasonality_correctYoYRate(self, d, r, iTS)

    def isConsistent(self, iTS):
        r"""isConsistent(Seasonality self, InflationTermStructure iTS) -> bool"""
        return _quantlib_risks.Seasonality_isConsistent(self, iTS)
    __swig_destroy__ = _quantlib_risks.delete_Seasonality

# Register Seasonality in _quantlib_risks:
_quantlib_risks.Seasonality_swigregister(Seasonality)
class MultiplicativePriceSeasonality(Seasonality):
    r"""Proxy of C++ MultiplicativePriceSeasonality class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seasonalityBaseDate, frequency, seasonalityFactors):
        r"""__init__(MultiplicativePriceSeasonality self, Date seasonalityBaseDate, Frequency frequency, std::vector< Rate,std::allocator< Rate > > const & seasonalityFactors) -> MultiplicativePriceSeasonality"""
        _quantlib_risks.MultiplicativePriceSeasonality_swiginit(self, _quantlib_risks.new_MultiplicativePriceSeasonality(seasonalityBaseDate, frequency, seasonalityFactors))
    __swig_destroy__ = _quantlib_risks.delete_MultiplicativePriceSeasonality

# Register MultiplicativePriceSeasonality in _quantlib_risks:
_quantlib_risks.MultiplicativePriceSeasonality_swigregister(MultiplicativePriceSeasonality)
class KerkhofSeasonality(Seasonality):
    r"""Proxy of C++ KerkhofSeasonality class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seasonalityBaseDate, seasonalityFactors):
        r"""__init__(KerkhofSeasonality self, Date seasonalityBaseDate, std::vector< Rate,std::allocator< Rate > > const & seasonalityFactors) -> KerkhofSeasonality"""
        _quantlib_risks.KerkhofSeasonality_swiginit(self, _quantlib_risks.new_KerkhofSeasonality(seasonalityBaseDate, seasonalityFactors))
    __swig_destroy__ = _quantlib_risks.delete_KerkhofSeasonality

# Register KerkhofSeasonality in _quantlib_risks:
_quantlib_risks.KerkhofSeasonality_swigregister(KerkhofSeasonality)
class InflationTermStructure(TermStructure):
    r"""Proxy of C++ InflationTermStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def observationLag(self):
        r"""observationLag(InflationTermStructure self) -> Period"""
        return _quantlib_risks.InflationTermStructure_observationLag(self)

    def frequency(self):
        r"""frequency(InflationTermStructure self) -> Frequency"""
        return _quantlib_risks.InflationTermStructure_frequency(self)

    def baseRate(self):
        r"""baseRate(InflationTermStructure self) -> Rate"""
        return _quantlib_risks.InflationTermStructure_baseRate(self)

    def baseDate(self):
        r"""baseDate(InflationTermStructure self) -> Date"""
        return _quantlib_risks.InflationTermStructure_baseDate(self)

    def setSeasonality(self, *args):
        r"""setSeasonality(InflationTermStructure self, ext::shared_ptr< Seasonality > const & seasonality=ext::shared_ptr< Seasonality >())"""
        return _quantlib_risks.InflationTermStructure_setSeasonality(self, *args)

    def seasonality(self):
        r"""seasonality(InflationTermStructure self) -> ext::shared_ptr< Seasonality >"""
        return _quantlib_risks.InflationTermStructure_seasonality(self)

    def hasSeasonality(self):
        r"""hasSeasonality(InflationTermStructure self) -> bool"""
        return _quantlib_risks.InflationTermStructure_hasSeasonality(self)
    __swig_destroy__ = _quantlib_risks.delete_InflationTermStructure

# Register InflationTermStructure in _quantlib_risks:
_quantlib_risks.InflationTermStructure_swigregister(InflationTermStructure)
class YoYInflationTermStructure(InflationTermStructure):
    r"""Proxy of C++ YoYInflationTermStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def yoyRate(self, *args):
        r"""
        yoyRate(YoYInflationTermStructure self, Date d, Period instObsLag=Period(-1,Days), bool forceLinearInterpolation=False, bool extrapolate=False) -> Rate
        yoyRate(YoYInflationTermStructure self, Time t, bool extrapolate=False) -> Rate
        """
        return _quantlib_risks.YoYInflationTermStructure_yoyRate(self, *args)

    def indexIsInterpolated(self):
        r"""indexIsInterpolated(YoYInflationTermStructure self) -> bool"""
        return _quantlib_risks.YoYInflationTermStructure_indexIsInterpolated(self)
    __swig_destroy__ = _quantlib_risks.delete_YoYInflationTermStructure

# Register YoYInflationTermStructure in _quantlib_risks:
_quantlib_risks.YoYInflationTermStructure_swigregister(YoYInflationTermStructure)
class YoYInflationTermStructureHandle(object):
    r"""Proxy of C++ Handle< YoYInflationTermStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(YoYInflationTermStructureHandle self, ext::shared_ptr< YoYInflationTermStructure > const & arg2=ext::shared_ptr()) -> YoYInflationTermStructureHandle"""
        _quantlib_risks.YoYInflationTermStructureHandle_swiginit(self, _quantlib_risks.new_YoYInflationTermStructureHandle(*args))

    def __deref__(self):
        r"""__deref__(YoYInflationTermStructureHandle self) -> ext::shared_ptr< YoYInflationTermStructure >"""
        return _quantlib_risks.YoYInflationTermStructureHandle___deref__(self)

    def currentLink(self):
        r"""currentLink(YoYInflationTermStructureHandle self) -> ext::shared_ptr< YoYInflationTermStructure >"""
        return _quantlib_risks.YoYInflationTermStructureHandle_currentLink(self)

    def __nonzero__(self):
        r"""__nonzero__(YoYInflationTermStructureHandle self) -> bool"""
        return _quantlib_risks.YoYInflationTermStructureHandle___nonzero__(self)

    def __bool__(self):
        r"""__bool__(YoYInflationTermStructureHandle self) -> bool"""
        return _quantlib_risks.YoYInflationTermStructureHandle___bool__(self)

    def asObservable(self):
        r"""asObservable(YoYInflationTermStructureHandle self) -> ext::shared_ptr< Observable >"""
        return _quantlib_risks.YoYInflationTermStructureHandle_asObservable(self)
    __swig_destroy__ = _quantlib_risks.delete_YoYInflationTermStructureHandle

    def yoyRate(self, *args):
        r"""
        yoyRate(YoYInflationTermStructureHandle self, Date d, Period instObsLag=Period(-1,Days), bool forceLinearInterpolation=False, bool extrapolate=False) -> Rate
        yoyRate(YoYInflationTermStructureHandle self, Time t, bool extrapolate=False) -> Rate
        """
        return _quantlib_risks.YoYInflationTermStructureHandle_yoyRate(self, *args)

    def indexIsInterpolated(self):
        r"""indexIsInterpolated(YoYInflationTermStructureHandle self) -> bool"""
        return _quantlib_risks.YoYInflationTermStructureHandle_indexIsInterpolated(self)

    def observationLag(self):
        r"""observationLag(YoYInflationTermStructureHandle self) -> Period"""
        return _quantlib_risks.YoYInflationTermStructureHandle_observationLag(self)

    def frequency(self):
        r"""frequency(YoYInflationTermStructureHandle self) -> Frequency"""
        return _quantlib_risks.YoYInflationTermStructureHandle_frequency(self)

    def baseRate(self):
        r"""baseRate(YoYInflationTermStructureHandle self) -> Rate"""
        return _quantlib_risks.YoYInflationTermStructureHandle_baseRate(self)

    def baseDate(self):
        r"""baseDate(YoYInflationTermStructureHandle self) -> Date"""
        return _quantlib_risks.YoYInflationTermStructureHandle_baseDate(self)

    def setSeasonality(self, *args):
        r"""setSeasonality(YoYInflationTermStructureHandle self, ext::shared_ptr< Seasonality > const & seasonality=ext::shared_ptr< Seasonality >())"""
        return _quantlib_risks.YoYInflationTermStructureHandle_setSeasonality(self, *args)

    def seasonality(self):
        r"""seasonality(YoYInflationTermStructureHandle self) -> ext::shared_ptr< Seasonality >"""
        return _quantlib_risks.YoYInflationTermStructureHandle_seasonality(self)

    def hasSeasonality(self):
        r"""hasSeasonality(YoYInflationTermStructureHandle self) -> bool"""
        return _quantlib_risks.YoYInflationTermStructureHandle_hasSeasonality(self)

    def dayCounter(self):
        r"""dayCounter(YoYInflationTermStructureHandle self) -> DayCounter"""
        return _quantlib_risks.YoYInflationTermStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        r"""timeFromReference(YoYInflationTermStructureHandle self, Date date) -> Time"""
        return _quantlib_risks.YoYInflationTermStructureHandle_timeFromReference(self, date)

    def calendar(self):
        r"""calendar(YoYInflationTermStructureHandle self) -> Calendar"""
        return _quantlib_risks.YoYInflationTermStructureHandle_calendar(self)

    def referenceDate(self):
        r"""referenceDate(YoYInflationTermStructureHandle self) -> Date"""
        return _quantlib_risks.YoYInflationTermStructureHandle_referenceDate(self)

    def maxDate(self):
        r"""maxDate(YoYInflationTermStructureHandle self) -> Date"""
        return _quantlib_risks.YoYInflationTermStructureHandle_maxDate(self)

    def maxTime(self):
        r"""maxTime(YoYInflationTermStructureHandle self) -> Time"""
        return _quantlib_risks.YoYInflationTermStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        r"""enableExtrapolation(YoYInflationTermStructureHandle self)"""
        return _quantlib_risks.YoYInflationTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        r"""disableExtrapolation(YoYInflationTermStructureHandle self)"""
        return _quantlib_risks.YoYInflationTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        r"""allowsExtrapolation(YoYInflationTermStructureHandle self) -> bool"""
        return _quantlib_risks.YoYInflationTermStructureHandle_allowsExtrapolation(self)

# Register YoYInflationTermStructureHandle in _quantlib_risks:
_quantlib_risks.YoYInflationTermStructureHandle_swigregister(YoYInflationTermStructureHandle)
class RelinkableYoYInflationTermStructureHandle(YoYInflationTermStructureHandle):
    r"""Proxy of C++ RelinkableHandle< YoYInflationTermStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(RelinkableYoYInflationTermStructureHandle self, ext::shared_ptr< YoYInflationTermStructure > const & arg2=ext::shared_ptr()) -> RelinkableYoYInflationTermStructureHandle"""
        _quantlib_risks.RelinkableYoYInflationTermStructureHandle_swiginit(self, _quantlib_risks.new_RelinkableYoYInflationTermStructureHandle(*args))

    def linkTo(self, arg2):
        r"""linkTo(RelinkableYoYInflationTermStructureHandle self, ext::shared_ptr< YoYInflationTermStructure > const & arg2)"""
        return _quantlib_risks.RelinkableYoYInflationTermStructureHandle_linkTo(self, arg2)

    def reset(self):
        r"""reset(RelinkableYoYInflationTermStructureHandle self)"""
        return _quantlib_risks.RelinkableYoYInflationTermStructureHandle_reset(self)
    __swig_destroy__ = _quantlib_risks.delete_RelinkableYoYInflationTermStructureHandle

# Register RelinkableYoYInflationTermStructureHandle in _quantlib_risks:
_quantlib_risks.RelinkableYoYInflationTermStructureHandle_swigregister(RelinkableYoYInflationTermStructureHandle)
class ZeroInflationTermStructure(InflationTermStructure):
    r"""Proxy of C++ ZeroInflationTermStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def zeroRate(self, *args):
        r"""
        zeroRate(ZeroInflationTermStructure self, Date d, Period instObsLag=Period(-1,Days), bool forceLinearInterpolation=False, bool extrapolate=False) -> Rate
        zeroRate(ZeroInflationTermStructure self, Time t, bool extrapolate=False) -> Rate
        """
        return _quantlib_risks.ZeroInflationTermStructure_zeroRate(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_ZeroInflationTermStructure

# Register ZeroInflationTermStructure in _quantlib_risks:
_quantlib_risks.ZeroInflationTermStructure_swigregister(ZeroInflationTermStructure)
class ZeroInflationTermStructureHandle(object):
    r"""Proxy of C++ Handle< ZeroInflationTermStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ZeroInflationTermStructureHandle self, ext::shared_ptr< ZeroInflationTermStructure > const & arg2=ext::shared_ptr()) -> ZeroInflationTermStructureHandle"""
        _quantlib_risks.ZeroInflationTermStructureHandle_swiginit(self, _quantlib_risks.new_ZeroInflationTermStructureHandle(*args))

    def __deref__(self):
        r"""__deref__(ZeroInflationTermStructureHandle self) -> ext::shared_ptr< ZeroInflationTermStructure >"""
        return _quantlib_risks.ZeroInflationTermStructureHandle___deref__(self)

    def currentLink(self):
        r"""currentLink(ZeroInflationTermStructureHandle self) -> ext::shared_ptr< ZeroInflationTermStructure >"""
        return _quantlib_risks.ZeroInflationTermStructureHandle_currentLink(self)

    def __nonzero__(self):
        r"""__nonzero__(ZeroInflationTermStructureHandle self) -> bool"""
        return _quantlib_risks.ZeroInflationTermStructureHandle___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ZeroInflationTermStructureHandle self) -> bool"""
        return _quantlib_risks.ZeroInflationTermStructureHandle___bool__(self)

    def asObservable(self):
        r"""asObservable(ZeroInflationTermStructureHandle self) -> ext::shared_ptr< Observable >"""
        return _quantlib_risks.ZeroInflationTermStructureHandle_asObservable(self)
    __swig_destroy__ = _quantlib_risks.delete_ZeroInflationTermStructureHandle

    def zeroRate(self, *args):
        r"""
        zeroRate(ZeroInflationTermStructureHandle self, Date d, Period instObsLag=Period(-1,Days), bool forceLinearInterpolation=False, bool extrapolate=False) -> Rate
        zeroRate(ZeroInflationTermStructureHandle self, Time t, bool extrapolate=False) -> Rate
        """
        return _quantlib_risks.ZeroInflationTermStructureHandle_zeroRate(self, *args)

    def observationLag(self):
        r"""observationLag(ZeroInflationTermStructureHandle self) -> Period"""
        return _quantlib_risks.ZeroInflationTermStructureHandle_observationLag(self)

    def frequency(self):
        r"""frequency(ZeroInflationTermStructureHandle self) -> Frequency"""
        return _quantlib_risks.ZeroInflationTermStructureHandle_frequency(self)

    def baseRate(self):
        r"""baseRate(ZeroInflationTermStructureHandle self) -> Rate"""
        return _quantlib_risks.ZeroInflationTermStructureHandle_baseRate(self)

    def baseDate(self):
        r"""baseDate(ZeroInflationTermStructureHandle self) -> Date"""
        return _quantlib_risks.ZeroInflationTermStructureHandle_baseDate(self)

    def setSeasonality(self, *args):
        r"""setSeasonality(ZeroInflationTermStructureHandle self, ext::shared_ptr< Seasonality > const & seasonality=ext::shared_ptr< Seasonality >())"""
        return _quantlib_risks.ZeroInflationTermStructureHandle_setSeasonality(self, *args)

    def seasonality(self):
        r"""seasonality(ZeroInflationTermStructureHandle self) -> ext::shared_ptr< Seasonality >"""
        return _quantlib_risks.ZeroInflationTermStructureHandle_seasonality(self)

    def hasSeasonality(self):
        r"""hasSeasonality(ZeroInflationTermStructureHandle self) -> bool"""
        return _quantlib_risks.ZeroInflationTermStructureHandle_hasSeasonality(self)

    def dayCounter(self):
        r"""dayCounter(ZeroInflationTermStructureHandle self) -> DayCounter"""
        return _quantlib_risks.ZeroInflationTermStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        r"""timeFromReference(ZeroInflationTermStructureHandle self, Date date) -> Time"""
        return _quantlib_risks.ZeroInflationTermStructureHandle_timeFromReference(self, date)

    def calendar(self):
        r"""calendar(ZeroInflationTermStructureHandle self) -> Calendar"""
        return _quantlib_risks.ZeroInflationTermStructureHandle_calendar(self)

    def referenceDate(self):
        r"""referenceDate(ZeroInflationTermStructureHandle self) -> Date"""
        return _quantlib_risks.ZeroInflationTermStructureHandle_referenceDate(self)

    def maxDate(self):
        r"""maxDate(ZeroInflationTermStructureHandle self) -> Date"""
        return _quantlib_risks.ZeroInflationTermStructureHandle_maxDate(self)

    def maxTime(self):
        r"""maxTime(ZeroInflationTermStructureHandle self) -> Time"""
        return _quantlib_risks.ZeroInflationTermStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        r"""enableExtrapolation(ZeroInflationTermStructureHandle self)"""
        return _quantlib_risks.ZeroInflationTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        r"""disableExtrapolation(ZeroInflationTermStructureHandle self)"""
        return _quantlib_risks.ZeroInflationTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        r"""allowsExtrapolation(ZeroInflationTermStructureHandle self) -> bool"""
        return _quantlib_risks.ZeroInflationTermStructureHandle_allowsExtrapolation(self)

# Register ZeroInflationTermStructureHandle in _quantlib_risks:
_quantlib_risks.ZeroInflationTermStructureHandle_swigregister(ZeroInflationTermStructureHandle)
class RelinkableZeroInflationTermStructureHandle(ZeroInflationTermStructureHandle):
    r"""Proxy of C++ RelinkableHandle< ZeroInflationTermStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(RelinkableZeroInflationTermStructureHandle self, ext::shared_ptr< ZeroInflationTermStructure > const & arg2=ext::shared_ptr()) -> RelinkableZeroInflationTermStructureHandle"""
        _quantlib_risks.RelinkableZeroInflationTermStructureHandle_swiginit(self, _quantlib_risks.new_RelinkableZeroInflationTermStructureHandle(*args))

    def linkTo(self, arg2):
        r"""linkTo(RelinkableZeroInflationTermStructureHandle self, ext::shared_ptr< ZeroInflationTermStructure > const & arg2)"""
        return _quantlib_risks.RelinkableZeroInflationTermStructureHandle_linkTo(self, arg2)

    def reset(self):
        r"""reset(RelinkableZeroInflationTermStructureHandle self)"""
        return _quantlib_risks.RelinkableZeroInflationTermStructureHandle_reset(self)
    __swig_destroy__ = _quantlib_risks.delete_RelinkableZeroInflationTermStructureHandle

# Register RelinkableZeroInflationTermStructureHandle in _quantlib_risks:
_quantlib_risks.RelinkableZeroInflationTermStructureHandle_swigregister(RelinkableZeroInflationTermStructureHandle)
class Region(object):
    r"""Proxy of C++ Region class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def name(self):
        r"""name(Region self) -> std::string"""
        return _quantlib_risks.Region_name(self)

    def code(self):
        r"""code(Region self) -> std::string"""
        return _quantlib_risks.Region_code(self)
    __swig_destroy__ = _quantlib_risks.delete_Region

# Register Region in _quantlib_risks:
_quantlib_risks.Region_swigregister(Region)
class CustomRegion(Region):
    r"""Proxy of C++ CustomRegion class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, code):
        r"""__init__(CustomRegion self, std::string const & name, std::string const & code) -> CustomRegion"""
        _quantlib_risks.CustomRegion_swiginit(self, _quantlib_risks.new_CustomRegion(name, code))
    __swig_destroy__ = _quantlib_risks.delete_CustomRegion

# Register CustomRegion in _quantlib_risks:
_quantlib_risks.CustomRegion_swigregister(CustomRegion)
class InflationIndex(Index):
    r"""Proxy of C++ InflationIndex class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def familyName(self):
        r"""familyName(InflationIndex self) -> std::string"""
        return _quantlib_risks.InflationIndex_familyName(self)

    def region(self):
        r"""region(InflationIndex self) -> Region"""
        return _quantlib_risks.InflationIndex_region(self)

    def revised(self):
        r"""revised(InflationIndex self) -> bool"""
        return _quantlib_risks.InflationIndex_revised(self)

    def interpolated(self):
        r"""interpolated(InflationIndex self) -> bool"""
        return _quantlib_risks.InflationIndex_interpolated(self)

    def frequency(self):
        r"""frequency(InflationIndex self) -> Frequency"""
        return _quantlib_risks.InflationIndex_frequency(self)

    def availabilityLag(self):
        r"""availabilityLag(InflationIndex self) -> Period"""
        return _quantlib_risks.InflationIndex_availabilityLag(self)

    def currency(self):
        r"""currency(InflationIndex self) -> Currency"""
        return _quantlib_risks.InflationIndex_currency(self)
    __swig_destroy__ = _quantlib_risks.delete_InflationIndex

# Register InflationIndex in _quantlib_risks:
_quantlib_risks.InflationIndex_swigregister(InflationIndex)
class ZeroInflationIndex(InflationIndex):
    r"""Proxy of C++ ZeroInflationIndex class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ZeroInflationIndex self, std::string const & familyName, Region region, bool revised, Frequency frequency, Period availabilityLag, Currency currency, ZeroInflationTermStructureHandle h={}) -> ZeroInflationIndex
        __init__(ZeroInflationIndex self, std::string const & familyName, Region region, bool revised, bool interpolated, Frequency frequency, Period availabilityLag, Currency currency, ZeroInflationTermStructureHandle h={}) -> ZeroInflationIndex
        """
        _quantlib_risks.ZeroInflationIndex_swiginit(self, _quantlib_risks.new_ZeroInflationIndex(*args))

    def zeroInflationTermStructure(self):
        r"""zeroInflationTermStructure(ZeroInflationIndex self) -> ZeroInflationTermStructureHandle"""
        return _quantlib_risks.ZeroInflationIndex_zeroInflationTermStructure(self)

    def clone(self, h):
        r"""clone(ZeroInflationIndex self, ZeroInflationTermStructureHandle h) -> ext::shared_ptr< ZeroInflationIndex >"""
        return _quantlib_risks.ZeroInflationIndex_clone(self, h)
    __swig_destroy__ = _quantlib_risks.delete_ZeroInflationIndex

# Register ZeroInflationIndex in _quantlib_risks:
_quantlib_risks.ZeroInflationIndex_swigregister(ZeroInflationIndex)

def as_zero_inflation_index(i):
    r"""as_zero_inflation_index(ext::shared_ptr< Index > const & i) -> ext::shared_ptr< ZeroInflationIndex >"""
    return _quantlib_risks.as_zero_inflation_index(i)
class YoYInflationIndex(InflationIndex):
    r"""Proxy of C++ YoYInflationIndex class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(YoYInflationIndex self, ext::shared_ptr< ZeroInflationIndex > const & underlyingIndex, bool interpolated, YoYInflationTermStructureHandle ts={}) -> YoYInflationIndex
        __init__(YoYInflationIndex self, std::string const & familyName, Region region, bool revised, bool interpolated, Frequency frequency, Period availabilityLag, Currency currency, YoYInflationTermStructureHandle ts={}) -> YoYInflationIndex
        __init__(YoYInflationIndex self, std::string const & familyName, Region region, bool revised, bool interpolated, bool ratio, Frequency frequency, Period availabilityLag, Currency currency, YoYInflationTermStructureHandle ts={}) -> YoYInflationIndex
        """
        _quantlib_risks.YoYInflationIndex_swiginit(self, _quantlib_risks.new_YoYInflationIndex(*args))

    def ratio(self):
        r"""ratio(YoYInflationIndex self) -> bool"""
        return _quantlib_risks.YoYInflationIndex_ratio(self)

    def underlyingIndex(self):
        r"""underlyingIndex(YoYInflationIndex self) -> ext::shared_ptr< ZeroInflationIndex >"""
        return _quantlib_risks.YoYInflationIndex_underlyingIndex(self)

    def yoyInflationTermStructure(self):
        r"""yoyInflationTermStructure(YoYInflationIndex self) -> YoYInflationTermStructureHandle"""
        return _quantlib_risks.YoYInflationIndex_yoyInflationTermStructure(self)

    def clone(self, h):
        r"""clone(YoYInflationIndex self, YoYInflationTermStructureHandle h) -> ext::shared_ptr< YoYInflationIndex >"""
        return _quantlib_risks.YoYInflationIndex_clone(self, h)
    __swig_destroy__ = _quantlib_risks.delete_YoYInflationIndex

# Register YoYInflationIndex in _quantlib_risks:
_quantlib_risks.YoYInflationIndex_swigregister(YoYInflationIndex)
class EUHICP(ZeroInflationIndex):
    r"""Proxy of C++ EUHICP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(EUHICP self, ZeroInflationTermStructureHandle h={}) -> EUHICP
        __init__(EUHICP self, bool interpolated, ZeroInflationTermStructureHandle h={}) -> EUHICP
        """
        _quantlib_risks.EUHICP_swiginit(self, _quantlib_risks.new_EUHICP(*args))
    __swig_destroy__ = _quantlib_risks.delete_EUHICP

# Register EUHICP in _quantlib_risks:
_quantlib_risks.EUHICP_swigregister(EUHICP)
class EUHICPXT(ZeroInflationIndex):
    r"""Proxy of C++ EUHICPXT class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(EUHICPXT self, ZeroInflationTermStructureHandle h={}) -> EUHICPXT
        __init__(EUHICPXT self, bool interpolated, ZeroInflationTermStructureHandle h={}) -> EUHICPXT
        """
        _quantlib_risks.EUHICPXT_swiginit(self, _quantlib_risks.new_EUHICPXT(*args))
    __swig_destroy__ = _quantlib_risks.delete_EUHICPXT

# Register EUHICPXT in _quantlib_risks:
_quantlib_risks.EUHICPXT_swigregister(EUHICPXT)
class FRHICP(ZeroInflationIndex):
    r"""Proxy of C++ FRHICP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FRHICP self, ZeroInflationTermStructureHandle h={}) -> FRHICP
        __init__(FRHICP self, bool interpolated, ZeroInflationTermStructureHandle h={}) -> FRHICP
        """
        _quantlib_risks.FRHICP_swiginit(self, _quantlib_risks.new_FRHICP(*args))
    __swig_destroy__ = _quantlib_risks.delete_FRHICP

# Register FRHICP in _quantlib_risks:
_quantlib_risks.FRHICP_swigregister(FRHICP)
class UKRPI(ZeroInflationIndex):
    r"""Proxy of C++ UKRPI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(UKRPI self, ZeroInflationTermStructureHandle h={}) -> UKRPI
        __init__(UKRPI self, bool interpolated, ZeroInflationTermStructureHandle h={}) -> UKRPI
        """
        _quantlib_risks.UKRPI_swiginit(self, _quantlib_risks.new_UKRPI(*args))
    __swig_destroy__ = _quantlib_risks.delete_UKRPI

# Register UKRPI in _quantlib_risks:
_quantlib_risks.UKRPI_swigregister(UKRPI)
class USCPI(ZeroInflationIndex):
    r"""Proxy of C++ USCPI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(USCPI self, ZeroInflationTermStructureHandle h={}) -> USCPI
        __init__(USCPI self, bool interpolated, ZeroInflationTermStructureHandle h={}) -> USCPI
        """
        _quantlib_risks.USCPI_swiginit(self, _quantlib_risks.new_USCPI(*args))
    __swig_destroy__ = _quantlib_risks.delete_USCPI

# Register USCPI in _quantlib_risks:
_quantlib_risks.USCPI_swigregister(USCPI)
class ZACPI(ZeroInflationIndex):
    r"""Proxy of C++ ZACPI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ZACPI self, ZeroInflationTermStructureHandle h={}) -> ZACPI
        __init__(ZACPI self, bool interpolated, ZeroInflationTermStructureHandle h={}) -> ZACPI
        """
        _quantlib_risks.ZACPI_swiginit(self, _quantlib_risks.new_ZACPI(*args))
    __swig_destroy__ = _quantlib_risks.delete_ZACPI

# Register ZACPI in _quantlib_risks:
_quantlib_risks.ZACPI_swigregister(ZACPI)
class UKHICP(ZeroInflationIndex):
    r"""Proxy of C++ UKHICP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(UKHICP self, ZeroInflationTermStructureHandle h={}) -> UKHICP"""
        _quantlib_risks.UKHICP_swiginit(self, _quantlib_risks.new_UKHICP(*args))
    __swig_destroy__ = _quantlib_risks.delete_UKHICP

# Register UKHICP in _quantlib_risks:
_quantlib_risks.UKHICP_swigregister(UKHICP)
class YYEUHICP(YoYInflationIndex):
    r"""Proxy of C++ YYEUHICP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(YYEUHICP self, bool interpolated, YoYInflationTermStructureHandle h={}) -> YYEUHICP"""
        _quantlib_risks.YYEUHICP_swiginit(self, _quantlib_risks.new_YYEUHICP(*args))
    __swig_destroy__ = _quantlib_risks.delete_YYEUHICP

# Register YYEUHICP in _quantlib_risks:
_quantlib_risks.YYEUHICP_swigregister(YYEUHICP)
class YYEUHICPXT(YoYInflationIndex):
    r"""Proxy of C++ YYEUHICPXT class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(YYEUHICPXT self, bool interpolated, YoYInflationTermStructureHandle h={}) -> YYEUHICPXT"""
        _quantlib_risks.YYEUHICPXT_swiginit(self, _quantlib_risks.new_YYEUHICPXT(*args))
    __swig_destroy__ = _quantlib_risks.delete_YYEUHICPXT

# Register YYEUHICPXT in _quantlib_risks:
_quantlib_risks.YYEUHICPXT_swigregister(YYEUHICPXT)
class YYEUHICPr(YoYInflationIndex):
    r"""Proxy of C++ YYEUHICPr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(YYEUHICPr self, bool interpolated, YoYInflationTermStructureHandle h={}) -> YYEUHICPr"""
        _quantlib_risks.YYEUHICPr_swiginit(self, _quantlib_risks.new_YYEUHICPr(*args))
    __swig_destroy__ = _quantlib_risks.delete_YYEUHICPr

# Register YYEUHICPr in _quantlib_risks:
_quantlib_risks.YYEUHICPr_swigregister(YYEUHICPr)
class YYFRHICP(YoYInflationIndex):
    r"""Proxy of C++ YYFRHICP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(YYFRHICP self, bool interpolated, YoYInflationTermStructureHandle h={}) -> YYFRHICP"""
        _quantlib_risks.YYFRHICP_swiginit(self, _quantlib_risks.new_YYFRHICP(*args))
    __swig_destroy__ = _quantlib_risks.delete_YYFRHICP

# Register YYFRHICP in _quantlib_risks:
_quantlib_risks.YYFRHICP_swigregister(YYFRHICP)
class YYFRHICPr(YoYInflationIndex):
    r"""Proxy of C++ YYFRHICPr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(YYFRHICPr self, bool interpolated, YoYInflationTermStructureHandle h={}) -> YYFRHICPr"""
        _quantlib_risks.YYFRHICPr_swiginit(self, _quantlib_risks.new_YYFRHICPr(*args))
    __swig_destroy__ = _quantlib_risks.delete_YYFRHICPr

# Register YYFRHICPr in _quantlib_risks:
_quantlib_risks.YYFRHICPr_swigregister(YYFRHICPr)
class YYUKRPI(YoYInflationIndex):
    r"""Proxy of C++ YYUKRPI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(YYUKRPI self, bool interpolated, YoYInflationTermStructureHandle h={}) -> YYUKRPI"""
        _quantlib_risks.YYUKRPI_swiginit(self, _quantlib_risks.new_YYUKRPI(*args))
    __swig_destroy__ = _quantlib_risks.delete_YYUKRPI

# Register YYUKRPI in _quantlib_risks:
_quantlib_risks.YYUKRPI_swigregister(YYUKRPI)
class YYUKRPIr(YoYInflationIndex):
    r"""Proxy of C++ YYUKRPIr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(YYUKRPIr self, bool interpolated, YoYInflationTermStructureHandle h={}) -> YYUKRPIr"""
        _quantlib_risks.YYUKRPIr_swiginit(self, _quantlib_risks.new_YYUKRPIr(*args))
    __swig_destroy__ = _quantlib_risks.delete_YYUKRPIr

# Register YYUKRPIr in _quantlib_risks:
_quantlib_risks.YYUKRPIr_swigregister(YYUKRPIr)
class YYUSCPI(YoYInflationIndex):
    r"""Proxy of C++ YYUSCPI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(YYUSCPI self, bool interpolated, YoYInflationTermStructureHandle h={}) -> YYUSCPI"""
        _quantlib_risks.YYUSCPI_swiginit(self, _quantlib_risks.new_YYUSCPI(*args))
    __swig_destroy__ = _quantlib_risks.delete_YYUSCPI

# Register YYUSCPI in _quantlib_risks:
_quantlib_risks.YYUSCPI_swigregister(YYUSCPI)
class YYUSCPIr(YoYInflationIndex):
    r"""Proxy of C++ YYUSCPIr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(YYUSCPIr self, bool interpolated, YoYInflationTermStructureHandle h={}) -> YYUSCPIr"""
        _quantlib_risks.YYUSCPIr_swiginit(self, _quantlib_risks.new_YYUSCPIr(*args))
    __swig_destroy__ = _quantlib_risks.delete_YYUSCPIr

# Register YYUSCPIr in _quantlib_risks:
_quantlib_risks.YYUSCPIr_swigregister(YYUSCPIr)
class YYZACPI(YoYInflationIndex):
    r"""Proxy of C++ YYZACPI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(YYZACPI self, bool interpolated, YoYInflationTermStructureHandle h={}) -> YYZACPI"""
        _quantlib_risks.YYZACPI_swiginit(self, _quantlib_risks.new_YYZACPI(*args))
    __swig_destroy__ = _quantlib_risks.delete_YYZACPI

# Register YYZACPI in _quantlib_risks:
_quantlib_risks.YYZACPI_swigregister(YYZACPI)
class YYZACPIr(YoYInflationIndex):
    r"""Proxy of C++ YYZACPIr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(YYZACPIr self, bool interpolated, YoYInflationTermStructureHandle h={}) -> YYZACPIr"""
        _quantlib_risks.YYZACPIr_swiginit(self, _quantlib_risks.new_YYZACPIr(*args))
    __swig_destroy__ = _quantlib_risks.delete_YYZACPIr

# Register YYZACPIr in _quantlib_risks:
_quantlib_risks.YYZACPIr_swigregister(YYZACPIr)
class AUCPI(ZeroInflationIndex):
    r"""Proxy of C++ AUCPI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(AUCPI self, Frequency frequency, bool revised, ZeroInflationTermStructureHandle h={}) -> AUCPI
        __init__(AUCPI self, Frequency frequency, bool revised, bool interpolated, ZeroInflationTermStructureHandle h={}) -> AUCPI
        """
        _quantlib_risks.AUCPI_swiginit(self, _quantlib_risks.new_AUCPI(*args))
    __swig_destroy__ = _quantlib_risks.delete_AUCPI

# Register AUCPI in _quantlib_risks:
_quantlib_risks.AUCPI_swigregister(AUCPI)
class CPI(object):
    r"""Proxy of C++ CPI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AsIndex = _quantlib_risks.CPI_AsIndex
    
    Flat = _quantlib_risks.CPI_Flat
    
    Linear = _quantlib_risks.CPI_Linear
    

    @staticmethod
    def laggedFixing(index, date, observationLag, interpolationType):
        r"""laggedFixing(ext::shared_ptr< ZeroInflationIndex > const & index, Date date, Period observationLag, CPI::InterpolationType interpolationType) -> Real"""
        return _quantlib_risks.CPI_laggedFixing(index, date, observationLag, interpolationType)

    def __init__(self):
        r"""__init__(CPI self) -> CPI"""
        _quantlib_risks.CPI_swiginit(self, _quantlib_risks.new_CPI())
    __swig_destroy__ = _quantlib_risks.delete_CPI

# Register CPI in _quantlib_risks:
_quantlib_risks.CPI_swigregister(CPI)
class InflationCoupon(Coupon):
    r"""Proxy of C++ InflationCoupon class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def fixingDate(self):
        r"""fixingDate(InflationCoupon self) -> Date"""
        return _quantlib_risks.InflationCoupon_fixingDate(self)

    def fixingDays(self):
        r"""fixingDays(InflationCoupon self) -> Integer"""
        return _quantlib_risks.InflationCoupon_fixingDays(self)

    def observationLag(self):
        r"""observationLag(InflationCoupon self) -> Period"""
        return _quantlib_risks.InflationCoupon_observationLag(self)

    def indexFixing(self):
        r"""indexFixing(InflationCoupon self) -> Rate"""
        return _quantlib_risks.InflationCoupon_indexFixing(self)

    def index(self):
        r"""index(InflationCoupon self) -> ext::shared_ptr< InflationIndex >"""
        return _quantlib_risks.InflationCoupon_index(self)
    __swig_destroy__ = _quantlib_risks.delete_InflationCoupon

# Register InflationCoupon in _quantlib_risks:
_quantlib_risks.InflationCoupon_swigregister(InflationCoupon)

def as_inflation_coupon(cf):
    r"""as_inflation_coupon(ext::shared_ptr< CashFlow > const & cf) -> ext::shared_ptr< InflationCoupon >"""
    return _quantlib_risks.as_inflation_coupon(cf)
class CPICouponPricer(object):
    r"""Proxy of C++ CPICouponPricer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CPICouponPricer self) -> CPICouponPricer"""
        _quantlib_risks.CPICouponPricer_swiginit(self, _quantlib_risks.new_CPICouponPricer())
    __swig_destroy__ = _quantlib_risks.delete_CPICouponPricer

# Register CPICouponPricer in _quantlib_risks:
_quantlib_risks.CPICouponPricer_swigregister(CPICouponPricer)
class CPICoupon(InflationCoupon):
    r"""Proxy of C++ CPICoupon class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CPICoupon self, Real baseCPI, Date paymentDate, Real nominal, Date startDate, Date endDate, ext::shared_ptr< ZeroInflationIndex > const & index, Period observationLag, CPI::InterpolationType observationInterpolation, DayCounter dayCounter, Real fixedRate, Date refPeriodStart=Date(), Date refPeriodEnd=Date(), Date exCouponDate=Date()) -> CPICoupon
        __init__(CPICoupon self, Date baseDate, Date paymentDate, Real nominal, Date startDate, Date endDate, ext::shared_ptr< ZeroInflationIndex > const & index, Period observationLag, CPI::InterpolationType observationInterpolation, DayCounter dayCounter, Real fixedRate, Date refPeriodStart=Date(), Date refPeriodEnd=Date(), Date exCouponDate=Date()) -> CPICoupon
        __init__(CPICoupon self, Real baseCPI, Date baseDate, Date paymentDate, Real nominal, Date startDate, Date endDate, ext::shared_ptr< ZeroInflationIndex > const & index, Period observationLag, CPI::InterpolationType observationInterpolation, DayCounter dayCounter, Real fixedRate, Date refPeriodStart=Date(), Date refPeriodEnd=Date(), Date exCouponDate=Date()) -> CPICoupon
        __init__(CPICoupon self, Real baseCPI, Date paymentDate, Real nominal, Date startDate, Date endDate, ext::shared_ptr< ZeroInflationIndex > const & index, Period observationLag, CPI::InterpolationType observationInterpolation, DayCounter dayCounter, Real fixedRate, Spread spread, Date refPeriodStart=Date(), Date refPeriodEnd=Date(), Date exCouponDate=Date()) -> CPICoupon
        __init__(CPICoupon self, Date baseDate, Date paymentDate, Real nominal, Date startDate, Date endDate, ext::shared_ptr< ZeroInflationIndex > const & index, Period observationLag, CPI::InterpolationType observationInterpolation, DayCounter dayCounter, Real fixedRate, Spread spread, Date refPeriodStart=Date(), Date refPeriodEnd=Date(), Date exCouponDate=Date()) -> CPICoupon
        __init__(CPICoupon self, Real baseCPI, Date baseDate, Date paymentDate, Real nominal, Date startDate, Date endDate, ext::shared_ptr< ZeroInflationIndex > const & index, Period observationLag, CPI::InterpolationType observationInterpolation, DayCounter dayCounter, Real fixedRate, Spread spread, Date refPeriodStart=Date(), Date refPeriodEnd=Date(), Date exCouponDate=Date()) -> CPICoupon
        """
        _quantlib_risks.CPICoupon_swiginit(self, _quantlib_risks.new_CPICoupon(*args))

    def fixedRate(self):
        r"""fixedRate(CPICoupon self) -> Rate"""
        return _quantlib_risks.CPICoupon_fixedRate(self)

    def spread(self):
        r"""spread(CPICoupon self) -> Spread"""
        return _quantlib_risks.CPICoupon_spread(self)

    def adjustedIndexGrowth(self):
        r"""adjustedIndexGrowth(CPICoupon self) -> Rate"""
        return _quantlib_risks.CPICoupon_adjustedIndexGrowth(self)

    def indexFixing(self):
        r"""indexFixing(CPICoupon self) -> Rate"""
        return _quantlib_risks.CPICoupon_indexFixing(self)

    def indexRatio(self, d):
        r"""indexRatio(CPICoupon self, Date d) -> Real"""
        return _quantlib_risks.CPICoupon_indexRatio(self, d)

    def baseCPI(self):
        r"""baseCPI(CPICoupon self) -> Rate"""
        return _quantlib_risks.CPICoupon_baseCPI(self)

    def baseDate(self):
        r"""baseDate(CPICoupon self) -> Date"""
        return _quantlib_risks.CPICoupon_baseDate(self)

    def observationInterpolation(self):
        r"""observationInterpolation(CPICoupon self) -> CPI::InterpolationType"""
        return _quantlib_risks.CPICoupon_observationInterpolation(self)

    def cpiIndex(self):
        r"""cpiIndex(CPICoupon self) -> ext::shared_ptr< ZeroInflationIndex >"""
        return _quantlib_risks.CPICoupon_cpiIndex(self)

    def setPricer(self, arg2):
        r"""setPricer(CPICoupon self, ext::shared_ptr< CPICouponPricer > const & arg2)"""
        return _quantlib_risks.CPICoupon_setPricer(self, arg2)
    __swig_destroy__ = _quantlib_risks.delete_CPICoupon

# Register CPICoupon in _quantlib_risks:
_quantlib_risks.CPICoupon_swigregister(CPICoupon)

def as_cpi_coupon(cf):
    r"""as_cpi_coupon(ext::shared_ptr< CashFlow > const & cf) -> ext::shared_ptr< CPICoupon >"""
    return _quantlib_risks.as_cpi_coupon(cf)
class CPICashFlow(IndexedCashFlow):
    r"""Proxy of C++ CPICashFlow class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, notional, index, baseDate, baseFixing, observationDate, observationLag, interpolation, paymentDate, growthOnly=False):
        r"""__init__(CPICashFlow self, Real notional, ext::shared_ptr< ZeroInflationIndex > const & index, Date baseDate, Real baseFixing, Date observationDate, Period observationLag, CPI::InterpolationType interpolation, Date paymentDate, bool growthOnly=False) -> CPICashFlow"""
        _quantlib_risks.CPICashFlow_swiginit(self, _quantlib_risks.new_CPICashFlow(notional, index, baseDate, baseFixing, observationDate, observationLag, interpolation, paymentDate, growthOnly))

    def interpolation(self):
        r"""interpolation(CPICashFlow self) -> CPI::InterpolationType"""
        return _quantlib_risks.CPICashFlow_interpolation(self)

    def frequency(self):
        r"""frequency(CPICashFlow self) -> Frequency"""
        return _quantlib_risks.CPICashFlow_frequency(self)
    __swig_destroy__ = _quantlib_risks.delete_CPICashFlow

# Register CPICashFlow in _quantlib_risks:
_quantlib_risks.CPICashFlow_swigregister(CPICashFlow)

def as_cpi_cashflow(cf):
    r"""as_cpi_cashflow(ext::shared_ptr< CashFlow > const & cf) -> ext::shared_ptr< CPICashFlow >"""
    return _quantlib_risks.as_cpi_cashflow(cf)

def CPILeg(*args, **kwargs):
    r"""CPILeg(std::vector< Real,std::allocator< Real > > const & nominals, Schedule schedule, ext::shared_ptr< ZeroInflationIndex > const & index, Real baseCPI, Period observationLag, DayCounter paymentDayCounter=DayCounter(), BusinessDayConvention const paymentConvention=Following, std::vector< Real,std::allocator< Real > > const & fixedRates=std::vector< Real >(), std::vector< Spread,std::allocator< Spread > > const & spreads=std::vector< Spread >(), std::vector< Rate,std::allocator< Rate > > const & caps=std::vector< Rate >(), std::vector< Rate,std::allocator< Rate > > const & floors=std::vector< Rate >(), Period exCouponPeriod=Period(), Calendar exCouponCalendar=Calendar(), BusinessDayConvention exCouponConvention=Unadjusted, bool exCouponEndOfMonth=False, Calendar paymentCalendar=Calendar(), bool growthOnly=True, CPI::InterpolationType observationInterpolation=AsIndex) -> Leg"""
    return _quantlib_risks.CPILeg(*args, **kwargs)
class ZeroInflationCashFlow(CashFlow):
    r"""Proxy of C++ ZeroInflationCashFlow class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, notional, index, observationInterpolation, startDate, endDate, observationLag, paymentDate, growthOnly=False):
        r"""__init__(ZeroInflationCashFlow self, Real notional, ext::shared_ptr< ZeroInflationIndex > const & index, CPI::InterpolationType observationInterpolation, Date startDate, Date endDate, Period observationLag, Date paymentDate, bool growthOnly=False) -> ZeroInflationCashFlow"""
        _quantlib_risks.ZeroInflationCashFlow_swiginit(self, _quantlib_risks.new_ZeroInflationCashFlow(notional, index, observationInterpolation, startDate, endDate, observationLag, paymentDate, growthOnly))

    def notional(self):
        r"""notional(ZeroInflationCashFlow self) -> Real"""
        return _quantlib_risks.ZeroInflationCashFlow_notional(self)

    def baseDate(self):
        r"""baseDate(ZeroInflationCashFlow self) -> Date"""
        return _quantlib_risks.ZeroInflationCashFlow_baseDate(self)

    def fixingDate(self):
        r"""fixingDate(ZeroInflationCashFlow self) -> Date"""
        return _quantlib_risks.ZeroInflationCashFlow_fixingDate(self)

    def growthOnly(self):
        r"""growthOnly(ZeroInflationCashFlow self) -> bool"""
        return _quantlib_risks.ZeroInflationCashFlow_growthOnly(self)

    def observationInterpolation(self):
        r"""observationInterpolation(ZeroInflationCashFlow self) -> CPI::InterpolationType"""
        return _quantlib_risks.ZeroInflationCashFlow_observationInterpolation(self)

    def zeroInflationIndex(self):
        r"""zeroInflationIndex(ZeroInflationCashFlow self) -> ext::shared_ptr< ZeroInflationIndex >"""
        return _quantlib_risks.ZeroInflationCashFlow_zeroInflationIndex(self)
    __swig_destroy__ = _quantlib_risks.delete_ZeroInflationCashFlow

# Register ZeroInflationCashFlow in _quantlib_risks:
_quantlib_risks.ZeroInflationCashFlow_swigregister(ZeroInflationCashFlow)

def as_zero_inflation_cash_flow(cf):
    r"""as_zero_inflation_cash_flow(ext::shared_ptr< CashFlow > const & cf) -> ext::shared_ptr< ZeroInflationCashFlow >"""
    return _quantlib_risks.as_zero_inflation_cash_flow(cf)
class ZeroHelper(Observable):
    r"""Proxy of C++ BootstrapHelper< ZeroInflationTermStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def quote(self):
        r"""quote(ZeroHelper self) -> QuoteHandle"""
        return _quantlib_risks.ZeroHelper_quote(self)

    def latestDate(self):
        r"""latestDate(ZeroHelper self) -> Date"""
        return _quantlib_risks.ZeroHelper_latestDate(self)

    def earliestDate(self):
        r"""earliestDate(ZeroHelper self) -> Date"""
        return _quantlib_risks.ZeroHelper_earliestDate(self)

    def maturityDate(self):
        r"""maturityDate(ZeroHelper self) -> Date"""
        return _quantlib_risks.ZeroHelper_maturityDate(self)

    def latestRelevantDate(self):
        r"""latestRelevantDate(ZeroHelper self) -> Date"""
        return _quantlib_risks.ZeroHelper_latestRelevantDate(self)

    def pillarDate(self):
        r"""pillarDate(ZeroHelper self) -> Date"""
        return _quantlib_risks.ZeroHelper_pillarDate(self)

    def impliedQuote(self):
        r"""impliedQuote(ZeroHelper self) -> Real"""
        return _quantlib_risks.ZeroHelper_impliedQuote(self)

    def quoteError(self):
        r"""quoteError(ZeroHelper self) -> Real"""
        return _quantlib_risks.ZeroHelper_quoteError(self)
    __swig_destroy__ = _quantlib_risks.delete_ZeroHelper

# Register ZeroHelper in _quantlib_risks:
_quantlib_risks.ZeroHelper_swigregister(ZeroHelper)
class YoYHelper(Observable):
    r"""Proxy of C++ BootstrapHelper< YoYInflationTermStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def quote(self):
        r"""quote(YoYHelper self) -> QuoteHandle"""
        return _quantlib_risks.YoYHelper_quote(self)

    def latestDate(self):
        r"""latestDate(YoYHelper self) -> Date"""
        return _quantlib_risks.YoYHelper_latestDate(self)

    def earliestDate(self):
        r"""earliestDate(YoYHelper self) -> Date"""
        return _quantlib_risks.YoYHelper_earliestDate(self)

    def maturityDate(self):
        r"""maturityDate(YoYHelper self) -> Date"""
        return _quantlib_risks.YoYHelper_maturityDate(self)

    def latestRelevantDate(self):
        r"""latestRelevantDate(YoYHelper self) -> Date"""
        return _quantlib_risks.YoYHelper_latestRelevantDate(self)

    def pillarDate(self):
        r"""pillarDate(YoYHelper self) -> Date"""
        return _quantlib_risks.YoYHelper_pillarDate(self)

    def impliedQuote(self):
        r"""impliedQuote(YoYHelper self) -> Real"""
        return _quantlib_risks.YoYHelper_impliedQuote(self)

    def quoteError(self):
        r"""quoteError(YoYHelper self) -> Real"""
        return _quantlib_risks.YoYHelper_quoteError(self)
    __swig_destroy__ = _quantlib_risks.delete_YoYHelper

# Register YoYHelper in _quantlib_risks:
_quantlib_risks.YoYHelper_swigregister(YoYHelper)
class YoYOptionHelper(Observable):
    r"""Proxy of C++ BootstrapHelper< YoYOptionletVolatilitySurface > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def quote(self):
        r"""quote(YoYOptionHelper self) -> QuoteHandle"""
        return _quantlib_risks.YoYOptionHelper_quote(self)

    def latestDate(self):
        r"""latestDate(YoYOptionHelper self) -> Date"""
        return _quantlib_risks.YoYOptionHelper_latestDate(self)

    def earliestDate(self):
        r"""earliestDate(YoYOptionHelper self) -> Date"""
        return _quantlib_risks.YoYOptionHelper_earliestDate(self)

    def maturityDate(self):
        r"""maturityDate(YoYOptionHelper self) -> Date"""
        return _quantlib_risks.YoYOptionHelper_maturityDate(self)

    def latestRelevantDate(self):
        r"""latestRelevantDate(YoYOptionHelper self) -> Date"""
        return _quantlib_risks.YoYOptionHelper_latestRelevantDate(self)

    def pillarDate(self):
        r"""pillarDate(YoYOptionHelper self) -> Date"""
        return _quantlib_risks.YoYOptionHelper_pillarDate(self)

    def impliedQuote(self):
        r"""impliedQuote(YoYOptionHelper self) -> Real"""
        return _quantlib_risks.YoYOptionHelper_impliedQuote(self)

    def quoteError(self):
        r"""quoteError(YoYOptionHelper self) -> Real"""
        return _quantlib_risks.YoYOptionHelper_quoteError(self)
    __swig_destroy__ = _quantlib_risks.delete_YoYOptionHelper

# Register YoYOptionHelper in _quantlib_risks:
_quantlib_risks.YoYOptionHelper_swigregister(YoYOptionHelper)
class ZeroHelperVector(object):
    r"""Proxy of C++ std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(ZeroHelperVector self) -> SwigPyIterator"""
        return _quantlib_risks.ZeroHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(ZeroHelperVector self) -> bool"""
        return _quantlib_risks.ZeroHelperVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ZeroHelperVector self) -> bool"""
        return _quantlib_risks.ZeroHelperVector___bool__(self)

    def __len__(self):
        r"""__len__(ZeroHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::size_type"""
        return _quantlib_risks.ZeroHelperVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(ZeroHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::difference_type i, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::difference_type j) -> ZeroHelperVector"""
        return _quantlib_risks.ZeroHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(ZeroHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::difference_type i, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::difference_type j)
        __setslice__(ZeroHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::difference_type i, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::difference_type j, ZeroHelperVector v)
        """
        return _quantlib_risks.ZeroHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(ZeroHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::difference_type i, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::difference_type j)"""
        return _quantlib_risks.ZeroHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(ZeroHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::difference_type i)
        __delitem__(ZeroHelperVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.ZeroHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(ZeroHelperVector self, SWIGPY_SLICEOBJECT * slice) -> ZeroHelperVector
        __getitem__(ZeroHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::difference_type i) -> std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::value_type const &
        """
        return _quantlib_risks.ZeroHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(ZeroHelperVector self, SWIGPY_SLICEOBJECT * slice, ZeroHelperVector v)
        __setitem__(ZeroHelperVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(ZeroHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::difference_type i, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::value_type const & x)
        """
        return _quantlib_risks.ZeroHelperVector___setitem__(self, *args)

    def pop(self):
        r"""pop(ZeroHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::value_type"""
        return _quantlib_risks.ZeroHelperVector_pop(self)

    def append(self, x):
        r"""append(ZeroHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::value_type const & x)"""
        return _quantlib_risks.ZeroHelperVector_append(self, x)

    def empty(self):
        r"""empty(ZeroHelperVector self) -> bool"""
        return _quantlib_risks.ZeroHelperVector_empty(self)

    def size(self):
        r"""size(ZeroHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::size_type"""
        return _quantlib_risks.ZeroHelperVector_size(self)

    def swap(self, v):
        r"""swap(ZeroHelperVector self, ZeroHelperVector v)"""
        return _quantlib_risks.ZeroHelperVector_swap(self, v)

    def begin(self):
        r"""begin(ZeroHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::iterator"""
        return _quantlib_risks.ZeroHelperVector_begin(self)

    def end(self):
        r"""end(ZeroHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::iterator"""
        return _quantlib_risks.ZeroHelperVector_end(self)

    def rbegin(self):
        r"""rbegin(ZeroHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::reverse_iterator"""
        return _quantlib_risks.ZeroHelperVector_rbegin(self)

    def rend(self):
        r"""rend(ZeroHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::reverse_iterator"""
        return _quantlib_risks.ZeroHelperVector_rend(self)

    def clear(self):
        r"""clear(ZeroHelperVector self)"""
        return _quantlib_risks.ZeroHelperVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(ZeroHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::allocator_type"""
        return _quantlib_risks.ZeroHelperVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(ZeroHelperVector self)"""
        return _quantlib_risks.ZeroHelperVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(ZeroHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::iterator pos) -> std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::iterator
        erase(ZeroHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::iterator first, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::iterator last) -> std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::iterator
        """
        return _quantlib_risks.ZeroHelperVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ZeroHelperVector self) -> ZeroHelperVector
        __init__(ZeroHelperVector self, ZeroHelperVector other) -> ZeroHelperVector
        __init__(ZeroHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::size_type size) -> ZeroHelperVector
        __init__(ZeroHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::size_type size, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::value_type const & value) -> ZeroHelperVector
        """
        _quantlib_risks.ZeroHelperVector_swiginit(self, _quantlib_risks.new_ZeroHelperVector(*args))

    def push_back(self, x):
        r"""push_back(ZeroHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::value_type const & x)"""
        return _quantlib_risks.ZeroHelperVector_push_back(self, x)

    def front(self):
        r"""front(ZeroHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::value_type const &"""
        return _quantlib_risks.ZeroHelperVector_front(self)

    def back(self):
        r"""back(ZeroHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::value_type const &"""
        return _quantlib_risks.ZeroHelperVector_back(self)

    def assign(self, n, x):
        r"""assign(ZeroHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::size_type n, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::value_type const & x)"""
        return _quantlib_risks.ZeroHelperVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(ZeroHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::size_type new_size)
        resize(ZeroHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::size_type new_size, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::value_type const & x)
        """
        return _quantlib_risks.ZeroHelperVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(ZeroHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::iterator pos, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::value_type const & x) -> std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::iterator
        insert(ZeroHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::iterator pos, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::size_type n, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::value_type const & x)
        """
        return _quantlib_risks.ZeroHelperVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(ZeroHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::size_type n)"""
        return _quantlib_risks.ZeroHelperVector_reserve(self, n)

    def capacity(self):
        r"""capacity(ZeroHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< ZeroInflationTermStructure > > >::size_type"""
        return _quantlib_risks.ZeroHelperVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_ZeroHelperVector

# Register ZeroHelperVector in _quantlib_risks:
_quantlib_risks.ZeroHelperVector_swigregister(ZeroHelperVector)
class YoYHelperVector(object):
    r"""Proxy of C++ std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(YoYHelperVector self) -> SwigPyIterator"""
        return _quantlib_risks.YoYHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(YoYHelperVector self) -> bool"""
        return _quantlib_risks.YoYHelperVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(YoYHelperVector self) -> bool"""
        return _quantlib_risks.YoYHelperVector___bool__(self)

    def __len__(self):
        r"""__len__(YoYHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::size_type"""
        return _quantlib_risks.YoYHelperVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(YoYHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::difference_type i, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::difference_type j) -> YoYHelperVector"""
        return _quantlib_risks.YoYHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(YoYHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::difference_type i, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::difference_type j)
        __setslice__(YoYHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::difference_type i, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::difference_type j, YoYHelperVector v)
        """
        return _quantlib_risks.YoYHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(YoYHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::difference_type i, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::difference_type j)"""
        return _quantlib_risks.YoYHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(YoYHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::difference_type i)
        __delitem__(YoYHelperVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.YoYHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(YoYHelperVector self, SWIGPY_SLICEOBJECT * slice) -> YoYHelperVector
        __getitem__(YoYHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::difference_type i) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::value_type const &
        """
        return _quantlib_risks.YoYHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(YoYHelperVector self, SWIGPY_SLICEOBJECT * slice, YoYHelperVector v)
        __setitem__(YoYHelperVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(YoYHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::difference_type i, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::value_type const & x)
        """
        return _quantlib_risks.YoYHelperVector___setitem__(self, *args)

    def pop(self):
        r"""pop(YoYHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::value_type"""
        return _quantlib_risks.YoYHelperVector_pop(self)

    def append(self, x):
        r"""append(YoYHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::value_type const & x)"""
        return _quantlib_risks.YoYHelperVector_append(self, x)

    def empty(self):
        r"""empty(YoYHelperVector self) -> bool"""
        return _quantlib_risks.YoYHelperVector_empty(self)

    def size(self):
        r"""size(YoYHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::size_type"""
        return _quantlib_risks.YoYHelperVector_size(self)

    def swap(self, v):
        r"""swap(YoYHelperVector self, YoYHelperVector v)"""
        return _quantlib_risks.YoYHelperVector_swap(self, v)

    def begin(self):
        r"""begin(YoYHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::iterator"""
        return _quantlib_risks.YoYHelperVector_begin(self)

    def end(self):
        r"""end(YoYHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::iterator"""
        return _quantlib_risks.YoYHelperVector_end(self)

    def rbegin(self):
        r"""rbegin(YoYHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::reverse_iterator"""
        return _quantlib_risks.YoYHelperVector_rbegin(self)

    def rend(self):
        r"""rend(YoYHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::reverse_iterator"""
        return _quantlib_risks.YoYHelperVector_rend(self)

    def clear(self):
        r"""clear(YoYHelperVector self)"""
        return _quantlib_risks.YoYHelperVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(YoYHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::allocator_type"""
        return _quantlib_risks.YoYHelperVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(YoYHelperVector self)"""
        return _quantlib_risks.YoYHelperVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(YoYHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::iterator pos) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::iterator
        erase(YoYHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::iterator first, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::iterator last) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::iterator
        """
        return _quantlib_risks.YoYHelperVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(YoYHelperVector self) -> YoYHelperVector
        __init__(YoYHelperVector self, YoYHelperVector other) -> YoYHelperVector
        __init__(YoYHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::size_type size) -> YoYHelperVector
        __init__(YoYHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::size_type size, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::value_type const & value) -> YoYHelperVector
        """
        _quantlib_risks.YoYHelperVector_swiginit(self, _quantlib_risks.new_YoYHelperVector(*args))

    def push_back(self, x):
        r"""push_back(YoYHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::value_type const & x)"""
        return _quantlib_risks.YoYHelperVector_push_back(self, x)

    def front(self):
        r"""front(YoYHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::value_type const &"""
        return _quantlib_risks.YoYHelperVector_front(self)

    def back(self):
        r"""back(YoYHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::value_type const &"""
        return _quantlib_risks.YoYHelperVector_back(self)

    def assign(self, n, x):
        r"""assign(YoYHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::size_type n, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::value_type const & x)"""
        return _quantlib_risks.YoYHelperVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(YoYHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::size_type new_size)
        resize(YoYHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::size_type new_size, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::value_type const & x)
        """
        return _quantlib_risks.YoYHelperVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(YoYHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::iterator pos, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::value_type const & x) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::iterator
        insert(YoYHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::iterator pos, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::size_type n, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::value_type const & x)
        """
        return _quantlib_risks.YoYHelperVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(YoYHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::size_type n)"""
        return _quantlib_risks.YoYHelperVector_reserve(self, n)

    def capacity(self):
        r"""capacity(YoYHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYInflationTermStructure > > >::size_type"""
        return _quantlib_risks.YoYHelperVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_YoYHelperVector

# Register YoYHelperVector in _quantlib_risks:
_quantlib_risks.YoYHelperVector_swigregister(YoYHelperVector)
class YoYOptionHelperVector(object):
    r"""Proxy of C++ std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(YoYOptionHelperVector self) -> SwigPyIterator"""
        return _quantlib_risks.YoYOptionHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(YoYOptionHelperVector self) -> bool"""
        return _quantlib_risks.YoYOptionHelperVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(YoYOptionHelperVector self) -> bool"""
        return _quantlib_risks.YoYOptionHelperVector___bool__(self)

    def __len__(self):
        r"""__len__(YoYOptionHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::size_type"""
        return _quantlib_risks.YoYOptionHelperVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(YoYOptionHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::difference_type i, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::difference_type j) -> YoYOptionHelperVector"""
        return _quantlib_risks.YoYOptionHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(YoYOptionHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::difference_type i, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::difference_type j)
        __setslice__(YoYOptionHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::difference_type i, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::difference_type j, YoYOptionHelperVector v)
        """
        return _quantlib_risks.YoYOptionHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(YoYOptionHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::difference_type i, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::difference_type j)"""
        return _quantlib_risks.YoYOptionHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(YoYOptionHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::difference_type i)
        __delitem__(YoYOptionHelperVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.YoYOptionHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(YoYOptionHelperVector self, SWIGPY_SLICEOBJECT * slice) -> YoYOptionHelperVector
        __getitem__(YoYOptionHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::difference_type i) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::value_type const &
        """
        return _quantlib_risks.YoYOptionHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(YoYOptionHelperVector self, SWIGPY_SLICEOBJECT * slice, YoYOptionHelperVector v)
        __setitem__(YoYOptionHelperVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(YoYOptionHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::difference_type i, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::value_type const & x)
        """
        return _quantlib_risks.YoYOptionHelperVector___setitem__(self, *args)

    def pop(self):
        r"""pop(YoYOptionHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::value_type"""
        return _quantlib_risks.YoYOptionHelperVector_pop(self)

    def append(self, x):
        r"""append(YoYOptionHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::value_type const & x)"""
        return _quantlib_risks.YoYOptionHelperVector_append(self, x)

    def empty(self):
        r"""empty(YoYOptionHelperVector self) -> bool"""
        return _quantlib_risks.YoYOptionHelperVector_empty(self)

    def size(self):
        r"""size(YoYOptionHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::size_type"""
        return _quantlib_risks.YoYOptionHelperVector_size(self)

    def swap(self, v):
        r"""swap(YoYOptionHelperVector self, YoYOptionHelperVector v)"""
        return _quantlib_risks.YoYOptionHelperVector_swap(self, v)

    def begin(self):
        r"""begin(YoYOptionHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::iterator"""
        return _quantlib_risks.YoYOptionHelperVector_begin(self)

    def end(self):
        r"""end(YoYOptionHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::iterator"""
        return _quantlib_risks.YoYOptionHelperVector_end(self)

    def rbegin(self):
        r"""rbegin(YoYOptionHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::reverse_iterator"""
        return _quantlib_risks.YoYOptionHelperVector_rbegin(self)

    def rend(self):
        r"""rend(YoYOptionHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::reverse_iterator"""
        return _quantlib_risks.YoYOptionHelperVector_rend(self)

    def clear(self):
        r"""clear(YoYOptionHelperVector self)"""
        return _quantlib_risks.YoYOptionHelperVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(YoYOptionHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::allocator_type"""
        return _quantlib_risks.YoYOptionHelperVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(YoYOptionHelperVector self)"""
        return _quantlib_risks.YoYOptionHelperVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(YoYOptionHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::iterator pos) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::iterator
        erase(YoYOptionHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::iterator first, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::iterator last) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::iterator
        """
        return _quantlib_risks.YoYOptionHelperVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(YoYOptionHelperVector self) -> YoYOptionHelperVector
        __init__(YoYOptionHelperVector self, YoYOptionHelperVector other) -> YoYOptionHelperVector
        __init__(YoYOptionHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::size_type size) -> YoYOptionHelperVector
        __init__(YoYOptionHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::size_type size, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::value_type const & value) -> YoYOptionHelperVector
        """
        _quantlib_risks.YoYOptionHelperVector_swiginit(self, _quantlib_risks.new_YoYOptionHelperVector(*args))

    def push_back(self, x):
        r"""push_back(YoYOptionHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::value_type const & x)"""
        return _quantlib_risks.YoYOptionHelperVector_push_back(self, x)

    def front(self):
        r"""front(YoYOptionHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::value_type const &"""
        return _quantlib_risks.YoYOptionHelperVector_front(self)

    def back(self):
        r"""back(YoYOptionHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::value_type const &"""
        return _quantlib_risks.YoYOptionHelperVector_back(self)

    def assign(self, n, x):
        r"""assign(YoYOptionHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::size_type n, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::value_type const & x)"""
        return _quantlib_risks.YoYOptionHelperVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(YoYOptionHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::size_type new_size)
        resize(YoYOptionHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::size_type new_size, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::value_type const & x)
        """
        return _quantlib_risks.YoYOptionHelperVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(YoYOptionHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::iterator pos, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::value_type const & x) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::iterator
        insert(YoYOptionHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::iterator pos, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::size_type n, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::value_type const & x)
        """
        return _quantlib_risks.YoYOptionHelperVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(YoYOptionHelperVector self, std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::size_type n)"""
        return _quantlib_risks.YoYOptionHelperVector_reserve(self, n)

    def capacity(self):
        r"""capacity(YoYOptionHelperVector self) -> std::vector< ext::shared_ptr< BootstrapHelper< YoYOptionletVolatilitySurface > > >::size_type"""
        return _quantlib_risks.YoYOptionHelperVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_YoYOptionHelperVector

# Register YoYOptionHelperVector in _quantlib_risks:
_quantlib_risks.YoYOptionHelperVector_swigregister(YoYOptionHelperVector)
class ZeroCouponInflationSwapHelper(ZeroHelper):
    r"""Proxy of C++ ZeroCouponInflationSwapHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, quote, lag, maturity, calendar, bcd, dayCounter, index, observationInterpolation, nominalTS):
        r"""__init__(ZeroCouponInflationSwapHelper self, QuoteHandle quote, Period lag, Date maturity, Calendar calendar, BusinessDayConvention bcd, DayCounter dayCounter, ext::shared_ptr< ZeroInflationIndex > const & index, CPI::InterpolationType observationInterpolation, YieldTermStructureHandle nominalTS) -> ZeroCouponInflationSwapHelper"""
        _quantlib_risks.ZeroCouponInflationSwapHelper_swiginit(self, _quantlib_risks.new_ZeroCouponInflationSwapHelper(quote, lag, maturity, calendar, bcd, dayCounter, index, observationInterpolation, nominalTS))
    __swig_destroy__ = _quantlib_risks.delete_ZeroCouponInflationSwapHelper

# Register ZeroCouponInflationSwapHelper in _quantlib_risks:
_quantlib_risks.ZeroCouponInflationSwapHelper_swigregister(ZeroCouponInflationSwapHelper)
class YearOnYearInflationSwapHelper(YoYHelper):
    r"""Proxy of C++ YearOnYearInflationSwapHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, quote, lag, maturity, calendar, bdc, dayCounter, index, nominalTS):
        r"""__init__(YearOnYearInflationSwapHelper self, QuoteHandle quote, Period lag, Date maturity, Calendar calendar, BusinessDayConvention bdc, DayCounter dayCounter, ext::shared_ptr< YoYInflationIndex > const & index, YieldTermStructureHandle nominalTS) -> YearOnYearInflationSwapHelper"""
        _quantlib_risks.YearOnYearInflationSwapHelper_swiginit(self, _quantlib_risks.new_YearOnYearInflationSwapHelper(quote, lag, maturity, calendar, bdc, dayCounter, index, nominalTS))
    __swig_destroy__ = _quantlib_risks.delete_YearOnYearInflationSwapHelper

# Register YearOnYearInflationSwapHelper in _quantlib_risks:
_quantlib_risks.YearOnYearInflationSwapHelper_swigregister(YearOnYearInflationSwapHelper)
class PiecewiseZeroInflation(ZeroInflationTermStructure):
    r"""Proxy of C++ PiecewiseZeroInflationCurve< Linear > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(PiecewiseZeroInflation self, Date referenceDate, Calendar calendar, DayCounter dayCounter, Period lag, Frequency frequency, Rate baseRate, ZeroHelperVector instruments, Real accuracy=1.0e-12, Linear i=Linear()) -> PiecewiseZeroInflation"""
        _quantlib_risks.PiecewiseZeroInflation_swiginit(self, _quantlib_risks.new_PiecewiseZeroInflation(*args))

    def dates(self):
        r"""dates(PiecewiseZeroInflation self) -> DateVector"""
        return _quantlib_risks.PiecewiseZeroInflation_dates(self)

    def times(self):
        r"""times(PiecewiseZeroInflation self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.PiecewiseZeroInflation_times(self)

    def nodes(self):
        r"""nodes(PiecewiseZeroInflation self) -> std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >"""
        return _quantlib_risks.PiecewiseZeroInflation_nodes(self)
    __swig_destroy__ = _quantlib_risks.delete_PiecewiseZeroInflation

# Register PiecewiseZeroInflation in _quantlib_risks:
_quantlib_risks.PiecewiseZeroInflation_swigregister(PiecewiseZeroInflation)
class PiecewiseYoYInflation(YoYInflationTermStructure):
    r"""Proxy of C++ PiecewiseYoYInflationCurve< Linear > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(PiecewiseYoYInflation self, Date referenceDate, Calendar calendar, DayCounter dayCounter, Period lag, Frequency frequency, bool indexIsInterpolated, Rate baseRate, YoYHelperVector instruments, Real accuracy=1.0e-12, Linear i=Linear()) -> PiecewiseYoYInflation"""
        _quantlib_risks.PiecewiseYoYInflation_swiginit(self, _quantlib_risks.new_PiecewiseYoYInflation(*args, **kwargs))

    def dates(self):
        r"""dates(PiecewiseYoYInflation self) -> DateVector"""
        return _quantlib_risks.PiecewiseYoYInflation_dates(self)

    def times(self):
        r"""times(PiecewiseYoYInflation self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.PiecewiseYoYInflation_times(self)

    def nodes(self):
        r"""nodes(PiecewiseYoYInflation self) -> std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >"""
        return _quantlib_risks.PiecewiseYoYInflation_nodes(self)
    __swig_destroy__ = _quantlib_risks.delete_PiecewiseYoYInflation

# Register PiecewiseYoYInflation in _quantlib_risks:
_quantlib_risks.PiecewiseYoYInflation_swigregister(PiecewiseYoYInflation)
class DatePair(object):
    r"""Proxy of C++ std::pair< Date,Date > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DatePair self) -> DatePair
        __init__(DatePair self, Date first, Date second) -> DatePair
        __init__(DatePair self, DatePair other) -> DatePair
        """
        _quantlib_risks.DatePair_swiginit(self, _quantlib_risks.new_DatePair(*args))
    first = property(_quantlib_risks.DatePair_first_get, _quantlib_risks.DatePair_first_set, doc=r"""first : Date""")
    second = property(_quantlib_risks.DatePair_second_get, _quantlib_risks.DatePair_second_set, doc=r"""second : Date""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _quantlib_risks.delete_DatePair

# Register DatePair in _quantlib_risks:
_quantlib_risks.DatePair_swigregister(DatePair)

def inflationPeriod(d, f):
    r"""inflationPeriod(Date d, Frequency f) -> DatePair"""
    return _quantlib_risks.inflationPeriod(d, f)

def inflationYearFraction(f, indexIsInterpolated, dayCount, d1, d2):
    r"""inflationYearFraction(Frequency f, bool indexIsInterpolated, DayCounter dayCount, Date d1, Date d2) -> Time"""
    return _quantlib_risks.inflationYearFraction(f, indexIsInterpolated, dayCount, d1, d2)

def inflationBaseDate(referenceDate, observationLag, frequency, indexIsInterpolated):
    r"""inflationBaseDate(Date referenceDate, Period observationLag, Frequency frequency, bool indexIsInterpolated) -> Date"""
    return _quantlib_risks.inflationBaseDate(referenceDate, observationLag, frequency, indexIsInterpolated)
class YoYInflationCouponPricer(object):
    r"""Proxy of C++ YoYInflationCouponPricer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _quantlib_risks.delete_YoYInflationCouponPricer

# Register YoYInflationCouponPricer in _quantlib_risks:
_quantlib_risks.YoYInflationCouponPricer_swigregister(YoYInflationCouponPricer)

def setCouponPricer(*args):
    r"""
    setCouponPricer(Leg arg1, ext::shared_ptr< FloatingRateCouponPricer > const & arg2)
    setCouponPricer(Leg arg1, ext::shared_ptr< EquityCashFlowPricer > const & arg2)
    setCouponPricer(Leg arg1, ext::shared_ptr< YoYInflationCouponPricer > const & arg2)
    """
    return _quantlib_risks.setCouponPricer(*args)
class YoYInflationCoupon(InflationCoupon):
    r"""Proxy of C++ YoYInflationCoupon class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(YoYInflationCoupon self, Date paymentDate, Real nominal, Date startDate, Date endDate, Natural fixingDays, ext::shared_ptr< YoYInflationIndex > const & index, Period observationLag, DayCounter dayCounter, Real gearing=1.0, Spread spread=0.0, Date refPeriodStart=Date(), Date refPeriodEnd=Date()) -> YoYInflationCoupon"""
        _quantlib_risks.YoYInflationCoupon_swiginit(self, _quantlib_risks.new_YoYInflationCoupon(*args))

    def gearing(self):
        r"""gearing(YoYInflationCoupon self) -> Real"""
        return _quantlib_risks.YoYInflationCoupon_gearing(self)

    def spread(self):
        r"""spread(YoYInflationCoupon self) -> Spread"""
        return _quantlib_risks.YoYInflationCoupon_spread(self)

    def adjustedFixing(self):
        r"""adjustedFixing(YoYInflationCoupon self) -> Rate"""
        return _quantlib_risks.YoYInflationCoupon_adjustedFixing(self)

    def yoyIndex(self):
        r"""yoyIndex(YoYInflationCoupon self) -> ext::shared_ptr< YoYInflationIndex >"""
        return _quantlib_risks.YoYInflationCoupon_yoyIndex(self)
    __swig_destroy__ = _quantlib_risks.delete_YoYInflationCoupon

# Register YoYInflationCoupon in _quantlib_risks:
_quantlib_risks.YoYInflationCoupon_swigregister(YoYInflationCoupon)

def as_yoy_inflation_coupon(cf):
    r"""as_yoy_inflation_coupon(ext::shared_ptr< CashFlow > const & cf) -> ext::shared_ptr< YoYInflationCoupon >"""
    return _quantlib_risks.as_yoy_inflation_coupon(cf)
class CappedFlooredYoYInflationCoupon(YoYInflationCoupon):
    r"""Proxy of C++ CappedFlooredYoYInflationCoupon class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(CappedFlooredYoYInflationCoupon self, Date paymentDate, Real nominal, Date startDate, Date endDate, Natural fixingDays, ext::shared_ptr< YoYInflationIndex > const & index, Period observationLag, DayCounter dayCounter, Real gearing=1.0, Spread spread=0.0, Rate const cap=Null< Rate >(), Rate const floor=Null< Rate >(), Date refPeriodStart=Date(), Date refPeriodEnd=Date()) -> CappedFlooredYoYInflationCoupon"""
        _quantlib_risks.CappedFlooredYoYInflationCoupon_swiginit(self, _quantlib_risks.new_CappedFlooredYoYInflationCoupon(*args))

    def rate(self):
        r"""rate(CappedFlooredYoYInflationCoupon self) -> Rate"""
        return _quantlib_risks.CappedFlooredYoYInflationCoupon_rate(self)

    def cap(self):
        r"""cap(CappedFlooredYoYInflationCoupon self) -> Rate"""
        return _quantlib_risks.CappedFlooredYoYInflationCoupon_cap(self)

    def floor(self):
        r"""floor(CappedFlooredYoYInflationCoupon self) -> Rate"""
        return _quantlib_risks.CappedFlooredYoYInflationCoupon_floor(self)

    def effectiveCap(self):
        r"""effectiveCap(CappedFlooredYoYInflationCoupon self) -> Rate"""
        return _quantlib_risks.CappedFlooredYoYInflationCoupon_effectiveCap(self)

    def effectiveFloor(self):
        r"""effectiveFloor(CappedFlooredYoYInflationCoupon self) -> Rate"""
        return _quantlib_risks.CappedFlooredYoYInflationCoupon_effectiveFloor(self)

    def underlyingRate(self):
        r"""underlyingRate(CappedFlooredYoYInflationCoupon self) -> Rate"""
        return _quantlib_risks.CappedFlooredYoYInflationCoupon_underlyingRate(self)

    def isCapped(self):
        r"""isCapped(CappedFlooredYoYInflationCoupon self) -> bool"""
        return _quantlib_risks.CappedFlooredYoYInflationCoupon_isCapped(self)

    def isFloored(self):
        r"""isFloored(CappedFlooredYoYInflationCoupon self) -> bool"""
        return _quantlib_risks.CappedFlooredYoYInflationCoupon_isFloored(self)
    __swig_destroy__ = _quantlib_risks.delete_CappedFlooredYoYInflationCoupon

# Register CappedFlooredYoYInflationCoupon in _quantlib_risks:
_quantlib_risks.CappedFlooredYoYInflationCoupon_swigregister(CappedFlooredYoYInflationCoupon)

def as_capped_floored_yoy_inflation_coupon(cf):
    r"""as_capped_floored_yoy_inflation_coupon(ext::shared_ptr< CashFlow > const & cf) -> ext::shared_ptr< CappedFlooredYoYInflationCoupon >"""
    return _quantlib_risks.as_capped_floored_yoy_inflation_coupon(cf)

def yoyInflationLeg(*args, **kwargs):
    r"""yoyInflationLeg(Schedule schedule, Calendar calendar, ext::shared_ptr< YoYInflationIndex > const & index, Period observationLag, std::vector< Real,std::allocator< Real > > const & notionals, DayCounter paymentDayCounter, BusinessDayConvention paymentAdjustment=Following, Natural fixingDays=0, std::vector< Real,std::allocator< Real > > const & gearings=std::vector< Real >(), std::vector< Spread,std::allocator< Spread > > const & spreads=std::vector< Spread >(), std::vector< Rate,std::allocator< Rate > > const & caps=std::vector< Rate >(), std::vector< Rate,std::allocator< Rate > > const & floors=std::vector< Rate >()) -> Leg"""
    return _quantlib_risks.yoyInflationLeg(*args, **kwargs)
class BlackYoYInflationCouponPricer(YoYInflationCouponPricer):
    r"""Proxy of C++ BlackYoYInflationCouponPricer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, capletVol, nominalTermStructure):
        r"""__init__(BlackYoYInflationCouponPricer self, YoYOptionletVolatilitySurfaceHandle capletVol, YieldTermStructureHandle nominalTermStructure) -> BlackYoYInflationCouponPricer"""
        _quantlib_risks.BlackYoYInflationCouponPricer_swiginit(self, _quantlib_risks.new_BlackYoYInflationCouponPricer(capletVol, nominalTermStructure))
    __swig_destroy__ = _quantlib_risks.delete_BlackYoYInflationCouponPricer

# Register BlackYoYInflationCouponPricer in _quantlib_risks:
_quantlib_risks.BlackYoYInflationCouponPricer_swigregister(BlackYoYInflationCouponPricer)
class UnitDisplacedBlackYoYInflationCouponPricer(YoYInflationCouponPricer):
    r"""Proxy of C++ UnitDisplacedBlackYoYInflationCouponPricer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, capletVol, nominalTermStructure):
        r"""__init__(UnitDisplacedBlackYoYInflationCouponPricer self, YoYOptionletVolatilitySurfaceHandle capletVol, YieldTermStructureHandle nominalTermStructure) -> UnitDisplacedBlackYoYInflationCouponPricer"""
        _quantlib_risks.UnitDisplacedBlackYoYInflationCouponPricer_swiginit(self, _quantlib_risks.new_UnitDisplacedBlackYoYInflationCouponPricer(capletVol, nominalTermStructure))
    __swig_destroy__ = _quantlib_risks.delete_UnitDisplacedBlackYoYInflationCouponPricer

# Register UnitDisplacedBlackYoYInflationCouponPricer in _quantlib_risks:
_quantlib_risks.UnitDisplacedBlackYoYInflationCouponPricer_swigregister(UnitDisplacedBlackYoYInflationCouponPricer)
class BachelierYoYInflationCouponPricer(YoYInflationCouponPricer):
    r"""Proxy of C++ BachelierYoYInflationCouponPricer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, capletVol, nominalTermStructure):
        r"""__init__(BachelierYoYInflationCouponPricer self, YoYOptionletVolatilitySurfaceHandle capletVol, YieldTermStructureHandle nominalTermStructure) -> BachelierYoYInflationCouponPricer"""
        _quantlib_risks.BachelierYoYInflationCouponPricer_swiginit(self, _quantlib_risks.new_BachelierYoYInflationCouponPricer(capletVol, nominalTermStructure))
    __swig_destroy__ = _quantlib_risks.delete_BachelierYoYInflationCouponPricer

# Register BachelierYoYInflationCouponPricer in _quantlib_risks:
_quantlib_risks.BachelierYoYInflationCouponPricer_swigregister(BachelierYoYInflationCouponPricer)
class ZeroCouponInflationSwap(Swap):
    r"""Proxy of C++ ZeroCouponInflationSwap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ZeroCouponInflationSwap self, Swap::Type type, Real nominal, Date start, Date maturity, Calendar calendar, BusinessDayConvention convention, DayCounter dayCounter, Rate fixedRate, ext::shared_ptr< ZeroInflationIndex > const & index, Period lag, CPI::InterpolationType observationInterpolation, bool adjustInfObsDates=False, Calendar infCalendar=Calendar(), BusinessDayConvention infConvention=BusinessDayConvention()) -> ZeroCouponInflationSwap"""
        _quantlib_risks.ZeroCouponInflationSwap_swiginit(self, _quantlib_risks.new_ZeroCouponInflationSwap(*args))

    def fairRate(self):
        r"""fairRate(ZeroCouponInflationSwap self) -> Rate"""
        return _quantlib_risks.ZeroCouponInflationSwap_fairRate(self)

    def fixedLegNPV(self):
        r"""fixedLegNPV(ZeroCouponInflationSwap self) -> Real"""
        return _quantlib_risks.ZeroCouponInflationSwap_fixedLegNPV(self)

    def inflationLegNPV(self):
        r"""inflationLegNPV(ZeroCouponInflationSwap self) -> Real"""
        return _quantlib_risks.ZeroCouponInflationSwap_inflationLegNPV(self)

    def fixedLeg(self):
        r"""fixedLeg(ZeroCouponInflationSwap self) -> Leg"""
        return _quantlib_risks.ZeroCouponInflationSwap_fixedLeg(self)

    def inflationLeg(self):
        r"""inflationLeg(ZeroCouponInflationSwap self) -> Leg"""
        return _quantlib_risks.ZeroCouponInflationSwap_inflationLeg(self)

    def type(self):
        r"""type(ZeroCouponInflationSwap self) -> Swap::Type"""
        return _quantlib_risks.ZeroCouponInflationSwap_type(self)
    __swig_destroy__ = _quantlib_risks.delete_ZeroCouponInflationSwap

# Register ZeroCouponInflationSwap in _quantlib_risks:
_quantlib_risks.ZeroCouponInflationSwap_swigregister(ZeroCouponInflationSwap)
class YearOnYearInflationSwap(Swap):
    r"""Proxy of C++ YearOnYearInflationSwap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type, nominal, fixedSchedule, fixedRate, fixedDayCounter, yoySchedule, index, lag, spread, yoyDayCounter, paymentCalendar, paymentConvention=Following):
        r"""__init__(YearOnYearInflationSwap self, Swap::Type type, Real nominal, Schedule fixedSchedule, Rate fixedRate, DayCounter fixedDayCounter, Schedule yoySchedule, ext::shared_ptr< YoYInflationIndex > const & index, Period lag, Spread spread, DayCounter yoyDayCounter, Calendar paymentCalendar, BusinessDayConvention paymentConvention=Following) -> YearOnYearInflationSwap"""
        _quantlib_risks.YearOnYearInflationSwap_swiginit(self, _quantlib_risks.new_YearOnYearInflationSwap(type, nominal, fixedSchedule, fixedRate, fixedDayCounter, yoySchedule, index, lag, spread, yoyDayCounter, paymentCalendar, paymentConvention))

    def fairRate(self):
        r"""fairRate(YearOnYearInflationSwap self) -> Rate"""
        return _quantlib_risks.YearOnYearInflationSwap_fairRate(self)

    def fixedLegNPV(self):
        r"""fixedLegNPV(YearOnYearInflationSwap self) -> Real"""
        return _quantlib_risks.YearOnYearInflationSwap_fixedLegNPV(self)

    def yoyLegNPV(self):
        r"""yoyLegNPV(YearOnYearInflationSwap self) -> Real"""
        return _quantlib_risks.YearOnYearInflationSwap_yoyLegNPV(self)

    def fairSpread(self):
        r"""fairSpread(YearOnYearInflationSwap self) -> Spread"""
        return _quantlib_risks.YearOnYearInflationSwap_fairSpread(self)

    def fixedLeg(self):
        r"""fixedLeg(YearOnYearInflationSwap self) -> Leg"""
        return _quantlib_risks.YearOnYearInflationSwap_fixedLeg(self)

    def yoyLeg(self):
        r"""yoyLeg(YearOnYearInflationSwap self) -> Leg"""
        return _quantlib_risks.YearOnYearInflationSwap_yoyLeg(self)
    __swig_destroy__ = _quantlib_risks.delete_YearOnYearInflationSwap

# Register YearOnYearInflationSwap in _quantlib_risks:
_quantlib_risks.YearOnYearInflationSwap_swigregister(YearOnYearInflationSwap)
class CPISwap(Swap):
    r"""Proxy of C++ CPISwap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(CPISwap self, Swap::Type type, Real nominal, bool subtractInflationNominal, Spread spread, DayCounter floatDayCount, Schedule floatSchedule, BusinessDayConvention const & floatRoll, Natural fixingDays, ext::shared_ptr< IborIndex > const & floatIndex, Rate fixedRate, Real baseCPI, DayCounter fixedDayCount, Schedule fixedSchedule, BusinessDayConvention const & fixedRoll, Period observationLag, ext::shared_ptr< ZeroInflationIndex > const & fixedIndex, CPI::InterpolationType observationInterpolation=AsIndex, Real inflationNominal=Null< Real >()) -> CPISwap"""
        _quantlib_risks.CPISwap_swiginit(self, _quantlib_risks.new_CPISwap(*args))

    def fairRate(self):
        r"""fairRate(CPISwap self) -> Rate"""
        return _quantlib_risks.CPISwap_fairRate(self)

    def floatLegNPV(self):
        r"""floatLegNPV(CPISwap self) -> Real"""
        return _quantlib_risks.CPISwap_floatLegNPV(self)

    def fairSpread(self):
        r"""fairSpread(CPISwap self) -> Spread"""
        return _quantlib_risks.CPISwap_fairSpread(self)

    def fixedLegNPV(self):
        r"""fixedLegNPV(CPISwap self) -> Real"""
        return _quantlib_risks.CPISwap_fixedLegNPV(self)

    def cpiLeg(self):
        r"""cpiLeg(CPISwap self) -> Leg"""
        return _quantlib_risks.CPISwap_cpiLeg(self)

    def floatLeg(self):
        r"""floatLeg(CPISwap self) -> Leg"""
        return _quantlib_risks.CPISwap_floatLeg(self)
    __swig_destroy__ = _quantlib_risks.delete_CPISwap

# Register CPISwap in _quantlib_risks:
_quantlib_risks.CPISwap_swigregister(CPISwap)
class YoYInflationCapFloor(Instrument):
    r"""Proxy of C++ YoYInflationCapFloor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Cap = _quantlib_risks.YoYInflationCapFloor_Cap
    
    Floor = _quantlib_risks.YoYInflationCapFloor_Floor
    
    Collar = _quantlib_risks.YoYInflationCapFloor_Collar
    

    def __init__(self, type, yoyLeg, strikes):
        r"""__init__(YoYInflationCapFloor self, YoYInflationCapFloor::Type type, Leg yoyLeg, std::vector< Rate,std::allocator< Rate > > const & strikes) -> YoYInflationCapFloor"""
        _quantlib_risks.YoYInflationCapFloor_swiginit(self, _quantlib_risks.new_YoYInflationCapFloor(type, yoyLeg, strikes))

    def impliedVolatility(self, price, curve, guess, accuracy=1.0e-4, maxEvaluations=100, minVol=1.0e-7, maxVol=4.0):
        r"""impliedVolatility(YoYInflationCapFloor self, Real price, YoYInflationTermStructureHandle curve, Volatility guess, Real accuracy=1.0e-4, Size maxEvaluations=100, Volatility minVol=1.0e-7, Volatility maxVol=4.0) -> Volatility"""
        return _quantlib_risks.YoYInflationCapFloor_impliedVolatility(self, price, curve, guess, accuracy, maxEvaluations, minVol, maxVol)

    def optionletPrices(self):
        r"""optionletPrices(YoYInflationCapFloor self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.YoYInflationCapFloor_optionletPrices(self)
    __swig_destroy__ = _quantlib_risks.delete_YoYInflationCapFloor

# Register YoYInflationCapFloor in _quantlib_risks:
_quantlib_risks.YoYInflationCapFloor_swigregister(YoYInflationCapFloor)
class YoYInflationCap(YoYInflationCapFloor):
    r"""Proxy of C++ YoYInflationCap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, leg, capRates):
        r"""__init__(YoYInflationCap self, Leg leg, std::vector< Rate,std::allocator< Rate > > const & capRates) -> YoYInflationCap"""
        _quantlib_risks.YoYInflationCap_swiginit(self, _quantlib_risks.new_YoYInflationCap(leg, capRates))
    __swig_destroy__ = _quantlib_risks.delete_YoYInflationCap

# Register YoYInflationCap in _quantlib_risks:
_quantlib_risks.YoYInflationCap_swigregister(YoYInflationCap)
class YoYInflationFloor(YoYInflationCapFloor):
    r"""Proxy of C++ YoYInflationFloor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, leg, floorRates):
        r"""__init__(YoYInflationFloor self, Leg leg, std::vector< Rate,std::allocator< Rate > > const & floorRates) -> YoYInflationFloor"""
        _quantlib_risks.YoYInflationFloor_swiginit(self, _quantlib_risks.new_YoYInflationFloor(leg, floorRates))
    __swig_destroy__ = _quantlib_risks.delete_YoYInflationFloor

# Register YoYInflationFloor in _quantlib_risks:
_quantlib_risks.YoYInflationFloor_swigregister(YoYInflationFloor)
class YoYInflationCollar(YoYInflationCapFloor):
    r"""Proxy of C++ YoYInflationCollar class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, leg, capRates, floorRates):
        r"""__init__(YoYInflationCollar self, Leg leg, std::vector< Rate,std::allocator< Rate > > const & capRates, std::vector< Rate,std::allocator< Rate > > const & floorRates) -> YoYInflationCollar"""
        _quantlib_risks.YoYInflationCollar_swiginit(self, _quantlib_risks.new_YoYInflationCollar(leg, capRates, floorRates))
    __swig_destroy__ = _quantlib_risks.delete_YoYInflationCollar

# Register YoYInflationCollar in _quantlib_risks:
_quantlib_risks.YoYInflationCollar_swigregister(YoYInflationCollar)
class ZeroInflationCurve(ZeroInflationTermStructure):
    r"""Proxy of C++ InterpolatedZeroInflationCurve< Linear > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ZeroInflationCurve self, Date referenceDate, Calendar calendar, DayCounter dayCounter, Period lag, Frequency frequency, DateVector dates, std::vector< Rate,std::allocator< Rate > > const & rates, Linear interpolator=Linear()) -> ZeroInflationCurve"""
        _quantlib_risks.ZeroInflationCurve_swiginit(self, _quantlib_risks.new_ZeroInflationCurve(*args))

    def dates(self):
        r"""dates(ZeroInflationCurve self) -> DateVector"""
        return _quantlib_risks.ZeroInflationCurve_dates(self)

    def times(self):
        r"""times(ZeroInflationCurve self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.ZeroInflationCurve_times(self)

    def data(self):
        r"""data(ZeroInflationCurve self) -> std::vector< Real,std::allocator< Real > > const &"""
        return _quantlib_risks.ZeroInflationCurve_data(self)

    def rates(self):
        r"""rates(ZeroInflationCurve self) -> std::vector< Rate,std::allocator< Rate > > const &"""
        return _quantlib_risks.ZeroInflationCurve_rates(self)

    def nodes(self):
        r"""nodes(ZeroInflationCurve self) -> std::vector< std::pair< Date,Rate >,std::allocator< std::pair< Date,Rate > > >"""
        return _quantlib_risks.ZeroInflationCurve_nodes(self)
    __swig_destroy__ = _quantlib_risks.delete_ZeroInflationCurve

# Register ZeroInflationCurve in _quantlib_risks:
_quantlib_risks.ZeroInflationCurve_swigregister(ZeroInflationCurve)
class YoYInflationCurve(YoYInflationTermStructure):
    r"""Proxy of C++ InterpolatedYoYInflationCurve< Linear > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(YoYInflationCurve self, Date referenceDate, Calendar calendar, DayCounter dayCounter, Period lag, Frequency frequency, bool indexIsInterpolated, DateVector dates, std::vector< Rate,std::allocator< Rate > > const & rates, Linear interpolator=Linear()) -> YoYInflationCurve"""
        _quantlib_risks.YoYInflationCurve_swiginit(self, _quantlib_risks.new_YoYInflationCurve(*args, **kwargs))

    def dates(self):
        r"""dates(YoYInflationCurve self) -> DateVector"""
        return _quantlib_risks.YoYInflationCurve_dates(self)

    def times(self):
        r"""times(YoYInflationCurve self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.YoYInflationCurve_times(self)

    def data(self):
        r"""data(YoYInflationCurve self) -> std::vector< Real,std::allocator< Real > > const &"""
        return _quantlib_risks.YoYInflationCurve_data(self)

    def rates(self):
        r"""rates(YoYInflationCurve self) -> std::vector< Rate,std::allocator< Rate > > const &"""
        return _quantlib_risks.YoYInflationCurve_rates(self)

    def nodes(self):
        r"""nodes(YoYInflationCurve self) -> std::vector< std::pair< Date,Rate >,std::allocator< std::pair< Date,Rate > > >"""
        return _quantlib_risks.YoYInflationCurve_nodes(self)
    __swig_destroy__ = _quantlib_risks.delete_YoYInflationCurve

# Register YoYInflationCurve in _quantlib_risks:
_quantlib_risks.YoYInflationCurve_swigregister(YoYInflationCurve)
class YoYCapFloorTermPriceSurface(InflationTermStructure):
    r"""Proxy of C++ YoYCapFloorTermPriceSurface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def atmYoYSwapTimeRates(self):
        r"""atmYoYSwapTimeRates(YoYCapFloorTermPriceSurface self) -> std::pair< std::vector< Time,std::allocator< Time > >,std::vector< Rate,std::allocator< Rate > > >"""
        return _quantlib_risks.YoYCapFloorTermPriceSurface_atmYoYSwapTimeRates(self)

    def atmYoYSwapDateRates(self):
        r"""atmYoYSwapDateRates(YoYCapFloorTermPriceSurface self) -> std::pair< std::vector< Date,std::allocator< Date > >,std::vector< Rate,std::allocator< Rate > > >"""
        return _quantlib_risks.YoYCapFloorTermPriceSurface_atmYoYSwapDateRates(self)

    def YoYTS(self):
        r"""YoYTS(YoYCapFloorTermPriceSurface self) -> ext::shared_ptr< YoYInflationTermStructure >"""
        return _quantlib_risks.YoYCapFloorTermPriceSurface_YoYTS(self)

    def yoyIndex(self):
        r"""yoyIndex(YoYCapFloorTermPriceSurface self) -> ext::shared_ptr< YoYInflationIndex >"""
        return _quantlib_risks.YoYCapFloorTermPriceSurface_yoyIndex(self)

    def businessDayConvention(self):
        r"""businessDayConvention(YoYCapFloorTermPriceSurface self) -> BusinessDayConvention"""
        return _quantlib_risks.YoYCapFloorTermPriceSurface_businessDayConvention(self)

    def fixingDays(self):
        r"""fixingDays(YoYCapFloorTermPriceSurface self) -> Natural"""
        return _quantlib_risks.YoYCapFloorTermPriceSurface_fixingDays(self)

    def price(self, *args):
        r"""
        price(YoYCapFloorTermPriceSurface self, Date d, Rate k) -> Real
        price(YoYCapFloorTermPriceSurface self, Period d, Rate k) -> Real
        """
        return _quantlib_risks.YoYCapFloorTermPriceSurface_price(self, *args)

    def capPrice(self, *args):
        r"""
        capPrice(YoYCapFloorTermPriceSurface self, Date d, Rate k) -> Real
        capPrice(YoYCapFloorTermPriceSurface self, Period d, Rate k) -> Real
        """
        return _quantlib_risks.YoYCapFloorTermPriceSurface_capPrice(self, *args)

    def floorPrice(self, *args):
        r"""
        floorPrice(YoYCapFloorTermPriceSurface self, Date d, Rate k) -> Real
        floorPrice(YoYCapFloorTermPriceSurface self, Period d, Rate k) -> Real
        """
        return _quantlib_risks.YoYCapFloorTermPriceSurface_floorPrice(self, *args)

    def atmYoYSwapRate(self, *args):
        r"""
        atmYoYSwapRate(YoYCapFloorTermPriceSurface self, Date d, bool extrapolate=True) -> Rate
        atmYoYSwapRate(YoYCapFloorTermPriceSurface self, Period d, bool extrapolate=True) -> Rate
        """
        return _quantlib_risks.YoYCapFloorTermPriceSurface_atmYoYSwapRate(self, *args)

    def atmYoYRate(self, *args):
        r"""
        atmYoYRate(YoYCapFloorTermPriceSurface self, Date d, Period obsLag=Period(-1,Days), bool extrapolate=True) -> Rate
        atmYoYRate(YoYCapFloorTermPriceSurface self, Period d, Period obsLag=Period(-1,Days), bool extrapolate=True) -> Rate
        """
        return _quantlib_risks.YoYCapFloorTermPriceSurface_atmYoYRate(self, *args)

    def strikes(self):
        r"""strikes(YoYCapFloorTermPriceSurface self) -> std::vector< Rate,std::allocator< Rate > >"""
        return _quantlib_risks.YoYCapFloorTermPriceSurface_strikes(self)

    def capStrikes(self):
        r"""capStrikes(YoYCapFloorTermPriceSurface self) -> std::vector< Rate,std::allocator< Rate > >"""
        return _quantlib_risks.YoYCapFloorTermPriceSurface_capStrikes(self)

    def floorStrikes(self):
        r"""floorStrikes(YoYCapFloorTermPriceSurface self) -> std::vector< Rate,std::allocator< Rate > >"""
        return _quantlib_risks.YoYCapFloorTermPriceSurface_floorStrikes(self)

    def maturities(self):
        r"""maturities(YoYCapFloorTermPriceSurface self) -> PeriodVector"""
        return _quantlib_risks.YoYCapFloorTermPriceSurface_maturities(self)

    def minStrike(self):
        r"""minStrike(YoYCapFloorTermPriceSurface self) -> Rate"""
        return _quantlib_risks.YoYCapFloorTermPriceSurface_minStrike(self)

    def maxStrike(self):
        r"""maxStrike(YoYCapFloorTermPriceSurface self) -> Rate"""
        return _quantlib_risks.YoYCapFloorTermPriceSurface_maxStrike(self)

    def minMaturity(self):
        r"""minMaturity(YoYCapFloorTermPriceSurface self) -> Date"""
        return _quantlib_risks.YoYCapFloorTermPriceSurface_minMaturity(self)

    def maxMaturity(self):
        r"""maxMaturity(YoYCapFloorTermPriceSurface self) -> Date"""
        return _quantlib_risks.YoYCapFloorTermPriceSurface_maxMaturity(self)

    def yoyOptionDateFromTenor(self, p):
        r"""yoyOptionDateFromTenor(YoYCapFloorTermPriceSurface self, Period p) -> Date"""
        return _quantlib_risks.YoYCapFloorTermPriceSurface_yoyOptionDateFromTenor(self, p)
    __swig_destroy__ = _quantlib_risks.delete_YoYCapFloorTermPriceSurface

# Register YoYCapFloorTermPriceSurface in _quantlib_risks:
_quantlib_risks.YoYCapFloorTermPriceSurface_swigregister(YoYCapFloorTermPriceSurface)
class YoYInflationCapFloorTermPriceSurface(YoYCapFloorTermPriceSurface):
    r"""Proxy of C++ YoYInflationCapFloorTermPriceSurface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(YoYInflationCapFloorTermPriceSurface self, Natural fixingDays, Period yyLag, ext::shared_ptr< YoYInflationIndex > const & yii, Rate baseRate, YieldTermStructureHandle nominal, DayCounter dc, Calendar cal, BusinessDayConvention const & bdc, std::vector< Rate,std::allocator< Rate > > const & cStrikes, std::vector< Rate,std::allocator< Rate > > const & fStrikes, PeriodVector cfMaturities, Matrix cPrice, Matrix fPrice, Bicubic interpolator2d=Bicubic(), Cubic interpolator1d=Cubic()) -> YoYInflationCapFloorTermPriceSurface"""
        _quantlib_risks.YoYInflationCapFloorTermPriceSurface_swiginit(self, _quantlib_risks.new_YoYInflationCapFloorTermPriceSurface(*args))
    __swig_destroy__ = _quantlib_risks.delete_YoYInflationCapFloorTermPriceSurface

# Register YoYInflationCapFloorTermPriceSurface in _quantlib_risks:
_quantlib_risks.YoYInflationCapFloorTermPriceSurface_swigregister(YoYInflationCapFloorTermPriceSurface)
class YoYInflationBlackCapFloorEngine(PricingEngine):
    r"""Proxy of C++ YoYInflationBlackCapFloorEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, vol, nominalTermStructure):
        r"""__init__(YoYInflationBlackCapFloorEngine self, ext::shared_ptr< YoYInflationIndex > const & arg2, YoYOptionletVolatilitySurfaceHandle vol, YieldTermStructureHandle nominalTermStructure) -> YoYInflationBlackCapFloorEngine"""
        _quantlib_risks.YoYInflationBlackCapFloorEngine_swiginit(self, _quantlib_risks.new_YoYInflationBlackCapFloorEngine(arg2, vol, nominalTermStructure))
    __swig_destroy__ = _quantlib_risks.delete_YoYInflationBlackCapFloorEngine

# Register YoYInflationBlackCapFloorEngine in _quantlib_risks:
_quantlib_risks.YoYInflationBlackCapFloorEngine_swigregister(YoYInflationBlackCapFloorEngine)
class YoYInflationUnitDisplacedBlackCapFloorEngine(PricingEngine):
    r"""Proxy of C++ YoYInflationUnitDisplacedBlackCapFloorEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, vol, nominalTermStructure):
        r"""__init__(YoYInflationUnitDisplacedBlackCapFloorEngine self, ext::shared_ptr< YoYInflationIndex > const & arg2, YoYOptionletVolatilitySurfaceHandle vol, YieldTermStructureHandle nominalTermStructure) -> YoYInflationUnitDisplacedBlackCapFloorEngine"""
        _quantlib_risks.YoYInflationUnitDisplacedBlackCapFloorEngine_swiginit(self, _quantlib_risks.new_YoYInflationUnitDisplacedBlackCapFloorEngine(arg2, vol, nominalTermStructure))
    __swig_destroy__ = _quantlib_risks.delete_YoYInflationUnitDisplacedBlackCapFloorEngine

# Register YoYInflationUnitDisplacedBlackCapFloorEngine in _quantlib_risks:
_quantlib_risks.YoYInflationUnitDisplacedBlackCapFloorEngine_swigregister(YoYInflationUnitDisplacedBlackCapFloorEngine)
class YoYInflationBachelierCapFloorEngine(PricingEngine):
    r"""Proxy of C++ YoYInflationBachelierCapFloorEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, vol, nominalTermStructure):
        r"""__init__(YoYInflationBachelierCapFloorEngine self, ext::shared_ptr< YoYInflationIndex > const & arg2, YoYOptionletVolatilitySurfaceHandle vol, YieldTermStructureHandle nominalTermStructure) -> YoYInflationBachelierCapFloorEngine"""
        _quantlib_risks.YoYInflationBachelierCapFloorEngine_swiginit(self, _quantlib_risks.new_YoYInflationBachelierCapFloorEngine(arg2, vol, nominalTermStructure))
    __swig_destroy__ = _quantlib_risks.delete_YoYInflationBachelierCapFloorEngine

# Register YoYInflationBachelierCapFloorEngine in _quantlib_risks:
_quantlib_risks.YoYInflationBachelierCapFloorEngine_swigregister(YoYInflationBachelierCapFloorEngine)
class YoYOptionletHelper(YoYOptionHelper):
    r"""Proxy of C++ YoYOptionletHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, price, notional, capFloorType, lag, yoyDayCounter, paymentCalendar, fixingDays, index, strike, n, pricer):
        r"""__init__(YoYOptionletHelper self, QuoteHandle price, Real notional, YoYInflationCapFloor::Type capFloorType, Period lag, DayCounter yoyDayCounter, Calendar paymentCalendar, Natural fixingDays, ext::shared_ptr< YoYInflationIndex > const & index, Rate strike, Size n, ext::shared_ptr< PricingEngine > const & pricer) -> YoYOptionletHelper"""
        _quantlib_risks.YoYOptionletHelper_swiginit(self, _quantlib_risks.new_YoYOptionletHelper(price, notional, capFloorType, lag, yoyDayCounter, paymentCalendar, fixingDays, index, strike, n, pricer))
    __swig_destroy__ = _quantlib_risks.delete_YoYOptionletHelper

# Register YoYOptionletHelper in _quantlib_risks:
_quantlib_risks.YoYOptionletHelper_swigregister(YoYOptionletHelper)
class YoYOptionletStripper(object):
    r"""Proxy of C++ YoYOptionletStripper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def initialize(self, surf, pricer, slope):
        r"""initialize(YoYOptionletStripper self, ext::shared_ptr< YoYCapFloorTermPriceSurface > const & surf, ext::shared_ptr< PricingEngine > const & pricer, Real slope)"""
        return _quantlib_risks.YoYOptionletStripper_initialize(self, surf, pricer, slope)

    def maxStrike(self):
        r"""maxStrike(YoYOptionletStripper self) -> Rate"""
        return _quantlib_risks.YoYOptionletStripper_maxStrike(self)

    def strikes(self):
        r"""strikes(YoYOptionletStripper self) -> std::vector< Rate,std::allocator< Rate > >"""
        return _quantlib_risks.YoYOptionletStripper_strikes(self)

    def slice(self, d):
        r"""slice(YoYOptionletStripper self, Date d) -> std::pair< std::vector< Rate,std::allocator< Rate > >,std::vector< Volatility,std::allocator< Volatility > > >"""
        return _quantlib_risks.YoYOptionletStripper_slice(self, d)
    __swig_destroy__ = _quantlib_risks.delete_YoYOptionletStripper

# Register YoYOptionletStripper in _quantlib_risks:
_quantlib_risks.YoYOptionletStripper_swigregister(YoYOptionletStripper)
class InterpolatedYoYInflationOptionletStripper(YoYOptionletStripper):
    r"""Proxy of C++ InterpolatedYoYOptionletStripper< Linear > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(InterpolatedYoYInflationOptionletStripper self) -> InterpolatedYoYInflationOptionletStripper"""
        _quantlib_risks.InterpolatedYoYInflationOptionletStripper_swiginit(self, _quantlib_risks.new_InterpolatedYoYInflationOptionletStripper())
    __swig_destroy__ = _quantlib_risks.delete_InterpolatedYoYInflationOptionletStripper

# Register InterpolatedYoYInflationOptionletStripper in _quantlib_risks:
_quantlib_risks.InterpolatedYoYInflationOptionletStripper_swigregister(InterpolatedYoYInflationOptionletStripper)
class InterpolatedYoYInflationOptionletVolatilityCurve(YoYOptionletVolatilitySurface):
    r"""Proxy of C++ InterpolatedYoYOptionletVolatilityCurve< Linear > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(InterpolatedYoYInflationOptionletVolatilityCurve self, Natural settlementDays, Calendar arg3, BusinessDayConvention bdc, DayCounter dc, Period lag, Frequency frequency, bool indexIsInterpolated, DateVector d, std::vector< Volatility,std::allocator< Volatility > > const & v, Rate minStrike, Rate maxStrike, Linear i=Linear()) -> InterpolatedYoYInflationOptionletVolatilityCurve"""
        _quantlib_risks.InterpolatedYoYInflationOptionletVolatilityCurve_swiginit(self, _quantlib_risks.new_InterpolatedYoYInflationOptionletVolatilityCurve(*args))
    __swig_destroy__ = _quantlib_risks.delete_InterpolatedYoYInflationOptionletVolatilityCurve

# Register InterpolatedYoYInflationOptionletVolatilityCurve in _quantlib_risks:
_quantlib_risks.InterpolatedYoYInflationOptionletVolatilityCurve_swigregister(InterpolatedYoYInflationOptionletVolatilityCurve)
class KInterpolatedYoYInflationOptionletVolatilitySurface(YoYOptionletVolatilitySurface):
    r"""Proxy of C++ KInterpolatedYoYOptionletVolatilitySurface< Linear > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(KInterpolatedYoYInflationOptionletVolatilitySurface self, Natural settlementDays, Calendar calendar, BusinessDayConvention bdc, DayCounter dc, Period lag, ext::shared_ptr< YoYCapFloorTermPriceSurface > const & capFloorPrices, ext::shared_ptr< PricingEngine > const & pricer, ext::shared_ptr< YoYOptionletStripper > const & yoyOptionletStripper, Real slope, Linear interpolator=Linear()) -> KInterpolatedYoYInflationOptionletVolatilitySurface"""
        _quantlib_risks.KInterpolatedYoYInflationOptionletVolatilitySurface_swiginit(self, _quantlib_risks.new_KInterpolatedYoYInflationOptionletVolatilitySurface(*args))

    def Dslice(self, d):
        r"""Dslice(KInterpolatedYoYInflationOptionletVolatilitySurface self, Date d) -> std::pair< std::vector< Rate,std::allocator< Rate > >,std::vector< Volatility,std::allocator< Volatility > > >"""
        return _quantlib_risks.KInterpolatedYoYInflationOptionletVolatilitySurface_Dslice(self, d)
    __swig_destroy__ = _quantlib_risks.delete_KInterpolatedYoYInflationOptionletVolatilitySurface

# Register KInterpolatedYoYInflationOptionletVolatilitySurface in _quantlib_risks:
_quantlib_risks.KInterpolatedYoYInflationOptionletVolatilitySurface_swigregister(KInterpolatedYoYInflationOptionletVolatilitySurface)
class ShortRateModel(CalibratedModel):
    r"""Proxy of C++ ShortRateModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _quantlib_risks.delete_ShortRateModel

# Register ShortRateModel in _quantlib_risks:
_quantlib_risks.ShortRateModel_swigregister(ShortRateModel)
class ShortRateModelHandle(object):
    r"""Proxy of C++ Handle< ShortRateModel > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ShortRateModelHandle self, ext::shared_ptr< ShortRateModel > const & arg2=ext::shared_ptr()) -> ShortRateModelHandle"""
        _quantlib_risks.ShortRateModelHandle_swiginit(self, _quantlib_risks.new_ShortRateModelHandle(*args))

    def __deref__(self):
        r"""__deref__(ShortRateModelHandle self) -> ext::shared_ptr< ShortRateModel >"""
        return _quantlib_risks.ShortRateModelHandle___deref__(self)

    def currentLink(self):
        r"""currentLink(ShortRateModelHandle self) -> ext::shared_ptr< ShortRateModel >"""
        return _quantlib_risks.ShortRateModelHandle_currentLink(self)

    def __nonzero__(self):
        r"""__nonzero__(ShortRateModelHandle self) -> bool"""
        return _quantlib_risks.ShortRateModelHandle___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ShortRateModelHandle self) -> bool"""
        return _quantlib_risks.ShortRateModelHandle___bool__(self)

    def asObservable(self):
        r"""asObservable(ShortRateModelHandle self) -> ext::shared_ptr< Observable >"""
        return _quantlib_risks.ShortRateModelHandle_asObservable(self)
    __swig_destroy__ = _quantlib_risks.delete_ShortRateModelHandle

    def params(self):
        r"""params(ShortRateModelHandle self) -> Array"""
        return _quantlib_risks.ShortRateModelHandle_params(self)

    def calibrate(self, *args):
        r"""calibrate(ShortRateModelHandle self, CalibrationHelperVector arg2, OptimizationMethod arg3, EndCriteria arg4, Constraint constraint=Constraint(), std::vector< Real,std::allocator< Real > > const & weights=std::vector< Real >(), BoolVector fixParameters=std::vector< bool >())"""
        return _quantlib_risks.ShortRateModelHandle_calibrate(self, *args)

    def setParams(self, params):
        r"""setParams(ShortRateModelHandle self, Array params)"""
        return _quantlib_risks.ShortRateModelHandle_setParams(self, params)

    def value(self, params, arg3):
        r"""value(ShortRateModelHandle self, Array params, CalibrationHelperVector arg3) -> Real"""
        return _quantlib_risks.ShortRateModelHandle_value(self, params, arg3)

    def constraint(self):
        r"""constraint(ShortRateModelHandle self) -> ext::shared_ptr< Constraint > const &"""
        return _quantlib_risks.ShortRateModelHandle_constraint(self)

    def endCriteria(self):
        r"""endCriteria(ShortRateModelHandle self) -> EndCriteria::Type"""
        return _quantlib_risks.ShortRateModelHandle_endCriteria(self)

    def problemValues(self):
        r"""problemValues(ShortRateModelHandle self) -> Array"""
        return _quantlib_risks.ShortRateModelHandle_problemValues(self)

    def functionEvaluation(self):
        r"""functionEvaluation(ShortRateModelHandle self) -> Integer"""
        return _quantlib_risks.ShortRateModelHandle_functionEvaluation(self)

# Register ShortRateModelHandle in _quantlib_risks:
_quantlib_risks.ShortRateModelHandle_swigregister(ShortRateModelHandle)
class RelinkableShortRateModelHandle(ShortRateModelHandle):
    r"""Proxy of C++ RelinkableHandle< ShortRateModel > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(RelinkableShortRateModelHandle self, ext::shared_ptr< ShortRateModel > const & arg2=ext::shared_ptr()) -> RelinkableShortRateModelHandle"""
        _quantlib_risks.RelinkableShortRateModelHandle_swiginit(self, _quantlib_risks.new_RelinkableShortRateModelHandle(*args))

    def linkTo(self, arg2):
        r"""linkTo(RelinkableShortRateModelHandle self, ext::shared_ptr< ShortRateModel > const & arg2)"""
        return _quantlib_risks.RelinkableShortRateModelHandle_linkTo(self, arg2)

    def reset(self):
        r"""reset(RelinkableShortRateModelHandle self)"""
        return _quantlib_risks.RelinkableShortRateModelHandle_reset(self)
    __swig_destroy__ = _quantlib_risks.delete_RelinkableShortRateModelHandle

# Register RelinkableShortRateModelHandle in _quantlib_risks:
_quantlib_risks.RelinkableShortRateModelHandle_swigregister(RelinkableShortRateModelHandle)
class OneFactorAffineModel(ShortRateModel):
    r"""Proxy of C++ OneFactorAffineModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def discountBond(self, *args):
        r"""
        discountBond(OneFactorAffineModel self, Time now, Time maturity, Array factors) -> Real
        discountBond(OneFactorAffineModel self, Time now, Time maturity, Rate rate) -> Real
        """
        return _quantlib_risks.OneFactorAffineModel_discountBond(self, *args)

    def discount(self, t):
        r"""discount(OneFactorAffineModel self, Time t) -> DiscountFactor"""
        return _quantlib_risks.OneFactorAffineModel_discount(self, t)
    __swig_destroy__ = _quantlib_risks.delete_OneFactorAffineModel

# Register OneFactorAffineModel in _quantlib_risks:
_quantlib_risks.OneFactorAffineModel_swigregister(OneFactorAffineModel)
class Vasicek(OneFactorAffineModel):
    r"""Proxy of C++ Vasicek class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, r0=0.05, a=0.1, b=0.05, sigma=0.01, lambda_parameter=0.0):
        r"""__init__(Vasicek self, Rate r0=0.05, Real a=0.1, Real b=0.05, Real sigma=0.01, Real lambda_parameter=0.0) -> Vasicek"""
        _quantlib_risks.Vasicek_swiginit(self, _quantlib_risks.new_Vasicek(r0, a, b, sigma, lambda_parameter))
    __swig_destroy__ = _quantlib_risks.delete_Vasicek

# Register Vasicek in _quantlib_risks:
_quantlib_risks.Vasicek_swigregister(Vasicek)
class HullWhite(Vasicek):
    r"""Proxy of C++ HullWhite class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, termStructure, a=0.1, sigma=0.01):
        r"""__init__(HullWhite self, YieldTermStructureHandle termStructure, Real a=0.1, Real sigma=0.01) -> HullWhite"""
        _quantlib_risks.HullWhite_swiginit(self, _quantlib_risks.new_HullWhite(termStructure, a, sigma))

    @staticmethod
    def convexityBias(futurePrice, t, T, sigma, a):
        r"""convexityBias(Real futurePrice, Time t, Time T, Real sigma, Real a) -> Rate"""
        return _quantlib_risks.HullWhite_convexityBias(futurePrice, t, T, sigma, a)

    def termStructure(self):
        r"""termStructure(HullWhite self) -> YieldTermStructureHandle"""
        return _quantlib_risks.HullWhite_termStructure(self)
    __swig_destroy__ = _quantlib_risks.delete_HullWhite

# Register HullWhite in _quantlib_risks:
_quantlib_risks.HullWhite_swigregister(HullWhite)
class BlackKarasinski(ShortRateModel):
    r"""Proxy of C++ BlackKarasinski class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, termStructure, a=0.1, sigma=0.1):
        r"""__init__(BlackKarasinski self, YieldTermStructureHandle termStructure, Real a=0.1, Real sigma=0.1) -> BlackKarasinski"""
        _quantlib_risks.BlackKarasinski_swiginit(self, _quantlib_risks.new_BlackKarasinski(termStructure, a, sigma))

    def termStructure(self):
        r"""termStructure(BlackKarasinski self) -> YieldTermStructureHandle"""
        return _quantlib_risks.BlackKarasinski_termStructure(self)
    __swig_destroy__ = _quantlib_risks.delete_BlackKarasinski

# Register BlackKarasinski in _quantlib_risks:
_quantlib_risks.BlackKarasinski_swigregister(BlackKarasinski)
class CoxIngersollRoss(ShortRateModel):
    r"""Proxy of C++ CoxIngersollRoss class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, r0=0.01, theta=0.1, k=0.1, sigma=0.1):
        r"""__init__(CoxIngersollRoss self, Rate r0=0.01, Real theta=0.1, Real k=0.1, Real sigma=0.1) -> CoxIngersollRoss"""
        _quantlib_risks.CoxIngersollRoss_swiginit(self, _quantlib_risks.new_CoxIngersollRoss(r0, theta, k, sigma))

    def discount(self, t):
        r"""discount(CoxIngersollRoss self, Time t) -> DiscountFactor"""
        return _quantlib_risks.CoxIngersollRoss_discount(self, t)
    __swig_destroy__ = _quantlib_risks.delete_CoxIngersollRoss

# Register CoxIngersollRoss in _quantlib_risks:
_quantlib_risks.CoxIngersollRoss_swigregister(CoxIngersollRoss)
class ExtendedCoxIngersollRoss(ShortRateModel):
    r"""Proxy of C++ ExtendedCoxIngersollRoss class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, termStructure, theta=0.1, k=0.1, sigma=0.1, x0=0.05):
        r"""__init__(ExtendedCoxIngersollRoss self, YieldTermStructureHandle termStructure, Real theta=0.1, Real k=0.1, Real sigma=0.1, Real x0=0.05) -> ExtendedCoxIngersollRoss"""
        _quantlib_risks.ExtendedCoxIngersollRoss_swiginit(self, _quantlib_risks.new_ExtendedCoxIngersollRoss(termStructure, theta, k, sigma, x0))

    def discount(self, t):
        r"""discount(ExtendedCoxIngersollRoss self, Time t) -> DiscountFactor"""
        return _quantlib_risks.ExtendedCoxIngersollRoss_discount(self, t)
    __swig_destroy__ = _quantlib_risks.delete_ExtendedCoxIngersollRoss

# Register ExtendedCoxIngersollRoss in _quantlib_risks:
_quantlib_risks.ExtendedCoxIngersollRoss_swigregister(ExtendedCoxIngersollRoss)
class G2(ShortRateModel):
    r"""Proxy of C++ G2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, termStructure, a=0.1, sigma=0.01, b=0.1, eta=0.01, rho=-0.75):
        r"""__init__(G2 self, YieldTermStructureHandle termStructure, Real a=0.1, Real sigma=0.01, Real b=0.1, Real eta=0.01, Real rho=-0.75) -> G2"""
        _quantlib_risks.G2_swiginit(self, _quantlib_risks.new_G2(termStructure, a, sigma, b, eta, rho))

    def termStructure(self):
        r"""termStructure(G2 self) -> YieldTermStructureHandle"""
        return _quantlib_risks.G2_termStructure(self)
    __swig_destroy__ = _quantlib_risks.delete_G2

# Register G2 in _quantlib_risks:
_quantlib_risks.G2_swigregister(G2)
class JamshidianSwaptionEngine(PricingEngine):
    r"""Proxy of C++ JamshidianSwaptionEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(JamshidianSwaptionEngine self, ext::shared_ptr< OneFactorAffineModel > const & model, YieldTermStructureHandle termStructure=Handle< YieldTermStructure >()) -> JamshidianSwaptionEngine"""
        _quantlib_risks.JamshidianSwaptionEngine_swiginit(self, _quantlib_risks.new_JamshidianSwaptionEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_JamshidianSwaptionEngine

# Register JamshidianSwaptionEngine in _quantlib_risks:
_quantlib_risks.JamshidianSwaptionEngine_swigregister(JamshidianSwaptionEngine)
class TreeSwaptionEngine(PricingEngine):
    r"""Proxy of C++ TreeSwaptionEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TreeSwaptionEngine self, ext::shared_ptr< ShortRateModel > const & model, Size timeSteps, YieldTermStructureHandle termStructure=Handle< YieldTermStructure >()) -> TreeSwaptionEngine
        __init__(TreeSwaptionEngine self, ext::shared_ptr< ShortRateModel > const & model, TimeGrid grid, YieldTermStructureHandle termStructure=Handle< YieldTermStructure >()) -> TreeSwaptionEngine
        __init__(TreeSwaptionEngine self, ShortRateModelHandle model, Size timeSteps, YieldTermStructureHandle termStructure=Handle< YieldTermStructure >()) -> TreeSwaptionEngine
        """
        _quantlib_risks.TreeSwaptionEngine_swiginit(self, _quantlib_risks.new_TreeSwaptionEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_TreeSwaptionEngine

# Register TreeSwaptionEngine in _quantlib_risks:
_quantlib_risks.TreeSwaptionEngine_swigregister(TreeSwaptionEngine)
class AnalyticCapFloorEngine(PricingEngine):
    r"""Proxy of C++ AnalyticCapFloorEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(AnalyticCapFloorEngine self, ext::shared_ptr< OneFactorAffineModel > const & model, YieldTermStructureHandle termStructure=Handle< YieldTermStructure >()) -> AnalyticCapFloorEngine"""
        _quantlib_risks.AnalyticCapFloorEngine_swiginit(self, _quantlib_risks.new_AnalyticCapFloorEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticCapFloorEngine

# Register AnalyticCapFloorEngine in _quantlib_risks:
_quantlib_risks.AnalyticCapFloorEngine_swigregister(AnalyticCapFloorEngine)
class TreeCapFloorEngine(PricingEngine):
    r"""Proxy of C++ TreeCapFloorEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TreeCapFloorEngine self, ext::shared_ptr< ShortRateModel > const & model, Size timeSteps, YieldTermStructureHandle termStructure=Handle< YieldTermStructure >()) -> TreeCapFloorEngine
        __init__(TreeCapFloorEngine self, ext::shared_ptr< ShortRateModel > const & model, TimeGrid grid, YieldTermStructureHandle termStructure=Handle< YieldTermStructure >()) -> TreeCapFloorEngine
        """
        _quantlib_risks.TreeCapFloorEngine_swiginit(self, _quantlib_risks.new_TreeCapFloorEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_TreeCapFloorEngine

# Register TreeCapFloorEngine in _quantlib_risks:
_quantlib_risks.TreeCapFloorEngine_swigregister(TreeCapFloorEngine)
class G2SwaptionEngine(PricingEngine):
    r"""Proxy of C++ G2SwaptionEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model, range, intervals):
        r"""__init__(G2SwaptionEngine self, ext::shared_ptr< G2 > const & model, Real range, Size intervals) -> G2SwaptionEngine"""
        _quantlib_risks.G2SwaptionEngine_swiginit(self, _quantlib_risks.new_G2SwaptionEngine(model, range, intervals))
    __swig_destroy__ = _quantlib_risks.delete_G2SwaptionEngine

# Register G2SwaptionEngine in _quantlib_risks:
_quantlib_risks.G2SwaptionEngine_swigregister(G2SwaptionEngine)
class FdG2SwaptionEngine(PricingEngine):
    r"""Proxy of C++ FdG2SwaptionEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(FdG2SwaptionEngine self, ext::shared_ptr< G2 > const & model, Size tGrid=100, Size xGrid=50, Size yGrid=50, Size dampingSteps=0, Real invEps=1e-5, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Hundsdorfer()) -> FdG2SwaptionEngine"""
        _quantlib_risks.FdG2SwaptionEngine_swiginit(self, _quantlib_risks.new_FdG2SwaptionEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_FdG2SwaptionEngine

# Register FdG2SwaptionEngine in _quantlib_risks:
_quantlib_risks.FdG2SwaptionEngine_swigregister(FdG2SwaptionEngine)
class FdHullWhiteSwaptionEngine(PricingEngine):
    r"""Proxy of C++ FdHullWhiteSwaptionEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(FdHullWhiteSwaptionEngine self, ext::shared_ptr< HullWhite > const & model, Size tGrid=100, Size xGrid=100, Size dampingSteps=0, Real invEps=1e-5, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Douglas()) -> FdHullWhiteSwaptionEngine"""
        _quantlib_risks.FdHullWhiteSwaptionEngine_swiginit(self, _quantlib_risks.new_FdHullWhiteSwaptionEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_FdHullWhiteSwaptionEngine

# Register FdHullWhiteSwaptionEngine in _quantlib_risks:
_quantlib_risks.FdHullWhiteSwaptionEngine_swigregister(FdHullWhiteSwaptionEngine)
class AnalyticBSMHullWhiteEngine(PricingEngine):
    r"""Proxy of C++ AnalyticBSMHullWhiteEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, equityShortRateCorrelation, arg3, arg4):
        r"""__init__(AnalyticBSMHullWhiteEngine self, Real equityShortRateCorrelation, ext::shared_ptr< GeneralizedBlackScholesProcess > const & arg3, ext::shared_ptr< HullWhite > const & arg4) -> AnalyticBSMHullWhiteEngine"""
        _quantlib_risks.AnalyticBSMHullWhiteEngine_swiginit(self, _quantlib_risks.new_AnalyticBSMHullWhiteEngine(equityShortRateCorrelation, arg3, arg4))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticBSMHullWhiteEngine

# Register AnalyticBSMHullWhiteEngine in _quantlib_risks:
_quantlib_risks.AnalyticBSMHullWhiteEngine_swigregister(AnalyticBSMHullWhiteEngine)
class BondPrice(object):
    r"""Proxy of C++ BondPrice class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Dirty = _quantlib_risks.BondPrice_Dirty
    
    Clean = _quantlib_risks.BondPrice_Clean
    

    def __init__(self, amount, type):
        r"""__init__(BondPrice self, Real amount, BondPrice::Type type) -> BondPrice"""
        _quantlib_risks.BondPrice_swiginit(self, _quantlib_risks.new_BondPrice(amount, type))

    def amount(self):
        r"""amount(BondPrice self) -> Real"""
        return _quantlib_risks.BondPrice_amount(self)

    def type(self):
        r"""type(BondPrice self) -> BondPrice::Type"""
        return _quantlib_risks.BondPrice_type(self)
    __swig_destroy__ = _quantlib_risks.delete_BondPrice

# Register BondPrice in _quantlib_risks:
_quantlib_risks.BondPrice_swigregister(BondPrice)
class Bond(Instrument):
    r"""Proxy of C++ Bond class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Bond self, Natural settlementDays, Calendar calendar, Real faceAmount, Date maturityDate, Date issueDate=Date(), Leg cashflows=Leg()) -> Bond
        __init__(Bond self, Natural settlementDays, Calendar calendar, Date issueDate=Date(), Leg coupons=Leg()) -> Bond
        """
        _quantlib_risks.Bond_swiginit(self, _quantlib_risks.new_Bond(*args))

    def nextCouponRate(self, *args):
        r"""nextCouponRate(Bond self, Date d=Date()) -> Rate"""
        return _quantlib_risks.Bond_nextCouponRate(self, *args)

    def previousCouponRate(self, *args):
        r"""previousCouponRate(Bond self, Date d=Date()) -> Rate"""
        return _quantlib_risks.Bond_previousCouponRate(self, *args)

    def settlementDays(self):
        r"""settlementDays(Bond self) -> Natural"""
        return _quantlib_risks.Bond_settlementDays(self)

    def settlementDate(self, *args):
        r"""settlementDate(Bond self, Date d=Date()) -> Date"""
        return _quantlib_risks.Bond_settlementDate(self, *args)

    def startDate(self):
        r"""startDate(Bond self) -> Date"""
        return _quantlib_risks.Bond_startDate(self)

    def maturityDate(self):
        r"""maturityDate(Bond self) -> Date"""
        return _quantlib_risks.Bond_maturityDate(self)

    def issueDate(self):
        r"""issueDate(Bond self) -> Date"""
        return _quantlib_risks.Bond_issueDate(self)

    def cashflows(self):
        r"""cashflows(Bond self) -> Leg"""
        return _quantlib_risks.Bond_cashflows(self)

    def redemptions(self):
        r"""redemptions(Bond self) -> Leg"""
        return _quantlib_risks.Bond_redemptions(self)

    def redemption(self):
        r"""redemption(Bond self) -> ext::shared_ptr< CashFlow >"""
        return _quantlib_risks.Bond_redemption(self)

    def calendar(self):
        r"""calendar(Bond self) -> Calendar"""
        return _quantlib_risks.Bond_calendar(self)

    def notionals(self):
        r"""notionals(Bond self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.Bond_notionals(self)

    def notional(self, *args):
        r"""notional(Bond self, Date d=Date()) -> Real"""
        return _quantlib_risks.Bond_notional(self, *args)

    def cleanPrice(self, *args):
        r"""
        cleanPrice(Bond self) -> Real
        cleanPrice(Bond self, Rate _yield, DayCounter dc, Compounding compounding, Frequency frequency, Date settlement=Date()) -> Real
        """
        return _quantlib_risks.Bond_cleanPrice(self, *args)

    def dirtyPrice(self, *args):
        r"""
        dirtyPrice(Bond self) -> Real
        dirtyPrice(Bond self, Rate _yield, DayCounter dc, Compounding compounding, Frequency frequency, Date settlement=Date()) -> Real
        """
        return _quantlib_risks.Bond_dirtyPrice(self, *args)

    def bondYield(self, *args):
        r"""
        bondYield(Bond self, DayCounter dc, Compounding compounding, Frequency freq, Real accuracy=1.0e-8, Size maxEvaluations=100) -> Real
        bondYield(Bond self, Real cleanPrice, DayCounter dc, Compounding compounding, Frequency freq, Date settlement=Date(), Real accuracy=1.0e-8, Size maxEvaluations=100) -> Real
        """
        return _quantlib_risks.Bond_bondYield(self, *args)

    def accruedAmount(self, *args):
        r"""accruedAmount(Bond self, Date settlement=Date()) -> Real"""
        return _quantlib_risks.Bond_accruedAmount(self, *args)

    def settlementValue(self, *args):
        r"""
        settlementValue(Bond self) -> Real
        settlementValue(Bond self, Real cleanPrice) -> Real
        """
        return _quantlib_risks.Bond_settlementValue(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_Bond

# Register Bond in _quantlib_risks:
_quantlib_risks.Bond_swigregister(Bond)

def simplifyNotificationGraph(*args):
    r"""
    simplifyNotificationGraph(Swap swap, bool unregisterCoupons=False)
    simplifyNotificationGraph(Bond bond, bool unregisterCoupons=False)
    """
    return _quantlib_risks.simplifyNotificationGraph(*args)

def cleanPriceFromZSpread(*args):
    r"""cleanPriceFromZSpread(Bond bond, ext::shared_ptr< YieldTermStructure > const & discountCurve, Spread zSpread, DayCounter dc, Compounding compounding, Frequency freq, Date settlementDate=Date()) -> Real"""
    return _quantlib_risks.cleanPriceFromZSpread(*args)

def sinkingSchedule(startDate, bondLength, frequency, paymentCalendar):
    r"""sinkingSchedule(Date startDate, Period bondLength, Frequency const & frequency, Calendar paymentCalendar) -> Schedule"""
    return _quantlib_risks.sinkingSchedule(startDate, bondLength, frequency, paymentCalendar)

def sinkingNotionals(bondLength, frequency, couponRate, initialNotional):
    r"""sinkingNotionals(Period bondLength, Frequency const & frequency, Rate couponRate, Real initialNotional) -> std::vector< Real,std::allocator< Real > >"""
    return _quantlib_risks.sinkingNotionals(bondLength, frequency, couponRate, initialNotional)
class ZeroCouponBond(Bond):
    r"""Proxy of C++ ZeroCouponBond class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(ZeroCouponBond self, Natural settlementDays, Calendar calendar, Real faceAmount, Date maturityDate, BusinessDayConvention paymentConvention=QuantLib::Following, Real redemption=100.0, Date issueDate=Date()) -> ZeroCouponBond"""
        _quantlib_risks.ZeroCouponBond_swiginit(self, _quantlib_risks.new_ZeroCouponBond(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_ZeroCouponBond

# Register ZeroCouponBond in _quantlib_risks:
_quantlib_risks.ZeroCouponBond_swigregister(ZeroCouponBond)
class FixedRateBond(Bond):
    r"""Proxy of C++ FixedRateBond class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(FixedRateBond self, Integer settlementDays, Real faceAmount, Schedule schedule, std::vector< Rate,std::allocator< Rate > > const & coupons, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention=QuantLib::Following, Real redemption=100.0, Date issueDate=Date(), Calendar paymentCalendar=Calendar(), Period exCouponPeriod=Period(), Calendar exCouponCalendar=Calendar(), BusinessDayConvention exCouponConvention=Unadjusted, bool exCouponEndOfMonth=False) -> FixedRateBond"""
        _quantlib_risks.FixedRateBond_swiginit(self, _quantlib_risks.new_FixedRateBond(*args, **kwargs))

    def frequency(self):
        r"""frequency(FixedRateBond self) -> Frequency"""
        return _quantlib_risks.FixedRateBond_frequency(self)

    def dayCounter(self):
        r"""dayCounter(FixedRateBond self) -> DayCounter"""
        return _quantlib_risks.FixedRateBond_dayCounter(self)
    __swig_destroy__ = _quantlib_risks.delete_FixedRateBond

# Register FixedRateBond in _quantlib_risks:
_quantlib_risks.FixedRateBond_swigregister(FixedRateBond)
class AmortizingFixedRateBond(Bond):
    r"""Proxy of C++ AmortizingFixedRateBond class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(AmortizingFixedRateBond self, Integer settlementDays, std::vector< Real,std::allocator< Real > > const & notionals, Schedule schedule, std::vector< Rate,std::allocator< Rate > > const & coupons, DayCounter accrualDayCounter, BusinessDayConvention paymentConvention=QuantLib::Following, Date issueDate=Date(), Period exCouponPeriod=Period(), Calendar exCouponCalendar=Calendar(), BusinessDayConvention const exCouponConvention=Unadjusted, bool exCouponEndOfMonth=False, std::vector< Real,std::allocator< Real > > const & redemptions={ 100.0 }, Integer paymentLag=0) -> AmortizingFixedRateBond"""
        _quantlib_risks.AmortizingFixedRateBond_swiginit(self, _quantlib_risks.new_AmortizingFixedRateBond(*args, **kwargs))

    def frequency(self):
        r"""frequency(AmortizingFixedRateBond self) -> Frequency"""
        return _quantlib_risks.AmortizingFixedRateBond_frequency(self)

    def dayCounter(self):
        r"""dayCounter(AmortizingFixedRateBond self) -> DayCounter"""
        return _quantlib_risks.AmortizingFixedRateBond_dayCounter(self)
    __swig_destroy__ = _quantlib_risks.delete_AmortizingFixedRateBond

# Register AmortizingFixedRateBond in _quantlib_risks:
_quantlib_risks.AmortizingFixedRateBond_swigregister(AmortizingFixedRateBond)
class AmortizingFloatingRateBond(Bond):
    r"""Proxy of C++ AmortizingFloatingRateBond class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(AmortizingFloatingRateBond self, Size settlementDays, std::vector< Real,std::allocator< Real > > const & notional, Schedule schedule, ext::shared_ptr< IborIndex > const & index, DayCounter accrualDayCounter, BusinessDayConvention paymentConvention=Following, Size fixingDays=Null< Size >(), std::vector< Real,std::allocator< Real > > const & gearings=std::vector< Real >(1, 1.0), std::vector< Spread,std::allocator< Spread > > const & spreads=std::vector< Spread >(1, 0.0), std::vector< Rate,std::allocator< Rate > > const & caps=std::vector< Rate >(), std::vector< Rate,std::allocator< Rate > > const & floors=std::vector< Rate >(), bool inArrears=False, Date issueDate=Date(), Period exCouponPeriod=Period(), Calendar exCouponCalendar=Calendar(), BusinessDayConvention const exCouponConvention=Unadjusted, bool exCouponEndOfMonth=False, std::vector< Real,std::allocator< Real > > const & redemptions={ 100.0 }, Integer paymentLag=0) -> AmortizingFloatingRateBond"""
        _quantlib_risks.AmortizingFloatingRateBond_swiginit(self, _quantlib_risks.new_AmortizingFloatingRateBond(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_AmortizingFloatingRateBond

# Register AmortizingFloatingRateBond in _quantlib_risks:
_quantlib_risks.AmortizingFloatingRateBond_swigregister(AmortizingFloatingRateBond)
class FloatingRateBond(Bond):
    r"""Proxy of C++ FloatingRateBond class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(FloatingRateBond self, Size settlementDays, Real faceAmount, Schedule schedule, ext::shared_ptr< IborIndex > const & index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention=Following, Size fixingDays=Null< Size >(), std::vector< Real,std::allocator< Real > > const & gearings=std::vector< Real >(), std::vector< Spread,std::allocator< Spread > > const & spreads=std::vector< Spread >(), std::vector< Rate,std::allocator< Rate > > const & caps=std::vector< Rate >(), std::vector< Rate,std::allocator< Rate > > const & floors=std::vector< Rate >(), bool inArrears=False, Real redemption=100.0, Date issueDate=Date(), Period exCouponPeriod=Period(), Calendar exCouponCalendar=Calendar(), BusinessDayConvention exCouponConvention=Unadjusted, bool exCouponEndOfMonth=False) -> FloatingRateBond"""
        _quantlib_risks.FloatingRateBond_swiginit(self, _quantlib_risks.new_FloatingRateBond(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_FloatingRateBond

# Register FloatingRateBond in _quantlib_risks:
_quantlib_risks.FloatingRateBond_swigregister(FloatingRateBond)
class CmsRateBond(Bond):
    r"""Proxy of C++ CmsRateBond class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(CmsRateBond self, Size settlementDays, Real faceAmount, Schedule schedule, ext::shared_ptr< SwapIndex > const & index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention, Natural fixingDays, std::vector< Real,std::allocator< Real > > const & gearings, std::vector< Spread,std::allocator< Spread > > const & spreads, std::vector< Rate,std::allocator< Rate > > const & caps, std::vector< Rate,std::allocator< Rate > > const & floors, bool inArrears=False, Real redemption=100.0, Date issueDate=Date()) -> CmsRateBond"""
        _quantlib_risks.CmsRateBond_swiginit(self, _quantlib_risks.new_CmsRateBond(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_CmsRateBond

# Register CmsRateBond in _quantlib_risks:
_quantlib_risks.CmsRateBond_swigregister(CmsRateBond)
class AmortizingCmsRateBond(Bond):
    r"""Proxy of C++ AmortizingCmsRateBond class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(AmortizingCmsRateBond self, Natural settlementDays, std::vector< Real,std::allocator< Real > > const & notionals, Schedule schedule, ext::shared_ptr< SwapIndex > const & index, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention=Following, Natural fixingDays=Null< Natural >(), std::vector< Real,std::allocator< Real > > const & gearings={ 1.0 }, std::vector< Spread,std::allocator< Spread > > const & spreads={ 0.0 }, std::vector< Rate,std::allocator< Rate > > const & caps={}, std::vector< Rate,std::allocator< Rate > > const & floors={}, bool inArrears=False, Date issueDate=Date()) -> AmortizingCmsRateBond"""
        _quantlib_risks.AmortizingCmsRateBond_swiginit(self, _quantlib_risks.new_AmortizingCmsRateBond(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_AmortizingCmsRateBond

# Register AmortizingCmsRateBond in _quantlib_risks:
_quantlib_risks.AmortizingCmsRateBond_swigregister(AmortizingCmsRateBond)
class DiscountingBondEngine(PricingEngine):
    r"""Proxy of C++ DiscountingBondEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, discountCurve):
        r"""__init__(DiscountingBondEngine self, YieldTermStructureHandle discountCurve) -> DiscountingBondEngine"""
        _quantlib_risks.DiscountingBondEngine_swiginit(self, _quantlib_risks.new_DiscountingBondEngine(discountCurve))
    __swig_destroy__ = _quantlib_risks.delete_DiscountingBondEngine

# Register DiscountingBondEngine in _quantlib_risks:
_quantlib_risks.DiscountingBondEngine_swigregister(DiscountingBondEngine)
class Callability(object):
    r"""Proxy of C++ Callability class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Call = _quantlib_risks.Callability_Call
    
    Put = _quantlib_risks.Callability_Put
    

    def __init__(self, price, type, date):
        r"""__init__(Callability self, BondPrice price, Callability::Type type, Date date) -> Callability"""
        _quantlib_risks.Callability_swiginit(self, _quantlib_risks.new_Callability(price, type, date))

    def price(self):
        r"""price(Callability self) -> BondPrice"""
        return _quantlib_risks.Callability_price(self)

    def type(self):
        r"""type(Callability self) -> Callability::Type"""
        return _quantlib_risks.Callability_type(self)

    def date(self):
        r"""date(Callability self) -> Date"""
        return _quantlib_risks.Callability_date(self)
    __swig_destroy__ = _quantlib_risks.delete_Callability

# Register Callability in _quantlib_risks:
_quantlib_risks.Callability_swigregister(Callability)
class SoftCallability(Callability):
    r"""Proxy of C++ SoftCallability class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, price, date, trigger):
        r"""__init__(SoftCallability self, BondPrice price, Date date, Real trigger) -> SoftCallability"""
        _quantlib_risks.SoftCallability_swiginit(self, _quantlib_risks.new_SoftCallability(price, date, trigger))
    __swig_destroy__ = _quantlib_risks.delete_SoftCallability

# Register SoftCallability in _quantlib_risks:
_quantlib_risks.SoftCallability_swigregister(SoftCallability)
class CallabilitySchedule(object):
    r"""Proxy of C++ std::vector< ext::shared_ptr< Callability > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(CallabilitySchedule self) -> SwigPyIterator"""
        return _quantlib_risks.CallabilitySchedule_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(CallabilitySchedule self) -> bool"""
        return _quantlib_risks.CallabilitySchedule___nonzero__(self)

    def __bool__(self):
        r"""__bool__(CallabilitySchedule self) -> bool"""
        return _quantlib_risks.CallabilitySchedule___bool__(self)

    def __len__(self):
        r"""__len__(CallabilitySchedule self) -> std::vector< ext::shared_ptr< Callability > >::size_type"""
        return _quantlib_risks.CallabilitySchedule___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(CallabilitySchedule self, std::vector< ext::shared_ptr< Callability > >::difference_type i, std::vector< ext::shared_ptr< Callability > >::difference_type j) -> CallabilitySchedule"""
        return _quantlib_risks.CallabilitySchedule___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(CallabilitySchedule self, std::vector< ext::shared_ptr< Callability > >::difference_type i, std::vector< ext::shared_ptr< Callability > >::difference_type j)
        __setslice__(CallabilitySchedule self, std::vector< ext::shared_ptr< Callability > >::difference_type i, std::vector< ext::shared_ptr< Callability > >::difference_type j, CallabilitySchedule v)
        """
        return _quantlib_risks.CallabilitySchedule___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(CallabilitySchedule self, std::vector< ext::shared_ptr< Callability > >::difference_type i, std::vector< ext::shared_ptr< Callability > >::difference_type j)"""
        return _quantlib_risks.CallabilitySchedule___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(CallabilitySchedule self, std::vector< ext::shared_ptr< Callability > >::difference_type i)
        __delitem__(CallabilitySchedule self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.CallabilitySchedule___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(CallabilitySchedule self, SWIGPY_SLICEOBJECT * slice) -> CallabilitySchedule
        __getitem__(CallabilitySchedule self, std::vector< ext::shared_ptr< Callability > >::difference_type i) -> std::vector< ext::shared_ptr< Callability > >::value_type const &
        """
        return _quantlib_risks.CallabilitySchedule___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(CallabilitySchedule self, SWIGPY_SLICEOBJECT * slice, CallabilitySchedule v)
        __setitem__(CallabilitySchedule self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(CallabilitySchedule self, std::vector< ext::shared_ptr< Callability > >::difference_type i, std::vector< ext::shared_ptr< Callability > >::value_type const & x)
        """
        return _quantlib_risks.CallabilitySchedule___setitem__(self, *args)

    def pop(self):
        r"""pop(CallabilitySchedule self) -> std::vector< ext::shared_ptr< Callability > >::value_type"""
        return _quantlib_risks.CallabilitySchedule_pop(self)

    def append(self, x):
        r"""append(CallabilitySchedule self, std::vector< ext::shared_ptr< Callability > >::value_type const & x)"""
        return _quantlib_risks.CallabilitySchedule_append(self, x)

    def empty(self):
        r"""empty(CallabilitySchedule self) -> bool"""
        return _quantlib_risks.CallabilitySchedule_empty(self)

    def size(self):
        r"""size(CallabilitySchedule self) -> std::vector< ext::shared_ptr< Callability > >::size_type"""
        return _quantlib_risks.CallabilitySchedule_size(self)

    def swap(self, v):
        r"""swap(CallabilitySchedule self, CallabilitySchedule v)"""
        return _quantlib_risks.CallabilitySchedule_swap(self, v)

    def begin(self):
        r"""begin(CallabilitySchedule self) -> std::vector< ext::shared_ptr< Callability > >::iterator"""
        return _quantlib_risks.CallabilitySchedule_begin(self)

    def end(self):
        r"""end(CallabilitySchedule self) -> std::vector< ext::shared_ptr< Callability > >::iterator"""
        return _quantlib_risks.CallabilitySchedule_end(self)

    def rbegin(self):
        r"""rbegin(CallabilitySchedule self) -> std::vector< ext::shared_ptr< Callability > >::reverse_iterator"""
        return _quantlib_risks.CallabilitySchedule_rbegin(self)

    def rend(self):
        r"""rend(CallabilitySchedule self) -> std::vector< ext::shared_ptr< Callability > >::reverse_iterator"""
        return _quantlib_risks.CallabilitySchedule_rend(self)

    def clear(self):
        r"""clear(CallabilitySchedule self)"""
        return _quantlib_risks.CallabilitySchedule_clear(self)

    def get_allocator(self):
        r"""get_allocator(CallabilitySchedule self) -> std::vector< ext::shared_ptr< Callability > >::allocator_type"""
        return _quantlib_risks.CallabilitySchedule_get_allocator(self)

    def pop_back(self):
        r"""pop_back(CallabilitySchedule self)"""
        return _quantlib_risks.CallabilitySchedule_pop_back(self)

    def erase(self, *args):
        r"""
        erase(CallabilitySchedule self, std::vector< ext::shared_ptr< Callability > >::iterator pos) -> std::vector< ext::shared_ptr< Callability > >::iterator
        erase(CallabilitySchedule self, std::vector< ext::shared_ptr< Callability > >::iterator first, std::vector< ext::shared_ptr< Callability > >::iterator last) -> std::vector< ext::shared_ptr< Callability > >::iterator
        """
        return _quantlib_risks.CallabilitySchedule_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(CallabilitySchedule self) -> CallabilitySchedule
        __init__(CallabilitySchedule self, CallabilitySchedule other) -> CallabilitySchedule
        __init__(CallabilitySchedule self, std::vector< ext::shared_ptr< Callability > >::size_type size) -> CallabilitySchedule
        __init__(CallabilitySchedule self, std::vector< ext::shared_ptr< Callability > >::size_type size, std::vector< ext::shared_ptr< Callability > >::value_type const & value) -> CallabilitySchedule
        """
        _quantlib_risks.CallabilitySchedule_swiginit(self, _quantlib_risks.new_CallabilitySchedule(*args))

    def push_back(self, x):
        r"""push_back(CallabilitySchedule self, std::vector< ext::shared_ptr< Callability > >::value_type const & x)"""
        return _quantlib_risks.CallabilitySchedule_push_back(self, x)

    def front(self):
        r"""front(CallabilitySchedule self) -> std::vector< ext::shared_ptr< Callability > >::value_type const &"""
        return _quantlib_risks.CallabilitySchedule_front(self)

    def back(self):
        r"""back(CallabilitySchedule self) -> std::vector< ext::shared_ptr< Callability > >::value_type const &"""
        return _quantlib_risks.CallabilitySchedule_back(self)

    def assign(self, n, x):
        r"""assign(CallabilitySchedule self, std::vector< ext::shared_ptr< Callability > >::size_type n, std::vector< ext::shared_ptr< Callability > >::value_type const & x)"""
        return _quantlib_risks.CallabilitySchedule_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(CallabilitySchedule self, std::vector< ext::shared_ptr< Callability > >::size_type new_size)
        resize(CallabilitySchedule self, std::vector< ext::shared_ptr< Callability > >::size_type new_size, std::vector< ext::shared_ptr< Callability > >::value_type const & x)
        """
        return _quantlib_risks.CallabilitySchedule_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(CallabilitySchedule self, std::vector< ext::shared_ptr< Callability > >::iterator pos, std::vector< ext::shared_ptr< Callability > >::value_type const & x) -> std::vector< ext::shared_ptr< Callability > >::iterator
        insert(CallabilitySchedule self, std::vector< ext::shared_ptr< Callability > >::iterator pos, std::vector< ext::shared_ptr< Callability > >::size_type n, std::vector< ext::shared_ptr< Callability > >::value_type const & x)
        """
        return _quantlib_risks.CallabilitySchedule_insert(self, *args)

    def reserve(self, n):
        r"""reserve(CallabilitySchedule self, std::vector< ext::shared_ptr< Callability > >::size_type n)"""
        return _quantlib_risks.CallabilitySchedule_reserve(self, n)

    def capacity(self):
        r"""capacity(CallabilitySchedule self) -> std::vector< ext::shared_ptr< Callability > >::size_type"""
        return _quantlib_risks.CallabilitySchedule_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_CallabilitySchedule

# Register CallabilitySchedule in _quantlib_risks:
_quantlib_risks.CallabilitySchedule_swigregister(CallabilitySchedule)
class CallableBond(Bond):
    r"""Proxy of C++ CallableBond class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def callability(self):
        r"""callability(CallableBond self) -> CallabilitySchedule"""
        return _quantlib_risks.CallableBond_callability(self)

    def impliedVolatility(self, targetPrice, discountCurve, accuracy, maxEvaluations, minVol, maxVol):
        r"""impliedVolatility(CallableBond self, BondPrice targetPrice, YieldTermStructureHandle discountCurve, Real accuracy, Size maxEvaluations, Volatility minVol, Volatility maxVol) -> Volatility"""
        return _quantlib_risks.CallableBond_impliedVolatility(self, targetPrice, discountCurve, accuracy, maxEvaluations, minVol, maxVol)

    def OAS(self, *args):
        r"""OAS(CallableBond self, Real cleanPrice, YieldTermStructureHandle engineTS, DayCounter dc, Compounding compounding, Frequency freq, Date settlementDate=Date(), Real accuracy=1e-10, Size maxIterations=100, Spread guess=0.0) -> Real"""
        return _quantlib_risks.CallableBond_OAS(self, *args)

    def cleanPriceOAS(self, *args):
        r"""cleanPriceOAS(CallableBond self, Real oas, YieldTermStructureHandle engineTS, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date()) -> Real"""
        return _quantlib_risks.CallableBond_cleanPriceOAS(self, *args)

    def effectiveDuration(self, oas, engineTS, dayCounter, compounding, frequency, bump=2e-4):
        r"""effectiveDuration(CallableBond self, Real oas, YieldTermStructureHandle engineTS, DayCounter dayCounter, Compounding compounding, Frequency frequency, Real bump=2e-4) -> Real"""
        return _quantlib_risks.CallableBond_effectiveDuration(self, oas, engineTS, dayCounter, compounding, frequency, bump)

    def effectiveConvexity(self, oas, engineTS, dayCounter, compounding, frequency, bump=2e-4):
        r"""effectiveConvexity(CallableBond self, Real oas, YieldTermStructureHandle engineTS, DayCounter dayCounter, Compounding compounding, Frequency frequency, Real bump=2e-4) -> Real"""
        return _quantlib_risks.CallableBond_effectiveConvexity(self, oas, engineTS, dayCounter, compounding, frequency, bump)
    __swig_destroy__ = _quantlib_risks.delete_CallableBond

# Register CallableBond in _quantlib_risks:
_quantlib_risks.CallableBond_swigregister(CallableBond)
class CallableFixedRateBond(CallableBond):
    r"""Proxy of C++ CallableFixedRateBond class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(CallableFixedRateBond self, Integer settlementDays, Real faceAmount, Schedule schedule, std::vector< Rate,std::allocator< Rate > > const & coupons, DayCounter accrualDayCounter, BusinessDayConvention paymentConvention, Real redemption, Date issueDate, CallabilitySchedule putCallSchedule, Period exCouponPeriod=Period(), Calendar exCouponCalendar=Calendar(), BusinessDayConvention exCouponConvention=Unadjusted, bool exCouponEndOfMonth=False) -> CallableFixedRateBond"""
        _quantlib_risks.CallableFixedRateBond_swiginit(self, _quantlib_risks.new_CallableFixedRateBond(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_CallableFixedRateBond

# Register CallableFixedRateBond in _quantlib_risks:
_quantlib_risks.CallableFixedRateBond_swigregister(CallableFixedRateBond)
class CallableZeroCouponBond(CallableBond):
    r"""Proxy of C++ CallableZeroCouponBond class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(CallableZeroCouponBond self, Integer settlementDays, Real faceAmount, Calendar calendar, Date maturityDate, DayCounter dayCounter, BusinessDayConvention paymentConvention=Following, Real redemption=100.0, Date issueDate=Date(), CallabilitySchedule putCallSchedule=std::vector< ext::shared_ptr< Callability > >()) -> CallableZeroCouponBond"""
        _quantlib_risks.CallableZeroCouponBond_swiginit(self, _quantlib_risks.new_CallableZeroCouponBond(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_CallableZeroCouponBond

# Register CallableZeroCouponBond in _quantlib_risks:
_quantlib_risks.CallableZeroCouponBond_swigregister(CallableZeroCouponBond)
class TreeCallableFixedRateBondEngine(PricingEngine):
    r"""Proxy of C++ TreeCallableFixedRateBondEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TreeCallableFixedRateBondEngine self, ext::shared_ptr< ShortRateModel > const & model, Size timeSteps, YieldTermStructureHandle termStructure=Handle< YieldTermStructure >()) -> TreeCallableFixedRateBondEngine
        __init__(TreeCallableFixedRateBondEngine self, ext::shared_ptr< ShortRateModel > const & model, TimeGrid grid, YieldTermStructureHandle termStructure=Handle< YieldTermStructure >()) -> TreeCallableFixedRateBondEngine
        """
        _quantlib_risks.TreeCallableFixedRateBondEngine_swiginit(self, _quantlib_risks.new_TreeCallableFixedRateBondEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_TreeCallableFixedRateBondEngine

# Register TreeCallableFixedRateBondEngine in _quantlib_risks:
_quantlib_risks.TreeCallableFixedRateBondEngine_swigregister(TreeCallableFixedRateBondEngine)
class BlackCallableFixedRateBondEngine(PricingEngine):
    r"""Proxy of C++ BlackCallableFixedRateBondEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, fwdYieldVol, discountCurve):
        r"""__init__(BlackCallableFixedRateBondEngine self, QuoteHandle fwdYieldVol, YieldTermStructureHandle discountCurve) -> BlackCallableFixedRateBondEngine"""
        _quantlib_risks.BlackCallableFixedRateBondEngine_swiginit(self, _quantlib_risks.new_BlackCallableFixedRateBondEngine(fwdYieldVol, discountCurve))
    __swig_destroy__ = _quantlib_risks.delete_BlackCallableFixedRateBondEngine

# Register BlackCallableFixedRateBondEngine in _quantlib_risks:
_quantlib_risks.BlackCallableFixedRateBondEngine_swigregister(BlackCallableFixedRateBondEngine)
class CPIBond(Bond):
    r"""Proxy of C++ CPIBond class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(CPIBond self, Natural settlementDays, Real faceAmount, bool growthOnly, Real baseCPI, Period observationLag, ext::shared_ptr< ZeroInflationIndex > const & cpiIndex, CPI::InterpolationType observationInterpolation, Schedule schedule, std::vector< Rate,std::allocator< Rate > > const & coupons, DayCounter accrualDayCounter, BusinessDayConvention paymentConvention=ModifiedFollowing, Date issueDate=Date(), Calendar paymentCalendar=Calendar(), Period exCouponPeriod=Period(), Calendar exCouponCalendar=Calendar(), BusinessDayConvention exCouponConvention=Unadjusted, bool exCouponEndOfMonth=False) -> CPIBond"""
        _quantlib_risks.CPIBond_swiginit(self, _quantlib_risks.new_CPIBond(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_CPIBond

# Register CPIBond in _quantlib_risks:
_quantlib_risks.CPIBond_swigregister(CPIBond)
class BondFunctions(object):
    r"""Proxy of C++ BondFunctions class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def startDate(bond):
        r"""startDate(Bond bond) -> Date"""
        return _quantlib_risks.BondFunctions_startDate(bond)

    @staticmethod
    def maturityDate(bond):
        r"""maturityDate(Bond bond) -> Date"""
        return _quantlib_risks.BondFunctions_maturityDate(bond)

    @staticmethod
    def isTradable(*args):
        r"""isTradable(Bond bond, Date settlementDate=Date()) -> bool"""
        return _quantlib_risks.BondFunctions_isTradable(*args)

    @staticmethod
    def previousCashFlowDate(*args):
        r"""previousCashFlowDate(Bond bond, Date refDate=Date()) -> Date"""
        return _quantlib_risks.BondFunctions_previousCashFlowDate(*args)

    @staticmethod
    def nextCashFlowDate(*args):
        r"""nextCashFlowDate(Bond bond, Date refDate=Date()) -> Date"""
        return _quantlib_risks.BondFunctions_nextCashFlowDate(*args)

    @staticmethod
    def previousCashFlowAmount(*args):
        r"""previousCashFlowAmount(Bond bond, Date refDate=Date()) -> Real"""
        return _quantlib_risks.BondFunctions_previousCashFlowAmount(*args)

    @staticmethod
    def nextCashFlowAmount(*args):
        r"""nextCashFlowAmount(Bond bond, Date refDate=Date()) -> Real"""
        return _quantlib_risks.BondFunctions_nextCashFlowAmount(*args)

    @staticmethod
    def previousCouponRate(*args):
        r"""previousCouponRate(Bond bond, Date settlementDate=Date()) -> Rate"""
        return _quantlib_risks.BondFunctions_previousCouponRate(*args)

    @staticmethod
    def nextCouponRate(*args):
        r"""nextCouponRate(Bond bond, Date settlementDate=Date()) -> Rate"""
        return _quantlib_risks.BondFunctions_nextCouponRate(*args)

    @staticmethod
    def accrualStartDate(*args):
        r"""accrualStartDate(Bond bond, Date settlementDate=Date()) -> Date"""
        return _quantlib_risks.BondFunctions_accrualStartDate(*args)

    @staticmethod
    def accrualEndDate(*args):
        r"""accrualEndDate(Bond bond, Date settlementDate=Date()) -> Date"""
        return _quantlib_risks.BondFunctions_accrualEndDate(*args)

    @staticmethod
    def accrualPeriod(*args):
        r"""accrualPeriod(Bond bond, Date settlementDate=Date()) -> Time"""
        return _quantlib_risks.BondFunctions_accrualPeriod(*args)

    @staticmethod
    def accrualDays(*args):
        r"""accrualDays(Bond bond, Date settlementDate=Date()) -> BigInteger"""
        return _quantlib_risks.BondFunctions_accrualDays(*args)

    @staticmethod
    def accruedPeriod(*args):
        r"""accruedPeriod(Bond bond, Date settlementDate=Date()) -> Time"""
        return _quantlib_risks.BondFunctions_accruedPeriod(*args)

    @staticmethod
    def accruedDays(*args):
        r"""accruedDays(Bond bond, Date settlementDate=Date()) -> BigInteger"""
        return _quantlib_risks.BondFunctions_accruedDays(*args)

    @staticmethod
    def accruedAmount(*args):
        r"""accruedAmount(Bond bond, Date settlementDate=Date()) -> Real"""
        return _quantlib_risks.BondFunctions_accruedAmount(*args)

    @staticmethod
    def atmRate(*args):
        r"""atmRate(Bond bond, YieldTermStructure discountCurve, Date settlementDate=Date(), Real cleanPrice=Null< Real >()) -> Rate"""
        return _quantlib_risks.BondFunctions_atmRate(*args)

    @staticmethod
    def cleanPrice(*args):
        r"""
        cleanPrice(Bond bond, YieldTermStructure discountCurve, Date settlementDate=Date()) -> Real
        cleanPrice(Bond bond, InterestRate _yield, Date settlementDate=Date()) -> Real
        cleanPrice(Bond bond, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date()) -> Real
        """
        return _quantlib_risks.BondFunctions_cleanPrice(*args)

    @staticmethod
    def bps(*args):
        r"""
        bps(Bond bond, YieldTermStructure discountCurve, Date settlementDate=Date()) -> Real
        bps(Bond bond, InterestRate _yield, Date settlementDate=Date()) -> Real
        bps(Bond bond, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date()) -> Real
        """
        return _quantlib_risks.BondFunctions_bps(*args)

    @staticmethod
    def bondYield(*args):
        r"""bondYield(Bond bond, Real cleanPrice, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date(), Real accuracy=1.0e-10, Size maxIterations=100, Rate guess=0.05) -> Rate"""
        return _quantlib_risks.BondFunctions_bondYield(*args)

    @staticmethod
    def duration(*args):
        r"""
        duration(Bond bond, InterestRate _yield, Duration::Type type=Modified, Date settlementDate=Date()) -> Time
        duration(Bond bond, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, Duration::Type type=Modified, Date settlementDate=Date()) -> Time
        """
        return _quantlib_risks.BondFunctions_duration(*args)

    @staticmethod
    def convexity(*args):
        r"""
        convexity(Bond bond, InterestRate _yield, Date settlementDate=Date()) -> Real
        convexity(Bond bond, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date()) -> Real
        """
        return _quantlib_risks.BondFunctions_convexity(*args)

    @staticmethod
    def basisPointValue(*args):
        r"""
        basisPointValue(Bond bond, InterestRate _yield, Date settlementDate=Date()) -> Real
        basisPointValue(Bond bond, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date()) -> Real
        """
        return _quantlib_risks.BondFunctions_basisPointValue(*args)

    @staticmethod
    def yieldValueBasisPoint(*args):
        r"""
        yieldValueBasisPoint(Bond bond, InterestRate _yield, Date settlementDate=Date()) -> Real
        yieldValueBasisPoint(Bond bond, Rate _yield, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date()) -> Real
        """
        return _quantlib_risks.BondFunctions_yieldValueBasisPoint(*args)

    @staticmethod
    def zSpread(*args):
        r"""zSpread(Bond bond, Real cleanPrice, ext::shared_ptr< YieldTermStructure > const & discountCurve, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date(), Real accuracy=1.0e-10, Size maxIterations=100, Rate guess=0.0) -> Spread"""
        return _quantlib_risks.BondFunctions_zSpread(*args)

    @staticmethod
    def yieldBrent(*args):
        r"""yieldBrent(Brent solver, Bond bond, Real cleanPrice, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date(), Real accuracy=1.0e-10, Rate guess=0.05) -> Rate"""
        return _quantlib_risks.BondFunctions_yieldBrent(*args)

    @staticmethod
    def yieldBisection(*args):
        r"""yieldBisection(Bisection solver, Bond bond, Real cleanPrice, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date(), Real accuracy=1.0e-10, Rate guess=0.05) -> Rate"""
        return _quantlib_risks.BondFunctions_yieldBisection(*args)

    @staticmethod
    def yieldFalsePosition(*args):
        r"""yieldFalsePosition(FalsePosition solver, Bond bond, Real cleanPrice, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date(), Real accuracy=1.0e-10, Rate guess=0.05) -> Rate"""
        return _quantlib_risks.BondFunctions_yieldFalsePosition(*args)

    @staticmethod
    def yieldRidder(*args):
        r"""yieldRidder(Ridder solver, Bond bond, Real cleanPrice, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date(), Real accuracy=1.0e-10, Rate guess=0.05) -> Rate"""
        return _quantlib_risks.BondFunctions_yieldRidder(*args)

    @staticmethod
    def yieldSecant(*args):
        r"""yieldSecant(Secant solver, Bond bond, Real cleanPrice, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date(), Real accuracy=1.0e-10, Rate guess=0.05) -> Rate"""
        return _quantlib_risks.BondFunctions_yieldSecant(*args)

    @staticmethod
    def yieldNewton(*args):
        r"""yieldNewton(Newton solver, Bond bond, Real cleanPrice, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date(), Real accuracy=1.0e-10, Rate guess=0.05) -> Rate"""
        return _quantlib_risks.BondFunctions_yieldNewton(*args)

    @staticmethod
    def yieldNewtonSafe(*args):
        r"""yieldNewtonSafe(NewtonSafe solver, Bond bond, Real cleanPrice, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate=Date(), Real accuracy=1.0e-10, Rate guess=0.05) -> Rate"""
        return _quantlib_risks.BondFunctions_yieldNewtonSafe(*args)

    def __init__(self):
        r"""__init__(BondFunctions self) -> BondFunctions"""
        _quantlib_risks.BondFunctions_swiginit(self, _quantlib_risks.new_BondFunctions())
    __swig_destroy__ = _quantlib_risks.delete_BondFunctions

# Register BondFunctions in _quantlib_risks:
_quantlib_risks.BondFunctions_swigregister(BondFunctions)
class BlackCalibrationHelper(CalibrationHelper):
    r"""Proxy of C++ BlackCalibrationHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    RelativePriceError = _quantlib_risks.BlackCalibrationHelper_RelativePriceError
    
    PriceError = _quantlib_risks.BlackCalibrationHelper_PriceError
    
    ImpliedVolError = _quantlib_risks.BlackCalibrationHelper_ImpliedVolError
    

    def setPricingEngine(self, engine):
        r"""setPricingEngine(BlackCalibrationHelper self, ext::shared_ptr< PricingEngine > const & engine)"""
        return _quantlib_risks.BlackCalibrationHelper_setPricingEngine(self, engine)

    def marketValue(self):
        r"""marketValue(BlackCalibrationHelper self) -> Real"""
        return _quantlib_risks.BlackCalibrationHelper_marketValue(self)

    def modelValue(self):
        r"""modelValue(BlackCalibrationHelper self) -> Real"""
        return _quantlib_risks.BlackCalibrationHelper_modelValue(self)

    def impliedVolatility(self, targetValue, accuracy, maxEvaluations, minVol, maxVol):
        r"""impliedVolatility(BlackCalibrationHelper self, Real targetValue, Real accuracy, Size maxEvaluations, Volatility minVol, Volatility maxVol) -> Volatility"""
        return _quantlib_risks.BlackCalibrationHelper_impliedVolatility(self, targetValue, accuracy, maxEvaluations, minVol, maxVol)

    def blackPrice(self, volatility):
        r"""blackPrice(BlackCalibrationHelper self, Volatility volatility) -> Real"""
        return _quantlib_risks.BlackCalibrationHelper_blackPrice(self, volatility)

    def volatility(self):
        r"""volatility(BlackCalibrationHelper self) -> QuoteHandle"""
        return _quantlib_risks.BlackCalibrationHelper_volatility(self)

    def volatilityType(self):
        r"""volatilityType(BlackCalibrationHelper self) -> VolatilityType"""
        return _quantlib_risks.BlackCalibrationHelper_volatilityType(self)

    def calibrationError(self):
        r"""calibrationError(BlackCalibrationHelper self) -> Real"""
        return _quantlib_risks.BlackCalibrationHelper_calibrationError(self)
    __swig_destroy__ = _quantlib_risks.delete_BlackCalibrationHelper

# Register BlackCalibrationHelper in _quantlib_risks:
_quantlib_risks.BlackCalibrationHelper_swigregister(BlackCalibrationHelper)

def as_black_helper(h):
    r"""as_black_helper(ext::shared_ptr< CalibrationHelper > const & h) -> ext::shared_ptr< BlackCalibrationHelper >"""
    return _quantlib_risks.as_black_helper(h)

def as_swaption_helper(h):
    r"""as_swaption_helper(ext::shared_ptr< BlackCalibrationHelper > const & h) -> ext::shared_ptr< SwaptionHelper >"""
    return _quantlib_risks.as_swaption_helper(h)
class SwaptionHelper(BlackCalibrationHelper):
    r"""Proxy of C++ SwaptionHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SwaptionHelper self, Period maturity, Period length, QuoteHandle volatility, ext::shared_ptr< IborIndex > const & index, Period fixedLegTenor, DayCounter fixedLegDayCounter, DayCounter floatingLegDayCounter, YieldTermStructureHandle termStructure, BlackCalibrationHelper::CalibrationErrorType errorType=RelativePriceError, Real const strike=Null< Real >(), Real const nominal=1.0, VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> SwaptionHelper
        __init__(SwaptionHelper self, Date exerciseDate, Period length, QuoteHandle volatility, ext::shared_ptr< IborIndex > const & index, Period fixedLegTenor, DayCounter fixedLegDayCounter, DayCounter floatingLegDayCounter, YieldTermStructureHandle termStructure, BlackCalibrationHelper::CalibrationErrorType errorType=RelativePriceError, Real const strike=Null< Real >(), Real const nominal=1.0, VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> SwaptionHelper
        __init__(SwaptionHelper self, Date exerciseDate, Date endDate, QuoteHandle volatility, ext::shared_ptr< IborIndex > const & index, Period fixedLegTenor, DayCounter fixedLegDayCounter, DayCounter floatingLegDayCounter, YieldTermStructureHandle termStructure, BlackCalibrationHelper::CalibrationErrorType errorType=RelativePriceError, Real const strike=Null< Real >(), Real const nominal=1.0, VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> SwaptionHelper
        """
        _quantlib_risks.SwaptionHelper_swiginit(self, _quantlib_risks.new_SwaptionHelper(*args))

    def underlyingSwap(self):
        r"""underlyingSwap(SwaptionHelper self) -> ext::shared_ptr< VanillaSwap >"""
        return _quantlib_risks.SwaptionHelper_underlyingSwap(self)

    def swaption(self):
        r"""swaption(SwaptionHelper self) -> ext::shared_ptr< Swaption >"""
        return _quantlib_risks.SwaptionHelper_swaption(self)

    def times(self):
        r"""times(SwaptionHelper self) -> std::vector< Time,std::allocator< Time > >"""
        return _quantlib_risks.SwaptionHelper_times(self)

    def swaptionExpiryDate(self):
        r"""swaptionExpiryDate(SwaptionHelper self) -> Date"""
        return _quantlib_risks.SwaptionHelper_swaptionExpiryDate(self)

    def swaptionStrike(self):
        r"""swaptionStrike(SwaptionHelper self) -> Real"""
        return _quantlib_risks.SwaptionHelper_swaptionStrike(self)

    def swaptionNominal(self):
        r"""swaptionNominal(SwaptionHelper self) -> Real"""
        return _quantlib_risks.SwaptionHelper_swaptionNominal(self)

    def swaptionMaturityDate(self):
        r"""swaptionMaturityDate(SwaptionHelper self) -> Date"""
        return _quantlib_risks.SwaptionHelper_swaptionMaturityDate(self)
    __swig_destroy__ = _quantlib_risks.delete_SwaptionHelper

# Register SwaptionHelper in _quantlib_risks:
_quantlib_risks.SwaptionHelper_swigregister(SwaptionHelper)
class CapHelper(BlackCalibrationHelper):
    r"""Proxy of C++ CapHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(CapHelper self, Period length, QuoteHandle volatility, ext::shared_ptr< IborIndex > const & index, Frequency fixedLegFrequency, DayCounter fixedLegDayCounter, bool includeFirstSwaplet, YieldTermStructureHandle termStructure, BlackCalibrationHelper::CalibrationErrorType errorType=RelativePriceError, VolatilityType const type=ShiftedLognormal, Real const shift=0.0) -> CapHelper"""
        _quantlib_risks.CapHelper_swiginit(self, _quantlib_risks.new_CapHelper(*args))

    def times(self):
        r"""times(CapHelper self) -> std::vector< Time,std::allocator< Time > >"""
        return _quantlib_risks.CapHelper_times(self)
    __swig_destroy__ = _quantlib_risks.delete_CapHelper

# Register CapHelper in _quantlib_risks:
_quantlib_risks.CapHelper_swigregister(CapHelper)
class HestonModelHelper(BlackCalibrationHelper):
    r"""Proxy of C++ HestonModelHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(HestonModelHelper self, Period maturity, Calendar calendar, Real const s0, Real const strikePrice, QuoteHandle volatility, YieldTermStructureHandle riskFreeRate, YieldTermStructureHandle dividendYield, BlackCalibrationHelper::CalibrationErrorType errorType=RelativePriceError) -> HestonModelHelper"""
        _quantlib_risks.HestonModelHelper_swiginit(self, _quantlib_risks.new_HestonModelHelper(*args))
    __swig_destroy__ = _quantlib_risks.delete_HestonModelHelper

# Register HestonModelHelper in _quantlib_risks:
_quantlib_risks.HestonModelHelper_swigregister(HestonModelHelper)
class BlackCalibrationHelperVector(object):
    r"""Proxy of C++ std::vector< ext::shared_ptr< BlackCalibrationHelper > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(BlackCalibrationHelperVector self) -> SwigPyIterator"""
        return _quantlib_risks.BlackCalibrationHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(BlackCalibrationHelperVector self) -> bool"""
        return _quantlib_risks.BlackCalibrationHelperVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(BlackCalibrationHelperVector self) -> bool"""
        return _quantlib_risks.BlackCalibrationHelperVector___bool__(self)

    def __len__(self):
        r"""__len__(BlackCalibrationHelperVector self) -> std::vector< ext::shared_ptr< BlackCalibrationHelper > >::size_type"""
        return _quantlib_risks.BlackCalibrationHelperVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(BlackCalibrationHelperVector self, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::difference_type i, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::difference_type j) -> BlackCalibrationHelperVector"""
        return _quantlib_risks.BlackCalibrationHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(BlackCalibrationHelperVector self, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::difference_type i, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::difference_type j)
        __setslice__(BlackCalibrationHelperVector self, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::difference_type i, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::difference_type j, BlackCalibrationHelperVector v)
        """
        return _quantlib_risks.BlackCalibrationHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(BlackCalibrationHelperVector self, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::difference_type i, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::difference_type j)"""
        return _quantlib_risks.BlackCalibrationHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(BlackCalibrationHelperVector self, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::difference_type i)
        __delitem__(BlackCalibrationHelperVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.BlackCalibrationHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(BlackCalibrationHelperVector self, SWIGPY_SLICEOBJECT * slice) -> BlackCalibrationHelperVector
        __getitem__(BlackCalibrationHelperVector self, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::difference_type i) -> std::vector< ext::shared_ptr< BlackCalibrationHelper > >::value_type const &
        """
        return _quantlib_risks.BlackCalibrationHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(BlackCalibrationHelperVector self, SWIGPY_SLICEOBJECT * slice, BlackCalibrationHelperVector v)
        __setitem__(BlackCalibrationHelperVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(BlackCalibrationHelperVector self, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::difference_type i, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::value_type const & x)
        """
        return _quantlib_risks.BlackCalibrationHelperVector___setitem__(self, *args)

    def pop(self):
        r"""pop(BlackCalibrationHelperVector self) -> std::vector< ext::shared_ptr< BlackCalibrationHelper > >::value_type"""
        return _quantlib_risks.BlackCalibrationHelperVector_pop(self)

    def append(self, x):
        r"""append(BlackCalibrationHelperVector self, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::value_type const & x)"""
        return _quantlib_risks.BlackCalibrationHelperVector_append(self, x)

    def empty(self):
        r"""empty(BlackCalibrationHelperVector self) -> bool"""
        return _quantlib_risks.BlackCalibrationHelperVector_empty(self)

    def size(self):
        r"""size(BlackCalibrationHelperVector self) -> std::vector< ext::shared_ptr< BlackCalibrationHelper > >::size_type"""
        return _quantlib_risks.BlackCalibrationHelperVector_size(self)

    def swap(self, v):
        r"""swap(BlackCalibrationHelperVector self, BlackCalibrationHelperVector v)"""
        return _quantlib_risks.BlackCalibrationHelperVector_swap(self, v)

    def begin(self):
        r"""begin(BlackCalibrationHelperVector self) -> std::vector< ext::shared_ptr< BlackCalibrationHelper > >::iterator"""
        return _quantlib_risks.BlackCalibrationHelperVector_begin(self)

    def end(self):
        r"""end(BlackCalibrationHelperVector self) -> std::vector< ext::shared_ptr< BlackCalibrationHelper > >::iterator"""
        return _quantlib_risks.BlackCalibrationHelperVector_end(self)

    def rbegin(self):
        r"""rbegin(BlackCalibrationHelperVector self) -> std::vector< ext::shared_ptr< BlackCalibrationHelper > >::reverse_iterator"""
        return _quantlib_risks.BlackCalibrationHelperVector_rbegin(self)

    def rend(self):
        r"""rend(BlackCalibrationHelperVector self) -> std::vector< ext::shared_ptr< BlackCalibrationHelper > >::reverse_iterator"""
        return _quantlib_risks.BlackCalibrationHelperVector_rend(self)

    def clear(self):
        r"""clear(BlackCalibrationHelperVector self)"""
        return _quantlib_risks.BlackCalibrationHelperVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(BlackCalibrationHelperVector self) -> std::vector< ext::shared_ptr< BlackCalibrationHelper > >::allocator_type"""
        return _quantlib_risks.BlackCalibrationHelperVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(BlackCalibrationHelperVector self)"""
        return _quantlib_risks.BlackCalibrationHelperVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(BlackCalibrationHelperVector self, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::iterator pos) -> std::vector< ext::shared_ptr< BlackCalibrationHelper > >::iterator
        erase(BlackCalibrationHelperVector self, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::iterator first, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::iterator last) -> std::vector< ext::shared_ptr< BlackCalibrationHelper > >::iterator
        """
        return _quantlib_risks.BlackCalibrationHelperVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(BlackCalibrationHelperVector self) -> BlackCalibrationHelperVector
        __init__(BlackCalibrationHelperVector self, BlackCalibrationHelperVector other) -> BlackCalibrationHelperVector
        __init__(BlackCalibrationHelperVector self, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::size_type size) -> BlackCalibrationHelperVector
        __init__(BlackCalibrationHelperVector self, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::size_type size, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::value_type const & value) -> BlackCalibrationHelperVector
        """
        _quantlib_risks.BlackCalibrationHelperVector_swiginit(self, _quantlib_risks.new_BlackCalibrationHelperVector(*args))

    def push_back(self, x):
        r"""push_back(BlackCalibrationHelperVector self, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::value_type const & x)"""
        return _quantlib_risks.BlackCalibrationHelperVector_push_back(self, x)

    def front(self):
        r"""front(BlackCalibrationHelperVector self) -> std::vector< ext::shared_ptr< BlackCalibrationHelper > >::value_type const &"""
        return _quantlib_risks.BlackCalibrationHelperVector_front(self)

    def back(self):
        r"""back(BlackCalibrationHelperVector self) -> std::vector< ext::shared_ptr< BlackCalibrationHelper > >::value_type const &"""
        return _quantlib_risks.BlackCalibrationHelperVector_back(self)

    def assign(self, n, x):
        r"""assign(BlackCalibrationHelperVector self, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::size_type n, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::value_type const & x)"""
        return _quantlib_risks.BlackCalibrationHelperVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(BlackCalibrationHelperVector self, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::size_type new_size)
        resize(BlackCalibrationHelperVector self, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::size_type new_size, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::value_type const & x)
        """
        return _quantlib_risks.BlackCalibrationHelperVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(BlackCalibrationHelperVector self, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::iterator pos, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::value_type const & x) -> std::vector< ext::shared_ptr< BlackCalibrationHelper > >::iterator
        insert(BlackCalibrationHelperVector self, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::iterator pos, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::size_type n, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::value_type const & x)
        """
        return _quantlib_risks.BlackCalibrationHelperVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(BlackCalibrationHelperVector self, std::vector< ext::shared_ptr< BlackCalibrationHelper > >::size_type n)"""
        return _quantlib_risks.BlackCalibrationHelperVector_reserve(self, n)

    def capacity(self):
        r"""capacity(BlackCalibrationHelperVector self) -> std::vector< ext::shared_ptr< BlackCalibrationHelper > >::size_type"""
        return _quantlib_risks.BlackCalibrationHelperVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_BlackCalibrationHelperVector

# Register BlackCalibrationHelperVector in _quantlib_risks:
_quantlib_risks.BlackCalibrationHelperVector_swigregister(BlackCalibrationHelperVector)
class CapFloor(Instrument):
    r"""Proxy of C++ CapFloor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def impliedVolatility(self, price, disc, guess, accuracy=1.0e-4, maxEvaluations=100, minVol=1.0e-7, maxVol=4.0, type=ShiftedLognormal, displacement=0.0):
        r"""impliedVolatility(CapFloor self, Real price, YieldTermStructureHandle disc, Volatility guess, Real accuracy=1.0e-4, Natural maxEvaluations=100, Volatility minVol=1.0e-7, Volatility maxVol=4.0, VolatilityType type=ShiftedLognormal, Real displacement=0.0) -> Volatility"""
        return _quantlib_risks.CapFloor_impliedVolatility(self, price, disc, guess, accuracy, maxEvaluations, minVol, maxVol, type, displacement)
    Cap = _quantlib_risks.CapFloor_Cap
    
    Floor = _quantlib_risks.CapFloor_Floor
    
    Collar = _quantlib_risks.CapFloor_Collar
    

    def floatingLeg(self):
        r"""floatingLeg(CapFloor self) -> Leg"""
        return _quantlib_risks.CapFloor_floatingLeg(self)

    def capRates(self):
        r"""capRates(CapFloor self) -> std::vector< Rate,std::allocator< Rate > > const &"""
        return _quantlib_risks.CapFloor_capRates(self)

    def floorRates(self):
        r"""floorRates(CapFloor self) -> std::vector< Rate,std::allocator< Rate > > const &"""
        return _quantlib_risks.CapFloor_floorRates(self)

    def startDate(self):
        r"""startDate(CapFloor self) -> Date"""
        return _quantlib_risks.CapFloor_startDate(self)

    def maturityDate(self):
        r"""maturityDate(CapFloor self) -> Date"""
        return _quantlib_risks.CapFloor_maturityDate(self)

    def type(self):
        r"""type(CapFloor self) -> CapFloor::Type"""
        return _quantlib_risks.CapFloor_type(self)

    def atmRate(self, discountCurve):
        r"""atmRate(CapFloor self, YieldTermStructure discountCurve) -> Rate"""
        return _quantlib_risks.CapFloor_atmRate(self, discountCurve)

    def vega(self):
        r"""vega(CapFloor self) -> Real const"""
        return _quantlib_risks.CapFloor_vega(self)

    def optionletsPrice(self):
        r"""optionletsPrice(CapFloor self) -> std::vector< Real,std::allocator< Real > > const"""
        return _quantlib_risks.CapFloor_optionletsPrice(self)

    def optionletsVega(self):
        r"""optionletsVega(CapFloor self) -> std::vector< Real,std::allocator< Real > > const"""
        return _quantlib_risks.CapFloor_optionletsVega(self)

    def optionletsDelta(self):
        r"""optionletsDelta(CapFloor self) -> std::vector< Real,std::allocator< Real > > const"""
        return _quantlib_risks.CapFloor_optionletsDelta(self)

    def optionletsDiscountFactor(self):
        r"""optionletsDiscountFactor(CapFloor self) -> std::vector< DiscountFactor,std::allocator< DiscountFactor > > const"""
        return _quantlib_risks.CapFloor_optionletsDiscountFactor(self)

    def optionletsAtmForward(self):
        r"""optionletsAtmForward(CapFloor self) -> std::vector< Rate,std::allocator< Rate > > const"""
        return _quantlib_risks.CapFloor_optionletsAtmForward(self)

    def optionletsStdDev(self):
        r"""optionletsStdDev(CapFloor self) -> std::vector< Rate,std::allocator< Rate > > const"""
        return _quantlib_risks.CapFloor_optionletsStdDev(self)
    __swig_destroy__ = _quantlib_risks.delete_CapFloor

# Register CapFloor in _quantlib_risks:
_quantlib_risks.CapFloor_swigregister(CapFloor)
class Cap(CapFloor):
    r"""Proxy of C++ Cap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, leg, capRates):
        r"""__init__(Cap self, Leg leg, std::vector< Rate,std::allocator< Rate > > const & capRates) -> Cap"""
        _quantlib_risks.Cap_swiginit(self, _quantlib_risks.new_Cap(leg, capRates))
    __swig_destroy__ = _quantlib_risks.delete_Cap

# Register Cap in _quantlib_risks:
_quantlib_risks.Cap_swigregister(Cap)
class Floor(CapFloor):
    r"""Proxy of C++ Floor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, leg, floorRates):
        r"""__init__(Floor self, Leg leg, std::vector< Rate,std::allocator< Rate > > const & floorRates) -> Floor"""
        _quantlib_risks.Floor_swiginit(self, _quantlib_risks.new_Floor(leg, floorRates))
    __swig_destroy__ = _quantlib_risks.delete_Floor

# Register Floor in _quantlib_risks:
_quantlib_risks.Floor_swigregister(Floor)
class Collar(CapFloor):
    r"""Proxy of C++ Collar class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, leg, capRates, floorRates):
        r"""__init__(Collar self, Leg leg, std::vector< Rate,std::allocator< Rate > > const & capRates, std::vector< Rate,std::allocator< Rate > > const & floorRates) -> Collar"""
        _quantlib_risks.Collar_swiginit(self, _quantlib_risks.new_Collar(leg, capRates, floorRates))
    __swig_destroy__ = _quantlib_risks.delete_Collar

# Register Collar in _quantlib_risks:
_quantlib_risks.Collar_swigregister(Collar)
class BlackCapFloorEngine(PricingEngine):
    r"""Proxy of C++ BlackCapFloorEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BlackCapFloorEngine self, YieldTermStructureHandle termStructure, QuoteHandle vol, DayCounter dc=Actual365Fixed(), Real displacement=0.0) -> BlackCapFloorEngine
        __init__(BlackCapFloorEngine self, YieldTermStructureHandle termStructure, OptionletVolatilityStructureHandle vol, Real displacement=Null< Real >()) -> BlackCapFloorEngine
        """
        _quantlib_risks.BlackCapFloorEngine_swiginit(self, _quantlib_risks.new_BlackCapFloorEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_BlackCapFloorEngine

# Register BlackCapFloorEngine in _quantlib_risks:
_quantlib_risks.BlackCapFloorEngine_swigregister(BlackCapFloorEngine)
class BachelierCapFloorEngine(PricingEngine):
    r"""Proxy of C++ BachelierCapFloorEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BachelierCapFloorEngine self, YieldTermStructureHandle termStructure, QuoteHandle vol) -> BachelierCapFloorEngine
        __init__(BachelierCapFloorEngine self, YieldTermStructureHandle termStructure, OptionletVolatilityStructureHandle vol) -> BachelierCapFloorEngine
        """
        _quantlib_risks.BachelierCapFloorEngine_swiginit(self, _quantlib_risks.new_BachelierCapFloorEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_BachelierCapFloorEngine

# Register BachelierCapFloorEngine in _quantlib_risks:
_quantlib_risks.BachelierCapFloorEngine_swigregister(BachelierCapFloorEngine)
class CliquetOption(OneAssetOption):
    r"""Proxy of C++ CliquetOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff, maturity, resetDates):
        r"""__init__(CliquetOption self, ext::shared_ptr< PercentageStrikePayoff > const & payoff, ext::shared_ptr< EuropeanExercise > const & maturity, DateVector resetDates) -> CliquetOption"""
        _quantlib_risks.CliquetOption_swiginit(self, _quantlib_risks.new_CliquetOption(payoff, maturity, resetDates))
    __swig_destroy__ = _quantlib_risks.delete_CliquetOption

# Register CliquetOption in _quantlib_risks:
_quantlib_risks.CliquetOption_swigregister(CliquetOption)
class AnalyticCliquetEngine(PricingEngine):
    r"""Proxy of C++ AnalyticCliquetEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(AnalyticCliquetEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process) -> AnalyticCliquetEngine"""
        _quantlib_risks.AnalyticCliquetEngine_swiginit(self, _quantlib_risks.new_AnalyticCliquetEngine(process))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticCliquetEngine

# Register AnalyticCliquetEngine in _quantlib_risks:
_quantlib_risks.AnalyticCliquetEngine_swigregister(AnalyticCliquetEngine)
class AnalyticPerformanceEngine(PricingEngine):
    r"""Proxy of C++ AnalyticPerformanceEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(AnalyticPerformanceEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const process) -> AnalyticPerformanceEngine"""
        _quantlib_risks.AnalyticPerformanceEngine_swiginit(self, _quantlib_risks.new_AnalyticPerformanceEngine(process))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticPerformanceEngine

# Register AnalyticPerformanceEngine in _quantlib_risks:
_quantlib_risks.AnalyticPerformanceEngine_swigregister(AnalyticPerformanceEngine)
class MCPRPerformanceEngine(PricingEngine):
    r"""Proxy of C++ MCPerformanceEngine< PseudoRandom > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCPRPerformanceEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > process, bool brownianBridge=False, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0) -> MCPRPerformanceEngine"""
        _quantlib_risks.MCPRPerformanceEngine_swiginit(self, _quantlib_risks.new_MCPRPerformanceEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCPRPerformanceEngine

# Register MCPRPerformanceEngine in _quantlib_risks:
_quantlib_risks.MCPRPerformanceEngine_swigregister(MCPRPerformanceEngine)
class MCLDPerformanceEngine(PricingEngine):
    r"""Proxy of C++ MCPerformanceEngine< LowDiscrepancy > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(MCLDPerformanceEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > process, bool brownianBridge=False, bool antitheticVariate=False, intOrNull requiredSamples=Null< Size >(), doubleOrNull requiredTolerance=Null< Real >(), intOrNull maxSamples=Null< Size >(), BigInteger seed=0) -> MCLDPerformanceEngine"""
        _quantlib_risks.MCLDPerformanceEngine_swiginit(self, _quantlib_risks.new_MCLDPerformanceEngine(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_MCLDPerformanceEngine

# Register MCLDPerformanceEngine in _quantlib_risks:
_quantlib_risks.MCLDPerformanceEngine_swigregister(MCLDPerformanceEngine)

def MCPerformanceEngine(process,
                        traits,
                        brownianBridge=False,
                        antitheticVariate=False,
                        requiredSamples=None,
                        requiredTolerance=None,
                        maxSamples=None,
                        seed=0):
    traits = traits.lower()
    if traits == "pr" or traits == "pseudorandom":
        cls = MCPRPerformanceEngine
    elif traits == "ld" or traits == "lowdiscrepancy":
        cls = MCLDPerformanceEngine
    else:
        raise RuntimeError("unknown MC traits: %s" % traits);
    return cls(process,
               brownianBridge,
               antitheticVariate,
               requiredSamples,
               requiredTolerance,
               maxSamples,
               seed)

class ConvertibleZeroCouponBond(Bond):
    r"""Proxy of C++ ConvertibleZeroCouponBond class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, exercise, conversionRatio, callability, issueDate, settlementDays, dayCounter, schedule, redemption=100.0):
        r"""__init__(ConvertibleZeroCouponBond self, ext::shared_ptr< Exercise > const & exercise, Real conversionRatio, CallabilitySchedule callability, Date issueDate, Integer settlementDays, DayCounter dayCounter, Schedule schedule, Real redemption=100.0) -> ConvertibleZeroCouponBond"""
        _quantlib_risks.ConvertibleZeroCouponBond_swiginit(self, _quantlib_risks.new_ConvertibleZeroCouponBond(exercise, conversionRatio, callability, issueDate, settlementDays, dayCounter, schedule, redemption))
    __swig_destroy__ = _quantlib_risks.delete_ConvertibleZeroCouponBond

# Register ConvertibleZeroCouponBond in _quantlib_risks:
_quantlib_risks.ConvertibleZeroCouponBond_swigregister(ConvertibleZeroCouponBond)
class ConvertibleFixedCouponBond(Bond):
    r"""Proxy of C++ ConvertibleFixedCouponBond class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ConvertibleFixedCouponBond self, ext::shared_ptr< Exercise > const & exercise, Real conversionRatio, CallabilitySchedule callability, Date issueDate, Integer settlementDays, std::vector< Rate,std::allocator< Rate > > const & coupons, DayCounter dayCounter, Schedule schedule, Real redemption=100.0, Period exCouponPeriod=Period(), Calendar exCouponCalendar=Calendar(), BusinessDayConvention const exCouponConvention=Unadjusted, bool exCouponEndOfMonth=False) -> ConvertibleFixedCouponBond"""
        _quantlib_risks.ConvertibleFixedCouponBond_swiginit(self, _quantlib_risks.new_ConvertibleFixedCouponBond(*args))
    __swig_destroy__ = _quantlib_risks.delete_ConvertibleFixedCouponBond

# Register ConvertibleFixedCouponBond in _quantlib_risks:
_quantlib_risks.ConvertibleFixedCouponBond_swigregister(ConvertibleFixedCouponBond)
class ConvertibleFloatingRateBond(Bond):
    r"""Proxy of C++ ConvertibleFloatingRateBond class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ConvertibleFloatingRateBond self, ext::shared_ptr< Exercise > const & exercise, Real conversionRatio, CallabilitySchedule callability, Date issueDate, Integer settlementDays, ext::shared_ptr< IborIndex > const & index, Integer fixingDays, std::vector< Spread,std::allocator< Spread > > const & spreads, DayCounter dayCounter, Schedule schedule, Real redemption=100.0, Period exCouponPeriod=Period(), Calendar exCouponCalendar=Calendar(), BusinessDayConvention const exCouponConvention=Unadjusted, bool exCouponEndOfMonth=False) -> ConvertibleFloatingRateBond"""
        _quantlib_risks.ConvertibleFloatingRateBond_swiginit(self, _quantlib_risks.new_ConvertibleFloatingRateBond(*args))
    __swig_destroy__ = _quantlib_risks.delete_ConvertibleFloatingRateBond

# Register ConvertibleFloatingRateBond in _quantlib_risks:
_quantlib_risks.ConvertibleFloatingRateBond_swigregister(ConvertibleFloatingRateBond)
class BinomialCRRConvertibleEngine(PricingEngine):
    r"""Proxy of C++ BinomialConvertibleEngine< CoxRossRubinstein > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(BinomialCRRConvertibleEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > arg2, Size steps, QuoteHandle creditSpread, DividendSchedule dividends=std::vector< ext::shared_ptr< Dividend > >()) -> BinomialCRRConvertibleEngine"""
        _quantlib_risks.BinomialCRRConvertibleEngine_swiginit(self, _quantlib_risks.new_BinomialCRRConvertibleEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_BinomialCRRConvertibleEngine

# Register BinomialCRRConvertibleEngine in _quantlib_risks:
_quantlib_risks.BinomialCRRConvertibleEngine_swigregister(BinomialCRRConvertibleEngine)
class BinomialJRConvertibleEngine(PricingEngine):
    r"""Proxy of C++ BinomialConvertibleEngine< JarrowRudd > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(BinomialJRConvertibleEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > arg2, Size steps, QuoteHandle creditSpread, DividendSchedule dividends=std::vector< ext::shared_ptr< Dividend > >()) -> BinomialJRConvertibleEngine"""
        _quantlib_risks.BinomialJRConvertibleEngine_swiginit(self, _quantlib_risks.new_BinomialJRConvertibleEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_BinomialJRConvertibleEngine

# Register BinomialJRConvertibleEngine in _quantlib_risks:
_quantlib_risks.BinomialJRConvertibleEngine_swigregister(BinomialJRConvertibleEngine)
class BinomialEQPConvertibleEngine(PricingEngine):
    r"""Proxy of C++ BinomialConvertibleEngine< AdditiveEQPBinomialTree > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(BinomialEQPConvertibleEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > arg2, Size steps, QuoteHandle creditSpread, DividendSchedule dividends=std::vector< ext::shared_ptr< Dividend > >()) -> BinomialEQPConvertibleEngine"""
        _quantlib_risks.BinomialEQPConvertibleEngine_swiginit(self, _quantlib_risks.new_BinomialEQPConvertibleEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_BinomialEQPConvertibleEngine

# Register BinomialEQPConvertibleEngine in _quantlib_risks:
_quantlib_risks.BinomialEQPConvertibleEngine_swigregister(BinomialEQPConvertibleEngine)
class BinomialTrigeorgisConvertibleEngine(PricingEngine):
    r"""Proxy of C++ BinomialConvertibleEngine< Trigeorgis > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(BinomialTrigeorgisConvertibleEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > arg2, Size steps, QuoteHandle creditSpread, DividendSchedule dividends=std::vector< ext::shared_ptr< Dividend > >()) -> BinomialTrigeorgisConvertibleEngine"""
        _quantlib_risks.BinomialTrigeorgisConvertibleEngine_swiginit(self, _quantlib_risks.new_BinomialTrigeorgisConvertibleEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_BinomialTrigeorgisConvertibleEngine

# Register BinomialTrigeorgisConvertibleEngine in _quantlib_risks:
_quantlib_risks.BinomialTrigeorgisConvertibleEngine_swigregister(BinomialTrigeorgisConvertibleEngine)
class BinomialTianConvertibleEngine(PricingEngine):
    r"""Proxy of C++ BinomialConvertibleEngine< Tian > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(BinomialTianConvertibleEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > arg2, Size steps, QuoteHandle creditSpread, DividendSchedule dividends=std::vector< ext::shared_ptr< Dividend > >()) -> BinomialTianConvertibleEngine"""
        _quantlib_risks.BinomialTianConvertibleEngine_swiginit(self, _quantlib_risks.new_BinomialTianConvertibleEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_BinomialTianConvertibleEngine

# Register BinomialTianConvertibleEngine in _quantlib_risks:
_quantlib_risks.BinomialTianConvertibleEngine_swigregister(BinomialTianConvertibleEngine)
class BinomialLRConvertibleEngine(PricingEngine):
    r"""Proxy of C++ BinomialConvertibleEngine< LeisenReimer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(BinomialLRConvertibleEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > arg2, Size steps, QuoteHandle creditSpread, DividendSchedule dividends=std::vector< ext::shared_ptr< Dividend > >()) -> BinomialLRConvertibleEngine"""
        _quantlib_risks.BinomialLRConvertibleEngine_swiginit(self, _quantlib_risks.new_BinomialLRConvertibleEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_BinomialLRConvertibleEngine

# Register BinomialLRConvertibleEngine in _quantlib_risks:
_quantlib_risks.BinomialLRConvertibleEngine_swigregister(BinomialLRConvertibleEngine)
class BinomialJ4ConvertibleEngine(PricingEngine):
    r"""Proxy of C++ BinomialConvertibleEngine< Joshi4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(BinomialJ4ConvertibleEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > arg2, Size steps, QuoteHandle creditSpread, DividendSchedule dividends=std::vector< ext::shared_ptr< Dividend > >()) -> BinomialJ4ConvertibleEngine"""
        _quantlib_risks.BinomialJ4ConvertibleEngine_swiginit(self, _quantlib_risks.new_BinomialJ4ConvertibleEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_BinomialJ4ConvertibleEngine

# Register BinomialJ4ConvertibleEngine in _quantlib_risks:
_quantlib_risks.BinomialJ4ConvertibleEngine_swigregister(BinomialJ4ConvertibleEngine)

def BinomialConvertibleEngine(process, type, steps, creditSpread, dividends=[]):
    type = type.lower()
    if type == "crr" or type == "coxrossrubinstein":
        cls = BinomialCRRConvertibleEngine
    elif type == "jr" or type == "jarrowrudd":
        cls = BinomialJRConvertibleEngine
    elif type == "eqp":
        cls = BinomialEQPConvertibleEngine
    elif type == "trigeorgis":
        cls = BinomialTrigeorgisConvertibleEngine
    elif type == "tian":
        cls = BinomialTianConvertibleEngine
    elif type == "lr" or type == "leisenreimer":
        cls = BinomialLRConvertibleEngine
    elif type == "j4" or type == "joshi4":
        cls = BinomialJ4ConvertibleEngine
    else:
        raise RuntimeError("unknown binomial engine type: %s" % type);
    return cls(process, steps, creditSpread, dividends)

class Forward(Instrument):
    r"""Proxy of C++ Forward class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def settlementDate(self):
        r"""settlementDate(Forward self) -> Date"""
        return _quantlib_risks.Forward_settlementDate(self)

    def isExpired(self):
        r"""isExpired(Forward self) -> bool"""
        return _quantlib_risks.Forward_isExpired(self)

    def calendar(self):
        r"""calendar(Forward self) -> Calendar"""
        return _quantlib_risks.Forward_calendar(self)

    def businessDayConvention(self):
        r"""businessDayConvention(Forward self) -> BusinessDayConvention"""
        return _quantlib_risks.Forward_businessDayConvention(self)

    def dayCounter(self):
        r"""dayCounter(Forward self) -> DayCounter"""
        return _quantlib_risks.Forward_dayCounter(self)

    def discountCurve(self):
        r"""discountCurve(Forward self) -> YieldTermStructureHandle"""
        return _quantlib_risks.Forward_discountCurve(self)

    def incomeDiscountCurve(self):
        r"""incomeDiscountCurve(Forward self) -> YieldTermStructureHandle"""
        return _quantlib_risks.Forward_incomeDiscountCurve(self)

    def spotValue(self):
        r"""spotValue(Forward self) -> Real"""
        return _quantlib_risks.Forward_spotValue(self)

    def spotIncome(self, incomeDiscountCurve):
        r"""spotIncome(Forward self, YieldTermStructureHandle incomeDiscountCurve) -> Real"""
        return _quantlib_risks.Forward_spotIncome(self, incomeDiscountCurve)

    def forwardValue(self):
        r"""forwardValue(Forward self) -> Real"""
        return _quantlib_risks.Forward_forwardValue(self)

    def impliedYield(self, underlyingSpotValue, forwardValue, settlementDate, compoundingConvention, dayCounter):
        r"""impliedYield(Forward self, Real underlyingSpotValue, Real forwardValue, Date settlementDate, Compounding compoundingConvention, DayCounter dayCounter) -> InterestRate"""
        return _quantlib_risks.Forward_impliedYield(self, underlyingSpotValue, forwardValue, settlementDate, compoundingConvention, dayCounter)
    __swig_destroy__ = _quantlib_risks.delete_Forward

# Register Forward in _quantlib_risks:
_quantlib_risks.Forward_swigregister(Forward)
class BondForward(Forward):
    r"""Proxy of C++ BondForward class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(BondForward self, Date valueDate, Date maturityDate, Position::Type type, Real strike, Natural settlementDays, DayCounter dayCounter, Calendar calendar, BusinessDayConvention businessDayConvention, ext::shared_ptr< Bond > const & bond, YieldTermStructureHandle discountCurve=Handle< YieldTermStructure >(), YieldTermStructureHandle incomeDiscountCurve=Handle< YieldTermStructure >()) -> BondForward"""
        _quantlib_risks.BondForward_swiginit(self, _quantlib_risks.new_BondForward(*args))

    def forwardPrice(self):
        r"""forwardPrice(BondForward self) -> Real"""
        return _quantlib_risks.BondForward_forwardPrice(self)

    def cleanForwardPrice(self):
        r"""cleanForwardPrice(BondForward self) -> Real"""
        return _quantlib_risks.BondForward_cleanForwardPrice(self)
    __swig_destroy__ = _quantlib_risks.delete_BondForward

# Register BondForward in _quantlib_risks:
_quantlib_risks.BondForward_swigregister(BondForward)
class FixedRateBondForward(BondForward):
    r"""Proxy of C++ FixedRateBondForward class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(FixedRateBondForward self, Date valueDate, Date maturityDate, Position::Type type, Real strike, Natural settlementDays, DayCounter dayCounter, Calendar calendar, BusinessDayConvention businessDayConvention, ext::shared_ptr< FixedRateBond > const & fixedBond, YieldTermStructureHandle discountCurve=Handle< YieldTermStructure >(), YieldTermStructureHandle incomeDiscountCurve=Handle< YieldTermStructure >()) -> FixedRateBondForward"""
        _quantlib_risks.FixedRateBondForward_swiginit(self, _quantlib_risks.new_FixedRateBondForward(*args))
    __swig_destroy__ = _quantlib_risks.delete_FixedRateBondForward

# Register FixedRateBondForward in _quantlib_risks:
_quantlib_risks.FixedRateBondForward_swigregister(FixedRateBondForward)
class Futures(object):
    r"""Proxy of C++ Futures class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    IMM = _quantlib_risks.Futures_IMM
    
    ASX = _quantlib_risks.Futures_ASX
    

    def __init__(self):
        r"""__init__(Futures self) -> Futures"""
        _quantlib_risks.Futures_swiginit(self, _quantlib_risks.new_Futures())
    __swig_destroy__ = _quantlib_risks.delete_Futures

# Register Futures in _quantlib_risks:
_quantlib_risks.Futures_swigregister(Futures)
class OvernightIndexFuture(Instrument):
    r"""Proxy of C++ OvernightIndexFuture class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(OvernightIndexFuture self, ext::shared_ptr< OvernightIndex > overnightIndex, Date valueDate, Date maturityDate, QuoteHandle convexityAdjustment=Handle< Quote >(), RateAveraging::Type averagingMethod=Compound) -> OvernightIndexFuture"""
        _quantlib_risks.OvernightIndexFuture_swiginit(self, _quantlib_risks.new_OvernightIndexFuture(*args))

    def convexityAdjustment(self):
        r"""convexityAdjustment(OvernightIndexFuture self) -> Real"""
        return _quantlib_risks.OvernightIndexFuture_convexityAdjustment(self)
    __swig_destroy__ = _quantlib_risks.delete_OvernightIndexFuture

# Register OvernightIndexFuture in _quantlib_risks:
_quantlib_risks.OvernightIndexFuture_swigregister(OvernightIndexFuture)
class Pillar(object):
    r"""Proxy of C++ Pillar class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MaturityDate = _quantlib_risks.Pillar_MaturityDate
    
    LastRelevantDate = _quantlib_risks.Pillar_LastRelevantDate
    
    CustomDate = _quantlib_risks.Pillar_CustomDate
    

    def __init__(self):
        r"""__init__(Pillar self) -> Pillar"""
        _quantlib_risks.Pillar_swiginit(self, _quantlib_risks.new_Pillar())
    __swig_destroy__ = _quantlib_risks.delete_Pillar

# Register Pillar in _quantlib_risks:
_quantlib_risks.Pillar_swigregister(Pillar)
class RateHelper(Observable):
    r"""Proxy of C++ RateHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def quote(self):
        r"""quote(RateHelper self) -> QuoteHandle"""
        return _quantlib_risks.RateHelper_quote(self)

    def latestDate(self):
        r"""latestDate(RateHelper self) -> Date"""
        return _quantlib_risks.RateHelper_latestDate(self)

    def earliestDate(self):
        r"""earliestDate(RateHelper self) -> Date"""
        return _quantlib_risks.RateHelper_earliestDate(self)

    def maturityDate(self):
        r"""maturityDate(RateHelper self) -> Date"""
        return _quantlib_risks.RateHelper_maturityDate(self)

    def latestRelevantDate(self):
        r"""latestRelevantDate(RateHelper self) -> Date"""
        return _quantlib_risks.RateHelper_latestRelevantDate(self)

    def pillarDate(self):
        r"""pillarDate(RateHelper self) -> Date"""
        return _quantlib_risks.RateHelper_pillarDate(self)

    def impliedQuote(self):
        r"""impliedQuote(RateHelper self) -> Real"""
        return _quantlib_risks.RateHelper_impliedQuote(self)

    def quoteError(self):
        r"""quoteError(RateHelper self) -> Real"""
        return _quantlib_risks.RateHelper_quoteError(self)
    __swig_destroy__ = _quantlib_risks.delete_RateHelper

# Register RateHelper in _quantlib_risks:
_quantlib_risks.RateHelper_swigregister(RateHelper)
class DepositRateHelper(RateHelper):
    r"""Proxy of C++ DepositRateHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DepositRateHelper self, QuoteHandle rate, Period tenor, Natural fixingDays, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, DayCounter dayCounter) -> DepositRateHelper
        __init__(DepositRateHelper self, Rate rate, Period tenor, Natural fixingDays, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, DayCounter dayCounter) -> DepositRateHelper
        __init__(DepositRateHelper self, QuoteHandle rate, ext::shared_ptr< IborIndex > const & index) -> DepositRateHelper
        __init__(DepositRateHelper self, Rate rate, ext::shared_ptr< IborIndex > const & index) -> DepositRateHelper
        """
        _quantlib_risks.DepositRateHelper_swiginit(self, _quantlib_risks.new_DepositRateHelper(*args))
    __swig_destroy__ = _quantlib_risks.delete_DepositRateHelper

# Register DepositRateHelper in _quantlib_risks:
_quantlib_risks.DepositRateHelper_swigregister(DepositRateHelper)
class FraRateHelper(RateHelper):
    r"""Proxy of C++ FraRateHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FraRateHelper self, QuoteHandle rate, Natural monthsToStart, Natural monthsToEnd, Natural fixingDays, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, DayCounter dayCounter, Pillar::Choice pillar=LastRelevantDate, Date customPillarDate=Date(), bool useIndexedCoupon=True) -> FraRateHelper
        __init__(FraRateHelper self, Rate rate, Natural monthsToStart, Natural monthsToEnd, Natural fixingDays, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, DayCounter dayCounter, Pillar::Choice pillar=LastRelevantDate, Date customPillarDate=Date(), bool useIndexedCoupon=True) -> FraRateHelper
        __init__(FraRateHelper self, QuoteHandle rate, Natural monthsToStart, ext::shared_ptr< IborIndex > const & index, Pillar::Choice pillar=LastRelevantDate, Date customPillarDate=Date(), bool useIndexedCoupon=True) -> FraRateHelper
        __init__(FraRateHelper self, Rate rate, Natural monthsToStart, ext::shared_ptr< IborIndex > const & index, Pillar::Choice pillar=LastRelevantDate, Date customPillarDate=Date(), bool useIndexedCoupon=True) -> FraRateHelper
        __init__(FraRateHelper self, QuoteHandle rate, Natural immOffsetStart, Natural immOffsetEnd, ext::shared_ptr< IborIndex > const & iborIndex, Pillar::Choice pillar=LastRelevantDate, Date customPillarDate=Date(), bool useIndexedCoupon=True) -> FraRateHelper
        __init__(FraRateHelper self, Rate rate, Natural immOffsetStart, Natural immOffsetEnd, ext::shared_ptr< IborIndex > const & iborIndex, Pillar::Choice pillar=LastRelevantDate, Date customPillarDate=Date(), bool useIndexedCoupon=True) -> FraRateHelper
        __init__(FraRateHelper self, Rate rate, Period periodToStart, ext::shared_ptr< IborIndex > const & iborIndex, Pillar::Choice pillar=LastRelevantDate, Date customPillarDate=Date(), bool useIndexedCoupon=True) -> FraRateHelper
        __init__(FraRateHelper self, QuoteHandle rate, Period periodToStart, ext::shared_ptr< IborIndex > const & iborIndex, Pillar::Choice pillar=LastRelevantDate, Date customPillarDate=Date(), bool useIndexedCoupon=True) -> FraRateHelper
        """
        _quantlib_risks.FraRateHelper_swiginit(self, _quantlib_risks.new_FraRateHelper(*args))
    __swig_destroy__ = _quantlib_risks.delete_FraRateHelper

# Register FraRateHelper in _quantlib_risks:
_quantlib_risks.FraRateHelper_swigregister(FraRateHelper)
class FuturesRateHelper(RateHelper):
    r"""Proxy of C++ FuturesRateHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FuturesRateHelper self, QuoteHandle price, Date iborStartDate, Natural nMonths, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, DayCounter dayCounter, QuoteHandle convexityAdjustment=Handle< Quote >(), Futures::Type type=IMM) -> FuturesRateHelper
        __init__(FuturesRateHelper self, Real price, Date iborStartDate, Natural nMonths, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, DayCounter dayCounter, Rate convexityAdjustment=0.0, Futures::Type type=IMM) -> FuturesRateHelper
        __init__(FuturesRateHelper self, QuoteHandle price, Date iborStartDate, Date iborEndDate, DayCounter dayCounter, QuoteHandle convexityAdjustment=Handle< Quote >(), Futures::Type type=IMM) -> FuturesRateHelper
        __init__(FuturesRateHelper self, Real price, Date iborStartDate, Date iborEndDate, DayCounter dayCounter, Rate convexityAdjustment=0.0, Futures::Type type=IMM) -> FuturesRateHelper
        __init__(FuturesRateHelper self, QuoteHandle price, Date iborStartDate, ext::shared_ptr< IborIndex > const & index, QuoteHandle convexityAdjustment=Handle< Quote >(), Futures::Type type=IMM) -> FuturesRateHelper
        __init__(FuturesRateHelper self, Real price, Date iborStartDate, ext::shared_ptr< IborIndex > const & index, Real convexityAdjustment=0.0, Futures::Type type=IMM) -> FuturesRateHelper
        """
        _quantlib_risks.FuturesRateHelper_swiginit(self, _quantlib_risks.new_FuturesRateHelper(*args))
    __swig_destroy__ = _quantlib_risks.delete_FuturesRateHelper

# Register FuturesRateHelper in _quantlib_risks:
_quantlib_risks.FuturesRateHelper_swigregister(FuturesRateHelper)
class SwapRateHelper(RateHelper):
    r"""Proxy of C++ SwapRateHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SwapRateHelper self, QuoteHandle rate, Period tenor, Calendar calendar, Frequency fixedFrequency, BusinessDayConvention fixedConvention, DayCounter fixedDayCount, ext::shared_ptr< IborIndex > const & index, QuoteHandle spread=Handle< Quote >(), Period fwdStart=0*Days, YieldTermStructureHandle discountingCurve={}, Natural settlementDays=Null< Natural >(), Pillar::Choice pillar=LastRelevantDate, Date customPillarDate=Date(), bool endOfMonth=False, ext::optional< bool > withIndexedCoupons=ext::nullopt) -> SwapRateHelper
        __init__(SwapRateHelper self, Rate rate, Period tenor, Calendar calendar, Frequency fixedFrequency, BusinessDayConvention fixedConvention, DayCounter fixedDayCount, ext::shared_ptr< IborIndex > const & index, QuoteHandle spread=Handle< Quote >(), Period fwdStart=0*Days, YieldTermStructureHandle discountingCurve={}, Natural settlementDays=Null< Natural >(), Pillar::Choice pillar=LastRelevantDate, Date customPillarDate=Date(), bool endOfMonth=False, ext::optional< bool > withIndexedCoupons=ext::nullopt) -> SwapRateHelper
        __init__(SwapRateHelper self, QuoteHandle rate, ext::shared_ptr< SwapIndex > const & index, QuoteHandle spread=Handle< Quote >(), Period fwdStart=0*Days, YieldTermStructureHandle discountingCurve={}, Pillar::Choice pillar=LastRelevantDate, Date customPillarDate=Date(), bool endOfMonth=False, ext::optional< bool > withIndexedCoupons=ext::nullopt) -> SwapRateHelper
        __init__(SwapRateHelper self, Rate rate, ext::shared_ptr< SwapIndex > const & index, QuoteHandle spread=Handle< Quote >(), Period fwdStart=0*Days, YieldTermStructureHandle discountingCurve={}, Pillar::Choice pillar=LastRelevantDate, Date customPillarDate=Date(), bool endOfMonth=False, ext::optional< bool > withIndexedCoupons=ext::nullopt) -> SwapRateHelper
        """
        _quantlib_risks.SwapRateHelper_swiginit(self, _quantlib_risks.new_SwapRateHelper(*args))

    def spread(self):
        r"""spread(SwapRateHelper self) -> Spread"""
        return _quantlib_risks.SwapRateHelper_spread(self)

    def swap(self):
        r"""swap(SwapRateHelper self) -> ext::shared_ptr< VanillaSwap >"""
        return _quantlib_risks.SwapRateHelper_swap(self)
    __swig_destroy__ = _quantlib_risks.delete_SwapRateHelper

# Register SwapRateHelper in _quantlib_risks:
_quantlib_risks.SwapRateHelper_swigregister(SwapRateHelper)
class BondHelper(RateHelper):
    r"""Proxy of C++ BondHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(BondHelper self, QuoteHandle cleanPrice, ext::shared_ptr< Bond > const & bond, BondPrice::Type priceType=Clean) -> BondHelper"""
        _quantlib_risks.BondHelper_swiginit(self, _quantlib_risks.new_BondHelper(*args))

    def bond(self):
        r"""bond(BondHelper self) -> ext::shared_ptr< Bond >"""
        return _quantlib_risks.BondHelper_bond(self)
    __swig_destroy__ = _quantlib_risks.delete_BondHelper

# Register BondHelper in _quantlib_risks:
_quantlib_risks.BondHelper_swigregister(BondHelper)
class FixedRateBondHelper(BondHelper):
    r"""Proxy of C++ FixedRateBondHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(FixedRateBondHelper self, QuoteHandle cleanPrice, Size settlementDays, Real faceAmount, Schedule schedule, std::vector< Rate,std::allocator< Rate > > const & coupons, DayCounter paymentDayCounter, BusinessDayConvention paymentConvention=Following, Real redemption=100.0, Date issueDate=Date(), Calendar paymentCalendar=Calendar(), Period exCouponPeriod=Period(), Calendar exCouponCalendar=Calendar(), BusinessDayConvention exCouponConvention=Unadjusted, bool exCouponEndOfMonth=False, BondPrice::Type priceType=Clean) -> FixedRateBondHelper"""
        _quantlib_risks.FixedRateBondHelper_swiginit(self, _quantlib_risks.new_FixedRateBondHelper(*args))

    def fixedRateBond(self):
        r"""fixedRateBond(FixedRateBondHelper self) -> ext::shared_ptr< FixedRateBond >"""
        return _quantlib_risks.FixedRateBondHelper_fixedRateBond(self)
    __swig_destroy__ = _quantlib_risks.delete_FixedRateBondHelper

# Register FixedRateBondHelper in _quantlib_risks:
_quantlib_risks.FixedRateBondHelper_swigregister(FixedRateBondHelper)
class OISRateHelper(RateHelper):
    r"""Proxy of C++ OISRateHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(OISRateHelper self, Natural settlementDays, Period tenor, QuoteHandle rate, ext::shared_ptr< OvernightIndex > const & index, YieldTermStructureHandle discountingCurve={}, bool telescopicValueDates=False, Integer paymentLag=0, BusinessDayConvention paymentConvention=Following, Frequency paymentFrequency=Annual, Calendar paymentCalendar=Calendar(), Period forwardStart=0*Days, Spread const overnightSpread=0.0, Pillar::Choice pillar=LastRelevantDate, Date customPillarDate=Date(), RateAveraging::Type averagingMethod=Compound, ext::optional< bool > endOfMonth=ext::nullopt, ext::optional< Frequency > fixedPaymentFrequency=ext::nullopt, Calendar fixedCalendar=Calendar()) -> OISRateHelper"""
        _quantlib_risks.OISRateHelper_swiginit(self, _quantlib_risks.new_OISRateHelper(*args, **kwargs))

    def swap(self):
        r"""swap(OISRateHelper self) -> ext::shared_ptr< OvernightIndexedSwap >"""
        return _quantlib_risks.OISRateHelper_swap(self)
    __swig_destroy__ = _quantlib_risks.delete_OISRateHelper

# Register OISRateHelper in _quantlib_risks:
_quantlib_risks.OISRateHelper_swigregister(OISRateHelper)
class DatedOISRateHelper(RateHelper):
    r"""Proxy of C++ DatedOISRateHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(DatedOISRateHelper self, Date startDate, Date endDate, QuoteHandle rate, ext::shared_ptr< OvernightIndex > const & index, YieldTermStructureHandle discountingCurve={}, bool telescopicValueDates=False, RateAveraging::Type averagingMethod=Compound, Integer paymentLag=0, BusinessDayConvention paymentConvention=Following, Frequency paymentFrequency=Annual, Calendar paymentCalendar=Calendar(), Period forwardStart=0*Days, Spread overnightSpread=0.0, ext::optional< bool > endOfMonth=ext::nullopt, ext::optional< Frequency > fixedPaymentFrequency=ext::nullopt, Calendar fixedCalendar=Calendar()) -> DatedOISRateHelper"""
        _quantlib_risks.DatedOISRateHelper_swiginit(self, _quantlib_risks.new_DatedOISRateHelper(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_DatedOISRateHelper

# Register DatedOISRateHelper in _quantlib_risks:
_quantlib_risks.DatedOISRateHelper_swigregister(DatedOISRateHelper)
class FxSwapRateHelper(RateHelper):
    r"""Proxy of C++ FxSwapRateHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(FxSwapRateHelper self, QuoteHandle fwdPoint, QuoteHandle spotFx, Period tenor, Natural fixingDays, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, bool isFxBaseCurrencyCollateralCurrency, YieldTermStructureHandle collateralCurve, Calendar tradingCalendar=Calendar()) -> FxSwapRateHelper"""
        _quantlib_risks.FxSwapRateHelper_swiginit(self, _quantlib_risks.new_FxSwapRateHelper(*args))
    __swig_destroy__ = _quantlib_risks.delete_FxSwapRateHelper

# Register FxSwapRateHelper in _quantlib_risks:
_quantlib_risks.FxSwapRateHelper_swigregister(FxSwapRateHelper)
class OvernightIndexFutureRateHelper(RateHelper):
    r"""Proxy of C++ OvernightIndexFutureRateHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(OvernightIndexFutureRateHelper self, QuoteHandle price, Date valueDate, Date maturityDate, ext::shared_ptr< OvernightIndex > const & index, QuoteHandle convexityAdjustment=Handle< Quote >(), RateAveraging::Type averagingMethod=Compound) -> OvernightIndexFutureRateHelper"""
        _quantlib_risks.OvernightIndexFutureRateHelper_swiginit(self, _quantlib_risks.new_OvernightIndexFutureRateHelper(*args))
    __swig_destroy__ = _quantlib_risks.delete_OvernightIndexFutureRateHelper

# Register OvernightIndexFutureRateHelper in _quantlib_risks:
_quantlib_risks.OvernightIndexFutureRateHelper_swigregister(OvernightIndexFutureRateHelper)
class SofrFutureRateHelper(OvernightIndexFutureRateHelper):
    r"""Proxy of C++ SofrFutureRateHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SofrFutureRateHelper self, QuoteHandle price, Month referenceMonth, Year referenceYear, Frequency referenceFreq, QuoteHandle convexityAdjustment=Handle< Quote >()) -> SofrFutureRateHelper
        __init__(SofrFutureRateHelper self, Real price, Month referenceMonth, Year referenceYear, Frequency referenceFreq, Real convexityAdjustment=0.0) -> SofrFutureRateHelper
        """
        _quantlib_risks.SofrFutureRateHelper_swiginit(self, _quantlib_risks.new_SofrFutureRateHelper(*args))
    __swig_destroy__ = _quantlib_risks.delete_SofrFutureRateHelper

# Register SofrFutureRateHelper in _quantlib_risks:
_quantlib_risks.SofrFutureRateHelper_swigregister(SofrFutureRateHelper)
class ConstNotionalCrossCurrencyBasisSwapRateHelper(RateHelper):
    r"""Proxy of C++ ConstNotionalCrossCurrencyBasisSwapRateHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, basis, tenor, fixingDays, calendar, convention, endOfMonth, baseCurrencyIndex, quoteCurrencyIndex, collateralCurve, isFxBaseCurrencyCollateralCurrency, isBasisOnFxBaseCurrencyLeg):
        r"""__init__(ConstNotionalCrossCurrencyBasisSwapRateHelper self, QuoteHandle basis, Period tenor, Natural fixingDays, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, ext::shared_ptr< IborIndex > baseCurrencyIndex, ext::shared_ptr< IborIndex > quoteCurrencyIndex, YieldTermStructureHandle collateralCurve, bool isFxBaseCurrencyCollateralCurrency, bool isBasisOnFxBaseCurrencyLeg) -> ConstNotionalCrossCurrencyBasisSwapRateHelper"""
        _quantlib_risks.ConstNotionalCrossCurrencyBasisSwapRateHelper_swiginit(self, _quantlib_risks.new_ConstNotionalCrossCurrencyBasisSwapRateHelper(basis, tenor, fixingDays, calendar, convention, endOfMonth, baseCurrencyIndex, quoteCurrencyIndex, collateralCurve, isFxBaseCurrencyCollateralCurrency, isBasisOnFxBaseCurrencyLeg))
    __swig_destroy__ = _quantlib_risks.delete_ConstNotionalCrossCurrencyBasisSwapRateHelper

# Register ConstNotionalCrossCurrencyBasisSwapRateHelper in _quantlib_risks:
_quantlib_risks.ConstNotionalCrossCurrencyBasisSwapRateHelper_swigregister(ConstNotionalCrossCurrencyBasisSwapRateHelper)
class MtMCrossCurrencyBasisSwapRateHelper(RateHelper):
    r"""Proxy of C++ MtMCrossCurrencyBasisSwapRateHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, basis, tenor, fixingDays, calendar, convention, endOfMonth, baseCurrencyIndex, quoteCurrencyIndex, collateralCurve, isFxBaseCurrencyCollateralCurrency, isBasisOnFxBaseCurrencyLeg, isFxBaseCurrencyLegResettable):
        r"""__init__(MtMCrossCurrencyBasisSwapRateHelper self, QuoteHandle basis, Period tenor, Natural fixingDays, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, ext::shared_ptr< IborIndex > baseCurrencyIndex, ext::shared_ptr< IborIndex > quoteCurrencyIndex, YieldTermStructureHandle collateralCurve, bool isFxBaseCurrencyCollateralCurrency, bool isBasisOnFxBaseCurrencyLeg, bool isFxBaseCurrencyLegResettable) -> MtMCrossCurrencyBasisSwapRateHelper"""
        _quantlib_risks.MtMCrossCurrencyBasisSwapRateHelper_swiginit(self, _quantlib_risks.new_MtMCrossCurrencyBasisSwapRateHelper(basis, tenor, fixingDays, calendar, convention, endOfMonth, baseCurrencyIndex, quoteCurrencyIndex, collateralCurve, isFxBaseCurrencyCollateralCurrency, isBasisOnFxBaseCurrencyLeg, isFxBaseCurrencyLegResettable))
    __swig_destroy__ = _quantlib_risks.delete_MtMCrossCurrencyBasisSwapRateHelper

# Register MtMCrossCurrencyBasisSwapRateHelper in _quantlib_risks:
_quantlib_risks.MtMCrossCurrencyBasisSwapRateHelper_swigregister(MtMCrossCurrencyBasisSwapRateHelper)
class IborIborBasisSwapRateHelper(RateHelper):
    r"""Proxy of C++ IborIborBasisSwapRateHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, basis, tenor, settlementDays, calendar, convention, endOfMonth, baseIndex, otherIndex, discountHandle, bootstrapBaseCurve):
        r"""__init__(IborIborBasisSwapRateHelper self, QuoteHandle basis, Period tenor, Natural settlementDays, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, ext::shared_ptr< IborIndex > const & baseIndex, ext::shared_ptr< IborIndex > const & otherIndex, YieldTermStructureHandle discountHandle, bool bootstrapBaseCurve) -> IborIborBasisSwapRateHelper"""
        _quantlib_risks.IborIborBasisSwapRateHelper_swiginit(self, _quantlib_risks.new_IborIborBasisSwapRateHelper(basis, tenor, settlementDays, calendar, convention, endOfMonth, baseIndex, otherIndex, discountHandle, bootstrapBaseCurve))
    __swig_destroy__ = _quantlib_risks.delete_IborIborBasisSwapRateHelper

# Register IborIborBasisSwapRateHelper in _quantlib_risks:
_quantlib_risks.IborIborBasisSwapRateHelper_swigregister(IborIborBasisSwapRateHelper)
class OvernightIborBasisSwapRateHelper(RateHelper):
    r"""Proxy of C++ OvernightIborBasisSwapRateHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(OvernightIborBasisSwapRateHelper self, QuoteHandle basis, Period tenor, Natural settlementDays, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, ext::shared_ptr< OvernightIndex > const & baseIndex, ext::shared_ptr< IborIndex > const & otherIndex, YieldTermStructureHandle discountHandle=Handle< YieldTermStructure >()) -> OvernightIborBasisSwapRateHelper"""
        _quantlib_risks.OvernightIborBasisSwapRateHelper_swiginit(self, _quantlib_risks.new_OvernightIborBasisSwapRateHelper(*args))
    __swig_destroy__ = _quantlib_risks.delete_OvernightIborBasisSwapRateHelper

# Register OvernightIborBasisSwapRateHelper in _quantlib_risks:
_quantlib_risks.OvernightIborBasisSwapRateHelper_swigregister(OvernightIborBasisSwapRateHelper)
class ArithmeticOISRateHelper(RateHelper):
    r"""Proxy of C++ ArithmeticOISRateHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ArithmeticOISRateHelper self, Natural settlementDays, Period tenor, Frequency fixedLegPaymentFrequency, QuoteHandle fixedRate, ext::shared_ptr< OvernightIndex > overnightIndex, Frequency overnightLegPaymentFrequency, QuoteHandle spread, Real meanReversionSpeed=0.03, Real volatility=0.00, bool byApprox=False, YieldTermStructureHandle discountingCurve=Handle< YieldTermStructure >()) -> ArithmeticOISRateHelper"""
        _quantlib_risks.ArithmeticOISRateHelper_swiginit(self, _quantlib_risks.new_ArithmeticOISRateHelper(*args))

    def swap(self):
        r"""swap(ArithmeticOISRateHelper self) -> ext::shared_ptr< ArithmeticAverageOIS >"""
        return _quantlib_risks.ArithmeticOISRateHelper_swap(self)
    __swig_destroy__ = _quantlib_risks.delete_ArithmeticOISRateHelper

# Register ArithmeticOISRateHelper in _quantlib_risks:
_quantlib_risks.ArithmeticOISRateHelper_swigregister(ArithmeticOISRateHelper)
class RateHelperVector(object):
    r"""Proxy of C++ std::vector< ext::shared_ptr< RateHelper > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(RateHelperVector self) -> SwigPyIterator"""
        return _quantlib_risks.RateHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(RateHelperVector self) -> bool"""
        return _quantlib_risks.RateHelperVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(RateHelperVector self) -> bool"""
        return _quantlib_risks.RateHelperVector___bool__(self)

    def __len__(self):
        r"""__len__(RateHelperVector self) -> std::vector< ext::shared_ptr< RateHelper > >::size_type"""
        return _quantlib_risks.RateHelperVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(RateHelperVector self, std::vector< ext::shared_ptr< RateHelper > >::difference_type i, std::vector< ext::shared_ptr< RateHelper > >::difference_type j) -> RateHelperVector"""
        return _quantlib_risks.RateHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(RateHelperVector self, std::vector< ext::shared_ptr< RateHelper > >::difference_type i, std::vector< ext::shared_ptr< RateHelper > >::difference_type j)
        __setslice__(RateHelperVector self, std::vector< ext::shared_ptr< RateHelper > >::difference_type i, std::vector< ext::shared_ptr< RateHelper > >::difference_type j, RateHelperVector v)
        """
        return _quantlib_risks.RateHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(RateHelperVector self, std::vector< ext::shared_ptr< RateHelper > >::difference_type i, std::vector< ext::shared_ptr< RateHelper > >::difference_type j)"""
        return _quantlib_risks.RateHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(RateHelperVector self, std::vector< ext::shared_ptr< RateHelper > >::difference_type i)
        __delitem__(RateHelperVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.RateHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(RateHelperVector self, SWIGPY_SLICEOBJECT * slice) -> RateHelperVector
        __getitem__(RateHelperVector self, std::vector< ext::shared_ptr< RateHelper > >::difference_type i) -> std::vector< ext::shared_ptr< RateHelper > >::value_type const &
        """
        return _quantlib_risks.RateHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(RateHelperVector self, SWIGPY_SLICEOBJECT * slice, RateHelperVector v)
        __setitem__(RateHelperVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(RateHelperVector self, std::vector< ext::shared_ptr< RateHelper > >::difference_type i, std::vector< ext::shared_ptr< RateHelper > >::value_type const & x)
        """
        return _quantlib_risks.RateHelperVector___setitem__(self, *args)

    def pop(self):
        r"""pop(RateHelperVector self) -> std::vector< ext::shared_ptr< RateHelper > >::value_type"""
        return _quantlib_risks.RateHelperVector_pop(self)

    def append(self, x):
        r"""append(RateHelperVector self, std::vector< ext::shared_ptr< RateHelper > >::value_type const & x)"""
        return _quantlib_risks.RateHelperVector_append(self, x)

    def empty(self):
        r"""empty(RateHelperVector self) -> bool"""
        return _quantlib_risks.RateHelperVector_empty(self)

    def size(self):
        r"""size(RateHelperVector self) -> std::vector< ext::shared_ptr< RateHelper > >::size_type"""
        return _quantlib_risks.RateHelperVector_size(self)

    def swap(self, v):
        r"""swap(RateHelperVector self, RateHelperVector v)"""
        return _quantlib_risks.RateHelperVector_swap(self, v)

    def begin(self):
        r"""begin(RateHelperVector self) -> std::vector< ext::shared_ptr< RateHelper > >::iterator"""
        return _quantlib_risks.RateHelperVector_begin(self)

    def end(self):
        r"""end(RateHelperVector self) -> std::vector< ext::shared_ptr< RateHelper > >::iterator"""
        return _quantlib_risks.RateHelperVector_end(self)

    def rbegin(self):
        r"""rbegin(RateHelperVector self) -> std::vector< ext::shared_ptr< RateHelper > >::reverse_iterator"""
        return _quantlib_risks.RateHelperVector_rbegin(self)

    def rend(self):
        r"""rend(RateHelperVector self) -> std::vector< ext::shared_ptr< RateHelper > >::reverse_iterator"""
        return _quantlib_risks.RateHelperVector_rend(self)

    def clear(self):
        r"""clear(RateHelperVector self)"""
        return _quantlib_risks.RateHelperVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(RateHelperVector self) -> std::vector< ext::shared_ptr< RateHelper > >::allocator_type"""
        return _quantlib_risks.RateHelperVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(RateHelperVector self)"""
        return _quantlib_risks.RateHelperVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(RateHelperVector self, std::vector< ext::shared_ptr< RateHelper > >::iterator pos) -> std::vector< ext::shared_ptr< RateHelper > >::iterator
        erase(RateHelperVector self, std::vector< ext::shared_ptr< RateHelper > >::iterator first, std::vector< ext::shared_ptr< RateHelper > >::iterator last) -> std::vector< ext::shared_ptr< RateHelper > >::iterator
        """
        return _quantlib_risks.RateHelperVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(RateHelperVector self) -> RateHelperVector
        __init__(RateHelperVector self, RateHelperVector other) -> RateHelperVector
        __init__(RateHelperVector self, std::vector< ext::shared_ptr< RateHelper > >::size_type size) -> RateHelperVector
        __init__(RateHelperVector self, std::vector< ext::shared_ptr< RateHelper > >::size_type size, std::vector< ext::shared_ptr< RateHelper > >::value_type const & value) -> RateHelperVector
        """
        _quantlib_risks.RateHelperVector_swiginit(self, _quantlib_risks.new_RateHelperVector(*args))

    def push_back(self, x):
        r"""push_back(RateHelperVector self, std::vector< ext::shared_ptr< RateHelper > >::value_type const & x)"""
        return _quantlib_risks.RateHelperVector_push_back(self, x)

    def front(self):
        r"""front(RateHelperVector self) -> std::vector< ext::shared_ptr< RateHelper > >::value_type const &"""
        return _quantlib_risks.RateHelperVector_front(self)

    def back(self):
        r"""back(RateHelperVector self) -> std::vector< ext::shared_ptr< RateHelper > >::value_type const &"""
        return _quantlib_risks.RateHelperVector_back(self)

    def assign(self, n, x):
        r"""assign(RateHelperVector self, std::vector< ext::shared_ptr< RateHelper > >::size_type n, std::vector< ext::shared_ptr< RateHelper > >::value_type const & x)"""
        return _quantlib_risks.RateHelperVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(RateHelperVector self, std::vector< ext::shared_ptr< RateHelper > >::size_type new_size)
        resize(RateHelperVector self, std::vector< ext::shared_ptr< RateHelper > >::size_type new_size, std::vector< ext::shared_ptr< RateHelper > >::value_type const & x)
        """
        return _quantlib_risks.RateHelperVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(RateHelperVector self, std::vector< ext::shared_ptr< RateHelper > >::iterator pos, std::vector< ext::shared_ptr< RateHelper > >::value_type const & x) -> std::vector< ext::shared_ptr< RateHelper > >::iterator
        insert(RateHelperVector self, std::vector< ext::shared_ptr< RateHelper > >::iterator pos, std::vector< ext::shared_ptr< RateHelper > >::size_type n, std::vector< ext::shared_ptr< RateHelper > >::value_type const & x)
        """
        return _quantlib_risks.RateHelperVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(RateHelperVector self, std::vector< ext::shared_ptr< RateHelper > >::size_type n)"""
        return _quantlib_risks.RateHelperVector_reserve(self, n)

    def capacity(self):
        r"""capacity(RateHelperVector self) -> std::vector< ext::shared_ptr< RateHelper > >::size_type"""
        return _quantlib_risks.RateHelperVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_RateHelperVector

# Register RateHelperVector in _quantlib_risks:
_quantlib_risks.RateHelperVector_swigregister(RateHelperVector)
class BondHelperVector(object):
    r"""Proxy of C++ std::vector< ext::shared_ptr< BondHelper > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(BondHelperVector self) -> SwigPyIterator"""
        return _quantlib_risks.BondHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(BondHelperVector self) -> bool"""
        return _quantlib_risks.BondHelperVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(BondHelperVector self) -> bool"""
        return _quantlib_risks.BondHelperVector___bool__(self)

    def __len__(self):
        r"""__len__(BondHelperVector self) -> std::vector< ext::shared_ptr< BondHelper > >::size_type"""
        return _quantlib_risks.BondHelperVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(BondHelperVector self, std::vector< ext::shared_ptr< BondHelper > >::difference_type i, std::vector< ext::shared_ptr< BondHelper > >::difference_type j) -> BondHelperVector"""
        return _quantlib_risks.BondHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(BondHelperVector self, std::vector< ext::shared_ptr< BondHelper > >::difference_type i, std::vector< ext::shared_ptr< BondHelper > >::difference_type j)
        __setslice__(BondHelperVector self, std::vector< ext::shared_ptr< BondHelper > >::difference_type i, std::vector< ext::shared_ptr< BondHelper > >::difference_type j, BondHelperVector v)
        """
        return _quantlib_risks.BondHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(BondHelperVector self, std::vector< ext::shared_ptr< BondHelper > >::difference_type i, std::vector< ext::shared_ptr< BondHelper > >::difference_type j)"""
        return _quantlib_risks.BondHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(BondHelperVector self, std::vector< ext::shared_ptr< BondHelper > >::difference_type i)
        __delitem__(BondHelperVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.BondHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(BondHelperVector self, SWIGPY_SLICEOBJECT * slice) -> BondHelperVector
        __getitem__(BondHelperVector self, std::vector< ext::shared_ptr< BondHelper > >::difference_type i) -> std::vector< ext::shared_ptr< BondHelper > >::value_type const &
        """
        return _quantlib_risks.BondHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(BondHelperVector self, SWIGPY_SLICEOBJECT * slice, BondHelperVector v)
        __setitem__(BondHelperVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(BondHelperVector self, std::vector< ext::shared_ptr< BondHelper > >::difference_type i, std::vector< ext::shared_ptr< BondHelper > >::value_type const & x)
        """
        return _quantlib_risks.BondHelperVector___setitem__(self, *args)

    def pop(self):
        r"""pop(BondHelperVector self) -> std::vector< ext::shared_ptr< BondHelper > >::value_type"""
        return _quantlib_risks.BondHelperVector_pop(self)

    def append(self, x):
        r"""append(BondHelperVector self, std::vector< ext::shared_ptr< BondHelper > >::value_type const & x)"""
        return _quantlib_risks.BondHelperVector_append(self, x)

    def empty(self):
        r"""empty(BondHelperVector self) -> bool"""
        return _quantlib_risks.BondHelperVector_empty(self)

    def size(self):
        r"""size(BondHelperVector self) -> std::vector< ext::shared_ptr< BondHelper > >::size_type"""
        return _quantlib_risks.BondHelperVector_size(self)

    def swap(self, v):
        r"""swap(BondHelperVector self, BondHelperVector v)"""
        return _quantlib_risks.BondHelperVector_swap(self, v)

    def begin(self):
        r"""begin(BondHelperVector self) -> std::vector< ext::shared_ptr< BondHelper > >::iterator"""
        return _quantlib_risks.BondHelperVector_begin(self)

    def end(self):
        r"""end(BondHelperVector self) -> std::vector< ext::shared_ptr< BondHelper > >::iterator"""
        return _quantlib_risks.BondHelperVector_end(self)

    def rbegin(self):
        r"""rbegin(BondHelperVector self) -> std::vector< ext::shared_ptr< BondHelper > >::reverse_iterator"""
        return _quantlib_risks.BondHelperVector_rbegin(self)

    def rend(self):
        r"""rend(BondHelperVector self) -> std::vector< ext::shared_ptr< BondHelper > >::reverse_iterator"""
        return _quantlib_risks.BondHelperVector_rend(self)

    def clear(self):
        r"""clear(BondHelperVector self)"""
        return _quantlib_risks.BondHelperVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(BondHelperVector self) -> std::vector< ext::shared_ptr< BondHelper > >::allocator_type"""
        return _quantlib_risks.BondHelperVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(BondHelperVector self)"""
        return _quantlib_risks.BondHelperVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(BondHelperVector self, std::vector< ext::shared_ptr< BondHelper > >::iterator pos) -> std::vector< ext::shared_ptr< BondHelper > >::iterator
        erase(BondHelperVector self, std::vector< ext::shared_ptr< BondHelper > >::iterator first, std::vector< ext::shared_ptr< BondHelper > >::iterator last) -> std::vector< ext::shared_ptr< BondHelper > >::iterator
        """
        return _quantlib_risks.BondHelperVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(BondHelperVector self) -> BondHelperVector
        __init__(BondHelperVector self, BondHelperVector other) -> BondHelperVector
        __init__(BondHelperVector self, std::vector< ext::shared_ptr< BondHelper > >::size_type size) -> BondHelperVector
        __init__(BondHelperVector self, std::vector< ext::shared_ptr< BondHelper > >::size_type size, std::vector< ext::shared_ptr< BondHelper > >::value_type const & value) -> BondHelperVector
        """
        _quantlib_risks.BondHelperVector_swiginit(self, _quantlib_risks.new_BondHelperVector(*args))

    def push_back(self, x):
        r"""push_back(BondHelperVector self, std::vector< ext::shared_ptr< BondHelper > >::value_type const & x)"""
        return _quantlib_risks.BondHelperVector_push_back(self, x)

    def front(self):
        r"""front(BondHelperVector self) -> std::vector< ext::shared_ptr< BondHelper > >::value_type const &"""
        return _quantlib_risks.BondHelperVector_front(self)

    def back(self):
        r"""back(BondHelperVector self) -> std::vector< ext::shared_ptr< BondHelper > >::value_type const &"""
        return _quantlib_risks.BondHelperVector_back(self)

    def assign(self, n, x):
        r"""assign(BondHelperVector self, std::vector< ext::shared_ptr< BondHelper > >::size_type n, std::vector< ext::shared_ptr< BondHelper > >::value_type const & x)"""
        return _quantlib_risks.BondHelperVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(BondHelperVector self, std::vector< ext::shared_ptr< BondHelper > >::size_type new_size)
        resize(BondHelperVector self, std::vector< ext::shared_ptr< BondHelper > >::size_type new_size, std::vector< ext::shared_ptr< BondHelper > >::value_type const & x)
        """
        return _quantlib_risks.BondHelperVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(BondHelperVector self, std::vector< ext::shared_ptr< BondHelper > >::iterator pos, std::vector< ext::shared_ptr< BondHelper > >::value_type const & x) -> std::vector< ext::shared_ptr< BondHelper > >::iterator
        insert(BondHelperVector self, std::vector< ext::shared_ptr< BondHelper > >::iterator pos, std::vector< ext::shared_ptr< BondHelper > >::size_type n, std::vector< ext::shared_ptr< BondHelper > >::value_type const & x)
        """
        return _quantlib_risks.BondHelperVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(BondHelperVector self, std::vector< ext::shared_ptr< BondHelper > >::size_type n)"""
        return _quantlib_risks.BondHelperVector_reserve(self, n)

    def capacity(self):
        r"""capacity(BondHelperVector self) -> std::vector< ext::shared_ptr< BondHelper > >::size_type"""
        return _quantlib_risks.BondHelperVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_BondHelperVector

# Register BondHelperVector in _quantlib_risks:
_quantlib_risks.BondHelperVector_swigregister(BondHelperVector)

def as_depositratehelper(helper):
    r"""as_depositratehelper(ext::shared_ptr< RateHelper > const helper) -> ext::shared_ptr< DepositRateHelper > const"""
    return _quantlib_risks.as_depositratehelper(helper)

def as_fraratehelper(helper):
    r"""as_fraratehelper(ext::shared_ptr< RateHelper > const helper) -> ext::shared_ptr< FraRateHelper > const"""
    return _quantlib_risks.as_fraratehelper(helper)

def as_swapratehelper(helper):
    r"""as_swapratehelper(ext::shared_ptr< RateHelper > const helper) -> ext::shared_ptr< SwapRateHelper > const"""
    return _quantlib_risks.as_swapratehelper(helper)

def as_oisratehelper(helper):
    r"""as_oisratehelper(ext::shared_ptr< RateHelper > const helper) -> ext::shared_ptr< OISRateHelper > const"""
    return _quantlib_risks.as_oisratehelper(helper)

def as_constnotionalcrosscurrencybasisswapratehelper(helper):
    r"""as_constnotionalcrosscurrencybasisswapratehelper(ext::shared_ptr< RateHelper > const helper) -> ext::shared_ptr< ConstNotionalCrossCurrencyBasisSwapRateHelper > const"""
    return _quantlib_risks.as_constnotionalcrosscurrencybasisswapratehelper(helper)

def as_mtmcrosscurrencybasisswapratehelper(helper):
    r"""as_mtmcrosscurrencybasisswapratehelper(ext::shared_ptr< RateHelper > const helper) -> ext::shared_ptr< MtMCrossCurrencyBasisSwapRateHelper > const"""
    return _quantlib_risks.as_mtmcrosscurrencybasisswapratehelper(helper)
class Discount(object):
    r"""Proxy of C++ Discount class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(Discount self) -> Discount"""
        _quantlib_risks.Discount_swiginit(self, _quantlib_risks.new_Discount())
    __swig_destroy__ = _quantlib_risks.delete_Discount

# Register Discount in _quantlib_risks:
_quantlib_risks.Discount_swigregister(Discount)
class ZeroYield(object):
    r"""Proxy of C++ ZeroYield class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ZeroYield self) -> ZeroYield"""
        _quantlib_risks.ZeroYield_swiginit(self, _quantlib_risks.new_ZeroYield())
    __swig_destroy__ = _quantlib_risks.delete_ZeroYield

# Register ZeroYield in _quantlib_risks:
_quantlib_risks.ZeroYield_swigregister(ZeroYield)
class ForwardRate(object):
    r"""Proxy of C++ ForwardRate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ForwardRate self) -> ForwardRate"""
        _quantlib_risks.ForwardRate_swiginit(self, _quantlib_risks.new_ForwardRate())
    __swig_destroy__ = _quantlib_risks.delete_ForwardRate

# Register ForwardRate in _quantlib_risks:
_quantlib_risks.ForwardRate_swigregister(ForwardRate)
class IterativeBootstrap(object):
    r"""Proxy of C++ _IterativeBootstrap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(IterativeBootstrap self, doubleOrNull accuracy=Null< Real >(), doubleOrNull minValue=Null< Real >(), doubleOrNull maxValue=Null< Real >(), Size maxAttempts=1, Real maxFactor=2.0, Real minFactor=2.0, bool dontThrow=False, Size dontThrowSteps=10, Size maxEvaluations=100) -> IterativeBootstrap"""
        _quantlib_risks.IterativeBootstrap_swiginit(self, _quantlib_risks.new_IterativeBootstrap(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_IterativeBootstrap

# Register IterativeBootstrap in _quantlib_risks:
_quantlib_risks.IterativeBootstrap_swigregister(IterativeBootstrap)
class PiecewiseFlatForward(YieldTermStructure):
    r"""Proxy of C++ PiecewiseFlatForward class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PiecewiseFlatForward self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), BackwardFlat i=BackwardFlat(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseFlatForward
        __init__(PiecewiseFlatForward self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), BackwardFlat i=BackwardFlat(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseFlatForward
        __init__(PiecewiseFlatForward self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, BackwardFlat i=BackwardFlat()) -> PiecewiseFlatForward
        __init__(PiecewiseFlatForward self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, BackwardFlat i=BackwardFlat()) -> PiecewiseFlatForward
        """
        _quantlib_risks.PiecewiseFlatForward_swiginit(self, _quantlib_risks.new_PiecewiseFlatForward(*args))

    def dates(self):
        r"""dates(PiecewiseFlatForward self) -> DateVector"""
        return _quantlib_risks.PiecewiseFlatForward_dates(self)

    def times(self):
        r"""times(PiecewiseFlatForward self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.PiecewiseFlatForward_times(self)

    def nodes(self):
        r"""nodes(PiecewiseFlatForward self) -> std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >"""
        return _quantlib_risks.PiecewiseFlatForward_nodes(self)

    def recalculate(self):
        r"""recalculate(PiecewiseFlatForward self)"""
        return _quantlib_risks.PiecewiseFlatForward_recalculate(self)

    def freeze(self):
        r"""freeze(PiecewiseFlatForward self)"""
        return _quantlib_risks.PiecewiseFlatForward_freeze(self)

    def unfreeze(self):
        r"""unfreeze(PiecewiseFlatForward self)"""
        return _quantlib_risks.PiecewiseFlatForward_unfreeze(self)
    __swig_destroy__ = _quantlib_risks.delete_PiecewiseFlatForward

# Register PiecewiseFlatForward in _quantlib_risks:
_quantlib_risks.PiecewiseFlatForward_swigregister(PiecewiseFlatForward)
class PiecewiseLogLinearDiscount(YieldTermStructure):
    r"""Proxy of C++ PiecewiseLogLinearDiscount class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PiecewiseLogLinearDiscount self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), LogLinear i=LogLinear(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseLogLinearDiscount
        __init__(PiecewiseLogLinearDiscount self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), LogLinear i=LogLinear(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseLogLinearDiscount
        __init__(PiecewiseLogLinearDiscount self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, LogLinear i=LogLinear()) -> PiecewiseLogLinearDiscount
        __init__(PiecewiseLogLinearDiscount self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, LogLinear i=LogLinear()) -> PiecewiseLogLinearDiscount
        """
        _quantlib_risks.PiecewiseLogLinearDiscount_swiginit(self, _quantlib_risks.new_PiecewiseLogLinearDiscount(*args))

    def dates(self):
        r"""dates(PiecewiseLogLinearDiscount self) -> DateVector"""
        return _quantlib_risks.PiecewiseLogLinearDiscount_dates(self)

    def times(self):
        r"""times(PiecewiseLogLinearDiscount self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.PiecewiseLogLinearDiscount_times(self)

    def nodes(self):
        r"""nodes(PiecewiseLogLinearDiscount self) -> std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >"""
        return _quantlib_risks.PiecewiseLogLinearDiscount_nodes(self)

    def recalculate(self):
        r"""recalculate(PiecewiseLogLinearDiscount self)"""
        return _quantlib_risks.PiecewiseLogLinearDiscount_recalculate(self)

    def freeze(self):
        r"""freeze(PiecewiseLogLinearDiscount self)"""
        return _quantlib_risks.PiecewiseLogLinearDiscount_freeze(self)

    def unfreeze(self):
        r"""unfreeze(PiecewiseLogLinearDiscount self)"""
        return _quantlib_risks.PiecewiseLogLinearDiscount_unfreeze(self)
    __swig_destroy__ = _quantlib_risks.delete_PiecewiseLogLinearDiscount

# Register PiecewiseLogLinearDiscount in _quantlib_risks:
_quantlib_risks.PiecewiseLogLinearDiscount_swigregister(PiecewiseLogLinearDiscount)
class PiecewiseLinearForward(YieldTermStructure):
    r"""Proxy of C++ PiecewiseLinearForward class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PiecewiseLinearForward self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), Linear i=Linear(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseLinearForward
        __init__(PiecewiseLinearForward self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), Linear i=Linear(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseLinearForward
        __init__(PiecewiseLinearForward self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, Linear i=Linear()) -> PiecewiseLinearForward
        __init__(PiecewiseLinearForward self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, Linear i=Linear()) -> PiecewiseLinearForward
        """
        _quantlib_risks.PiecewiseLinearForward_swiginit(self, _quantlib_risks.new_PiecewiseLinearForward(*args))

    def dates(self):
        r"""dates(PiecewiseLinearForward self) -> DateVector"""
        return _quantlib_risks.PiecewiseLinearForward_dates(self)

    def times(self):
        r"""times(PiecewiseLinearForward self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.PiecewiseLinearForward_times(self)

    def nodes(self):
        r"""nodes(PiecewiseLinearForward self) -> std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >"""
        return _quantlib_risks.PiecewiseLinearForward_nodes(self)

    def recalculate(self):
        r"""recalculate(PiecewiseLinearForward self)"""
        return _quantlib_risks.PiecewiseLinearForward_recalculate(self)

    def freeze(self):
        r"""freeze(PiecewiseLinearForward self)"""
        return _quantlib_risks.PiecewiseLinearForward_freeze(self)

    def unfreeze(self):
        r"""unfreeze(PiecewiseLinearForward self)"""
        return _quantlib_risks.PiecewiseLinearForward_unfreeze(self)
    __swig_destroy__ = _quantlib_risks.delete_PiecewiseLinearForward

# Register PiecewiseLinearForward in _quantlib_risks:
_quantlib_risks.PiecewiseLinearForward_swigregister(PiecewiseLinearForward)
class PiecewiseLinearZero(YieldTermStructure):
    r"""Proxy of C++ PiecewiseLinearZero class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PiecewiseLinearZero self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), Linear i=Linear(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseLinearZero
        __init__(PiecewiseLinearZero self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), Linear i=Linear(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseLinearZero
        __init__(PiecewiseLinearZero self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, Linear i=Linear()) -> PiecewiseLinearZero
        __init__(PiecewiseLinearZero self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, Linear i=Linear()) -> PiecewiseLinearZero
        """
        _quantlib_risks.PiecewiseLinearZero_swiginit(self, _quantlib_risks.new_PiecewiseLinearZero(*args))

    def dates(self):
        r"""dates(PiecewiseLinearZero self) -> DateVector"""
        return _quantlib_risks.PiecewiseLinearZero_dates(self)

    def times(self):
        r"""times(PiecewiseLinearZero self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.PiecewiseLinearZero_times(self)

    def nodes(self):
        r"""nodes(PiecewiseLinearZero self) -> std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >"""
        return _quantlib_risks.PiecewiseLinearZero_nodes(self)

    def recalculate(self):
        r"""recalculate(PiecewiseLinearZero self)"""
        return _quantlib_risks.PiecewiseLinearZero_recalculate(self)

    def freeze(self):
        r"""freeze(PiecewiseLinearZero self)"""
        return _quantlib_risks.PiecewiseLinearZero_freeze(self)

    def unfreeze(self):
        r"""unfreeze(PiecewiseLinearZero self)"""
        return _quantlib_risks.PiecewiseLinearZero_unfreeze(self)
    __swig_destroy__ = _quantlib_risks.delete_PiecewiseLinearZero

# Register PiecewiseLinearZero in _quantlib_risks:
_quantlib_risks.PiecewiseLinearZero_swigregister(PiecewiseLinearZero)
class PiecewiseCubicZero(YieldTermStructure):
    r"""Proxy of C++ PiecewiseCubicZero class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PiecewiseCubicZero self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), Cubic i=Cubic(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseCubicZero
        __init__(PiecewiseCubicZero self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), Cubic i=Cubic(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseCubicZero
        __init__(PiecewiseCubicZero self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, Cubic i=Cubic()) -> PiecewiseCubicZero
        __init__(PiecewiseCubicZero self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, Cubic i=Cubic()) -> PiecewiseCubicZero
        """
        _quantlib_risks.PiecewiseCubicZero_swiginit(self, _quantlib_risks.new_PiecewiseCubicZero(*args))

    def dates(self):
        r"""dates(PiecewiseCubicZero self) -> DateVector"""
        return _quantlib_risks.PiecewiseCubicZero_dates(self)

    def times(self):
        r"""times(PiecewiseCubicZero self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.PiecewiseCubicZero_times(self)

    def nodes(self):
        r"""nodes(PiecewiseCubicZero self) -> std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >"""
        return _quantlib_risks.PiecewiseCubicZero_nodes(self)

    def recalculate(self):
        r"""recalculate(PiecewiseCubicZero self)"""
        return _quantlib_risks.PiecewiseCubicZero_recalculate(self)

    def freeze(self):
        r"""freeze(PiecewiseCubicZero self)"""
        return _quantlib_risks.PiecewiseCubicZero_freeze(self)

    def unfreeze(self):
        r"""unfreeze(PiecewiseCubicZero self)"""
        return _quantlib_risks.PiecewiseCubicZero_unfreeze(self)
    __swig_destroy__ = _quantlib_risks.delete_PiecewiseCubicZero

# Register PiecewiseCubicZero in _quantlib_risks:
_quantlib_risks.PiecewiseCubicZero_swigregister(PiecewiseCubicZero)
class PiecewiseLogCubicDiscount(YieldTermStructure):
    r"""Proxy of C++ PiecewiseLogCubicDiscount class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PiecewiseLogCubicDiscount self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), MonotonicLogCubic i=MonotonicLogCubic(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseLogCubicDiscount
        __init__(PiecewiseLogCubicDiscount self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), MonotonicLogCubic i=MonotonicLogCubic(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseLogCubicDiscount
        __init__(PiecewiseLogCubicDiscount self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, MonotonicLogCubic i=MonotonicLogCubic()) -> PiecewiseLogCubicDiscount
        __init__(PiecewiseLogCubicDiscount self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, MonotonicLogCubic i=MonotonicLogCubic()) -> PiecewiseLogCubicDiscount
        """
        _quantlib_risks.PiecewiseLogCubicDiscount_swiginit(self, _quantlib_risks.new_PiecewiseLogCubicDiscount(*args))

    def dates(self):
        r"""dates(PiecewiseLogCubicDiscount self) -> DateVector"""
        return _quantlib_risks.PiecewiseLogCubicDiscount_dates(self)

    def times(self):
        r"""times(PiecewiseLogCubicDiscount self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.PiecewiseLogCubicDiscount_times(self)

    def nodes(self):
        r"""nodes(PiecewiseLogCubicDiscount self) -> std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >"""
        return _quantlib_risks.PiecewiseLogCubicDiscount_nodes(self)

    def recalculate(self):
        r"""recalculate(PiecewiseLogCubicDiscount self)"""
        return _quantlib_risks.PiecewiseLogCubicDiscount_recalculate(self)

    def freeze(self):
        r"""freeze(PiecewiseLogCubicDiscount self)"""
        return _quantlib_risks.PiecewiseLogCubicDiscount_freeze(self)

    def unfreeze(self):
        r"""unfreeze(PiecewiseLogCubicDiscount self)"""
        return _quantlib_risks.PiecewiseLogCubicDiscount_unfreeze(self)
    __swig_destroy__ = _quantlib_risks.delete_PiecewiseLogCubicDiscount

# Register PiecewiseLogCubicDiscount in _quantlib_risks:
_quantlib_risks.PiecewiseLogCubicDiscount_swigregister(PiecewiseLogCubicDiscount)
class PiecewiseSplineCubicDiscount(YieldTermStructure):
    r"""Proxy of C++ PiecewiseSplineCubicDiscount class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PiecewiseSplineCubicDiscount self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), SplineCubic i=SplineCubic(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseSplineCubicDiscount
        __init__(PiecewiseSplineCubicDiscount self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), SplineCubic i=SplineCubic(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseSplineCubicDiscount
        __init__(PiecewiseSplineCubicDiscount self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, SplineCubic i=SplineCubic()) -> PiecewiseSplineCubicDiscount
        __init__(PiecewiseSplineCubicDiscount self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, SplineCubic i=SplineCubic()) -> PiecewiseSplineCubicDiscount
        """
        _quantlib_risks.PiecewiseSplineCubicDiscount_swiginit(self, _quantlib_risks.new_PiecewiseSplineCubicDiscount(*args))

    def dates(self):
        r"""dates(PiecewiseSplineCubicDiscount self) -> DateVector"""
        return _quantlib_risks.PiecewiseSplineCubicDiscount_dates(self)

    def times(self):
        r"""times(PiecewiseSplineCubicDiscount self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.PiecewiseSplineCubicDiscount_times(self)

    def nodes(self):
        r"""nodes(PiecewiseSplineCubicDiscount self) -> std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >"""
        return _quantlib_risks.PiecewiseSplineCubicDiscount_nodes(self)

    def recalculate(self):
        r"""recalculate(PiecewiseSplineCubicDiscount self)"""
        return _quantlib_risks.PiecewiseSplineCubicDiscount_recalculate(self)

    def freeze(self):
        r"""freeze(PiecewiseSplineCubicDiscount self)"""
        return _quantlib_risks.PiecewiseSplineCubicDiscount_freeze(self)

    def unfreeze(self):
        r"""unfreeze(PiecewiseSplineCubicDiscount self)"""
        return _quantlib_risks.PiecewiseSplineCubicDiscount_unfreeze(self)
    __swig_destroy__ = _quantlib_risks.delete_PiecewiseSplineCubicDiscount

# Register PiecewiseSplineCubicDiscount in _quantlib_risks:
_quantlib_risks.PiecewiseSplineCubicDiscount_swigregister(PiecewiseSplineCubicDiscount)
class PiecewiseKrugerZero(YieldTermStructure):
    r"""Proxy of C++ PiecewiseKrugerZero class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PiecewiseKrugerZero self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), Kruger i=Kruger(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseKrugerZero
        __init__(PiecewiseKrugerZero self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), Kruger i=Kruger(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseKrugerZero
        __init__(PiecewiseKrugerZero self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, Kruger i=Kruger()) -> PiecewiseKrugerZero
        __init__(PiecewiseKrugerZero self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, Kruger i=Kruger()) -> PiecewiseKrugerZero
        """
        _quantlib_risks.PiecewiseKrugerZero_swiginit(self, _quantlib_risks.new_PiecewiseKrugerZero(*args))

    def dates(self):
        r"""dates(PiecewiseKrugerZero self) -> DateVector"""
        return _quantlib_risks.PiecewiseKrugerZero_dates(self)

    def times(self):
        r"""times(PiecewiseKrugerZero self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.PiecewiseKrugerZero_times(self)

    def nodes(self):
        r"""nodes(PiecewiseKrugerZero self) -> std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >"""
        return _quantlib_risks.PiecewiseKrugerZero_nodes(self)

    def recalculate(self):
        r"""recalculate(PiecewiseKrugerZero self)"""
        return _quantlib_risks.PiecewiseKrugerZero_recalculate(self)

    def freeze(self):
        r"""freeze(PiecewiseKrugerZero self)"""
        return _quantlib_risks.PiecewiseKrugerZero_freeze(self)

    def unfreeze(self):
        r"""unfreeze(PiecewiseKrugerZero self)"""
        return _quantlib_risks.PiecewiseKrugerZero_unfreeze(self)
    __swig_destroy__ = _quantlib_risks.delete_PiecewiseKrugerZero

# Register PiecewiseKrugerZero in _quantlib_risks:
_quantlib_risks.PiecewiseKrugerZero_swigregister(PiecewiseKrugerZero)
class PiecewiseKrugerLogDiscount(YieldTermStructure):
    r"""Proxy of C++ PiecewiseKrugerLogDiscount class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PiecewiseKrugerLogDiscount self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), KrugerLog i=KrugerLog(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseKrugerLogDiscount
        __init__(PiecewiseKrugerLogDiscount self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), KrugerLog i=KrugerLog(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseKrugerLogDiscount
        __init__(PiecewiseKrugerLogDiscount self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, KrugerLog i=KrugerLog()) -> PiecewiseKrugerLogDiscount
        __init__(PiecewiseKrugerLogDiscount self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, KrugerLog i=KrugerLog()) -> PiecewiseKrugerLogDiscount
        """
        _quantlib_risks.PiecewiseKrugerLogDiscount_swiginit(self, _quantlib_risks.new_PiecewiseKrugerLogDiscount(*args))

    def dates(self):
        r"""dates(PiecewiseKrugerLogDiscount self) -> DateVector"""
        return _quantlib_risks.PiecewiseKrugerLogDiscount_dates(self)

    def times(self):
        r"""times(PiecewiseKrugerLogDiscount self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.PiecewiseKrugerLogDiscount_times(self)

    def nodes(self):
        r"""nodes(PiecewiseKrugerLogDiscount self) -> std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >"""
        return _quantlib_risks.PiecewiseKrugerLogDiscount_nodes(self)

    def recalculate(self):
        r"""recalculate(PiecewiseKrugerLogDiscount self)"""
        return _quantlib_risks.PiecewiseKrugerLogDiscount_recalculate(self)

    def freeze(self):
        r"""freeze(PiecewiseKrugerLogDiscount self)"""
        return _quantlib_risks.PiecewiseKrugerLogDiscount_freeze(self)

    def unfreeze(self):
        r"""unfreeze(PiecewiseKrugerLogDiscount self)"""
        return _quantlib_risks.PiecewiseKrugerLogDiscount_unfreeze(self)
    __swig_destroy__ = _quantlib_risks.delete_PiecewiseKrugerLogDiscount

# Register PiecewiseKrugerLogDiscount in _quantlib_risks:
_quantlib_risks.PiecewiseKrugerLogDiscount_swigregister(PiecewiseKrugerLogDiscount)
class PiecewiseConvexMonotoneForward(YieldTermStructure):
    r"""Proxy of C++ PiecewiseConvexMonotoneForward class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PiecewiseConvexMonotoneForward self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), ConvexMonotone i=ConvexMonotone(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseConvexMonotoneForward
        __init__(PiecewiseConvexMonotoneForward self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), ConvexMonotone i=ConvexMonotone(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseConvexMonotoneForward
        __init__(PiecewiseConvexMonotoneForward self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, ConvexMonotone i=ConvexMonotone()) -> PiecewiseConvexMonotoneForward
        __init__(PiecewiseConvexMonotoneForward self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, ConvexMonotone i=ConvexMonotone()) -> PiecewiseConvexMonotoneForward
        """
        _quantlib_risks.PiecewiseConvexMonotoneForward_swiginit(self, _quantlib_risks.new_PiecewiseConvexMonotoneForward(*args))

    def dates(self):
        r"""dates(PiecewiseConvexMonotoneForward self) -> DateVector"""
        return _quantlib_risks.PiecewiseConvexMonotoneForward_dates(self)

    def times(self):
        r"""times(PiecewiseConvexMonotoneForward self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.PiecewiseConvexMonotoneForward_times(self)

    def nodes(self):
        r"""nodes(PiecewiseConvexMonotoneForward self) -> std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >"""
        return _quantlib_risks.PiecewiseConvexMonotoneForward_nodes(self)

    def recalculate(self):
        r"""recalculate(PiecewiseConvexMonotoneForward self)"""
        return _quantlib_risks.PiecewiseConvexMonotoneForward_recalculate(self)

    def freeze(self):
        r"""freeze(PiecewiseConvexMonotoneForward self)"""
        return _quantlib_risks.PiecewiseConvexMonotoneForward_freeze(self)

    def unfreeze(self):
        r"""unfreeze(PiecewiseConvexMonotoneForward self)"""
        return _quantlib_risks.PiecewiseConvexMonotoneForward_unfreeze(self)
    __swig_destroy__ = _quantlib_risks.delete_PiecewiseConvexMonotoneForward

# Register PiecewiseConvexMonotoneForward in _quantlib_risks:
_quantlib_risks.PiecewiseConvexMonotoneForward_swigregister(PiecewiseConvexMonotoneForward)
class PiecewiseConvexMonotoneZero(YieldTermStructure):
    r"""Proxy of C++ PiecewiseConvexMonotoneZero class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PiecewiseConvexMonotoneZero self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), ConvexMonotone i=ConvexMonotone(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseConvexMonotoneZero
        __init__(PiecewiseConvexMonotoneZero self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), ConvexMonotone i=ConvexMonotone(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseConvexMonotoneZero
        __init__(PiecewiseConvexMonotoneZero self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, ConvexMonotone i=ConvexMonotone()) -> PiecewiseConvexMonotoneZero
        __init__(PiecewiseConvexMonotoneZero self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, ConvexMonotone i=ConvexMonotone()) -> PiecewiseConvexMonotoneZero
        """
        _quantlib_risks.PiecewiseConvexMonotoneZero_swiginit(self, _quantlib_risks.new_PiecewiseConvexMonotoneZero(*args))

    def dates(self):
        r"""dates(PiecewiseConvexMonotoneZero self) -> DateVector"""
        return _quantlib_risks.PiecewiseConvexMonotoneZero_dates(self)

    def times(self):
        r"""times(PiecewiseConvexMonotoneZero self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.PiecewiseConvexMonotoneZero_times(self)

    def nodes(self):
        r"""nodes(PiecewiseConvexMonotoneZero self) -> std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >"""
        return _quantlib_risks.PiecewiseConvexMonotoneZero_nodes(self)

    def recalculate(self):
        r"""recalculate(PiecewiseConvexMonotoneZero self)"""
        return _quantlib_risks.PiecewiseConvexMonotoneZero_recalculate(self)

    def freeze(self):
        r"""freeze(PiecewiseConvexMonotoneZero self)"""
        return _quantlib_risks.PiecewiseConvexMonotoneZero_freeze(self)

    def unfreeze(self):
        r"""unfreeze(PiecewiseConvexMonotoneZero self)"""
        return _quantlib_risks.PiecewiseConvexMonotoneZero_unfreeze(self)
    __swig_destroy__ = _quantlib_risks.delete_PiecewiseConvexMonotoneZero

# Register PiecewiseConvexMonotoneZero in _quantlib_risks:
_quantlib_risks.PiecewiseConvexMonotoneZero_swigregister(PiecewiseConvexMonotoneZero)
class PiecewiseNaturalCubicZero(YieldTermStructure):
    r"""Proxy of C++ PiecewiseNaturalCubicZero class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PiecewiseNaturalCubicZero self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), SplineCubic i=SplineCubic(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseNaturalCubicZero
        __init__(PiecewiseNaturalCubicZero self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), SplineCubic i=SplineCubic(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseNaturalCubicZero
        __init__(PiecewiseNaturalCubicZero self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, SplineCubic i=SplineCubic()) -> PiecewiseNaturalCubicZero
        __init__(PiecewiseNaturalCubicZero self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, SplineCubic i=SplineCubic()) -> PiecewiseNaturalCubicZero
        """
        _quantlib_risks.PiecewiseNaturalCubicZero_swiginit(self, _quantlib_risks.new_PiecewiseNaturalCubicZero(*args))

    def dates(self):
        r"""dates(PiecewiseNaturalCubicZero self) -> DateVector"""
        return _quantlib_risks.PiecewiseNaturalCubicZero_dates(self)

    def times(self):
        r"""times(PiecewiseNaturalCubicZero self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.PiecewiseNaturalCubicZero_times(self)

    def nodes(self):
        r"""nodes(PiecewiseNaturalCubicZero self) -> std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >"""
        return _quantlib_risks.PiecewiseNaturalCubicZero_nodes(self)

    def recalculate(self):
        r"""recalculate(PiecewiseNaturalCubicZero self)"""
        return _quantlib_risks.PiecewiseNaturalCubicZero_recalculate(self)

    def freeze(self):
        r"""freeze(PiecewiseNaturalCubicZero self)"""
        return _quantlib_risks.PiecewiseNaturalCubicZero_freeze(self)

    def unfreeze(self):
        r"""unfreeze(PiecewiseNaturalCubicZero self)"""
        return _quantlib_risks.PiecewiseNaturalCubicZero_unfreeze(self)
    __swig_destroy__ = _quantlib_risks.delete_PiecewiseNaturalCubicZero

# Register PiecewiseNaturalCubicZero in _quantlib_risks:
_quantlib_risks.PiecewiseNaturalCubicZero_swigregister(PiecewiseNaturalCubicZero)
class PiecewiseNaturalLogCubicDiscount(YieldTermStructure):
    r"""Proxy of C++ PiecewiseNaturalLogCubicDiscount class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PiecewiseNaturalLogCubicDiscount self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), SplineLogCubic i=SplineLogCubic(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseNaturalLogCubicDiscount
        __init__(PiecewiseNaturalLogCubicDiscount self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), SplineLogCubic i=SplineLogCubic(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseNaturalLogCubicDiscount
        __init__(PiecewiseNaturalLogCubicDiscount self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, SplineLogCubic i=SplineLogCubic()) -> PiecewiseNaturalLogCubicDiscount
        __init__(PiecewiseNaturalLogCubicDiscount self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, SplineLogCubic i=SplineLogCubic()) -> PiecewiseNaturalLogCubicDiscount
        """
        _quantlib_risks.PiecewiseNaturalLogCubicDiscount_swiginit(self, _quantlib_risks.new_PiecewiseNaturalLogCubicDiscount(*args))

    def dates(self):
        r"""dates(PiecewiseNaturalLogCubicDiscount self) -> DateVector"""
        return _quantlib_risks.PiecewiseNaturalLogCubicDiscount_dates(self)

    def times(self):
        r"""times(PiecewiseNaturalLogCubicDiscount self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.PiecewiseNaturalLogCubicDiscount_times(self)

    def nodes(self):
        r"""nodes(PiecewiseNaturalLogCubicDiscount self) -> std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >"""
        return _quantlib_risks.PiecewiseNaturalLogCubicDiscount_nodes(self)

    def recalculate(self):
        r"""recalculate(PiecewiseNaturalLogCubicDiscount self)"""
        return _quantlib_risks.PiecewiseNaturalLogCubicDiscount_recalculate(self)

    def freeze(self):
        r"""freeze(PiecewiseNaturalLogCubicDiscount self)"""
        return _quantlib_risks.PiecewiseNaturalLogCubicDiscount_freeze(self)

    def unfreeze(self):
        r"""unfreeze(PiecewiseNaturalLogCubicDiscount self)"""
        return _quantlib_risks.PiecewiseNaturalLogCubicDiscount_unfreeze(self)
    __swig_destroy__ = _quantlib_risks.delete_PiecewiseNaturalLogCubicDiscount

# Register PiecewiseNaturalLogCubicDiscount in _quantlib_risks:
_quantlib_risks.PiecewiseNaturalLogCubicDiscount_swigregister(PiecewiseNaturalLogCubicDiscount)
class PiecewiseLogMixedLinearCubicDiscount(YieldTermStructure):
    r"""Proxy of C++ PiecewiseLogMixedLinearCubicDiscount class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PiecewiseLogMixedLinearCubicDiscount self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), LogMixedLinearCubic i=LogMixedLinearCubic(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseLogMixedLinearCubicDiscount
        __init__(PiecewiseLogMixedLinearCubicDiscount self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, QuoteHandleVector jumps=std::vector< Handle< Quote > >(), DateVector jumpDates=std::vector< Date >(), LogMixedLinearCubic i=LogMixedLinearCubic(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseLogMixedLinearCubicDiscount
        __init__(PiecewiseLogMixedLinearCubicDiscount self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, LogMixedLinearCubic i=LogMixedLinearCubic()) -> PiecewiseLogMixedLinearCubicDiscount
        __init__(PiecewiseLogMixedLinearCubicDiscount self, Integer settlementDays, Calendar calendar, RateHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b, LogMixedLinearCubic i=LogMixedLinearCubic()) -> PiecewiseLogMixedLinearCubicDiscount
        """
        _quantlib_risks.PiecewiseLogMixedLinearCubicDiscount_swiginit(self, _quantlib_risks.new_PiecewiseLogMixedLinearCubicDiscount(*args))

    def dates(self):
        r"""dates(PiecewiseLogMixedLinearCubicDiscount self) -> DateVector"""
        return _quantlib_risks.PiecewiseLogMixedLinearCubicDiscount_dates(self)

    def times(self):
        r"""times(PiecewiseLogMixedLinearCubicDiscount self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.PiecewiseLogMixedLinearCubicDiscount_times(self)

    def nodes(self):
        r"""nodes(PiecewiseLogMixedLinearCubicDiscount self) -> std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >"""
        return _quantlib_risks.PiecewiseLogMixedLinearCubicDiscount_nodes(self)

    def recalculate(self):
        r"""recalculate(PiecewiseLogMixedLinearCubicDiscount self)"""
        return _quantlib_risks.PiecewiseLogMixedLinearCubicDiscount_recalculate(self)

    def freeze(self):
        r"""freeze(PiecewiseLogMixedLinearCubicDiscount self)"""
        return _quantlib_risks.PiecewiseLogMixedLinearCubicDiscount_freeze(self)

    def unfreeze(self):
        r"""unfreeze(PiecewiseLogMixedLinearCubicDiscount self)"""
        return _quantlib_risks.PiecewiseLogMixedLinearCubicDiscount_unfreeze(self)
    __swig_destroy__ = _quantlib_risks.delete_PiecewiseLogMixedLinearCubicDiscount

# Register PiecewiseLogMixedLinearCubicDiscount in _quantlib_risks:
_quantlib_risks.PiecewiseLogMixedLinearCubicDiscount_swigregister(PiecewiseLogMixedLinearCubicDiscount)
class GlobalBootstrap(object):
    r"""Proxy of C++ _GlobalBootstrap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GlobalBootstrap self, doubleOrNull accuracy=Null< Real >()) -> GlobalBootstrap
        __init__(GlobalBootstrap self, RateHelperVector additionalHelpers, DateVector additionalDates, doubleOrNull accuracy=Null< Real >()) -> GlobalBootstrap
        """
        _quantlib_risks.GlobalBootstrap_swiginit(self, _quantlib_risks.new_GlobalBootstrap(*args))
    __swig_destroy__ = _quantlib_risks.delete_GlobalBootstrap

# Register GlobalBootstrap in _quantlib_risks:
_quantlib_risks.GlobalBootstrap_swigregister(GlobalBootstrap)
class GlobalLinearSimpleZeroCurve(YieldTermStructure):
    r"""Proxy of C++ GlobalLinearSimpleZeroCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, referenceDate, instruments, dayCounter, b):
        r"""__init__(GlobalLinearSimpleZeroCurve self, Date referenceDate, RateHelperVector instruments, DayCounter dayCounter, GlobalBootstrap b) -> GlobalLinearSimpleZeroCurve"""
        _quantlib_risks.GlobalLinearSimpleZeroCurve_swiginit(self, _quantlib_risks.new_GlobalLinearSimpleZeroCurve(referenceDate, instruments, dayCounter, b))

    def dates(self):
        r"""dates(GlobalLinearSimpleZeroCurve self) -> DateVector"""
        return _quantlib_risks.GlobalLinearSimpleZeroCurve_dates(self)

    def times(self):
        r"""times(GlobalLinearSimpleZeroCurve self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.GlobalLinearSimpleZeroCurve_times(self)

    def nodes(self):
        r"""nodes(GlobalLinearSimpleZeroCurve self) -> std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >"""
        return _quantlib_risks.GlobalLinearSimpleZeroCurve_nodes(self)
    __swig_destroy__ = _quantlib_risks.delete_GlobalLinearSimpleZeroCurve

# Register GlobalLinearSimpleZeroCurve in _quantlib_risks:
_quantlib_risks.GlobalLinearSimpleZeroCurve_swigregister(GlobalLinearSimpleZeroCurve)
class DefaultProbabilityTermStructure(TermStructure):
    r"""Proxy of C++ DefaultProbabilityTermStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def defaultProbability(self, *args):
        r"""
        defaultProbability(DefaultProbabilityTermStructure self, Date arg2, bool extrapolate=False) -> Probability
        defaultProbability(DefaultProbabilityTermStructure self, Time arg2, bool extrapolate=False) -> Probability
        defaultProbability(DefaultProbabilityTermStructure self, Date arg2, Date arg3, bool extrapolate=False) -> Probability
        defaultProbability(DefaultProbabilityTermStructure self, Time arg2, Time arg3, bool extrapolate=False) -> Probability
        """
        return _quantlib_risks.DefaultProbabilityTermStructure_defaultProbability(self, *args)

    def survivalProbability(self, *args):
        r"""
        survivalProbability(DefaultProbabilityTermStructure self, Date arg2, bool extrapolate=False) -> Probability
        survivalProbability(DefaultProbabilityTermStructure self, Time arg2, bool extrapolate=False) -> Probability
        """
        return _quantlib_risks.DefaultProbabilityTermStructure_survivalProbability(self, *args)

    def defaultDensity(self, *args):
        r"""
        defaultDensity(DefaultProbabilityTermStructure self, Date arg2, bool extrapolate=False) -> Real
        defaultDensity(DefaultProbabilityTermStructure self, Time arg2, bool extrapolate=False) -> Real
        """
        return _quantlib_risks.DefaultProbabilityTermStructure_defaultDensity(self, *args)

    def hazardRate(self, *args):
        r"""
        hazardRate(DefaultProbabilityTermStructure self, Date arg2, bool extrapolate=False) -> Real
        hazardRate(DefaultProbabilityTermStructure self, Time arg2, bool extrapolate=False) -> Real
        """
        return _quantlib_risks.DefaultProbabilityTermStructure_hazardRate(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_DefaultProbabilityTermStructure

# Register DefaultProbabilityTermStructure in _quantlib_risks:
_quantlib_risks.DefaultProbabilityTermStructure_swigregister(DefaultProbabilityTermStructure)
class DefaultProbabilityTermStructureHandle(object):
    r"""Proxy of C++ Handle< DefaultProbabilityTermStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(DefaultProbabilityTermStructureHandle self, ext::shared_ptr< DefaultProbabilityTermStructure > const & arg2=ext::shared_ptr()) -> DefaultProbabilityTermStructureHandle"""
        _quantlib_risks.DefaultProbabilityTermStructureHandle_swiginit(self, _quantlib_risks.new_DefaultProbabilityTermStructureHandle(*args))

    def __deref__(self):
        r"""__deref__(DefaultProbabilityTermStructureHandle self) -> ext::shared_ptr< DefaultProbabilityTermStructure >"""
        return _quantlib_risks.DefaultProbabilityTermStructureHandle___deref__(self)

    def currentLink(self):
        r"""currentLink(DefaultProbabilityTermStructureHandle self) -> ext::shared_ptr< DefaultProbabilityTermStructure >"""
        return _quantlib_risks.DefaultProbabilityTermStructureHandle_currentLink(self)

    def __nonzero__(self):
        r"""__nonzero__(DefaultProbabilityTermStructureHandle self) -> bool"""
        return _quantlib_risks.DefaultProbabilityTermStructureHandle___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DefaultProbabilityTermStructureHandle self) -> bool"""
        return _quantlib_risks.DefaultProbabilityTermStructureHandle___bool__(self)

    def asObservable(self):
        r"""asObservable(DefaultProbabilityTermStructureHandle self) -> ext::shared_ptr< Observable >"""
        return _quantlib_risks.DefaultProbabilityTermStructureHandle_asObservable(self)
    __swig_destroy__ = _quantlib_risks.delete_DefaultProbabilityTermStructureHandle

    def defaultProbability(self, *args):
        r"""
        defaultProbability(DefaultProbabilityTermStructureHandle self, Date arg2, bool extrapolate=False) -> Probability
        defaultProbability(DefaultProbabilityTermStructureHandle self, Time arg2, bool extrapolate=False) -> Probability
        defaultProbability(DefaultProbabilityTermStructureHandle self, Date arg2, Date arg3, bool extrapolate=False) -> Probability
        defaultProbability(DefaultProbabilityTermStructureHandle self, Time arg2, Time arg3, bool extrapolate=False) -> Probability
        """
        return _quantlib_risks.DefaultProbabilityTermStructureHandle_defaultProbability(self, *args)

    def survivalProbability(self, *args):
        r"""
        survivalProbability(DefaultProbabilityTermStructureHandle self, Date arg2, bool extrapolate=False) -> Probability
        survivalProbability(DefaultProbabilityTermStructureHandle self, Time arg2, bool extrapolate=False) -> Probability
        """
        return _quantlib_risks.DefaultProbabilityTermStructureHandle_survivalProbability(self, *args)

    def defaultDensity(self, *args):
        r"""
        defaultDensity(DefaultProbabilityTermStructureHandle self, Date arg2, bool extrapolate=False) -> Real
        defaultDensity(DefaultProbabilityTermStructureHandle self, Time arg2, bool extrapolate=False) -> Real
        """
        return _quantlib_risks.DefaultProbabilityTermStructureHandle_defaultDensity(self, *args)

    def hazardRate(self, *args):
        r"""
        hazardRate(DefaultProbabilityTermStructureHandle self, Date arg2, bool extrapolate=False) -> Real
        hazardRate(DefaultProbabilityTermStructureHandle self, Time arg2, bool extrapolate=False) -> Real
        """
        return _quantlib_risks.DefaultProbabilityTermStructureHandle_hazardRate(self, *args)

    def dayCounter(self):
        r"""dayCounter(DefaultProbabilityTermStructureHandle self) -> DayCounter"""
        return _quantlib_risks.DefaultProbabilityTermStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        r"""timeFromReference(DefaultProbabilityTermStructureHandle self, Date date) -> Time"""
        return _quantlib_risks.DefaultProbabilityTermStructureHandle_timeFromReference(self, date)

    def calendar(self):
        r"""calendar(DefaultProbabilityTermStructureHandle self) -> Calendar"""
        return _quantlib_risks.DefaultProbabilityTermStructureHandle_calendar(self)

    def referenceDate(self):
        r"""referenceDate(DefaultProbabilityTermStructureHandle self) -> Date"""
        return _quantlib_risks.DefaultProbabilityTermStructureHandle_referenceDate(self)

    def maxDate(self):
        r"""maxDate(DefaultProbabilityTermStructureHandle self) -> Date"""
        return _quantlib_risks.DefaultProbabilityTermStructureHandle_maxDate(self)

    def maxTime(self):
        r"""maxTime(DefaultProbabilityTermStructureHandle self) -> Time"""
        return _quantlib_risks.DefaultProbabilityTermStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        r"""enableExtrapolation(DefaultProbabilityTermStructureHandle self)"""
        return _quantlib_risks.DefaultProbabilityTermStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        r"""disableExtrapolation(DefaultProbabilityTermStructureHandle self)"""
        return _quantlib_risks.DefaultProbabilityTermStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        r"""allowsExtrapolation(DefaultProbabilityTermStructureHandle self) -> bool"""
        return _quantlib_risks.DefaultProbabilityTermStructureHandle_allowsExtrapolation(self)

# Register DefaultProbabilityTermStructureHandle in _quantlib_risks:
_quantlib_risks.DefaultProbabilityTermStructureHandle_swigregister(DefaultProbabilityTermStructureHandle)
class RelinkableDefaultProbabilityTermStructureHandle(DefaultProbabilityTermStructureHandle):
    r"""Proxy of C++ RelinkableHandle< DefaultProbabilityTermStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(RelinkableDefaultProbabilityTermStructureHandle self, ext::shared_ptr< DefaultProbabilityTermStructure > const & arg2=ext::shared_ptr()) -> RelinkableDefaultProbabilityTermStructureHandle"""
        _quantlib_risks.RelinkableDefaultProbabilityTermStructureHandle_swiginit(self, _quantlib_risks.new_RelinkableDefaultProbabilityTermStructureHandle(*args))

    def linkTo(self, arg2):
        r"""linkTo(RelinkableDefaultProbabilityTermStructureHandle self, ext::shared_ptr< DefaultProbabilityTermStructure > const & arg2)"""
        return _quantlib_risks.RelinkableDefaultProbabilityTermStructureHandle_linkTo(self, arg2)

    def reset(self):
        r"""reset(RelinkableDefaultProbabilityTermStructureHandle self)"""
        return _quantlib_risks.RelinkableDefaultProbabilityTermStructureHandle_reset(self)
    __swig_destroy__ = _quantlib_risks.delete_RelinkableDefaultProbabilityTermStructureHandle

# Register RelinkableDefaultProbabilityTermStructureHandle in _quantlib_risks:
_quantlib_risks.RelinkableDefaultProbabilityTermStructureHandle_swigregister(RelinkableDefaultProbabilityTermStructureHandle)
class FlatHazardRate(DefaultProbabilityTermStructure):
    r"""Proxy of C++ FlatHazardRate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FlatHazardRate self, Integer settlementDays, Calendar calendar, QuoteHandle hazardRate, DayCounter dayCounter) -> FlatHazardRate
        __init__(FlatHazardRate self, Date todaysDate, QuoteHandle hazardRate, DayCounter dayCounter) -> FlatHazardRate
        """
        _quantlib_risks.FlatHazardRate_swiginit(self, _quantlib_risks.new_FlatHazardRate(*args))
    __swig_destroy__ = _quantlib_risks.delete_FlatHazardRate

# Register FlatHazardRate in _quantlib_risks:
_quantlib_risks.FlatHazardRate_swigregister(FlatHazardRate)
class HazardRateCurve(DefaultProbabilityTermStructure):
    r"""Proxy of C++ InterpolatedHazardRateCurve< BackwardFlat > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(HazardRateCurve self, DateVector dates, std::vector< Real,std::allocator< Real > > const & hazardRates, DayCounter dayCounter, Calendar calendar=Calendar(), BackwardFlat i=BackwardFlat()) -> HazardRateCurve"""
        _quantlib_risks.HazardRateCurve_swiginit(self, _quantlib_risks.new_HazardRateCurve(*args))

    def dates(self):
        r"""dates(HazardRateCurve self) -> DateVector"""
        return _quantlib_risks.HazardRateCurve_dates(self)

    def hazardRates(self):
        r"""hazardRates(HazardRateCurve self) -> std::vector< Real,std::allocator< Real > > const &"""
        return _quantlib_risks.HazardRateCurve_hazardRates(self)

    def nodes(self):
        r"""nodes(HazardRateCurve self) -> std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >"""
        return _quantlib_risks.HazardRateCurve_nodes(self)
    __swig_destroy__ = _quantlib_risks.delete_HazardRateCurve

# Register HazardRateCurve in _quantlib_risks:
_quantlib_risks.HazardRateCurve_swigregister(HazardRateCurve)
class DefaultDensityCurve(DefaultProbabilityTermStructure):
    r"""Proxy of C++ InterpolatedDefaultDensityCurve< Linear > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(DefaultDensityCurve self, DateVector dates, std::vector< Real,std::allocator< Real > > const & densities, DayCounter dayCounter, Calendar calendar=Calendar(), Linear i=Linear()) -> DefaultDensityCurve"""
        _quantlib_risks.DefaultDensityCurve_swiginit(self, _quantlib_risks.new_DefaultDensityCurve(*args))

    def dates(self):
        r"""dates(DefaultDensityCurve self) -> DateVector"""
        return _quantlib_risks.DefaultDensityCurve_dates(self)

    def defaultDensities(self):
        r"""defaultDensities(DefaultDensityCurve self) -> std::vector< Real,std::allocator< Real > > const &"""
        return _quantlib_risks.DefaultDensityCurve_defaultDensities(self)

    def nodes(self):
        r"""nodes(DefaultDensityCurve self) -> std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >"""
        return _quantlib_risks.DefaultDensityCurve_nodes(self)
    __swig_destroy__ = _quantlib_risks.delete_DefaultDensityCurve

# Register DefaultDensityCurve in _quantlib_risks:
_quantlib_risks.DefaultDensityCurve_swigregister(DefaultDensityCurve)
class SurvivalProbabilityCurve(DefaultProbabilityTermStructure):
    r"""Proxy of C++ InterpolatedSurvivalProbabilityCurve< Linear > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(SurvivalProbabilityCurve self, DateVector dates, std::vector< Probability,std::allocator< Probability > > const & probabilities, DayCounter dayCounter, Calendar calendar=Calendar(), Linear i=Linear()) -> SurvivalProbabilityCurve"""
        _quantlib_risks.SurvivalProbabilityCurve_swiginit(self, _quantlib_risks.new_SurvivalProbabilityCurve(*args))

    def dates(self):
        r"""dates(SurvivalProbabilityCurve self) -> DateVector"""
        return _quantlib_risks.SurvivalProbabilityCurve_dates(self)

    def survivalProbabilities(self):
        r"""survivalProbabilities(SurvivalProbabilityCurve self) -> std::vector< Probability,std::allocator< Probability > > const &"""
        return _quantlib_risks.SurvivalProbabilityCurve_survivalProbabilities(self)

    def nodes(self):
        r"""nodes(SurvivalProbabilityCurve self) -> std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >"""
        return _quantlib_risks.SurvivalProbabilityCurve_nodes(self)
    __swig_destroy__ = _quantlib_risks.delete_SurvivalProbabilityCurve

# Register SurvivalProbabilityCurve in _quantlib_risks:
_quantlib_risks.SurvivalProbabilityCurve_swigregister(SurvivalProbabilityCurve)
class DefaultProbabilityHelper(Observable):
    r"""Proxy of C++ DefaultProbabilityHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def quote(self):
        r"""quote(DefaultProbabilityHelper self) -> QuoteHandle"""
        return _quantlib_risks.DefaultProbabilityHelper_quote(self)

    def latestDate(self):
        r"""latestDate(DefaultProbabilityHelper self) -> Date"""
        return _quantlib_risks.DefaultProbabilityHelper_latestDate(self)

    def earliestDate(self):
        r"""earliestDate(DefaultProbabilityHelper self) -> Date"""
        return _quantlib_risks.DefaultProbabilityHelper_earliestDate(self)

    def maturityDate(self):
        r"""maturityDate(DefaultProbabilityHelper self) -> Date"""
        return _quantlib_risks.DefaultProbabilityHelper_maturityDate(self)

    def latestRelevantDate(self):
        r"""latestRelevantDate(DefaultProbabilityHelper self) -> Date"""
        return _quantlib_risks.DefaultProbabilityHelper_latestRelevantDate(self)

    def pillarDate(self):
        r"""pillarDate(DefaultProbabilityHelper self) -> Date"""
        return _quantlib_risks.DefaultProbabilityHelper_pillarDate(self)

    def impliedQuote(self):
        r"""impliedQuote(DefaultProbabilityHelper self) -> Real"""
        return _quantlib_risks.DefaultProbabilityHelper_impliedQuote(self)

    def quoteError(self):
        r"""quoteError(DefaultProbabilityHelper self) -> Real"""
        return _quantlib_risks.DefaultProbabilityHelper_quoteError(self)
    __swig_destroy__ = _quantlib_risks.delete_DefaultProbabilityHelper

# Register DefaultProbabilityHelper in _quantlib_risks:
_quantlib_risks.DefaultProbabilityHelper_swigregister(DefaultProbabilityHelper)
class DefaultProbabilityHelperVector(object):
    r"""Proxy of C++ std::vector< ext::shared_ptr< DefaultProbabilityHelper > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(DefaultProbabilityHelperVector self) -> SwigPyIterator"""
        return _quantlib_risks.DefaultProbabilityHelperVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(DefaultProbabilityHelperVector self) -> bool"""
        return _quantlib_risks.DefaultProbabilityHelperVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(DefaultProbabilityHelperVector self) -> bool"""
        return _quantlib_risks.DefaultProbabilityHelperVector___bool__(self)

    def __len__(self):
        r"""__len__(DefaultProbabilityHelperVector self) -> std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::size_type"""
        return _quantlib_risks.DefaultProbabilityHelperVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(DefaultProbabilityHelperVector self, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::difference_type i, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::difference_type j) -> DefaultProbabilityHelperVector"""
        return _quantlib_risks.DefaultProbabilityHelperVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(DefaultProbabilityHelperVector self, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::difference_type i, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::difference_type j)
        __setslice__(DefaultProbabilityHelperVector self, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::difference_type i, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::difference_type j, DefaultProbabilityHelperVector v)
        """
        return _quantlib_risks.DefaultProbabilityHelperVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(DefaultProbabilityHelperVector self, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::difference_type i, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::difference_type j)"""
        return _quantlib_risks.DefaultProbabilityHelperVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(DefaultProbabilityHelperVector self, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::difference_type i)
        __delitem__(DefaultProbabilityHelperVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.DefaultProbabilityHelperVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(DefaultProbabilityHelperVector self, SWIGPY_SLICEOBJECT * slice) -> DefaultProbabilityHelperVector
        __getitem__(DefaultProbabilityHelperVector self, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::difference_type i) -> std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::value_type const &
        """
        return _quantlib_risks.DefaultProbabilityHelperVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(DefaultProbabilityHelperVector self, SWIGPY_SLICEOBJECT * slice, DefaultProbabilityHelperVector v)
        __setitem__(DefaultProbabilityHelperVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(DefaultProbabilityHelperVector self, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::difference_type i, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::value_type const & x)
        """
        return _quantlib_risks.DefaultProbabilityHelperVector___setitem__(self, *args)

    def pop(self):
        r"""pop(DefaultProbabilityHelperVector self) -> std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::value_type"""
        return _quantlib_risks.DefaultProbabilityHelperVector_pop(self)

    def append(self, x):
        r"""append(DefaultProbabilityHelperVector self, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::value_type const & x)"""
        return _quantlib_risks.DefaultProbabilityHelperVector_append(self, x)

    def empty(self):
        r"""empty(DefaultProbabilityHelperVector self) -> bool"""
        return _quantlib_risks.DefaultProbabilityHelperVector_empty(self)

    def size(self):
        r"""size(DefaultProbabilityHelperVector self) -> std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::size_type"""
        return _quantlib_risks.DefaultProbabilityHelperVector_size(self)

    def swap(self, v):
        r"""swap(DefaultProbabilityHelperVector self, DefaultProbabilityHelperVector v)"""
        return _quantlib_risks.DefaultProbabilityHelperVector_swap(self, v)

    def begin(self):
        r"""begin(DefaultProbabilityHelperVector self) -> std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::iterator"""
        return _quantlib_risks.DefaultProbabilityHelperVector_begin(self)

    def end(self):
        r"""end(DefaultProbabilityHelperVector self) -> std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::iterator"""
        return _quantlib_risks.DefaultProbabilityHelperVector_end(self)

    def rbegin(self):
        r"""rbegin(DefaultProbabilityHelperVector self) -> std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::reverse_iterator"""
        return _quantlib_risks.DefaultProbabilityHelperVector_rbegin(self)

    def rend(self):
        r"""rend(DefaultProbabilityHelperVector self) -> std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::reverse_iterator"""
        return _quantlib_risks.DefaultProbabilityHelperVector_rend(self)

    def clear(self):
        r"""clear(DefaultProbabilityHelperVector self)"""
        return _quantlib_risks.DefaultProbabilityHelperVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(DefaultProbabilityHelperVector self) -> std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::allocator_type"""
        return _quantlib_risks.DefaultProbabilityHelperVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(DefaultProbabilityHelperVector self)"""
        return _quantlib_risks.DefaultProbabilityHelperVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(DefaultProbabilityHelperVector self, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::iterator pos) -> std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::iterator
        erase(DefaultProbabilityHelperVector self, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::iterator first, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::iterator last) -> std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::iterator
        """
        return _quantlib_risks.DefaultProbabilityHelperVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DefaultProbabilityHelperVector self) -> DefaultProbabilityHelperVector
        __init__(DefaultProbabilityHelperVector self, DefaultProbabilityHelperVector other) -> DefaultProbabilityHelperVector
        __init__(DefaultProbabilityHelperVector self, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::size_type size) -> DefaultProbabilityHelperVector
        __init__(DefaultProbabilityHelperVector self, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::size_type size, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::value_type const & value) -> DefaultProbabilityHelperVector
        """
        _quantlib_risks.DefaultProbabilityHelperVector_swiginit(self, _quantlib_risks.new_DefaultProbabilityHelperVector(*args))

    def push_back(self, x):
        r"""push_back(DefaultProbabilityHelperVector self, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::value_type const & x)"""
        return _quantlib_risks.DefaultProbabilityHelperVector_push_back(self, x)

    def front(self):
        r"""front(DefaultProbabilityHelperVector self) -> std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::value_type const &"""
        return _quantlib_risks.DefaultProbabilityHelperVector_front(self)

    def back(self):
        r"""back(DefaultProbabilityHelperVector self) -> std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::value_type const &"""
        return _quantlib_risks.DefaultProbabilityHelperVector_back(self)

    def assign(self, n, x):
        r"""assign(DefaultProbabilityHelperVector self, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::size_type n, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::value_type const & x)"""
        return _quantlib_risks.DefaultProbabilityHelperVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(DefaultProbabilityHelperVector self, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::size_type new_size)
        resize(DefaultProbabilityHelperVector self, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::size_type new_size, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::value_type const & x)
        """
        return _quantlib_risks.DefaultProbabilityHelperVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(DefaultProbabilityHelperVector self, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::iterator pos, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::value_type const & x) -> std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::iterator
        insert(DefaultProbabilityHelperVector self, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::iterator pos, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::size_type n, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::value_type const & x)
        """
        return _quantlib_risks.DefaultProbabilityHelperVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(DefaultProbabilityHelperVector self, std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::size_type n)"""
        return _quantlib_risks.DefaultProbabilityHelperVector_reserve(self, n)

    def capacity(self):
        r"""capacity(DefaultProbabilityHelperVector self) -> std::vector< ext::shared_ptr< DefaultProbabilityHelper > >::size_type"""
        return _quantlib_risks.DefaultProbabilityHelperVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_DefaultProbabilityHelperVector

# Register DefaultProbabilityHelperVector in _quantlib_risks:
_quantlib_risks.DefaultProbabilityHelperVector_swigregister(DefaultProbabilityHelperVector)
class SpreadCdsHelper(DefaultProbabilityHelper):
    r"""Proxy of C++ SpreadCdsHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SpreadCdsHelper self, QuoteHandle spread, Period tenor, Integer settlementDays, Calendar calendar, Frequency frequency, BusinessDayConvention convention, DateGeneration::Rule rule, DayCounter dayCounter, Real recoveryRate, YieldTermStructureHandle discountCurve, bool settlesAccrual=True, bool paysAtDefaultTime=True, Date startDate=Date(), DayCounter lastPeriodDayCounter=DayCounter(), bool rebatesAccrual=True, CreditDefaultSwap::PricingModel model=Midpoint) -> SpreadCdsHelper
        __init__(SpreadCdsHelper self, Rate spread, Period tenor, Integer settlementDays, Calendar calendar, Frequency frequency, BusinessDayConvention convention, DateGeneration::Rule rule, DayCounter dayCounter, Real recoveryRate, YieldTermStructureHandle discountCurve, bool settlesAccrual=True, bool paysAtDefaultTime=True, Date startDate=Date(), DayCounter lastPeriodDayCounter=DayCounter(), bool rebatesAccrual=True, CreditDefaultSwap::PricingModel model=Midpoint) -> SpreadCdsHelper
        """
        _quantlib_risks.SpreadCdsHelper_swiginit(self, _quantlib_risks.new_SpreadCdsHelper(*args))
    __swig_destroy__ = _quantlib_risks.delete_SpreadCdsHelper

# Register SpreadCdsHelper in _quantlib_risks:
_quantlib_risks.SpreadCdsHelper_swigregister(SpreadCdsHelper)
class UpfrontCdsHelper(DefaultProbabilityHelper):
    r"""Proxy of C++ UpfrontCdsHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(UpfrontCdsHelper self, QuoteHandle upfront, Rate spread, Period tenor, Integer settlementDays, Calendar calendar, Frequency frequency, BusinessDayConvention convention, DateGeneration::Rule rule, DayCounter dayCounter, Real recoveryRate, YieldTermStructureHandle discountCurve, Natural upfrontSettlementDays=0, bool settlesAccrual=True, bool paysAtDefaultTime=True, Date startDate=Date(), DayCounter lastPeriodDayCounter=DayCounter(), bool rebatesAccrual=True, CreditDefaultSwap::PricingModel model=Midpoint) -> UpfrontCdsHelper
        __init__(UpfrontCdsHelper self, Rate upfront, Rate spread, Period tenor, Integer settlementDays, Calendar calendar, Frequency frequency, BusinessDayConvention convention, DateGeneration::Rule rule, DayCounter dayCounter, Real recoveryRate, YieldTermStructureHandle discountCurve, Natural upfrontSettlementDays=0, bool settlesAccrual=True, bool paysAtDefaultTime=True, Date startDate=Date(), DayCounter lastPeriodDayCounter=DayCounter(), bool rebatesAccrual=True, CreditDefaultSwap::PricingModel model=Midpoint) -> UpfrontCdsHelper
        """
        _quantlib_risks.UpfrontCdsHelper_swiginit(self, _quantlib_risks.new_UpfrontCdsHelper(*args))
    __swig_destroy__ = _quantlib_risks.delete_UpfrontCdsHelper

# Register UpfrontCdsHelper in _quantlib_risks:
_quantlib_risks.UpfrontCdsHelper_swigregister(UpfrontCdsHelper)
class HazardRate(object):
    r"""Proxy of C++ HazardRate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(HazardRate self) -> HazardRate"""
        _quantlib_risks.HazardRate_swiginit(self, _quantlib_risks.new_HazardRate())
    __swig_destroy__ = _quantlib_risks.delete_HazardRate

# Register HazardRate in _quantlib_risks:
_quantlib_risks.HazardRate_swigregister(HazardRate)
class DefaultDensity(object):
    r"""Proxy of C++ DefaultDensity class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DefaultDensity self) -> DefaultDensity"""
        _quantlib_risks.DefaultDensity_swiginit(self, _quantlib_risks.new_DefaultDensity())
    __swig_destroy__ = _quantlib_risks.delete_DefaultDensity

# Register DefaultDensity in _quantlib_risks:
_quantlib_risks.DefaultDensity_swigregister(DefaultDensity)
class PiecewiseFlatHazardRate(DefaultProbabilityTermStructure):
    r"""Proxy of C++ PiecewiseFlatHazardRate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PiecewiseFlatHazardRate self, Date referenceDate, DefaultProbabilityHelperVector instruments, DayCounter dayCounter, BackwardFlat i=BackwardFlat(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseFlatHazardRate
        __init__(PiecewiseFlatHazardRate self, Integer settlementDays, Calendar calendar, DefaultProbabilityHelperVector instruments, DayCounter dayCounter, BackwardFlat i=BackwardFlat(), IterativeBootstrap b=_IterativeBootstrap()) -> PiecewiseFlatHazardRate
        __init__(PiecewiseFlatHazardRate self, Date referenceDate, DefaultProbabilityHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b) -> PiecewiseFlatHazardRate
        __init__(PiecewiseFlatHazardRate self, Integer settlementDays, Calendar calendar, DefaultProbabilityHelperVector instruments, DayCounter dayCounter, IterativeBootstrap b) -> PiecewiseFlatHazardRate
        """
        _quantlib_risks.PiecewiseFlatHazardRate_swiginit(self, _quantlib_risks.new_PiecewiseFlatHazardRate(*args))

    def dates(self):
        r"""dates(PiecewiseFlatHazardRate self) -> DateVector"""
        return _quantlib_risks.PiecewiseFlatHazardRate_dates(self)

    def times(self):
        r"""times(PiecewiseFlatHazardRate self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.PiecewiseFlatHazardRate_times(self)

    def nodes(self):
        r"""nodes(PiecewiseFlatHazardRate self) -> std::vector< std::pair< Date,Real >,std::allocator< std::pair< Date,Real > > >"""
        return _quantlib_risks.PiecewiseFlatHazardRate_nodes(self)
    __swig_destroy__ = _quantlib_risks.delete_PiecewiseFlatHazardRate

# Register PiecewiseFlatHazardRate in _quantlib_risks:
_quantlib_risks.PiecewiseFlatHazardRate_swigregister(PiecewiseFlatHazardRate)
class RiskyBondEngine(PricingEngine):
    r"""Proxy of C++ RiskyBondEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, defaultCurve, recoveryRate, riskFreeCurve):
        r"""__init__(RiskyBondEngine self, DefaultProbabilityTermStructureHandle defaultCurve, Real recoveryRate, YieldTermStructureHandle riskFreeCurve) -> RiskyBondEngine"""
        _quantlib_risks.RiskyBondEngine_swiginit(self, _quantlib_risks.new_RiskyBondEngine(defaultCurve, recoveryRate, riskFreeCurve))
    __swig_destroy__ = _quantlib_risks.delete_RiskyBondEngine

# Register RiskyBondEngine in _quantlib_risks:
_quantlib_risks.RiskyBondEngine_swigregister(RiskyBondEngine)
class Protection(object):
    r"""Proxy of C++ Protection class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Buyer = _quantlib_risks.Protection_Buyer
    
    Seller = _quantlib_risks.Protection_Seller
    

    def __init__(self):
        r"""__init__(Protection self) -> Protection"""
        _quantlib_risks.Protection_swiginit(self, _quantlib_risks.new_Protection())
    __swig_destroy__ = _quantlib_risks.delete_Protection

# Register Protection in _quantlib_risks:
_quantlib_risks.Protection_swigregister(Protection)
class Claim(object):
    r"""Proxy of C++ Claim class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def amount(self, defaultDate, notional, recoveryRate):
        r"""amount(Claim self, Date defaultDate, Real notional, Real recoveryRate) -> Real"""
        return _quantlib_risks.Claim_amount(self, defaultDate, notional, recoveryRate)
    __swig_destroy__ = _quantlib_risks.delete_Claim

# Register Claim in _quantlib_risks:
_quantlib_risks.Claim_swigregister(Claim)
class FaceValueClaim(Claim):
    r"""Proxy of C++ FaceValueClaim class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(FaceValueClaim self) -> FaceValueClaim"""
        _quantlib_risks.FaceValueClaim_swiginit(self, _quantlib_risks.new_FaceValueClaim())
    __swig_destroy__ = _quantlib_risks.delete_FaceValueClaim

# Register FaceValueClaim in _quantlib_risks:
_quantlib_risks.FaceValueClaim_swigregister(FaceValueClaim)
class FaceValueAccrualClaim(Claim):
    r"""Proxy of C++ FaceValueAccrualClaim class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, bond):
        r"""__init__(FaceValueAccrualClaim self, ext::shared_ptr< Bond > const & bond) -> FaceValueAccrualClaim"""
        _quantlib_risks.FaceValueAccrualClaim_swiginit(self, _quantlib_risks.new_FaceValueAccrualClaim(bond))
    __swig_destroy__ = _quantlib_risks.delete_FaceValueAccrualClaim

# Register FaceValueAccrualClaim in _quantlib_risks:
_quantlib_risks.FaceValueAccrualClaim_swigregister(FaceValueAccrualClaim)
class CreditDefaultSwap(Instrument):
    r"""Proxy of C++ CreditDefaultSwap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Midpoint = _quantlib_risks.CreditDefaultSwap_Midpoint
    
    ISDA = _quantlib_risks.CreditDefaultSwap_ISDA
    

    def __init__(self, *args):
        r"""
        __init__(CreditDefaultSwap self, Protection::Side side, Real notional, Rate spread, Schedule schedule, BusinessDayConvention paymentConvention, DayCounter dayCounter, bool settlesAccrual=True, bool paysAtDefaultTime=True, Date protectionStart=Date(), ext::shared_ptr< Claim > const & claim={}, DayCounter lastPeriodDayCounter=DayCounter(), bool const rebatesAccrual=True, Date tradeDate=Date(), Natural cashSettlementDays=3) -> CreditDefaultSwap
        __init__(CreditDefaultSwap self, Protection::Side side, Real notional, Rate upfront, Rate spread, Schedule schedule, BusinessDayConvention paymentConvention, DayCounter dayCounter, bool settlesAccrual=True, bool paysAtDefaultTime=True, Date protectionStart=Date(), Date upfrontDate=Date(), ext::shared_ptr< Claim > const & claim={}, DayCounter lastPeriodDayCounter=DayCounter(), bool const rebatesAccrual=True, Date tradeDate=Date(), Natural cashSettlementDays=3) -> CreditDefaultSwap
        """
        _quantlib_risks.CreditDefaultSwap_swiginit(self, _quantlib_risks.new_CreditDefaultSwap(*args))

    def side(self):
        r"""side(CreditDefaultSwap self) -> Protection::Side"""
        return _quantlib_risks.CreditDefaultSwap_side(self)

    def notional(self):
        r"""notional(CreditDefaultSwap self) -> Real"""
        return _quantlib_risks.CreditDefaultSwap_notional(self)

    def runningSpread(self):
        r"""runningSpread(CreditDefaultSwap self) -> Rate"""
        return _quantlib_risks.CreditDefaultSwap_runningSpread(self)

    def upfront(self):
        r"""upfront(CreditDefaultSwap self) -> doubleOrNull"""
        return _quantlib_risks.CreditDefaultSwap_upfront(self)

    def settlesAccrual(self):
        r"""settlesAccrual(CreditDefaultSwap self) -> bool"""
        return _quantlib_risks.CreditDefaultSwap_settlesAccrual(self)

    def paysAtDefaultTime(self):
        r"""paysAtDefaultTime(CreditDefaultSwap self) -> bool"""
        return _quantlib_risks.CreditDefaultSwap_paysAtDefaultTime(self)

    def coupons(self):
        r"""coupons(CreditDefaultSwap self) -> Leg"""
        return _quantlib_risks.CreditDefaultSwap_coupons(self)

    def protectionStartDate(self):
        r"""protectionStartDate(CreditDefaultSwap self) -> Date"""
        return _quantlib_risks.CreditDefaultSwap_protectionStartDate(self)

    def protectionEndDate(self):
        r"""protectionEndDate(CreditDefaultSwap self) -> Date"""
        return _quantlib_risks.CreditDefaultSwap_protectionEndDate(self)

    def rebatesAccrual(self):
        r"""rebatesAccrual(CreditDefaultSwap self) -> bool"""
        return _quantlib_risks.CreditDefaultSwap_rebatesAccrual(self)

    def upfrontPayment(self):
        r"""upfrontPayment(CreditDefaultSwap self) -> ext::shared_ptr< CashFlow >"""
        return _quantlib_risks.CreditDefaultSwap_upfrontPayment(self)

    def accrualRebate(self):
        r"""accrualRebate(CreditDefaultSwap self) -> ext::shared_ptr< CashFlow >"""
        return _quantlib_risks.CreditDefaultSwap_accrualRebate(self)

    def tradeDate(self):
        r"""tradeDate(CreditDefaultSwap self) -> Date"""
        return _quantlib_risks.CreditDefaultSwap_tradeDate(self)

    def cashSettlementDays(self):
        r"""cashSettlementDays(CreditDefaultSwap self) -> Natural"""
        return _quantlib_risks.CreditDefaultSwap_cashSettlementDays(self)

    def fairUpfront(self):
        r"""fairUpfront(CreditDefaultSwap self) -> Rate"""
        return _quantlib_risks.CreditDefaultSwap_fairUpfront(self)

    def fairSpread(self):
        r"""fairSpread(CreditDefaultSwap self) -> Rate"""
        return _quantlib_risks.CreditDefaultSwap_fairSpread(self)

    def couponLegBPS(self):
        r"""couponLegBPS(CreditDefaultSwap self) -> Real"""
        return _quantlib_risks.CreditDefaultSwap_couponLegBPS(self)

    def upfrontBPS(self):
        r"""upfrontBPS(CreditDefaultSwap self) -> Real"""
        return _quantlib_risks.CreditDefaultSwap_upfrontBPS(self)

    def couponLegNPV(self):
        r"""couponLegNPV(CreditDefaultSwap self) -> Real"""
        return _quantlib_risks.CreditDefaultSwap_couponLegNPV(self)

    def defaultLegNPV(self):
        r"""defaultLegNPV(CreditDefaultSwap self) -> Real"""
        return _quantlib_risks.CreditDefaultSwap_defaultLegNPV(self)

    def upfrontNPV(self):
        r"""upfrontNPV(CreditDefaultSwap self) -> Real"""
        return _quantlib_risks.CreditDefaultSwap_upfrontNPV(self)

    def accrualRebateNPV(self):
        r"""accrualRebateNPV(CreditDefaultSwap self) -> Real"""
        return _quantlib_risks.CreditDefaultSwap_accrualRebateNPV(self)

    def impliedHazardRate(self, *args):
        r"""impliedHazardRate(CreditDefaultSwap self, Real targetNPV, YieldTermStructureHandle discountCurve, DayCounter dayCounter, Real recoveryRate=0.4, Real accuracy=1.0e-6, CreditDefaultSwap::PricingModel model=Midpoint) -> Rate"""
        return _quantlib_risks.CreditDefaultSwap_impliedHazardRate(self, *args)

    def conventionalSpread(self, *args):
        r"""conventionalSpread(CreditDefaultSwap self, Real conventionalRecovery, YieldTermStructureHandle discountCurve, DayCounter dayCounter, CreditDefaultSwap::PricingModel model=Midpoint) -> Rate"""
        return _quantlib_risks.CreditDefaultSwap_conventionalSpread(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_CreditDefaultSwap

# Register CreditDefaultSwap in _quantlib_risks:
_quantlib_risks.CreditDefaultSwap_swigregister(CreditDefaultSwap)
class MidPointCdsEngine(PricingEngine):
    r"""Proxy of C++ MidPointCdsEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, probability, recoveryRate, discountCurve):
        r"""__init__(MidPointCdsEngine self, DefaultProbabilityTermStructureHandle probability, Real recoveryRate, YieldTermStructureHandle discountCurve) -> MidPointCdsEngine"""
        _quantlib_risks.MidPointCdsEngine_swiginit(self, _quantlib_risks.new_MidPointCdsEngine(probability, recoveryRate, discountCurve))
    __swig_destroy__ = _quantlib_risks.delete_MidPointCdsEngine

# Register MidPointCdsEngine in _quantlib_risks:
_quantlib_risks.MidPointCdsEngine_swigregister(MidPointCdsEngine)
class IntegralCdsEngine(PricingEngine):
    r"""Proxy of C++ IntegralCdsEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, integrationStep, probability, recoveryRate, discountCurve, includeSettlementDateFlows=False):
        r"""__init__(IntegralCdsEngine self, Period integrationStep, DefaultProbabilityTermStructureHandle probability, Real recoveryRate, YieldTermStructureHandle discountCurve, bool includeSettlementDateFlows=False) -> IntegralCdsEngine"""
        _quantlib_risks.IntegralCdsEngine_swiginit(self, _quantlib_risks.new_IntegralCdsEngine(integrationStep, probability, recoveryRate, discountCurve, includeSettlementDateFlows))
    __swig_destroy__ = _quantlib_risks.delete_IntegralCdsEngine

# Register IntegralCdsEngine in _quantlib_risks:
_quantlib_risks.IntegralCdsEngine_swigregister(IntegralCdsEngine)
class IsdaCdsEngine(PricingEngine):
    r"""Proxy of C++ IsdaCdsEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoFix = _quantlib_risks.IsdaCdsEngine_NoFix
    
    Taylor = _quantlib_risks.IsdaCdsEngine_Taylor
    
    HalfDayBias = _quantlib_risks.IsdaCdsEngine_HalfDayBias
    
    NoBias = _quantlib_risks.IsdaCdsEngine_NoBias
    
    Flat = _quantlib_risks.IsdaCdsEngine_Flat
    
    Piecewise = _quantlib_risks.IsdaCdsEngine_Piecewise
    

    def __init__(self, *args):
        r"""__init__(IsdaCdsEngine self, DefaultProbabilityTermStructureHandle probability, Real recoveryRate, YieldTermStructureHandle discountCurve, bool includeSettlementDateFlows=False, IsdaCdsEngine::NumericalFix const numericalFix=Taylor, IsdaCdsEngine::AccrualBias const accrualBias=HalfDayBias, IsdaCdsEngine::ForwardsInCouponPeriod const forwardsInCouponPeriod=Piecewise) -> IsdaCdsEngine"""
        _quantlib_risks.IsdaCdsEngine_swiginit(self, _quantlib_risks.new_IsdaCdsEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_IsdaCdsEngine

# Register IsdaCdsEngine in _quantlib_risks:
_quantlib_risks.IsdaCdsEngine_swigregister(IsdaCdsEngine)
class CdsOption(Option):
    r"""Proxy of C++ CdsOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, swap, exercise, knocksOut=True):
        r"""__init__(CdsOption self, ext::shared_ptr< CreditDefaultSwap > const & swap, ext::shared_ptr< Exercise > const & exercise, bool knocksOut=True) -> CdsOption"""
        _quantlib_risks.CdsOption_swiginit(self, _quantlib_risks.new_CdsOption(swap, exercise, knocksOut))

    def atmRate(self):
        r"""atmRate(CdsOption self) -> Rate"""
        return _quantlib_risks.CdsOption_atmRate(self)

    def riskyAnnuity(self):
        r"""riskyAnnuity(CdsOption self) -> Real"""
        return _quantlib_risks.CdsOption_riskyAnnuity(self)

    def impliedVolatility(self, price, termStructure, arg4, recoveryRate, accuracy=1.e-4, maxEvaluations=100, minVol=1.0e-7, maxVol=4.0):
        r"""impliedVolatility(CdsOption self, Real price, YieldTermStructureHandle termStructure, DefaultProbabilityTermStructureHandle arg4, Real recoveryRate, Real accuracy=1.e-4, Size maxEvaluations=100, Volatility minVol=1.0e-7, Volatility maxVol=4.0) -> Volatility"""
        return _quantlib_risks.CdsOption_impliedVolatility(self, price, termStructure, arg4, recoveryRate, accuracy, maxEvaluations, minVol, maxVol)
    __swig_destroy__ = _quantlib_risks.delete_CdsOption

# Register CdsOption in _quantlib_risks:
_quantlib_risks.CdsOption_swigregister(CdsOption)
class BlackCdsOptionEngine(PricingEngine):
    r"""Proxy of C++ BlackCdsOptionEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, recoveryRate, termStructure, vol):
        r"""__init__(BlackCdsOptionEngine self, DefaultProbabilityTermStructureHandle arg2, Real recoveryRate, YieldTermStructureHandle termStructure, QuoteHandle vol) -> BlackCdsOptionEngine"""
        _quantlib_risks.BlackCdsOptionEngine_swiginit(self, _quantlib_risks.new_BlackCdsOptionEngine(arg2, recoveryRate, termStructure, vol))

    def termStructure(self):
        r"""termStructure(BlackCdsOptionEngine self) -> YieldTermStructureHandle"""
        return _quantlib_risks.BlackCdsOptionEngine_termStructure(self)

    def volatility(self):
        r"""volatility(BlackCdsOptionEngine self) -> QuoteHandle"""
        return _quantlib_risks.BlackCdsOptionEngine_volatility(self)
    __swig_destroy__ = _quantlib_risks.delete_BlackCdsOptionEngine

# Register BlackCdsOptionEngine in _quantlib_risks:
_quantlib_risks.BlackCdsOptionEngine_swigregister(BlackCdsOptionEngine)
class DiscountCurve(YieldTermStructure):
    r"""Proxy of C++ InterpolatedDiscountCurve< LogLinear > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(DiscountCurve self, DateVector dates, std::vector< DiscountFactor,std::allocator< DiscountFactor > > const & discounts, DayCounter dayCounter, Calendar calendar=Calendar(), LogLinear i=LogLinear()) -> DiscountCurve"""
        _quantlib_risks.DiscountCurve_swiginit(self, _quantlib_risks.new_DiscountCurve(*args))

    def times(self):
        r"""times(DiscountCurve self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.DiscountCurve_times(self)

    def data(self):
        r"""data(DiscountCurve self) -> std::vector< Real,std::allocator< Real > > const &"""
        return _quantlib_risks.DiscountCurve_data(self)

    def dates(self):
        r"""dates(DiscountCurve self) -> DateVector"""
        return _quantlib_risks.DiscountCurve_dates(self)

    def discounts(self):
        r"""discounts(DiscountCurve self) -> std::vector< DiscountFactor,std::allocator< DiscountFactor > > const &"""
        return _quantlib_risks.DiscountCurve_discounts(self)

    def nodes(self):
        r"""nodes(DiscountCurve self) -> std::vector< std::pair< Date,DiscountFactor >,std::allocator< std::pair< Date,DiscountFactor > > >"""
        return _quantlib_risks.DiscountCurve_nodes(self)
    __swig_destroy__ = _quantlib_risks.delete_DiscountCurve

# Register DiscountCurve in _quantlib_risks:
_quantlib_risks.DiscountCurve_swigregister(DiscountCurve)
class MonotonicLogCubicDiscountCurve(YieldTermStructure):
    r"""Proxy of C++ InterpolatedDiscountCurve< MonotonicLogCubic > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(MonotonicLogCubicDiscountCurve self, DateVector dates, std::vector< DiscountFactor,std::allocator< DiscountFactor > > const & discounts, DayCounter dayCounter, Calendar calendar=Calendar(), MonotonicLogCubic i=MonotonicLogCubic()) -> MonotonicLogCubicDiscountCurve"""
        _quantlib_risks.MonotonicLogCubicDiscountCurve_swiginit(self, _quantlib_risks.new_MonotonicLogCubicDiscountCurve(*args))

    def times(self):
        r"""times(MonotonicLogCubicDiscountCurve self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.MonotonicLogCubicDiscountCurve_times(self)

    def data(self):
        r"""data(MonotonicLogCubicDiscountCurve self) -> std::vector< Real,std::allocator< Real > > const &"""
        return _quantlib_risks.MonotonicLogCubicDiscountCurve_data(self)

    def dates(self):
        r"""dates(MonotonicLogCubicDiscountCurve self) -> DateVector"""
        return _quantlib_risks.MonotonicLogCubicDiscountCurve_dates(self)

    def discounts(self):
        r"""discounts(MonotonicLogCubicDiscountCurve self) -> std::vector< DiscountFactor,std::allocator< DiscountFactor > > const &"""
        return _quantlib_risks.MonotonicLogCubicDiscountCurve_discounts(self)

    def nodes(self):
        r"""nodes(MonotonicLogCubicDiscountCurve self) -> std::vector< std::pair< Date,DiscountFactor >,std::allocator< std::pair< Date,DiscountFactor > > >"""
        return _quantlib_risks.MonotonicLogCubicDiscountCurve_nodes(self)
    __swig_destroy__ = _quantlib_risks.delete_MonotonicLogCubicDiscountCurve

# Register MonotonicLogCubicDiscountCurve in _quantlib_risks:
_quantlib_risks.MonotonicLogCubicDiscountCurve_swigregister(MonotonicLogCubicDiscountCurve)
class NaturalCubicDiscountCurve(YieldTermStructure):
    r"""Proxy of C++ InterpolatedDiscountCurve< SplineCubic > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(NaturalCubicDiscountCurve self, DateVector dates, std::vector< DiscountFactor,std::allocator< DiscountFactor > > const & discounts, DayCounter dayCounter, Calendar calendar=Calendar(), SplineCubic i=SplineCubic()) -> NaturalCubicDiscountCurve"""
        _quantlib_risks.NaturalCubicDiscountCurve_swiginit(self, _quantlib_risks.new_NaturalCubicDiscountCurve(*args))

    def times(self):
        r"""times(NaturalCubicDiscountCurve self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.NaturalCubicDiscountCurve_times(self)

    def data(self):
        r"""data(NaturalCubicDiscountCurve self) -> std::vector< Real,std::allocator< Real > > const &"""
        return _quantlib_risks.NaturalCubicDiscountCurve_data(self)

    def dates(self):
        r"""dates(NaturalCubicDiscountCurve self) -> DateVector"""
        return _quantlib_risks.NaturalCubicDiscountCurve_dates(self)

    def discounts(self):
        r"""discounts(NaturalCubicDiscountCurve self) -> std::vector< DiscountFactor,std::allocator< DiscountFactor > > const &"""
        return _quantlib_risks.NaturalCubicDiscountCurve_discounts(self)

    def nodes(self):
        r"""nodes(NaturalCubicDiscountCurve self) -> std::vector< std::pair< Date,DiscountFactor >,std::allocator< std::pair< Date,DiscountFactor > > >"""
        return _quantlib_risks.NaturalCubicDiscountCurve_nodes(self)
    __swig_destroy__ = _quantlib_risks.delete_NaturalCubicDiscountCurve

# Register NaturalCubicDiscountCurve in _quantlib_risks:
_quantlib_risks.NaturalCubicDiscountCurve_swigregister(NaturalCubicDiscountCurve)
class KrugerLogDiscountCurve(YieldTermStructure):
    r"""Proxy of C++ InterpolatedDiscountCurve< KrugerLog > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(KrugerLogDiscountCurve self, DateVector dates, std::vector< DiscountFactor,std::allocator< DiscountFactor > > const & discounts, DayCounter dayCounter, Calendar calendar=Calendar(), KrugerLog i=KrugerLog()) -> KrugerLogDiscountCurve"""
        _quantlib_risks.KrugerLogDiscountCurve_swiginit(self, _quantlib_risks.new_KrugerLogDiscountCurve(*args))

    def times(self):
        r"""times(KrugerLogDiscountCurve self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.KrugerLogDiscountCurve_times(self)

    def data(self):
        r"""data(KrugerLogDiscountCurve self) -> std::vector< Real,std::allocator< Real > > const &"""
        return _quantlib_risks.KrugerLogDiscountCurve_data(self)

    def dates(self):
        r"""dates(KrugerLogDiscountCurve self) -> DateVector"""
        return _quantlib_risks.KrugerLogDiscountCurve_dates(self)

    def discounts(self):
        r"""discounts(KrugerLogDiscountCurve self) -> std::vector< DiscountFactor,std::allocator< DiscountFactor > > const &"""
        return _quantlib_risks.KrugerLogDiscountCurve_discounts(self)

    def nodes(self):
        r"""nodes(KrugerLogDiscountCurve self) -> std::vector< std::pair< Date,DiscountFactor >,std::allocator< std::pair< Date,DiscountFactor > > >"""
        return _quantlib_risks.KrugerLogDiscountCurve_nodes(self)
    __swig_destroy__ = _quantlib_risks.delete_KrugerLogDiscountCurve

# Register KrugerLogDiscountCurve in _quantlib_risks:
_quantlib_risks.KrugerLogDiscountCurve_swigregister(KrugerLogDiscountCurve)
class NaturalLogCubicDiscountCurve(YieldTermStructure):
    r"""Proxy of C++ InterpolatedDiscountCurve< SplineLogCubic > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(NaturalLogCubicDiscountCurve self, DateVector dates, std::vector< DiscountFactor,std::allocator< DiscountFactor > > const & discounts, DayCounter dayCounter, Calendar calendar=Calendar(), SplineLogCubic i=SplineLogCubic()) -> NaturalLogCubicDiscountCurve"""
        _quantlib_risks.NaturalLogCubicDiscountCurve_swiginit(self, _quantlib_risks.new_NaturalLogCubicDiscountCurve(*args))

    def times(self):
        r"""times(NaturalLogCubicDiscountCurve self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.NaturalLogCubicDiscountCurve_times(self)

    def data(self):
        r"""data(NaturalLogCubicDiscountCurve self) -> std::vector< Real,std::allocator< Real > > const &"""
        return _quantlib_risks.NaturalLogCubicDiscountCurve_data(self)

    def dates(self):
        r"""dates(NaturalLogCubicDiscountCurve self) -> DateVector"""
        return _quantlib_risks.NaturalLogCubicDiscountCurve_dates(self)

    def discounts(self):
        r"""discounts(NaturalLogCubicDiscountCurve self) -> std::vector< DiscountFactor,std::allocator< DiscountFactor > > const &"""
        return _quantlib_risks.NaturalLogCubicDiscountCurve_discounts(self)

    def nodes(self):
        r"""nodes(NaturalLogCubicDiscountCurve self) -> std::vector< std::pair< Date,DiscountFactor >,std::allocator< std::pair< Date,DiscountFactor > > >"""
        return _quantlib_risks.NaturalLogCubicDiscountCurve_nodes(self)
    __swig_destroy__ = _quantlib_risks.delete_NaturalLogCubicDiscountCurve

# Register NaturalLogCubicDiscountCurve in _quantlib_risks:
_quantlib_risks.NaturalLogCubicDiscountCurve_swigregister(NaturalLogCubicDiscountCurve)
class LogMixedLinearCubicDiscountCurve(YieldTermStructure):
    r"""Proxy of C++ InterpolatedDiscountCurve< LogMixedLinearCubic > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(LogMixedLinearCubicDiscountCurve self, DateVector dates, std::vector< DiscountFactor,std::allocator< DiscountFactor > > const & discounts, DayCounter dayCounter, Calendar calendar=Calendar(), LogMixedLinearCubic i=LogMixedLinearCubic()) -> LogMixedLinearCubicDiscountCurve"""
        _quantlib_risks.LogMixedLinearCubicDiscountCurve_swiginit(self, _quantlib_risks.new_LogMixedLinearCubicDiscountCurve(*args))

    def times(self):
        r"""times(LogMixedLinearCubicDiscountCurve self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.LogMixedLinearCubicDiscountCurve_times(self)

    def data(self):
        r"""data(LogMixedLinearCubicDiscountCurve self) -> std::vector< Real,std::allocator< Real > > const &"""
        return _quantlib_risks.LogMixedLinearCubicDiscountCurve_data(self)

    def dates(self):
        r"""dates(LogMixedLinearCubicDiscountCurve self) -> DateVector"""
        return _quantlib_risks.LogMixedLinearCubicDiscountCurve_dates(self)

    def discounts(self):
        r"""discounts(LogMixedLinearCubicDiscountCurve self) -> std::vector< DiscountFactor,std::allocator< DiscountFactor > > const &"""
        return _quantlib_risks.LogMixedLinearCubicDiscountCurve_discounts(self)

    def nodes(self):
        r"""nodes(LogMixedLinearCubicDiscountCurve self) -> std::vector< std::pair< Date,DiscountFactor >,std::allocator< std::pair< Date,DiscountFactor > > >"""
        return _quantlib_risks.LogMixedLinearCubicDiscountCurve_nodes(self)
    __swig_destroy__ = _quantlib_risks.delete_LogMixedLinearCubicDiscountCurve

# Register LogMixedLinearCubicDiscountCurve in _quantlib_risks:
_quantlib_risks.LogMixedLinearCubicDiscountCurve_swigregister(LogMixedLinearCubicDiscountCurve)
class NormalDistribution(object):
    r"""Proxy of C++ NormalDistribution class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, average=0.0, sigma=1.0):
        r"""__init__(NormalDistribution self, Real average=0.0, Real sigma=1.0) -> NormalDistribution"""
        _quantlib_risks.NormalDistribution_swiginit(self, _quantlib_risks.new_NormalDistribution(average, sigma))

    def __call__(self, x):
        r"""__call__(NormalDistribution self, Real x) -> Real"""
        return _quantlib_risks.NormalDistribution___call__(self, x)

    def derivative(self, x):
        r"""derivative(NormalDistribution self, Real x) -> Real"""
        return _quantlib_risks.NormalDistribution_derivative(self, x)
    __swig_destroy__ = _quantlib_risks.delete_NormalDistribution

# Register NormalDistribution in _quantlib_risks:
_quantlib_risks.NormalDistribution_swigregister(NormalDistribution)
class CumulativeNormalDistribution(object):
    r"""Proxy of C++ CumulativeNormalDistribution class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, average=0.0, sigma=1.0):
        r"""__init__(CumulativeNormalDistribution self, Real average=0.0, Real sigma=1.0) -> CumulativeNormalDistribution"""
        _quantlib_risks.CumulativeNormalDistribution_swiginit(self, _quantlib_risks.new_CumulativeNormalDistribution(average, sigma))

    def __call__(self, x):
        r"""__call__(CumulativeNormalDistribution self, Real x) -> Real"""
        return _quantlib_risks.CumulativeNormalDistribution___call__(self, x)

    def derivative(self, x):
        r"""derivative(CumulativeNormalDistribution self, Real x) -> Real"""
        return _quantlib_risks.CumulativeNormalDistribution_derivative(self, x)
    __swig_destroy__ = _quantlib_risks.delete_CumulativeNormalDistribution

# Register CumulativeNormalDistribution in _quantlib_risks:
_quantlib_risks.CumulativeNormalDistribution_swigregister(CumulativeNormalDistribution)
class InverseCumulativeNormal(object):
    r"""Proxy of C++ InverseCumulativeNormal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, average=0.0, sigma=1.0):
        r"""__init__(InverseCumulativeNormal self, Real average=0.0, Real sigma=1.0) -> InverseCumulativeNormal"""
        _quantlib_risks.InverseCumulativeNormal_swiginit(self, _quantlib_risks.new_InverseCumulativeNormal(average, sigma))

    def __call__(self, x):
        r"""__call__(InverseCumulativeNormal self, Real x) -> Real"""
        return _quantlib_risks.InverseCumulativeNormal___call__(self, x)
    __swig_destroy__ = _quantlib_risks.delete_InverseCumulativeNormal

# Register InverseCumulativeNormal in _quantlib_risks:
_quantlib_risks.InverseCumulativeNormal_swigregister(InverseCumulativeNormal)
class MoroInverseCumulativeNormal(object):
    r"""Proxy of C++ MoroInverseCumulativeNormal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, average=0.0, sigma=1.0):
        r"""__init__(MoroInverseCumulativeNormal self, Real average=0.0, Real sigma=1.0) -> MoroInverseCumulativeNormal"""
        _quantlib_risks.MoroInverseCumulativeNormal_swiginit(self, _quantlib_risks.new_MoroInverseCumulativeNormal(average, sigma))

    def __call__(self, x):
        r"""__call__(MoroInverseCumulativeNormal self, Real x) -> Real"""
        return _quantlib_risks.MoroInverseCumulativeNormal___call__(self, x)
    __swig_destroy__ = _quantlib_risks.delete_MoroInverseCumulativeNormal

# Register MoroInverseCumulativeNormal in _quantlib_risks:
_quantlib_risks.MoroInverseCumulativeNormal_swigregister(MoroInverseCumulativeNormal)
class BivariateCumulativeNormalDistribution(object):
    r"""Proxy of C++ BivariateCumulativeNormalDistribution class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rho):
        r"""__init__(BivariateCumulativeNormalDistribution self, Real rho) -> BivariateCumulativeNormalDistribution"""
        _quantlib_risks.BivariateCumulativeNormalDistribution_swiginit(self, _quantlib_risks.new_BivariateCumulativeNormalDistribution(rho))

    def __call__(self, x, y):
        r"""__call__(BivariateCumulativeNormalDistribution self, Real x, Real y) -> Real"""
        return _quantlib_risks.BivariateCumulativeNormalDistribution___call__(self, x, y)
    __swig_destroy__ = _quantlib_risks.delete_BivariateCumulativeNormalDistribution

# Register BivariateCumulativeNormalDistribution in _quantlib_risks:
_quantlib_risks.BivariateCumulativeNormalDistribution_swigregister(BivariateCumulativeNormalDistribution)
class BinomialDistribution(object):
    r"""Proxy of C++ BinomialDistribution class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p, n):
        r"""__init__(BinomialDistribution self, Real p, BigNatural n) -> BinomialDistribution"""
        _quantlib_risks.BinomialDistribution_swiginit(self, _quantlib_risks.new_BinomialDistribution(p, n))

    def __call__(self, k):
        r"""__call__(BinomialDistribution self, BigNatural k) -> Real"""
        return _quantlib_risks.BinomialDistribution___call__(self, k)
    __swig_destroy__ = _quantlib_risks.delete_BinomialDistribution

# Register BinomialDistribution in _quantlib_risks:
_quantlib_risks.BinomialDistribution_swigregister(BinomialDistribution)
class CumulativeBinomialDistribution(object):
    r"""Proxy of C++ CumulativeBinomialDistribution class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p, n):
        r"""__init__(CumulativeBinomialDistribution self, Real p, BigNatural n) -> CumulativeBinomialDistribution"""
        _quantlib_risks.CumulativeBinomialDistribution_swiginit(self, _quantlib_risks.new_CumulativeBinomialDistribution(p, n))

    def __call__(self, k):
        r"""__call__(CumulativeBinomialDistribution self, BigNatural k) -> Real"""
        return _quantlib_risks.CumulativeBinomialDistribution___call__(self, k)
    __swig_destroy__ = _quantlib_risks.delete_CumulativeBinomialDistribution

# Register CumulativeBinomialDistribution in _quantlib_risks:
_quantlib_risks.CumulativeBinomialDistribution_swigregister(CumulativeBinomialDistribution)
class BivariateCumulativeNormalDistributionDr78(object):
    r"""Proxy of C++ BivariateCumulativeNormalDistributionDr78 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rho):
        r"""__init__(BivariateCumulativeNormalDistributionDr78 self, Real rho) -> BivariateCumulativeNormalDistributionDr78"""
        _quantlib_risks.BivariateCumulativeNormalDistributionDr78_swiginit(self, _quantlib_risks.new_BivariateCumulativeNormalDistributionDr78(rho))

    def __call__(self, a, b):
        r"""__call__(BivariateCumulativeNormalDistributionDr78 self, Real a, Real b) -> Real"""
        return _quantlib_risks.BivariateCumulativeNormalDistributionDr78___call__(self, a, b)
    __swig_destroy__ = _quantlib_risks.delete_BivariateCumulativeNormalDistributionDr78

# Register BivariateCumulativeNormalDistributionDr78 in _quantlib_risks:
_quantlib_risks.BivariateCumulativeNormalDistributionDr78_swigregister(BivariateCumulativeNormalDistributionDr78)
class BivariateCumulativeNormalDistributionWe04DP(object):
    r"""Proxy of C++ BivariateCumulativeNormalDistributionWe04DP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rho):
        r"""__init__(BivariateCumulativeNormalDistributionWe04DP self, Real rho) -> BivariateCumulativeNormalDistributionWe04DP"""
        _quantlib_risks.BivariateCumulativeNormalDistributionWe04DP_swiginit(self, _quantlib_risks.new_BivariateCumulativeNormalDistributionWe04DP(rho))

    def __call__(self, a, b):
        r"""__call__(BivariateCumulativeNormalDistributionWe04DP self, Real a, Real b) -> Real"""
        return _quantlib_risks.BivariateCumulativeNormalDistributionWe04DP___call__(self, a, b)
    __swig_destroy__ = _quantlib_risks.delete_BivariateCumulativeNormalDistributionWe04DP

# Register BivariateCumulativeNormalDistributionWe04DP in _quantlib_risks:
_quantlib_risks.BivariateCumulativeNormalDistributionWe04DP_swigregister(BivariateCumulativeNormalDistributionWe04DP)
class CumulativeChiSquareDistribution(object):
    r"""Proxy of C++ CumulativeChiSquareDistribution class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, df):
        r"""__init__(CumulativeChiSquareDistribution self, Real df) -> CumulativeChiSquareDistribution"""
        _quantlib_risks.CumulativeChiSquareDistribution_swiginit(self, _quantlib_risks.new_CumulativeChiSquareDistribution(df))

    def __call__(self, x):
        r"""__call__(CumulativeChiSquareDistribution self, Real x) -> Real"""
        return _quantlib_risks.CumulativeChiSquareDistribution___call__(self, x)
    __swig_destroy__ = _quantlib_risks.delete_CumulativeChiSquareDistribution

# Register CumulativeChiSquareDistribution in _quantlib_risks:
_quantlib_risks.CumulativeChiSquareDistribution_swigregister(CumulativeChiSquareDistribution)
class NonCentralCumulativeChiSquareDistribution(object):
    r"""Proxy of C++ NonCentralCumulativeChiSquareDistribution class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, df, ncp):
        r"""__init__(NonCentralCumulativeChiSquareDistribution self, Real df, Real ncp) -> NonCentralCumulativeChiSquareDistribution"""
        _quantlib_risks.NonCentralCumulativeChiSquareDistribution_swiginit(self, _quantlib_risks.new_NonCentralCumulativeChiSquareDistribution(df, ncp))

    def __call__(self, x):
        r"""__call__(NonCentralCumulativeChiSquareDistribution self, Real x) -> Real"""
        return _quantlib_risks.NonCentralCumulativeChiSquareDistribution___call__(self, x)
    __swig_destroy__ = _quantlib_risks.delete_NonCentralCumulativeChiSquareDistribution

# Register NonCentralCumulativeChiSquareDistribution in _quantlib_risks:
_quantlib_risks.NonCentralCumulativeChiSquareDistribution_swigregister(NonCentralCumulativeChiSquareDistribution)
class InverseNonCentralCumulativeChiSquareDistribution(object):
    r"""Proxy of C++ InverseNonCentralCumulativeChiSquareDistribution class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, df, ncp, maxEvaluations=10, accuracy=1e-8):
        r"""__init__(InverseNonCentralCumulativeChiSquareDistribution self, Real df, Real ncp, Size maxEvaluations=10, Real accuracy=1e-8) -> InverseNonCentralCumulativeChiSquareDistribution"""
        _quantlib_risks.InverseNonCentralCumulativeChiSquareDistribution_swiginit(self, _quantlib_risks.new_InverseNonCentralCumulativeChiSquareDistribution(df, ncp, maxEvaluations, accuracy))

    def __call__(self, x):
        r"""__call__(InverseNonCentralCumulativeChiSquareDistribution self, Real x) -> Real"""
        return _quantlib_risks.InverseNonCentralCumulativeChiSquareDistribution___call__(self, x)
    __swig_destroy__ = _quantlib_risks.delete_InverseNonCentralCumulativeChiSquareDistribution

# Register InverseNonCentralCumulativeChiSquareDistribution in _quantlib_risks:
_quantlib_risks.InverseNonCentralCumulativeChiSquareDistribution_swigregister(InverseNonCentralCumulativeChiSquareDistribution)
class CumulativeGammaDistribution(object):
    r"""Proxy of C++ CumulativeGammaDistribution class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, a):
        r"""__init__(CumulativeGammaDistribution self, Real a) -> CumulativeGammaDistribution"""
        _quantlib_risks.CumulativeGammaDistribution_swiginit(self, _quantlib_risks.new_CumulativeGammaDistribution(a))

    def __call__(self, x):
        r"""__call__(CumulativeGammaDistribution self, Real x) -> Real"""
        return _quantlib_risks.CumulativeGammaDistribution___call__(self, x)
    __swig_destroy__ = _quantlib_risks.delete_CumulativeGammaDistribution

# Register CumulativeGammaDistribution in _quantlib_risks:
_quantlib_risks.CumulativeGammaDistribution_swigregister(CumulativeGammaDistribution)
class GammaFunction(object):
    r"""Proxy of C++ GammaFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def logValue(self, x):
        r"""logValue(GammaFunction self, Real x) -> Real"""
        return _quantlib_risks.GammaFunction_logValue(self, x)

    def __init__(self):
        r"""__init__(GammaFunction self) -> GammaFunction"""
        _quantlib_risks.GammaFunction_swiginit(self, _quantlib_risks.new_GammaFunction())
    __swig_destroy__ = _quantlib_risks.delete_GammaFunction

# Register GammaFunction in _quantlib_risks:
_quantlib_risks.GammaFunction_swigregister(GammaFunction)
class PoissonDistribution(object):
    r"""Proxy of C++ PoissonDistribution class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mu):
        r"""__init__(PoissonDistribution self, Real mu) -> PoissonDistribution"""
        _quantlib_risks.PoissonDistribution_swiginit(self, _quantlib_risks.new_PoissonDistribution(mu))

    def __call__(self, k):
        r"""__call__(PoissonDistribution self, BigNatural k) -> Real"""
        return _quantlib_risks.PoissonDistribution___call__(self, k)
    __swig_destroy__ = _quantlib_risks.delete_PoissonDistribution

# Register PoissonDistribution in _quantlib_risks:
_quantlib_risks.PoissonDistribution_swigregister(PoissonDistribution)
class CumulativePoissonDistribution(object):
    r"""Proxy of C++ CumulativePoissonDistribution class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mu):
        r"""__init__(CumulativePoissonDistribution self, Real mu) -> CumulativePoissonDistribution"""
        _quantlib_risks.CumulativePoissonDistribution_swiginit(self, _quantlib_risks.new_CumulativePoissonDistribution(mu))

    def __call__(self, k):
        r"""__call__(CumulativePoissonDistribution self, BigNatural k) -> Real"""
        return _quantlib_risks.CumulativePoissonDistribution___call__(self, k)
    __swig_destroy__ = _quantlib_risks.delete_CumulativePoissonDistribution

# Register CumulativePoissonDistribution in _quantlib_risks:
_quantlib_risks.CumulativePoissonDistribution_swigregister(CumulativePoissonDistribution)
class InverseCumulativePoisson(object):
    r"""Proxy of C++ InverseCumulativePoisson class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lambda_parameter):
        r"""__init__(InverseCumulativePoisson self, Real lambda_parameter) -> InverseCumulativePoisson"""
        _quantlib_risks.InverseCumulativePoisson_swiginit(self, _quantlib_risks.new_InverseCumulativePoisson(lambda_parameter))

    def __call__(self, x):
        r"""__call__(InverseCumulativePoisson self, Real x) -> Real"""
        return _quantlib_risks.InverseCumulativePoisson___call__(self, x)
    __swig_destroy__ = _quantlib_risks.delete_InverseCumulativePoisson

# Register InverseCumulativePoisson in _quantlib_risks:
_quantlib_risks.InverseCumulativePoisson_swigregister(InverseCumulativePoisson)
class StudentDistribution(object):
    r"""Proxy of C++ StudentDistribution class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n):
        r"""__init__(StudentDistribution self, Integer n) -> StudentDistribution"""
        _quantlib_risks.StudentDistribution_swiginit(self, _quantlib_risks.new_StudentDistribution(n))

    def __call__(self, x):
        r"""__call__(StudentDistribution self, Real x) -> Real"""
        return _quantlib_risks.StudentDistribution___call__(self, x)
    __swig_destroy__ = _quantlib_risks.delete_StudentDistribution

# Register StudentDistribution in _quantlib_risks:
_quantlib_risks.StudentDistribution_swigregister(StudentDistribution)
class CumulativeStudentDistribution(object):
    r"""Proxy of C++ CumulativeStudentDistribution class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n):
        r"""__init__(CumulativeStudentDistribution self, Integer n) -> CumulativeStudentDistribution"""
        _quantlib_risks.CumulativeStudentDistribution_swiginit(self, _quantlib_risks.new_CumulativeStudentDistribution(n))

    def __call__(self, x):
        r"""__call__(CumulativeStudentDistribution self, Real x) -> Real"""
        return _quantlib_risks.CumulativeStudentDistribution___call__(self, x)
    __swig_destroy__ = _quantlib_risks.delete_CumulativeStudentDistribution

# Register CumulativeStudentDistribution in _quantlib_risks:
_quantlib_risks.CumulativeStudentDistribution_swigregister(CumulativeStudentDistribution)
class InverseCumulativeStudent(object):
    r"""Proxy of C++ InverseCumulativeStudent class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n, accuracy=1e-6, maxIterations=50):
        r"""__init__(InverseCumulativeStudent self, Integer n, Real accuracy=1e-6, Size maxIterations=50) -> InverseCumulativeStudent"""
        _quantlib_risks.InverseCumulativeStudent_swiginit(self, _quantlib_risks.new_InverseCumulativeStudent(n, accuracy, maxIterations))

    def __call__(self, x):
        r"""__call__(InverseCumulativeStudent self, Real x) -> Real"""
        return _quantlib_risks.InverseCumulativeStudent___call__(self, x)
    __swig_destroy__ = _quantlib_risks.delete_InverseCumulativeStudent

# Register InverseCumulativeStudent in _quantlib_risks:
_quantlib_risks.InverseCumulativeStudent_swigregister(InverseCumulativeStudent)
class Money(object):
    r"""Proxy of C++ Money class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Money self, Currency currency, Decimal value) -> Money
        __init__(Money self, Decimal value, Currency currency) -> Money
        """
        _quantlib_risks.Money_swiginit(self, _quantlib_risks.new_Money(*args))

    def currency(self):
        r"""currency(Money self) -> Currency"""
        return _quantlib_risks.Money_currency(self)

    def value(self):
        r"""value(Money self) -> Decimal"""
        return _quantlib_risks.Money_value(self)

    def rounded(self):
        r"""rounded(Money self) -> Money"""
        return _quantlib_risks.Money_rounded(self)

    def __pos__(self):
        r"""__pos__(Money self) -> Money"""
        return _quantlib_risks.Money___pos__(self)

    def __neg__(self):
        r"""__neg__(Money self) -> Money"""
        return _quantlib_risks.Money___neg__(self)

    def __add__(self, m):
        r"""__add__(Money self, Money m) -> Money"""
        return _quantlib_risks.Money___add__(self, m)

    def __sub__(self, m):
        r"""__sub__(Money self, Money m) -> Money"""
        return _quantlib_risks.Money___sub__(self, m)

    def __mul__(self, x):
        r"""__mul__(Money self, Decimal x) -> Money"""
        return _quantlib_risks.Money___mul__(self, x)

    def __truediv__(self, *args):
        return _quantlib_risks.Money___truediv__(self, *args)
    __div__ = __truediv__



    def __rmul__(self, x):
        r"""__rmul__(Money self, Decimal x) -> Money"""
        return _quantlib_risks.Money___rmul__(self, x)

    def __lt__(self, other):
        r"""__lt__(Money self, Money other) -> bool"""
        return _quantlib_risks.Money___lt__(self, other)

    def __gt__(self, other):
        r"""__gt__(Money self, Money other) -> bool"""
        return _quantlib_risks.Money___gt__(self, other)

    def __le__(self, other):
        r"""__le__(Money self, Money other) -> bool"""
        return _quantlib_risks.Money___le__(self, other)

    def __ge__(self, other):
        r"""__ge__(Money self, Money other) -> bool"""
        return _quantlib_risks.Money___ge__(self, other)

    def __cmp__(self, other):
        r"""__cmp__(Money self, Money other) -> int"""
        return _quantlib_risks.Money___cmp__(self, other)

    def __str__(self):
        r"""__str__(Money self) -> std::string"""
        return _quantlib_risks.Money___str__(self)
    NoConversion = _quantlib_risks.Money_NoConversion
    
    BaseCurrencyConversion = _quantlib_risks.Money_BaseCurrencyConversion
    
    AutomatedConversion = _quantlib_risks.Money_AutomatedConversion
    

    @staticmethod
    def setConversionType(type):
        r"""setConversionType(Money::ConversionType type)"""
        return _quantlib_risks.Money_setConversionType(type)

    @staticmethod
    def setBaseCurrency(c):
        r"""setBaseCurrency(Currency c)"""
        return _quantlib_risks.Money_setBaseCurrency(c)
    __swig_destroy__ = _quantlib_risks.delete_Money

# Register Money in _quantlib_risks:
_quantlib_risks.Money_swigregister(Money)
class ExchangeRate(object):
    r"""Proxy of C++ ExchangeRate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Direct = _quantlib_risks.ExchangeRate_Direct
    
    Derived = _quantlib_risks.ExchangeRate_Derived
    

    def __init__(self, source, target, rate):
        r"""__init__(ExchangeRate self, Currency source, Currency target, Decimal rate) -> ExchangeRate"""
        _quantlib_risks.ExchangeRate_swiginit(self, _quantlib_risks.new_ExchangeRate(source, target, rate))

    def source(self):
        r"""source(ExchangeRate self) -> Currency"""
        return _quantlib_risks.ExchangeRate_source(self)

    def target(self):
        r"""target(ExchangeRate self) -> Currency"""
        return _quantlib_risks.ExchangeRate_target(self)

    def type(self):
        r"""type(ExchangeRate self) -> ExchangeRate::Type"""
        return _quantlib_risks.ExchangeRate_type(self)

    def rate(self):
        r"""rate(ExchangeRate self) -> Decimal"""
        return _quantlib_risks.ExchangeRate_rate(self)

    def exchange(self, amount):
        r"""exchange(ExchangeRate self, Money amount) -> Money"""
        return _quantlib_risks.ExchangeRate_exchange(self, amount)

    @staticmethod
    def chain(r1, r2):
        r"""chain(ExchangeRate r1, ExchangeRate r2) -> ExchangeRate"""
        return _quantlib_risks.ExchangeRate_chain(r1, r2)
    __swig_destroy__ = _quantlib_risks.delete_ExchangeRate

# Register ExchangeRate in _quantlib_risks:
_quantlib_risks.ExchangeRate_swigregister(ExchangeRate)
class ExchangeRateManager(object):
    r"""Proxy of C++ ExchangeRateManager class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def instance():
        r"""instance() -> ExchangeRateManager"""
        return _quantlib_risks.ExchangeRateManager_instance()

    def add(self, *args):
        r"""add(ExchangeRateManager self, ExchangeRate arg2, Date startDate=Date::minDate(), Date endDate=Date::maxDate())"""
        return _quantlib_risks.ExchangeRateManager_add(self, *args)

    def lookup(self, *args):
        r"""lookup(ExchangeRateManager self, Currency source, Currency target, Date date, ExchangeRate::Type type=Derived) -> ExchangeRate"""
        return _quantlib_risks.ExchangeRateManager_lookup(self, *args)

    def clear(self):
        r"""clear(ExchangeRateManager self)"""
        return _quantlib_risks.ExchangeRateManager_clear(self)
    __swig_destroy__ = _quantlib_risks.delete_ExchangeRateManager

# Register ExchangeRateManager in _quantlib_risks:
_quantlib_risks.ExchangeRateManager_swigregister(ExchangeRateManager)
class Settings(object):
    r"""Proxy of C++ Settings class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def instance():
        r"""instance() -> Settings"""
        return _quantlib_risks.Settings_instance()

    def getEvaluationDate(self):
        r"""getEvaluationDate(Settings self) -> Date"""
        return _quantlib_risks.Settings_getEvaluationDate(self)

    def setEvaluationDate(self, d):
        r"""setEvaluationDate(Settings self, Date d)"""
        return _quantlib_risks.Settings_setEvaluationDate(self, d)

    def includeReferenceDateEvents(self, b):
        r"""includeReferenceDateEvents(Settings self, bool b)"""
        return _quantlib_risks.Settings_includeReferenceDateEvents(self, b)

    def includeTodaysCashFlows(self, b):
        r"""includeTodaysCashFlows(Settings self, bool b)"""
        return _quantlib_risks.Settings_includeTodaysCashFlows(self, b)

    def setEnforcesTodaysHistoricFixings(self, b):
        r"""setEnforcesTodaysHistoricFixings(Settings self, bool b)"""
        return _quantlib_risks.Settings_setEnforcesTodaysHistoricFixings(self, b)

    def getEnforcesTodaysHistoricFixings(self):
        r"""getEnforcesTodaysHistoricFixings(Settings self) -> bool"""
        return _quantlib_risks.Settings_getEnforcesTodaysHistoricFixings(self)

    evaluationDate = property(getEvaluationDate,setEvaluationDate,None)
    includeReferenceDateCashFlows = property(None,includeReferenceDateEvents,None)
    includeReferenceDateEvents = property(None,includeReferenceDateEvents,None)
    includeTodaysCashFlows = property(None,includeTodaysCashFlows,None)
    enforcesTodaysHistoricFixings = property(getEnforcesTodaysHistoricFixings, setEnforcesTodaysHistoricFixings, None)

    __swig_destroy__ = _quantlib_risks.delete_Settings

# Register Settings in _quantlib_risks:
_quantlib_risks.Settings_swigregister(Settings)
class Fdm1dMesher(object):
    r"""Proxy of C++ Fdm1dMesher class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size):
        r"""__init__(Fdm1dMesher self, Size size) -> Fdm1dMesher"""
        _quantlib_risks.Fdm1dMesher_swiginit(self, _quantlib_risks.new_Fdm1dMesher(size))

    def size(self):
        r"""size(Fdm1dMesher self) -> Size"""
        return _quantlib_risks.Fdm1dMesher_size(self)

    def dplus(self, index):
        r"""dplus(Fdm1dMesher self, Size index) -> Real"""
        return _quantlib_risks.Fdm1dMesher_dplus(self, index)

    def dminus(self, index):
        r"""dminus(Fdm1dMesher self, Size index) -> Real"""
        return _quantlib_risks.Fdm1dMesher_dminus(self, index)

    def location(self, index):
        r"""location(Fdm1dMesher self, Size index) -> Real"""
        return _quantlib_risks.Fdm1dMesher_location(self, index)

    def locations(self):
        r"""locations(Fdm1dMesher self) -> std::vector< Real,std::allocator< Real > > const &"""
        return _quantlib_risks.Fdm1dMesher_locations(self)
    __swig_destroy__ = _quantlib_risks.delete_Fdm1dMesher

# Register Fdm1dMesher in _quantlib_risks:
_quantlib_risks.Fdm1dMesher_swigregister(Fdm1dMesher)
class Fdm1dMesherVector(object):
    r"""Proxy of C++ std::vector< ext::shared_ptr< Fdm1dMesher > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Fdm1dMesherVector self) -> SwigPyIterator"""
        return _quantlib_risks.Fdm1dMesherVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Fdm1dMesherVector self) -> bool"""
        return _quantlib_risks.Fdm1dMesherVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Fdm1dMesherVector self) -> bool"""
        return _quantlib_risks.Fdm1dMesherVector___bool__(self)

    def __len__(self):
        r"""__len__(Fdm1dMesherVector self) -> std::vector< ext::shared_ptr< Fdm1dMesher > >::size_type"""
        return _quantlib_risks.Fdm1dMesherVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(Fdm1dMesherVector self, std::vector< ext::shared_ptr< Fdm1dMesher > >::difference_type i, std::vector< ext::shared_ptr< Fdm1dMesher > >::difference_type j) -> Fdm1dMesherVector"""
        return _quantlib_risks.Fdm1dMesherVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Fdm1dMesherVector self, std::vector< ext::shared_ptr< Fdm1dMesher > >::difference_type i, std::vector< ext::shared_ptr< Fdm1dMesher > >::difference_type j)
        __setslice__(Fdm1dMesherVector self, std::vector< ext::shared_ptr< Fdm1dMesher > >::difference_type i, std::vector< ext::shared_ptr< Fdm1dMesher > >::difference_type j, Fdm1dMesherVector v)
        """
        return _quantlib_risks.Fdm1dMesherVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(Fdm1dMesherVector self, std::vector< ext::shared_ptr< Fdm1dMesher > >::difference_type i, std::vector< ext::shared_ptr< Fdm1dMesher > >::difference_type j)"""
        return _quantlib_risks.Fdm1dMesherVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Fdm1dMesherVector self, std::vector< ext::shared_ptr< Fdm1dMesher > >::difference_type i)
        __delitem__(Fdm1dMesherVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.Fdm1dMesherVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Fdm1dMesherVector self, SWIGPY_SLICEOBJECT * slice) -> Fdm1dMesherVector
        __getitem__(Fdm1dMesherVector self, std::vector< ext::shared_ptr< Fdm1dMesher > >::difference_type i) -> std::vector< ext::shared_ptr< Fdm1dMesher > >::value_type const &
        """
        return _quantlib_risks.Fdm1dMesherVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Fdm1dMesherVector self, SWIGPY_SLICEOBJECT * slice, Fdm1dMesherVector v)
        __setitem__(Fdm1dMesherVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(Fdm1dMesherVector self, std::vector< ext::shared_ptr< Fdm1dMesher > >::difference_type i, std::vector< ext::shared_ptr< Fdm1dMesher > >::value_type const & x)
        """
        return _quantlib_risks.Fdm1dMesherVector___setitem__(self, *args)

    def pop(self):
        r"""pop(Fdm1dMesherVector self) -> std::vector< ext::shared_ptr< Fdm1dMesher > >::value_type"""
        return _quantlib_risks.Fdm1dMesherVector_pop(self)

    def append(self, x):
        r"""append(Fdm1dMesherVector self, std::vector< ext::shared_ptr< Fdm1dMesher > >::value_type const & x)"""
        return _quantlib_risks.Fdm1dMesherVector_append(self, x)

    def empty(self):
        r"""empty(Fdm1dMesherVector self) -> bool"""
        return _quantlib_risks.Fdm1dMesherVector_empty(self)

    def size(self):
        r"""size(Fdm1dMesherVector self) -> std::vector< ext::shared_ptr< Fdm1dMesher > >::size_type"""
        return _quantlib_risks.Fdm1dMesherVector_size(self)

    def swap(self, v):
        r"""swap(Fdm1dMesherVector self, Fdm1dMesherVector v)"""
        return _quantlib_risks.Fdm1dMesherVector_swap(self, v)

    def begin(self):
        r"""begin(Fdm1dMesherVector self) -> std::vector< ext::shared_ptr< Fdm1dMesher > >::iterator"""
        return _quantlib_risks.Fdm1dMesherVector_begin(self)

    def end(self):
        r"""end(Fdm1dMesherVector self) -> std::vector< ext::shared_ptr< Fdm1dMesher > >::iterator"""
        return _quantlib_risks.Fdm1dMesherVector_end(self)

    def rbegin(self):
        r"""rbegin(Fdm1dMesherVector self) -> std::vector< ext::shared_ptr< Fdm1dMesher > >::reverse_iterator"""
        return _quantlib_risks.Fdm1dMesherVector_rbegin(self)

    def rend(self):
        r"""rend(Fdm1dMesherVector self) -> std::vector< ext::shared_ptr< Fdm1dMesher > >::reverse_iterator"""
        return _quantlib_risks.Fdm1dMesherVector_rend(self)

    def clear(self):
        r"""clear(Fdm1dMesherVector self)"""
        return _quantlib_risks.Fdm1dMesherVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Fdm1dMesherVector self) -> std::vector< ext::shared_ptr< Fdm1dMesher > >::allocator_type"""
        return _quantlib_risks.Fdm1dMesherVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Fdm1dMesherVector self)"""
        return _quantlib_risks.Fdm1dMesherVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Fdm1dMesherVector self, std::vector< ext::shared_ptr< Fdm1dMesher > >::iterator pos) -> std::vector< ext::shared_ptr< Fdm1dMesher > >::iterator
        erase(Fdm1dMesherVector self, std::vector< ext::shared_ptr< Fdm1dMesher > >::iterator first, std::vector< ext::shared_ptr< Fdm1dMesher > >::iterator last) -> std::vector< ext::shared_ptr< Fdm1dMesher > >::iterator
        """
        return _quantlib_risks.Fdm1dMesherVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Fdm1dMesherVector self) -> Fdm1dMesherVector
        __init__(Fdm1dMesherVector self, Fdm1dMesherVector other) -> Fdm1dMesherVector
        __init__(Fdm1dMesherVector self, std::vector< ext::shared_ptr< Fdm1dMesher > >::size_type size) -> Fdm1dMesherVector
        __init__(Fdm1dMesherVector self, std::vector< ext::shared_ptr< Fdm1dMesher > >::size_type size, std::vector< ext::shared_ptr< Fdm1dMesher > >::value_type const & value) -> Fdm1dMesherVector
        """
        _quantlib_risks.Fdm1dMesherVector_swiginit(self, _quantlib_risks.new_Fdm1dMesherVector(*args))

    def push_back(self, x):
        r"""push_back(Fdm1dMesherVector self, std::vector< ext::shared_ptr< Fdm1dMesher > >::value_type const & x)"""
        return _quantlib_risks.Fdm1dMesherVector_push_back(self, x)

    def front(self):
        r"""front(Fdm1dMesherVector self) -> std::vector< ext::shared_ptr< Fdm1dMesher > >::value_type const &"""
        return _quantlib_risks.Fdm1dMesherVector_front(self)

    def back(self):
        r"""back(Fdm1dMesherVector self) -> std::vector< ext::shared_ptr< Fdm1dMesher > >::value_type const &"""
        return _quantlib_risks.Fdm1dMesherVector_back(self)

    def assign(self, n, x):
        r"""assign(Fdm1dMesherVector self, std::vector< ext::shared_ptr< Fdm1dMesher > >::size_type n, std::vector< ext::shared_ptr< Fdm1dMesher > >::value_type const & x)"""
        return _quantlib_risks.Fdm1dMesherVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Fdm1dMesherVector self, std::vector< ext::shared_ptr< Fdm1dMesher > >::size_type new_size)
        resize(Fdm1dMesherVector self, std::vector< ext::shared_ptr< Fdm1dMesher > >::size_type new_size, std::vector< ext::shared_ptr< Fdm1dMesher > >::value_type const & x)
        """
        return _quantlib_risks.Fdm1dMesherVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Fdm1dMesherVector self, std::vector< ext::shared_ptr< Fdm1dMesher > >::iterator pos, std::vector< ext::shared_ptr< Fdm1dMesher > >::value_type const & x) -> std::vector< ext::shared_ptr< Fdm1dMesher > >::iterator
        insert(Fdm1dMesherVector self, std::vector< ext::shared_ptr< Fdm1dMesher > >::iterator pos, std::vector< ext::shared_ptr< Fdm1dMesher > >::size_type n, std::vector< ext::shared_ptr< Fdm1dMesher > >::value_type const & x)
        """
        return _quantlib_risks.Fdm1dMesherVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(Fdm1dMesherVector self, std::vector< ext::shared_ptr< Fdm1dMesher > >::size_type n)"""
        return _quantlib_risks.Fdm1dMesherVector_reserve(self, n)

    def capacity(self):
        r"""capacity(Fdm1dMesherVector self) -> std::vector< ext::shared_ptr< Fdm1dMesher > >::size_type"""
        return _quantlib_risks.Fdm1dMesherVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_Fdm1dMesherVector

# Register Fdm1dMesherVector in _quantlib_risks:
_quantlib_risks.Fdm1dMesherVector_swigregister(Fdm1dMesherVector)
class FdmBlackScholesMesher(Fdm1dMesher):
    r"""Proxy of C++ FdmBlackScholesMesher class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(FdmBlackScholesMesher self, Size size, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, Time maturity, Real strike, doubleOrNull xMinConstraint=Null< Real >(), doubleOrNull xMaxConstraint=Null< Real >(), Real eps=0.0001, Real scaleFactor=1.5, std::pair< Real,Real > const & cPoint=(std::pair< Real,Real >(Null<Real>(), Null<Real>())), DividendSchedule dividendSchedule=std::vector< ext::shared_ptr< Dividend > >(), ext::shared_ptr< FdmQuantoHelper > const & fdmQuantoHelper=ext::shared_ptr< FdmQuantoHelper >(), Real spotAdjustment=0.0) -> FdmBlackScholesMesher"""
        _quantlib_risks.FdmBlackScholesMesher_swiginit(self, _quantlib_risks.new_FdmBlackScholesMesher(*args, **kwargs))

    @staticmethod
    def processHelper(s0, rTS, qTS, vol):
        r"""processHelper(QuoteHandle s0, YieldTermStructureHandle rTS, YieldTermStructureHandle qTS, Volatility vol) -> ext::shared_ptr< GeneralizedBlackScholesProcess >"""
        return _quantlib_risks.FdmBlackScholesMesher_processHelper(s0, rTS, qTS, vol)
    __swig_destroy__ = _quantlib_risks.delete_FdmBlackScholesMesher

# Register FdmBlackScholesMesher in _quantlib_risks:
_quantlib_risks.FdmBlackScholesMesher_swigregister(FdmBlackScholesMesher)
class Concentrating1dMesher(Fdm1dMesher):
    r"""Proxy of C++ Concentrating1dMesher class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Concentrating1dMesher self, Real start, Real end, Size size, std::pair< Real,Real > const & cPoints=(std::pair< Real,Real >(Null<Real>(), Null<Real>())), bool const requireCPoint=False) -> Concentrating1dMesher
        __init__(Concentrating1dMesher self, Real start, Real end, Size size, std::vector< ext::tuple< Real,Real,bool >,std::allocator< ext::tuple< Real,Real,bool > > > const & cPoints, Real tol=1e-8) -> Concentrating1dMesher
        """
        _quantlib_risks.Concentrating1dMesher_swiginit(self, _quantlib_risks.new_Concentrating1dMesher(*args))
    __swig_destroy__ = _quantlib_risks.delete_Concentrating1dMesher

# Register Concentrating1dMesher in _quantlib_risks:
_quantlib_risks.Concentrating1dMesher_swigregister(Concentrating1dMesher)
class ExponentialJump1dMesher(Fdm1dMesher):
    r"""Proxy of C++ ExponentialJump1dMesher class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, steps, beta, jumpIntensity, eta, eps=1e-3):
        r"""__init__(ExponentialJump1dMesher self, Size steps, Real beta, Real jumpIntensity, Real eta, Real eps=1e-3) -> ExponentialJump1dMesher"""
        _quantlib_risks.ExponentialJump1dMesher_swiginit(self, _quantlib_risks.new_ExponentialJump1dMesher(steps, beta, jumpIntensity, eta, eps))
    __swig_destroy__ = _quantlib_risks.delete_ExponentialJump1dMesher

# Register ExponentialJump1dMesher in _quantlib_risks:
_quantlib_risks.ExponentialJump1dMesher_swigregister(ExponentialJump1dMesher)
class FdmCEV1dMesher(Fdm1dMesher):
    r"""Proxy of C++ FdmCEV1dMesher class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(FdmCEV1dMesher self, Size size, Real f0, Real alpha, Real beta, Time maturity, Real eps=0.0001, Real scaleFactor=1.5, std::pair< Real,Real > const & cPoint=(std::pair< Real,Real >(Null<Real>(), Null<Real>()))) -> FdmCEV1dMesher"""
        _quantlib_risks.FdmCEV1dMesher_swiginit(self, _quantlib_risks.new_FdmCEV1dMesher(*args, **kwargs))
    __swig_destroy__ = _quantlib_risks.delete_FdmCEV1dMesher

# Register FdmCEV1dMesher in _quantlib_risks:
_quantlib_risks.FdmCEV1dMesher_swigregister(FdmCEV1dMesher)
class FdmHestonVarianceMesher(Fdm1dMesher):
    r"""Proxy of C++ FdmHestonVarianceMesher class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size, process, maturity, tAvgSteps=10, epsilon=0.0001):
        r"""__init__(FdmHestonVarianceMesher self, Size size, ext::shared_ptr< HestonProcess > const & process, Time maturity, Size tAvgSteps=10, Real epsilon=0.0001) -> FdmHestonVarianceMesher"""
        _quantlib_risks.FdmHestonVarianceMesher_swiginit(self, _quantlib_risks.new_FdmHestonVarianceMesher(size, process, maturity, tAvgSteps, epsilon))

    def volaEstimate(self):
        r"""volaEstimate(FdmHestonVarianceMesher self) -> Real"""
        return _quantlib_risks.FdmHestonVarianceMesher_volaEstimate(self)
    __swig_destroy__ = _quantlib_risks.delete_FdmHestonVarianceMesher

# Register FdmHestonVarianceMesher in _quantlib_risks:
_quantlib_risks.FdmHestonVarianceMesher_swigregister(FdmHestonVarianceMesher)
class FdmHestonLocalVolatilityVarianceMesher(Fdm1dMesher):
    r"""Proxy of C++ FdmHestonLocalVolatilityVarianceMesher class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size, process, leverageFct, maturity, tAvgSteps=10, epsilon=0.0001):
        r"""__init__(FdmHestonLocalVolatilityVarianceMesher self, Size size, ext::shared_ptr< HestonProcess > const & process, ext::shared_ptr< LocalVolTermStructure > const & leverageFct, Time maturity, Size tAvgSteps=10, Real epsilon=0.0001) -> FdmHestonLocalVolatilityVarianceMesher"""
        _quantlib_risks.FdmHestonLocalVolatilityVarianceMesher_swiginit(self, _quantlib_risks.new_FdmHestonLocalVolatilityVarianceMesher(size, process, leverageFct, maturity, tAvgSteps, epsilon))

    def volaEstimate(self):
        r"""volaEstimate(FdmHestonLocalVolatilityVarianceMesher self) -> Real"""
        return _quantlib_risks.FdmHestonLocalVolatilityVarianceMesher_volaEstimate(self)
    __swig_destroy__ = _quantlib_risks.delete_FdmHestonLocalVolatilityVarianceMesher

# Register FdmHestonLocalVolatilityVarianceMesher in _quantlib_risks:
_quantlib_risks.FdmHestonLocalVolatilityVarianceMesher_swigregister(FdmHestonLocalVolatilityVarianceMesher)
class FdmSimpleProcess1dMesher(Fdm1dMesher):
    r"""Proxy of C++ FdmSimpleProcess1dMesher class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(FdmSimpleProcess1dMesher self, Size size, ext::shared_ptr< StochasticProcess1D > const & process, Time maturity, Size tAvgSteps=10, Real epsilon=0.0001, doubleOrNull mandatoryPoint=Null< Real >()) -> FdmSimpleProcess1dMesher"""
        _quantlib_risks.FdmSimpleProcess1dMesher_swiginit(self, _quantlib_risks.new_FdmSimpleProcess1dMesher(*args))
    __swig_destroy__ = _quantlib_risks.delete_FdmSimpleProcess1dMesher

# Register FdmSimpleProcess1dMesher in _quantlib_risks:
_quantlib_risks.FdmSimpleProcess1dMesher_swigregister(FdmSimpleProcess1dMesher)
class Uniform1dMesher(Fdm1dMesher):
    r"""Proxy of C++ Uniform1dMesher class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, start, end, size):
        r"""__init__(Uniform1dMesher self, Real start, Real end, Size size) -> Uniform1dMesher"""
        _quantlib_risks.Uniform1dMesher_swiginit(self, _quantlib_risks.new_Uniform1dMesher(start, end, size))
    __swig_destroy__ = _quantlib_risks.delete_Uniform1dMesher

# Register Uniform1dMesher in _quantlib_risks:
_quantlib_risks.Uniform1dMesher_swigregister(Uniform1dMesher)
class Predefined1dMesher(Fdm1dMesher):
    r"""Proxy of C++ Predefined1dMesher class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x):
        r"""__init__(Predefined1dMesher self, std::vector< Real,std::allocator< Real > > const & x) -> Predefined1dMesher"""
        _quantlib_risks.Predefined1dMesher_swiginit(self, _quantlib_risks.new_Predefined1dMesher(x))
    __swig_destroy__ = _quantlib_risks.delete_Predefined1dMesher

# Register Predefined1dMesher in _quantlib_risks:
_quantlib_risks.Predefined1dMesher_swigregister(Predefined1dMesher)
class Glued1dMesher(Fdm1dMesher):
    r"""Proxy of C++ Glued1dMesher class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, leftMesher, rightMesher):
        r"""__init__(Glued1dMesher self, Fdm1dMesher leftMesher, Fdm1dMesher rightMesher) -> Glued1dMesher"""
        _quantlib_risks.Glued1dMesher_swiginit(self, _quantlib_risks.new_Glued1dMesher(leftMesher, rightMesher))
    __swig_destroy__ = _quantlib_risks.delete_Glued1dMesher

# Register Glued1dMesher in _quantlib_risks:
_quantlib_risks.Glued1dMesher_swigregister(Glued1dMesher)
class FdmLinearOpIterator(object):
    r"""Proxy of C++ FdmLinearOpIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FdmLinearOpIterator self, UnsignedIntVector dim) -> FdmLinearOpIterator
        __init__(FdmLinearOpIterator self, UnsignedIntVector dim, UnsignedIntVector coordinates, Size index) -> FdmLinearOpIterator
        """
        _quantlib_risks.FdmLinearOpIterator_swiginit(self, _quantlib_risks.new_FdmLinearOpIterator(*args))

    def coordinates(self):
        r"""coordinates(FdmLinearOpIterator self) -> UnsignedIntVector"""
        return _quantlib_risks.FdmLinearOpIterator_coordinates(self)

    def increment(self):
        r"""increment(FdmLinearOpIterator self)"""
        return _quantlib_risks.FdmLinearOpIterator_increment(self)

    def notEqual(self, iterator):
        r"""notEqual(FdmLinearOpIterator self, FdmLinearOpIterator iterator) -> bool"""
        return _quantlib_risks.FdmLinearOpIterator_notEqual(self, iterator)

    def index(self):
        r"""index(FdmLinearOpIterator self) -> Size"""
        return _quantlib_risks.FdmLinearOpIterator_index(self)
    __swig_destroy__ = _quantlib_risks.delete_FdmLinearOpIterator

# Register FdmLinearOpIterator in _quantlib_risks:
_quantlib_risks.FdmLinearOpIterator_swigregister(FdmLinearOpIterator)
class FdmLinearOpLayout(object):
    r"""Proxy of C++ FdmLinearOpLayout class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dim):
        r"""__init__(FdmLinearOpLayout self, UnsignedIntVector dim) -> FdmLinearOpLayout"""
        _quantlib_risks.FdmLinearOpLayout_swiginit(self, _quantlib_risks.new_FdmLinearOpLayout(dim))

    def spacing(self):
        r"""spacing(FdmLinearOpLayout self) -> UnsignedIntVector"""
        return _quantlib_risks.FdmLinearOpLayout_spacing(self)

    def dim(self):
        r"""dim(FdmLinearOpLayout self) -> UnsignedIntVector"""
        return _quantlib_risks.FdmLinearOpLayout_dim(self)

    def index(self, coordinates):
        r"""index(FdmLinearOpLayout self, UnsignedIntVector coordinates) -> Size"""
        return _quantlib_risks.FdmLinearOpLayout_index(self, coordinates)

    def begin(self):
        r"""begin(FdmLinearOpLayout self) -> FdmLinearOpIterator"""
        return _quantlib_risks.FdmLinearOpLayout_begin(self)

    def end(self):
        r"""end(FdmLinearOpLayout self) -> FdmLinearOpIterator"""
        return _quantlib_risks.FdmLinearOpLayout_end(self)

    def size(self):
        r"""size(FdmLinearOpLayout self) -> Size"""
        return _quantlib_risks.FdmLinearOpLayout_size(self)

    def neighbourhood(self, *args):
        r"""
        neighbourhood(FdmLinearOpLayout self, FdmLinearOpIterator iterator, Size i, Integer offset) -> Size
        neighbourhood(FdmLinearOpLayout self, FdmLinearOpIterator iterator, Size i1, Integer offset1, Size i2, Integer offset2) -> Size
        """
        return _quantlib_risks.FdmLinearOpLayout_neighbourhood(self, *args)

    def iter_neighbourhood(self, iterator, i, offset):
        r"""iter_neighbourhood(FdmLinearOpLayout self, FdmLinearOpIterator iterator, Size i, Integer offset) -> FdmLinearOpIterator"""
        return _quantlib_risks.FdmLinearOpLayout_iter_neighbourhood(self, iterator, i, offset)
    __swig_destroy__ = _quantlib_risks.delete_FdmLinearOpLayout

# Register FdmLinearOpLayout in _quantlib_risks:
_quantlib_risks.FdmLinearOpLayout_swigregister(FdmLinearOpLayout)
class FdmMesher(object):
    r"""Proxy of C++ FdmMesher class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def dplus(self, iter, direction):
        r"""dplus(FdmMesher self, FdmLinearOpIterator iter, Size direction) -> Real"""
        return _quantlib_risks.FdmMesher_dplus(self, iter, direction)

    def dminus(self, iter, direction):
        r"""dminus(FdmMesher self, FdmLinearOpIterator iter, Size direction) -> Real"""
        return _quantlib_risks.FdmMesher_dminus(self, iter, direction)

    def location(self, iter, direction):
        r"""location(FdmMesher self, FdmLinearOpIterator iter, Size direction) -> Real"""
        return _quantlib_risks.FdmMesher_location(self, iter, direction)

    def locations(self, direction):
        r"""locations(FdmMesher self, Size direction) -> Array"""
        return _quantlib_risks.FdmMesher_locations(self, direction)

    def layout(self):
        r"""layout(FdmMesher self) -> ext::shared_ptr< FdmLinearOpLayout >"""
        return _quantlib_risks.FdmMesher_layout(self)
    __swig_destroy__ = _quantlib_risks.delete_FdmMesher

# Register FdmMesher in _quantlib_risks:
_quantlib_risks.FdmMesher_swigregister(FdmMesher)
class FdmMesherComposite(FdmMesher):
    r"""Proxy of C++ FdmMesherComposite class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FdmMesherComposite self, ext::shared_ptr< FdmLinearOpLayout > const & layout, Fdm1dMesherVector mesher) -> FdmMesherComposite
        __init__(FdmMesherComposite self, Fdm1dMesherVector mesher) -> FdmMesherComposite
        __init__(FdmMesherComposite self, ext::shared_ptr< Fdm1dMesher > const & mesher) -> FdmMesherComposite
        __init__(FdmMesherComposite self, ext::shared_ptr< Fdm1dMesher > const & m1, ext::shared_ptr< Fdm1dMesher > const & m2) -> FdmMesherComposite
        __init__(FdmMesherComposite self, ext::shared_ptr< Fdm1dMesher > const & m1, ext::shared_ptr< Fdm1dMesher > const & m2, ext::shared_ptr< Fdm1dMesher > const & m3) -> FdmMesherComposite
        __init__(FdmMesherComposite self, ext::shared_ptr< Fdm1dMesher > const & m1, ext::shared_ptr< Fdm1dMesher > const & m2, ext::shared_ptr< Fdm1dMesher > const & m3, ext::shared_ptr< Fdm1dMesher > const & m4) -> FdmMesherComposite
        """
        _quantlib_risks.FdmMesherComposite_swiginit(self, _quantlib_risks.new_FdmMesherComposite(*args))

    def getFdm1dMeshers(self):
        r"""getFdm1dMeshers(FdmMesherComposite self) -> Fdm1dMesherVector"""
        return _quantlib_risks.FdmMesherComposite_getFdm1dMeshers(self)
    __swig_destroy__ = _quantlib_risks.delete_FdmMesherComposite

# Register FdmMesherComposite in _quantlib_risks:
_quantlib_risks.FdmMesherComposite_swigregister(FdmMesherComposite)
class FdmLinearOp(object):
    r"""Proxy of C++ FdmLinearOp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def apply(self, r):
        r"""apply(FdmLinearOp self, Array r) -> Array"""
        return _quantlib_risks.FdmLinearOp_apply(self, r)
    __swig_destroy__ = _quantlib_risks.delete_FdmLinearOp

# Register FdmLinearOp in _quantlib_risks:
_quantlib_risks.FdmLinearOp_swigregister(FdmLinearOp)
class SparseMatrix(object):
    r"""Proxy of C++ SparseMatrix class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    row_idx = property(_quantlib_risks.SparseMatrix_row_idx_get, _quantlib_risks.SparseMatrix_row_idx_set, doc=r"""row_idx : std::vector<(unsigned int,std::allocator<(unsigned int)>)>""")
    col_idx = property(_quantlib_risks.SparseMatrix_col_idx_get, _quantlib_risks.SparseMatrix_col_idx_set, doc=r"""col_idx : std::vector<(unsigned int,std::allocator<(unsigned int)>)>""")
    data = property(_quantlib_risks.SparseMatrix_data_get, _quantlib_risks.SparseMatrix_data_set, doc=r"""data : std::vector<(Real,std::allocator<(Real)>)>""")

    def __init__(self):
        r"""__init__(SparseMatrix self) -> SparseMatrix"""
        _quantlib_risks.SparseMatrix_swiginit(self, _quantlib_risks.new_SparseMatrix())
    __swig_destroy__ = _quantlib_risks.delete_SparseMatrix

# Register SparseMatrix in _quantlib_risks:
_quantlib_risks.SparseMatrix_swigregister(SparseMatrix)
class FdmLinearOpComposite(FdmLinearOp):
    r"""Proxy of C++ FdmLinearOpComposite class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def size(self):
        r"""size(FdmLinearOpComposite self) -> Size"""
        return _quantlib_risks.FdmLinearOpComposite_size(self)

    def setTime(self, t1, t2):
        r"""setTime(FdmLinearOpComposite self, Time t1, Time t2)"""
        return _quantlib_risks.FdmLinearOpComposite_setTime(self, t1, t2)

    def apply_mixed(self, r):
        r"""apply_mixed(FdmLinearOpComposite self, Array r) -> Array"""
        return _quantlib_risks.FdmLinearOpComposite_apply_mixed(self, r)

    def apply_direction(self, direction, r):
        r"""apply_direction(FdmLinearOpComposite self, Size direction, Array r) -> Array"""
        return _quantlib_risks.FdmLinearOpComposite_apply_direction(self, direction, r)

    def solve_splitting(self, direction, r, s):
        r"""solve_splitting(FdmLinearOpComposite self, Size direction, Array r, Real s) -> Array"""
        return _quantlib_risks.FdmLinearOpComposite_solve_splitting(self, direction, r, s)

    def preconditioner(self, r, s):
        r"""preconditioner(FdmLinearOpComposite self, Array r, Real s) -> Array"""
        return _quantlib_risks.FdmLinearOpComposite_preconditioner(self, r, s)

    def to_sparse_matrix(self):
        r"""to_sparse_matrix(FdmLinearOpComposite self) -> ext::shared_ptr< SparseMatrix >"""
        return _quantlib_risks.FdmLinearOpComposite_to_sparse_matrix(self)
    __swig_destroy__ = _quantlib_risks.delete_FdmLinearOpComposite

# Register FdmLinearOpComposite in _quantlib_risks:
_quantlib_risks.FdmLinearOpComposite_swigregister(FdmLinearOpComposite)
class FdmLinearOpCompositeProxy(FdmLinearOpComposite):
    r"""Proxy of C++ FdmLinearOpCompositeProxy class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, callback):
        r"""__init__(FdmLinearOpCompositeProxy self, PyObject * callback) -> FdmLinearOpCompositeProxy"""
        _quantlib_risks.FdmLinearOpCompositeProxy_swiginit(self, _quantlib_risks.new_FdmLinearOpCompositeProxy(callback))
    __swig_destroy__ = _quantlib_risks.delete_FdmLinearOpCompositeProxy

# Register FdmLinearOpCompositeProxy in _quantlib_risks:
_quantlib_risks.FdmLinearOpCompositeProxy_swigregister(FdmLinearOpCompositeProxy)
class FdmBoundaryCondition(object):
    r"""Proxy of C++ FdmBoundaryCondition class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    NoSide = _quantlib_risks.FdmBoundaryCondition_NoSide
    
    Upper = _quantlib_risks.FdmBoundaryCondition_Upper
    
    Lower = _quantlib_risks.FdmBoundaryCondition_Lower
    

    def applyBeforeApplying(self, arg2):
        r"""applyBeforeApplying(FdmBoundaryCondition self, FdmLinearOp arg2)"""
        return _quantlib_risks.FdmBoundaryCondition_applyBeforeApplying(self, arg2)

    def applyAfterApplying(self, arg2):
        r"""applyAfterApplying(FdmBoundaryCondition self, Array arg2)"""
        return _quantlib_risks.FdmBoundaryCondition_applyAfterApplying(self, arg2)

    def applyBeforeSolving(self, arg2, rhs):
        r"""applyBeforeSolving(FdmBoundaryCondition self, FdmLinearOp arg2, Array rhs)"""
        return _quantlib_risks.FdmBoundaryCondition_applyBeforeSolving(self, arg2, rhs)

    def applyAfterSolving(self, arg2):
        r"""applyAfterSolving(FdmBoundaryCondition self, Array arg2)"""
        return _quantlib_risks.FdmBoundaryCondition_applyAfterSolving(self, arg2)

    def setTime(self, t):
        r"""setTime(FdmBoundaryCondition self, Time t)"""
        return _quantlib_risks.FdmBoundaryCondition_setTime(self, t)
    __swig_destroy__ = _quantlib_risks.delete_FdmBoundaryCondition

# Register FdmBoundaryCondition in _quantlib_risks:
_quantlib_risks.FdmBoundaryCondition_swigregister(FdmBoundaryCondition)
class FdmBoundaryConditionSet(object):
    r"""Proxy of C++ std::vector< ext::shared_ptr< FdmBoundaryCondition > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(FdmBoundaryConditionSet self) -> SwigPyIterator"""
        return _quantlib_risks.FdmBoundaryConditionSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(FdmBoundaryConditionSet self) -> bool"""
        return _quantlib_risks.FdmBoundaryConditionSet___nonzero__(self)

    def __bool__(self):
        r"""__bool__(FdmBoundaryConditionSet self) -> bool"""
        return _quantlib_risks.FdmBoundaryConditionSet___bool__(self)

    def __len__(self):
        r"""__len__(FdmBoundaryConditionSet self) -> std::vector< ext::shared_ptr< FdmBoundaryCondition > >::size_type"""
        return _quantlib_risks.FdmBoundaryConditionSet___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(FdmBoundaryConditionSet self, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::difference_type i, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::difference_type j) -> FdmBoundaryConditionSet"""
        return _quantlib_risks.FdmBoundaryConditionSet___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(FdmBoundaryConditionSet self, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::difference_type i, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::difference_type j)
        __setslice__(FdmBoundaryConditionSet self, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::difference_type i, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::difference_type j, FdmBoundaryConditionSet v)
        """
        return _quantlib_risks.FdmBoundaryConditionSet___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(FdmBoundaryConditionSet self, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::difference_type i, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::difference_type j)"""
        return _quantlib_risks.FdmBoundaryConditionSet___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(FdmBoundaryConditionSet self, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::difference_type i)
        __delitem__(FdmBoundaryConditionSet self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.FdmBoundaryConditionSet___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(FdmBoundaryConditionSet self, SWIGPY_SLICEOBJECT * slice) -> FdmBoundaryConditionSet
        __getitem__(FdmBoundaryConditionSet self, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::difference_type i) -> std::vector< ext::shared_ptr< FdmBoundaryCondition > >::value_type const &
        """
        return _quantlib_risks.FdmBoundaryConditionSet___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(FdmBoundaryConditionSet self, SWIGPY_SLICEOBJECT * slice, FdmBoundaryConditionSet v)
        __setitem__(FdmBoundaryConditionSet self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(FdmBoundaryConditionSet self, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::difference_type i, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::value_type const & x)
        """
        return _quantlib_risks.FdmBoundaryConditionSet___setitem__(self, *args)

    def pop(self):
        r"""pop(FdmBoundaryConditionSet self) -> std::vector< ext::shared_ptr< FdmBoundaryCondition > >::value_type"""
        return _quantlib_risks.FdmBoundaryConditionSet_pop(self)

    def append(self, x):
        r"""append(FdmBoundaryConditionSet self, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::value_type const & x)"""
        return _quantlib_risks.FdmBoundaryConditionSet_append(self, x)

    def empty(self):
        r"""empty(FdmBoundaryConditionSet self) -> bool"""
        return _quantlib_risks.FdmBoundaryConditionSet_empty(self)

    def size(self):
        r"""size(FdmBoundaryConditionSet self) -> std::vector< ext::shared_ptr< FdmBoundaryCondition > >::size_type"""
        return _quantlib_risks.FdmBoundaryConditionSet_size(self)

    def swap(self, v):
        r"""swap(FdmBoundaryConditionSet self, FdmBoundaryConditionSet v)"""
        return _quantlib_risks.FdmBoundaryConditionSet_swap(self, v)

    def begin(self):
        r"""begin(FdmBoundaryConditionSet self) -> std::vector< ext::shared_ptr< FdmBoundaryCondition > >::iterator"""
        return _quantlib_risks.FdmBoundaryConditionSet_begin(self)

    def end(self):
        r"""end(FdmBoundaryConditionSet self) -> std::vector< ext::shared_ptr< FdmBoundaryCondition > >::iterator"""
        return _quantlib_risks.FdmBoundaryConditionSet_end(self)

    def rbegin(self):
        r"""rbegin(FdmBoundaryConditionSet self) -> std::vector< ext::shared_ptr< FdmBoundaryCondition > >::reverse_iterator"""
        return _quantlib_risks.FdmBoundaryConditionSet_rbegin(self)

    def rend(self):
        r"""rend(FdmBoundaryConditionSet self) -> std::vector< ext::shared_ptr< FdmBoundaryCondition > >::reverse_iterator"""
        return _quantlib_risks.FdmBoundaryConditionSet_rend(self)

    def clear(self):
        r"""clear(FdmBoundaryConditionSet self)"""
        return _quantlib_risks.FdmBoundaryConditionSet_clear(self)

    def get_allocator(self):
        r"""get_allocator(FdmBoundaryConditionSet self) -> std::vector< ext::shared_ptr< FdmBoundaryCondition > >::allocator_type"""
        return _quantlib_risks.FdmBoundaryConditionSet_get_allocator(self)

    def pop_back(self):
        r"""pop_back(FdmBoundaryConditionSet self)"""
        return _quantlib_risks.FdmBoundaryConditionSet_pop_back(self)

    def erase(self, *args):
        r"""
        erase(FdmBoundaryConditionSet self, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::iterator pos) -> std::vector< ext::shared_ptr< FdmBoundaryCondition > >::iterator
        erase(FdmBoundaryConditionSet self, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::iterator first, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::iterator last) -> std::vector< ext::shared_ptr< FdmBoundaryCondition > >::iterator
        """
        return _quantlib_risks.FdmBoundaryConditionSet_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(FdmBoundaryConditionSet self) -> FdmBoundaryConditionSet
        __init__(FdmBoundaryConditionSet self, FdmBoundaryConditionSet other) -> FdmBoundaryConditionSet
        __init__(FdmBoundaryConditionSet self, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::size_type size) -> FdmBoundaryConditionSet
        __init__(FdmBoundaryConditionSet self, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::size_type size, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::value_type const & value) -> FdmBoundaryConditionSet
        """
        _quantlib_risks.FdmBoundaryConditionSet_swiginit(self, _quantlib_risks.new_FdmBoundaryConditionSet(*args))

    def push_back(self, x):
        r"""push_back(FdmBoundaryConditionSet self, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::value_type const & x)"""
        return _quantlib_risks.FdmBoundaryConditionSet_push_back(self, x)

    def front(self):
        r"""front(FdmBoundaryConditionSet self) -> std::vector< ext::shared_ptr< FdmBoundaryCondition > >::value_type const &"""
        return _quantlib_risks.FdmBoundaryConditionSet_front(self)

    def back(self):
        r"""back(FdmBoundaryConditionSet self) -> std::vector< ext::shared_ptr< FdmBoundaryCondition > >::value_type const &"""
        return _quantlib_risks.FdmBoundaryConditionSet_back(self)

    def assign(self, n, x):
        r"""assign(FdmBoundaryConditionSet self, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::size_type n, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::value_type const & x)"""
        return _quantlib_risks.FdmBoundaryConditionSet_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(FdmBoundaryConditionSet self, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::size_type new_size)
        resize(FdmBoundaryConditionSet self, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::size_type new_size, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::value_type const & x)
        """
        return _quantlib_risks.FdmBoundaryConditionSet_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(FdmBoundaryConditionSet self, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::iterator pos, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::value_type const & x) -> std::vector< ext::shared_ptr< FdmBoundaryCondition > >::iterator
        insert(FdmBoundaryConditionSet self, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::iterator pos, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::size_type n, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::value_type const & x)
        """
        return _quantlib_risks.FdmBoundaryConditionSet_insert(self, *args)

    def reserve(self, n):
        r"""reserve(FdmBoundaryConditionSet self, std::vector< ext::shared_ptr< FdmBoundaryCondition > >::size_type n)"""
        return _quantlib_risks.FdmBoundaryConditionSet_reserve(self, n)

    def capacity(self):
        r"""capacity(FdmBoundaryConditionSet self) -> std::vector< ext::shared_ptr< FdmBoundaryCondition > >::size_type"""
        return _quantlib_risks.FdmBoundaryConditionSet_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_FdmBoundaryConditionSet

# Register FdmBoundaryConditionSet in _quantlib_risks:
_quantlib_risks.FdmBoundaryConditionSet_swigregister(FdmBoundaryConditionSet)
class FdmDirichletBoundary(FdmBoundaryCondition):
    r"""Proxy of C++ FdmDirichletBoundary class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, valueOnBoundary, direction, side):
        r"""__init__(FdmDirichletBoundary self, ext::shared_ptr< FdmMesher > const & mesher, Real valueOnBoundary, Size direction, FdmDirichletBoundary::Side side) -> FdmDirichletBoundary"""
        _quantlib_risks.FdmDirichletBoundary_swiginit(self, _quantlib_risks.new_FdmDirichletBoundary(mesher, valueOnBoundary, direction, side))

    def applyAfterApplying(self, *args):
        r"""
        applyAfterApplying(FdmDirichletBoundary self, Array arg2)
        applyAfterApplying(FdmDirichletBoundary self, Real x, Real value) -> Real
        """
        return _quantlib_risks.FdmDirichletBoundary_applyAfterApplying(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_FdmDirichletBoundary

# Register FdmDirichletBoundary in _quantlib_risks:
_quantlib_risks.FdmDirichletBoundary_swigregister(FdmDirichletBoundary)
class FdmDiscountDirichletBoundary(FdmBoundaryCondition):
    r"""Proxy of C++ FdmDiscountDirichletBoundary class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, rTS, maturityTime, valueOnBoundary, direction, side):
        r"""__init__(FdmDiscountDirichletBoundary self, ext::shared_ptr< FdmMesher > const & mesher, ext::shared_ptr< YieldTermStructure > const & rTS, Time maturityTime, Real valueOnBoundary, Size direction, FdmDiscountDirichletBoundary::Side side) -> FdmDiscountDirichletBoundary"""
        _quantlib_risks.FdmDiscountDirichletBoundary_swiginit(self, _quantlib_risks.new_FdmDiscountDirichletBoundary(mesher, rTS, maturityTime, valueOnBoundary, direction, side))
    __swig_destroy__ = _quantlib_risks.delete_FdmDiscountDirichletBoundary

# Register FdmDiscountDirichletBoundary in _quantlib_risks:
_quantlib_risks.FdmDiscountDirichletBoundary_swigregister(FdmDiscountDirichletBoundary)
class FdmTimeDepDirichletBoundary(FdmBoundaryCondition):
    r"""Proxy of C++ FdmTimeDepDirichletBoundary class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, function, direction, side):
        r"""__init__(FdmTimeDepDirichletBoundary self, ext::shared_ptr< FdmMesher > const & mesher, PyObject * function, Size direction, FdmTimeDepDirichletBoundary::Side side) -> FdmTimeDepDirichletBoundary"""
        _quantlib_risks.FdmTimeDepDirichletBoundary_swiginit(self, _quantlib_risks.new_FdmTimeDepDirichletBoundary(mesher, function, direction, side))
    __swig_destroy__ = _quantlib_risks.delete_FdmTimeDepDirichletBoundary

# Register FdmTimeDepDirichletBoundary in _quantlib_risks:
_quantlib_risks.FdmTimeDepDirichletBoundary_swigregister(FdmTimeDepDirichletBoundary)
class FdmBatesOp(FdmLinearOpComposite):
    r"""Proxy of C++ FdmBatesOp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(FdmBatesOp self, ext::shared_ptr< FdmMesher > const & mesher, ext::shared_ptr< BatesProcess > const & batesProcess, FdmBoundaryConditionSet bcSet, Size integroIntegrationOrder, ext::shared_ptr< FdmQuantoHelper > const & quantoHelper=ext::shared_ptr< FdmQuantoHelper >()) -> FdmBatesOp"""
        _quantlib_risks.FdmBatesOp_swiginit(self, _quantlib_risks.new_FdmBatesOp(*args))
    __swig_destroy__ = _quantlib_risks.delete_FdmBatesOp

# Register FdmBatesOp in _quantlib_risks:
_quantlib_risks.FdmBatesOp_swigregister(FdmBatesOp)
class FdmBlackScholesOp(FdmLinearOpComposite):
    r"""Proxy of C++ FdmBlackScholesOp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(FdmBlackScholesOp self, ext::shared_ptr< FdmMesher > const & mesher, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, Real strike, bool localVol=False, doubleOrNull illegalLocalVolOverwrite=-Null< Real >(), Size direction=0, ext::shared_ptr< FdmQuantoHelper > const & quantoHelper=ext::shared_ptr< FdmQuantoHelper >()) -> FdmBlackScholesOp"""
        _quantlib_risks.FdmBlackScholesOp_swiginit(self, _quantlib_risks.new_FdmBlackScholesOp(*args))
    __swig_destroy__ = _quantlib_risks.delete_FdmBlackScholesOp

# Register FdmBlackScholesOp in _quantlib_risks:
_quantlib_risks.FdmBlackScholesOp_swigregister(FdmBlackScholesOp)
class Fdm2dBlackScholesOp(FdmLinearOpComposite):
    r"""Proxy of C++ Fdm2dBlackScholesOp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Fdm2dBlackScholesOp self, ext::shared_ptr< FdmMesher > const & mesher, ext::shared_ptr< GeneralizedBlackScholesProcess > const & p1, ext::shared_ptr< GeneralizedBlackScholesProcess > const & p2, Real correlation, Time maturity, bool localVol=False, doubleOrNull illegalLocalVolOverwrite=-Null< Real >()) -> Fdm2dBlackScholesOp"""
        _quantlib_risks.Fdm2dBlackScholesOp_swiginit(self, _quantlib_risks.new_Fdm2dBlackScholesOp(*args))
    __swig_destroy__ = _quantlib_risks.delete_Fdm2dBlackScholesOp

# Register Fdm2dBlackScholesOp in _quantlib_risks:
_quantlib_risks.Fdm2dBlackScholesOp_swigregister(Fdm2dBlackScholesOp)
class FdmCEVOp(FdmLinearOpComposite):
    r"""Proxy of C++ FdmCEVOp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, rTS, f0, alpha, beta, direction):
        r"""__init__(FdmCEVOp self, ext::shared_ptr< FdmMesher > const & mesher, ext::shared_ptr< YieldTermStructure > const & rTS, Real f0, Real alpha, Real beta, Size direction) -> FdmCEVOp"""
        _quantlib_risks.FdmCEVOp_swiginit(self, _quantlib_risks.new_FdmCEVOp(mesher, rTS, f0, alpha, beta, direction))
    __swig_destroy__ = _quantlib_risks.delete_FdmCEVOp

# Register FdmCEVOp in _quantlib_risks:
_quantlib_risks.FdmCEVOp_swigregister(FdmCEVOp)
class FdmG2Op(FdmLinearOpComposite):
    r"""Proxy of C++ FdmG2Op class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, model, direction1, direction2):
        r"""__init__(FdmG2Op self, ext::shared_ptr< FdmMesher > const & mesher, ext::shared_ptr< G2 > const & model, Size direction1, Size direction2) -> FdmG2Op"""
        _quantlib_risks.FdmG2Op_swiginit(self, _quantlib_risks.new_FdmG2Op(mesher, model, direction1, direction2))
    __swig_destroy__ = _quantlib_risks.delete_FdmG2Op

# Register FdmG2Op in _quantlib_risks:
_quantlib_risks.FdmG2Op_swigregister(FdmG2Op)
class FdmHestonHullWhiteOp(FdmLinearOpComposite):
    r"""Proxy of C++ FdmHestonHullWhiteOp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, hestonProcess, hwProcess, equityShortRateCorrelation):
        r"""__init__(FdmHestonHullWhiteOp self, ext::shared_ptr< FdmMesher > const & mesher, ext::shared_ptr< HestonProcess > const & hestonProcess, ext::shared_ptr< HullWhiteProcess > const & hwProcess, Real equityShortRateCorrelation) -> FdmHestonHullWhiteOp"""
        _quantlib_risks.FdmHestonHullWhiteOp_swiginit(self, _quantlib_risks.new_FdmHestonHullWhiteOp(mesher, hestonProcess, hwProcess, equityShortRateCorrelation))
    __swig_destroy__ = _quantlib_risks.delete_FdmHestonHullWhiteOp

# Register FdmHestonHullWhiteOp in _quantlib_risks:
_quantlib_risks.FdmHestonHullWhiteOp_swigregister(FdmHestonHullWhiteOp)
class FdmHestonOp(FdmLinearOpComposite):
    r"""Proxy of C++ FdmHestonOp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(FdmHestonOp self, ext::shared_ptr< FdmMesher > const & mesher, ext::shared_ptr< HestonProcess > const & hestonProcess, ext::shared_ptr< FdmQuantoHelper > const & quantoHelper=ext::shared_ptr< FdmQuantoHelper >(), ext::shared_ptr< LocalVolTermStructure > const & leverageFct=ext::shared_ptr< LocalVolTermStructure >()) -> FdmHestonOp"""
        _quantlib_risks.FdmHestonOp_swiginit(self, _quantlib_risks.new_FdmHestonOp(*args))
    __swig_destroy__ = _quantlib_risks.delete_FdmHestonOp

# Register FdmHestonOp in _quantlib_risks:
_quantlib_risks.FdmHestonOp_swigregister(FdmHestonOp)
class FdmHullWhiteOp(FdmLinearOpComposite):
    r"""Proxy of C++ FdmHullWhiteOp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, model, direction):
        r"""__init__(FdmHullWhiteOp self, ext::shared_ptr< FdmMesher > const & mesher, ext::shared_ptr< HullWhite > const & model, Size direction) -> FdmHullWhiteOp"""
        _quantlib_risks.FdmHullWhiteOp_swiginit(self, _quantlib_risks.new_FdmHullWhiteOp(mesher, model, direction))
    __swig_destroy__ = _quantlib_risks.delete_FdmHullWhiteOp

# Register FdmHullWhiteOp in _quantlib_risks:
_quantlib_risks.FdmHullWhiteOp_swigregister(FdmHullWhiteOp)
class FdmLocalVolFwdOp(FdmLinearOpComposite):
    r"""Proxy of C++ FdmLocalVolFwdOp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, spot, rTS, qTS, localVol, direction=0):
        r"""__init__(FdmLocalVolFwdOp self, ext::shared_ptr< FdmMesher > const & mesher, ext::shared_ptr< Quote > const & spot, ext::shared_ptr< YieldTermStructure > const & rTS, ext::shared_ptr< YieldTermStructure > const & qTS, ext::shared_ptr< LocalVolTermStructure > const & localVol, Size direction=0) -> FdmLocalVolFwdOp"""
        _quantlib_risks.FdmLocalVolFwdOp_swiginit(self, _quantlib_risks.new_FdmLocalVolFwdOp(mesher, spot, rTS, qTS, localVol, direction))
    __swig_destroy__ = _quantlib_risks.delete_FdmLocalVolFwdOp

# Register FdmLocalVolFwdOp in _quantlib_risks:
_quantlib_risks.FdmLocalVolFwdOp_swigregister(FdmLocalVolFwdOp)
class FdmOrnsteinUhlenbeckOp(FdmLinearOpComposite):
    r"""Proxy of C++ FdmOrnsteinUhlenbeckOp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, p, rTS, direction=0):
        r"""__init__(FdmOrnsteinUhlenbeckOp self, ext::shared_ptr< FdmMesher > const & mesher, ext::shared_ptr< OrnsteinUhlenbeckProcess > const & p, ext::shared_ptr< YieldTermStructure > const & rTS, Size direction=0) -> FdmOrnsteinUhlenbeckOp"""
        _quantlib_risks.FdmOrnsteinUhlenbeckOp_swiginit(self, _quantlib_risks.new_FdmOrnsteinUhlenbeckOp(mesher, p, rTS, direction))
    __swig_destroy__ = _quantlib_risks.delete_FdmOrnsteinUhlenbeckOp

# Register FdmOrnsteinUhlenbeckOp in _quantlib_risks:
_quantlib_risks.FdmOrnsteinUhlenbeckOp_swigregister(FdmOrnsteinUhlenbeckOp)
class FdmSabrOp(FdmLinearOpComposite):
    r"""Proxy of C++ FdmSabrOp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, rTS, f0, alpha, beta, nu, rho):
        r"""__init__(FdmSabrOp self, ext::shared_ptr< FdmMesher > const & mesher, ext::shared_ptr< YieldTermStructure > const & rTS, Real f0, Real alpha, Real beta, Real nu, Real rho) -> FdmSabrOp"""
        _quantlib_risks.FdmSabrOp_swiginit(self, _quantlib_risks.new_FdmSabrOp(mesher, rTS, f0, alpha, beta, nu, rho))
    __swig_destroy__ = _quantlib_risks.delete_FdmSabrOp

# Register FdmSabrOp in _quantlib_risks:
_quantlib_risks.FdmSabrOp_swigregister(FdmSabrOp)
class FdmZabrOp(FdmLinearOpComposite):
    r"""Proxy of C++ FdmZabrOp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, beta, nu, rho, gamma):
        r"""__init__(FdmZabrOp self, ext::shared_ptr< FdmMesher > const & mesher, Real const beta, Real const nu, Real const rho, Real const gamma) -> FdmZabrOp"""
        _quantlib_risks.FdmZabrOp_swiginit(self, _quantlib_risks.new_FdmZabrOp(mesher, beta, nu, rho, gamma))
    __swig_destroy__ = _quantlib_risks.delete_FdmZabrOp

# Register FdmZabrOp in _quantlib_risks:
_quantlib_risks.FdmZabrOp_swigregister(FdmZabrOp)
class FdmDupire1dOp(FdmLinearOpComposite):
    r"""Proxy of C++ FdmDupire1dOp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, localVolatility):
        r"""__init__(FdmDupire1dOp self, ext::shared_ptr< FdmMesher > const & mesher, Array localVolatility) -> FdmDupire1dOp"""
        _quantlib_risks.FdmDupire1dOp_swiginit(self, _quantlib_risks.new_FdmDupire1dOp(mesher, localVolatility))
    __swig_destroy__ = _quantlib_risks.delete_FdmDupire1dOp

# Register FdmDupire1dOp in _quantlib_risks:
_quantlib_risks.FdmDupire1dOp_swigregister(FdmDupire1dOp)
class FdmBlackScholesFwdOp(FdmLinearOpComposite):
    r"""Proxy of C++ FdmBlackScholesFwdOp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(FdmBlackScholesFwdOp self, ext::shared_ptr< FdmMesher > const & mesher, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, Real strike, bool localVol=False, Real illegalLocalVolOverwrite=-Null< Real >(), Size direction=0) -> FdmBlackScholesFwdOp"""
        _quantlib_risks.FdmBlackScholesFwdOp_swiginit(self, _quantlib_risks.new_FdmBlackScholesFwdOp(*args))
    __swig_destroy__ = _quantlib_risks.delete_FdmBlackScholesFwdOp

# Register FdmBlackScholesFwdOp in _quantlib_risks:
_quantlib_risks.FdmBlackScholesFwdOp_swigregister(FdmBlackScholesFwdOp)
class FdmSquareRootFwdOp(FdmLinearOpComposite):
    r"""Proxy of C++ FdmSquareRootFwdOp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Plain = _quantlib_risks.FdmSquareRootFwdOp_Plain
    
    Power = _quantlib_risks.FdmSquareRootFwdOp_Power
    
    Log = _quantlib_risks.FdmSquareRootFwdOp_Log
    

    def __init__(self, *args):
        r"""__init__(FdmSquareRootFwdOp self, ext::shared_ptr< FdmMesher > const & mesher, Real kappa, Real theta, Real sigma, Size direction, FdmSquareRootFwdOp::TransformationType type=Plain) -> FdmSquareRootFwdOp"""
        _quantlib_risks.FdmSquareRootFwdOp_swiginit(self, _quantlib_risks.new_FdmSquareRootFwdOp(*args))
    __swig_destroy__ = _quantlib_risks.delete_FdmSquareRootFwdOp

# Register FdmSquareRootFwdOp in _quantlib_risks:
_quantlib_risks.FdmSquareRootFwdOp_swigregister(FdmSquareRootFwdOp)
class FdmHestonFwdOp(FdmLinearOpComposite):
    r"""Proxy of C++ FdmHestonFwdOp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(FdmHestonFwdOp self, ext::shared_ptr< FdmMesher > const & mesher, ext::shared_ptr< HestonProcess > const & process, FdmSquareRootFwdOp::TransformationType type=Plain, ext::shared_ptr< LocalVolTermStructure > const & leverageFct=ext::shared_ptr< LocalVolTermStructure >()) -> FdmHestonFwdOp"""
        _quantlib_risks.FdmHestonFwdOp_swiginit(self, _quantlib_risks.new_FdmHestonFwdOp(*args))
    __swig_destroy__ = _quantlib_risks.delete_FdmHestonFwdOp

# Register FdmHestonFwdOp in _quantlib_risks:
_quantlib_risks.FdmHestonFwdOp_swigregister(FdmHestonFwdOp)
class TripleBandLinearOp(FdmLinearOp):
    r"""Proxy of C++ TripleBandLinearOp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, direction, mesher):
        r"""__init__(TripleBandLinearOp self, Size direction, ext::shared_ptr< FdmMesher > const & mesher) -> TripleBandLinearOp"""
        _quantlib_risks.TripleBandLinearOp_swiginit(self, _quantlib_risks.new_TripleBandLinearOp(direction, mesher))

    def apply(self, r):
        r"""apply(TripleBandLinearOp self, Array r) -> Array"""
        return _quantlib_risks.TripleBandLinearOp_apply(self, r)

    def solve_splitting(self, r, a, b=1.0):
        r"""solve_splitting(TripleBandLinearOp self, Array r, Real a, Real b=1.0) -> Array"""
        return _quantlib_risks.TripleBandLinearOp_solve_splitting(self, r, a, b)

    def mult(self, u):
        r"""mult(TripleBandLinearOp self, Array u) -> TripleBandLinearOp"""
        return _quantlib_risks.TripleBandLinearOp_mult(self, u)

    def multR(self, u):
        r"""multR(TripleBandLinearOp self, Array u) -> TripleBandLinearOp"""
        return _quantlib_risks.TripleBandLinearOp_multR(self, u)

    def add(self, *args):
        r"""
        add(TripleBandLinearOp self, TripleBandLinearOp m) -> TripleBandLinearOp
        add(TripleBandLinearOp self, Array u) -> TripleBandLinearOp
        """
        return _quantlib_risks.TripleBandLinearOp_add(self, *args)

    def axpyb(self, a, x, y, b):
        r"""axpyb(TripleBandLinearOp self, Array a, TripleBandLinearOp x, TripleBandLinearOp y, Array b)"""
        return _quantlib_risks.TripleBandLinearOp_axpyb(self, a, x, y, b)

    def swap(self, m):
        r"""swap(TripleBandLinearOp self, TripleBandLinearOp m)"""
        return _quantlib_risks.TripleBandLinearOp_swap(self, m)
    __swig_destroy__ = _quantlib_risks.delete_TripleBandLinearOp

# Register TripleBandLinearOp in _quantlib_risks:
_quantlib_risks.TripleBandLinearOp_swigregister(TripleBandLinearOp)
class FirstDerivativeOp(TripleBandLinearOp):
    r"""Proxy of C++ FirstDerivativeOp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, direction, mesher):
        r"""__init__(FirstDerivativeOp self, Size direction, ext::shared_ptr< FdmMesher > const & mesher) -> FirstDerivativeOp"""
        _quantlib_risks.FirstDerivativeOp_swiginit(self, _quantlib_risks.new_FirstDerivativeOp(direction, mesher))
    __swig_destroy__ = _quantlib_risks.delete_FirstDerivativeOp

# Register FirstDerivativeOp in _quantlib_risks:
_quantlib_risks.FirstDerivativeOp_swigregister(FirstDerivativeOp)
class SecondDerivativeOp(TripleBandLinearOp):
    r"""Proxy of C++ SecondDerivativeOp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, direction, mesher):
        r"""__init__(SecondDerivativeOp self, Size direction, ext::shared_ptr< FdmMesher > const & mesher) -> SecondDerivativeOp"""
        _quantlib_risks.SecondDerivativeOp_swiginit(self, _quantlib_risks.new_SecondDerivativeOp(direction, mesher))
    __swig_destroy__ = _quantlib_risks.delete_SecondDerivativeOp

# Register SecondDerivativeOp in _quantlib_risks:
_quantlib_risks.SecondDerivativeOp_swigregister(SecondDerivativeOp)
class NinePointLinearOp(FdmLinearOp):
    r"""Proxy of C++ NinePointLinearOp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d0, d1, mesher):
        r"""__init__(NinePointLinearOp self, Size d0, Size d1, ext::shared_ptr< FdmMesher > const & mesher) -> NinePointLinearOp"""
        _quantlib_risks.NinePointLinearOp_swiginit(self, _quantlib_risks.new_NinePointLinearOp(d0, d1, mesher))
    __swig_destroy__ = _quantlib_risks.delete_NinePointLinearOp

# Register NinePointLinearOp in _quantlib_risks:
_quantlib_risks.NinePointLinearOp_swigregister(NinePointLinearOp)
class SecondOrderMixedDerivativeOp(NinePointLinearOp):
    r"""Proxy of C++ SecondOrderMixedDerivativeOp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, d0, d1, mesher):
        r"""__init__(SecondOrderMixedDerivativeOp self, Size d0, Size d1, ext::shared_ptr< FdmMesher > const & mesher) -> SecondOrderMixedDerivativeOp"""
        _quantlib_risks.SecondOrderMixedDerivativeOp_swiginit(self, _quantlib_risks.new_SecondOrderMixedDerivativeOp(d0, d1, mesher))
    __swig_destroy__ = _quantlib_risks.delete_SecondOrderMixedDerivativeOp

# Register SecondOrderMixedDerivativeOp in _quantlib_risks:
_quantlib_risks.SecondOrderMixedDerivativeOp_swigregister(SecondOrderMixedDerivativeOp)
class NthOrderDerivativeOp(FdmLinearOp):
    r"""Proxy of C++ NthOrderDerivativeOp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, direction, order, nPoints, mesher):
        r"""__init__(NthOrderDerivativeOp self, Size direction, Size order, Integer nPoints, ext::shared_ptr< FdmMesher > const & mesher) -> NthOrderDerivativeOp"""
        _quantlib_risks.NthOrderDerivativeOp_swiginit(self, _quantlib_risks.new_NthOrderDerivativeOp(direction, order, nPoints, mesher))
    __swig_destroy__ = _quantlib_risks.delete_NthOrderDerivativeOp

# Register NthOrderDerivativeOp in _quantlib_risks:
_quantlib_risks.NthOrderDerivativeOp_swigregister(NthOrderDerivativeOp)
class CraigSneydScheme(object):
    r"""Proxy of C++ CraigSneydScheme class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(CraigSneydScheme self, Real theta, Real mu, ext::shared_ptr< FdmLinearOpComposite > const & map, FdmBoundaryConditionSet bcSet=FdmBoundaryConditionSet()) -> CraigSneydScheme"""
        _quantlib_risks.CraigSneydScheme_swiginit(self, _quantlib_risks.new_CraigSneydScheme(*args))

    def step(self, a, t):
        r"""step(CraigSneydScheme self, Array a, Time t)"""
        return _quantlib_risks.CraigSneydScheme_step(self, a, t)

    def setStep(self, dt):
        r"""setStep(CraigSneydScheme self, Time dt)"""
        return _quantlib_risks.CraigSneydScheme_setStep(self, dt)
    __swig_destroy__ = _quantlib_risks.delete_CraigSneydScheme

# Register CraigSneydScheme in _quantlib_risks:
_quantlib_risks.CraigSneydScheme_swigregister(CraigSneydScheme)
class ImplicitEulerScheme(object):
    r"""Proxy of C++ ImplicitEulerScheme class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BiCGstab = _quantlib_risks.ImplicitEulerScheme_BiCGstab
    
    GMRES = _quantlib_risks.ImplicitEulerScheme_GMRES
    

    def __init__(self, *args, **kwargs):
        r"""__init__(ImplicitEulerScheme self, ext::shared_ptr< FdmLinearOpComposite > const & map, FdmBoundaryConditionSet bcSet=FdmBoundaryConditionSet(), Real relTol=1e-8, ImplicitEulerScheme::SolverType solverType=BiCGstab) -> ImplicitEulerScheme"""
        _quantlib_risks.ImplicitEulerScheme_swiginit(self, _quantlib_risks.new_ImplicitEulerScheme(*args, **kwargs))

    def step(self, a, t):
        r"""step(ImplicitEulerScheme self, Array a, Time t)"""
        return _quantlib_risks.ImplicitEulerScheme_step(self, a, t)

    def setStep(self, dt):
        r"""setStep(ImplicitEulerScheme self, Time dt)"""
        return _quantlib_risks.ImplicitEulerScheme_setStep(self, dt)

    def numberOfIterations(self):
        r"""numberOfIterations(ImplicitEulerScheme self) -> Size"""
        return _quantlib_risks.ImplicitEulerScheme_numberOfIterations(self)
    __swig_destroy__ = _quantlib_risks.delete_ImplicitEulerScheme

# Register ImplicitEulerScheme in _quantlib_risks:
_quantlib_risks.ImplicitEulerScheme_swigregister(ImplicitEulerScheme)
class CrankNicolsonScheme(object):
    r"""Proxy of C++ CrankNicolsonScheme class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(CrankNicolsonScheme self, Real theta, ext::shared_ptr< FdmLinearOpComposite > const & map, FdmBoundaryConditionSet bcSet=FdmBoundaryConditionSet(), Real relTol=1e-8, ImplicitEulerScheme::SolverType solverType=BiCGstab) -> CrankNicolsonScheme"""
        _quantlib_risks.CrankNicolsonScheme_swiginit(self, _quantlib_risks.new_CrankNicolsonScheme(*args, **kwargs))

    def step(self, a, t):
        r"""step(CrankNicolsonScheme self, Array a, Time t)"""
        return _quantlib_risks.CrankNicolsonScheme_step(self, a, t)

    def setStep(self, dt):
        r"""setStep(CrankNicolsonScheme self, Time dt)"""
        return _quantlib_risks.CrankNicolsonScheme_setStep(self, dt)

    def numberOfIterations(self):
        r"""numberOfIterations(CrankNicolsonScheme self) -> Size"""
        return _quantlib_risks.CrankNicolsonScheme_numberOfIterations(self)
    __swig_destroy__ = _quantlib_risks.delete_CrankNicolsonScheme

# Register CrankNicolsonScheme in _quantlib_risks:
_quantlib_risks.CrankNicolsonScheme_swigregister(CrankNicolsonScheme)
class DouglasScheme(object):
    r"""Proxy of C++ DouglasScheme class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(DouglasScheme self, Real theta, ext::shared_ptr< FdmLinearOpComposite > const & map, FdmBoundaryConditionSet bcSet=FdmBoundaryConditionSet()) -> DouglasScheme"""
        _quantlib_risks.DouglasScheme_swiginit(self, _quantlib_risks.new_DouglasScheme(*args))

    def step(self, a, t):
        r"""step(DouglasScheme self, Array a, Time t)"""
        return _quantlib_risks.DouglasScheme_step(self, a, t)

    def setStep(self, dt):
        r"""setStep(DouglasScheme self, Time dt)"""
        return _quantlib_risks.DouglasScheme_setStep(self, dt)
    __swig_destroy__ = _quantlib_risks.delete_DouglasScheme

# Register DouglasScheme in _quantlib_risks:
_quantlib_risks.DouglasScheme_swigregister(DouglasScheme)
class ExplicitEulerScheme(object):
    r"""Proxy of C++ ExplicitEulerScheme class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ExplicitEulerScheme self, ext::shared_ptr< FdmLinearOpComposite > const & map, FdmBoundaryConditionSet bcSet=FdmBoundaryConditionSet()) -> ExplicitEulerScheme"""
        _quantlib_risks.ExplicitEulerScheme_swiginit(self, _quantlib_risks.new_ExplicitEulerScheme(*args))

    def step(self, a, t):
        r"""step(ExplicitEulerScheme self, Array a, Time t)"""
        return _quantlib_risks.ExplicitEulerScheme_step(self, a, t)

    def setStep(self, dt):
        r"""setStep(ExplicitEulerScheme self, Time dt)"""
        return _quantlib_risks.ExplicitEulerScheme_setStep(self, dt)
    __swig_destroy__ = _quantlib_risks.delete_ExplicitEulerScheme

# Register ExplicitEulerScheme in _quantlib_risks:
_quantlib_risks.ExplicitEulerScheme_swigregister(ExplicitEulerScheme)
class HundsdorferScheme(object):
    r"""Proxy of C++ HundsdorferScheme class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(HundsdorferScheme self, Real theta, Real mu, ext::shared_ptr< FdmLinearOpComposite > const & map, FdmBoundaryConditionSet bcSet=FdmBoundaryConditionSet()) -> HundsdorferScheme"""
        _quantlib_risks.HundsdorferScheme_swiginit(self, _quantlib_risks.new_HundsdorferScheme(*args))

    def step(self, a, t):
        r"""step(HundsdorferScheme self, Array a, Time t)"""
        return _quantlib_risks.HundsdorferScheme_step(self, a, t)

    def setStep(self, dt):
        r"""setStep(HundsdorferScheme self, Time dt)"""
        return _quantlib_risks.HundsdorferScheme_setStep(self, dt)
    __swig_destroy__ = _quantlib_risks.delete_HundsdorferScheme

# Register HundsdorferScheme in _quantlib_risks:
_quantlib_risks.HundsdorferScheme_swigregister(HundsdorferScheme)
class MethodOfLinesScheme(object):
    r"""Proxy of C++ MethodOfLinesScheme class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(MethodOfLinesScheme self, Real const eps, Real const relInitStepSize, ext::shared_ptr< FdmLinearOpComposite > const & map, FdmBoundaryConditionSet bcSet=FdmBoundaryConditionSet()) -> MethodOfLinesScheme"""
        _quantlib_risks.MethodOfLinesScheme_swiginit(self, _quantlib_risks.new_MethodOfLinesScheme(*args))

    def step(self, a, t):
        r"""step(MethodOfLinesScheme self, Array a, Time t)"""
        return _quantlib_risks.MethodOfLinesScheme_step(self, a, t)

    def setStep(self, dt):
        r"""setStep(MethodOfLinesScheme self, Time dt)"""
        return _quantlib_risks.MethodOfLinesScheme_setStep(self, dt)
    __swig_destroy__ = _quantlib_risks.delete_MethodOfLinesScheme

# Register MethodOfLinesScheme in _quantlib_risks:
_quantlib_risks.MethodOfLinesScheme_swigregister(MethodOfLinesScheme)
class ModifiedCraigSneydScheme(object):
    r"""Proxy of C++ ModifiedCraigSneydScheme class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ModifiedCraigSneydScheme self, Real theta, Real mu, ext::shared_ptr< FdmLinearOpComposite > const & map, FdmBoundaryConditionSet bcSet=FdmBoundaryConditionSet()) -> ModifiedCraigSneydScheme"""
        _quantlib_risks.ModifiedCraigSneydScheme_swiginit(self, _quantlib_risks.new_ModifiedCraigSneydScheme(*args))

    def step(self, a, t):
        r"""step(ModifiedCraigSneydScheme self, Array a, Time t)"""
        return _quantlib_risks.ModifiedCraigSneydScheme_step(self, a, t)

    def setStep(self, dt):
        r"""setStep(ModifiedCraigSneydScheme self, Time dt)"""
        return _quantlib_risks.ModifiedCraigSneydScheme_setStep(self, dt)
    __swig_destroy__ = _quantlib_risks.delete_ModifiedCraigSneydScheme

# Register ModifiedCraigSneydScheme in _quantlib_risks:
_quantlib_risks.ModifiedCraigSneydScheme_swigregister(ModifiedCraigSneydScheme)
class FdmStepCondition(object):
    r"""Proxy of C++ StepCondition< Array > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def applyTo(self, a, t):
        r"""applyTo(FdmStepCondition self, Array a, Time t)"""
        return _quantlib_risks.FdmStepCondition_applyTo(self, a, t)
    __swig_destroy__ = _quantlib_risks.delete_FdmStepCondition

# Register FdmStepCondition in _quantlib_risks:
_quantlib_risks.FdmStepCondition_swigregister(FdmStepCondition)
class FdmStepConditionProxy(FdmStepCondition):
    r"""Proxy of C++ FdmStepConditionProxy class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, callback):
        r"""__init__(FdmStepConditionProxy self, PyObject * callback) -> FdmStepConditionProxy"""
        _quantlib_risks.FdmStepConditionProxy_swiginit(self, _quantlib_risks.new_FdmStepConditionProxy(callback))
    __swig_destroy__ = _quantlib_risks.delete_FdmStepConditionProxy

# Register FdmStepConditionProxy in _quantlib_risks:
_quantlib_risks.FdmStepConditionProxy_swigregister(FdmStepConditionProxy)
class FdmInnerValueCalculator(object):
    r"""Proxy of C++ FdmInnerValueCalculator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def innerValue(self, iter, t):
        r"""innerValue(FdmInnerValueCalculator self, FdmLinearOpIterator iter, Time t) -> Real"""
        return _quantlib_risks.FdmInnerValueCalculator_innerValue(self, iter, t)

    def avgInnerValue(self, iter, t):
        r"""avgInnerValue(FdmInnerValueCalculator self, FdmLinearOpIterator iter, Time t) -> Real"""
        return _quantlib_risks.FdmInnerValueCalculator_avgInnerValue(self, iter, t)
    __swig_destroy__ = _quantlib_risks.delete_FdmInnerValueCalculator

# Register FdmInnerValueCalculator in _quantlib_risks:
_quantlib_risks.FdmInnerValueCalculator_swigregister(FdmInnerValueCalculator)
class FdmInnerValueCalculatorProxy(FdmInnerValueCalculator):
    r"""Proxy of C++ FdmInnerValueCalculatorProxy class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, callback):
        r"""__init__(FdmInnerValueCalculatorProxy self, PyObject * callback) -> FdmInnerValueCalculatorProxy"""
        _quantlib_risks.FdmInnerValueCalculatorProxy_swiginit(self, _quantlib_risks.new_FdmInnerValueCalculatorProxy(callback))
    __swig_destroy__ = _quantlib_risks.delete_FdmInnerValueCalculatorProxy

# Register FdmInnerValueCalculatorProxy in _quantlib_risks:
_quantlib_risks.FdmInnerValueCalculatorProxy_swigregister(FdmInnerValueCalculatorProxy)
class FdmCellAveragingInnerValue(FdmInnerValueCalculator):
    r"""Proxy of C++ FdmCellAveragingInnerValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FdmCellAveragingInnerValue self, ext::shared_ptr< Payoff > const & payoff, ext::shared_ptr< FdmMesher > const & mesher, Size direction, PyObject * gridMapping) -> FdmCellAveragingInnerValue
        __init__(FdmCellAveragingInnerValue self, ext::shared_ptr< Payoff > const & payoff, ext::shared_ptr< FdmMesher > const & mesher, Size direction) -> FdmCellAveragingInnerValue
        """
        _quantlib_risks.FdmCellAveragingInnerValue_swiginit(self, _quantlib_risks.new_FdmCellAveragingInnerValue(*args))
    __swig_destroy__ = _quantlib_risks.delete_FdmCellAveragingInnerValue

# Register FdmCellAveragingInnerValue in _quantlib_risks:
_quantlib_risks.FdmCellAveragingInnerValue_swigregister(FdmCellAveragingInnerValue)
class FdmLogInnerValue(FdmCellAveragingInnerValue):
    r"""Proxy of C++ FdmLogInnerValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff, mesher, direction):
        r"""__init__(FdmLogInnerValue self, ext::shared_ptr< Payoff > const & payoff, ext::shared_ptr< FdmMesher > const & mesher, Size direction) -> FdmLogInnerValue"""
        _quantlib_risks.FdmLogInnerValue_swiginit(self, _quantlib_risks.new_FdmLogInnerValue(payoff, mesher, direction))
    __swig_destroy__ = _quantlib_risks.delete_FdmLogInnerValue

# Register FdmLogInnerValue in _quantlib_risks:
_quantlib_risks.FdmLogInnerValue_swigregister(FdmLogInnerValue)
class FdmLogBasketInnerValue(FdmInnerValueCalculator):
    r"""Proxy of C++ FdmLogBasketInnerValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff, mesher):
        r"""__init__(FdmLogBasketInnerValue self, ext::shared_ptr< BasketPayoff > const & payoff, ext::shared_ptr< FdmMesher > const & mesher) -> FdmLogBasketInnerValue"""
        _quantlib_risks.FdmLogBasketInnerValue_swiginit(self, _quantlib_risks.new_FdmLogBasketInnerValue(payoff, mesher))
    __swig_destroy__ = _quantlib_risks.delete_FdmLogBasketInnerValue

# Register FdmLogBasketInnerValue in _quantlib_risks:
_quantlib_risks.FdmLogBasketInnerValue_swigregister(FdmLogBasketInnerValue)
class FdmZeroInnerValue(FdmInnerValueCalculator):
    r"""Proxy of C++ FdmZeroInnerValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(FdmZeroInnerValue self) -> FdmZeroInnerValue"""
        _quantlib_risks.FdmZeroInnerValue_swiginit(self, _quantlib_risks.new_FdmZeroInnerValue())
    __swig_destroy__ = _quantlib_risks.delete_FdmZeroInnerValue

# Register FdmZeroInnerValue in _quantlib_risks:
_quantlib_risks.FdmZeroInnerValue_swigregister(FdmZeroInnerValue)
class TimeToDateMap(object):
    r"""Proxy of C++ std::map< Time,Date > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(TimeToDateMap self) -> SwigPyIterator"""
        return _quantlib_risks.TimeToDateMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(TimeToDateMap self) -> bool"""
        return _quantlib_risks.TimeToDateMap___nonzero__(self)

    def __bool__(self):
        r"""__bool__(TimeToDateMap self) -> bool"""
        return _quantlib_risks.TimeToDateMap___bool__(self)

    def __len__(self):
        r"""__len__(TimeToDateMap self) -> std::map< xad::AReal< double >,Date >::size_type"""
        return _quantlib_risks.TimeToDateMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""__getitem__(TimeToDateMap self, std::map< xad::AReal< double >,Date >::key_type const & key) -> Date"""
        return _quantlib_risks.TimeToDateMap___getitem__(self, key)

    def __delitem__(self, key):
        r"""__delitem__(TimeToDateMap self, std::map< xad::AReal< double >,Date >::key_type const & key)"""
        return _quantlib_risks.TimeToDateMap___delitem__(self, key)

    def has_key(self, key):
        r"""has_key(TimeToDateMap self, std::map< xad::AReal< double >,Date >::key_type const & key) -> bool"""
        return _quantlib_risks.TimeToDateMap_has_key(self, key)

    def keys(self):
        r"""keys(TimeToDateMap self) -> PyObject *"""
        return _quantlib_risks.TimeToDateMap_keys(self)

    def values(self):
        r"""values(TimeToDateMap self) -> PyObject *"""
        return _quantlib_risks.TimeToDateMap_values(self)

    def items(self):
        r"""items(TimeToDateMap self) -> PyObject *"""
        return _quantlib_risks.TimeToDateMap_items(self)

    def __contains__(self, key):
        r"""__contains__(TimeToDateMap self, std::map< xad::AReal< double >,Date >::key_type const & key) -> bool"""
        return _quantlib_risks.TimeToDateMap___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(TimeToDateMap self) -> SwigPyIterator"""
        return _quantlib_risks.TimeToDateMap_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(TimeToDateMap self) -> SwigPyIterator"""
        return _quantlib_risks.TimeToDateMap_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(TimeToDateMap self, std::map< xad::AReal< double >,Date >::key_type const & key)
        __setitem__(TimeToDateMap self, std::map< xad::AReal< double >,Date >::key_type const & key, Date x)
        """
        return _quantlib_risks.TimeToDateMap___setitem__(self, *args)

    def asdict(self):
        r"""asdict(TimeToDateMap self) -> PyObject *"""
        return _quantlib_risks.TimeToDateMap_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(TimeToDateMap self, std::less< xad::AReal< double > > const & other) -> TimeToDateMap
        __init__(TimeToDateMap self) -> TimeToDateMap
        __init__(TimeToDateMap self, TimeToDateMap other) -> TimeToDateMap
        """
        _quantlib_risks.TimeToDateMap_swiginit(self, _quantlib_risks.new_TimeToDateMap(*args))

    def empty(self):
        r"""empty(TimeToDateMap self) -> bool"""
        return _quantlib_risks.TimeToDateMap_empty(self)

    def size(self):
        r"""size(TimeToDateMap self) -> std::map< xad::AReal< double >,Date >::size_type"""
        return _quantlib_risks.TimeToDateMap_size(self)

    def swap(self, v):
        r"""swap(TimeToDateMap self, TimeToDateMap v)"""
        return _quantlib_risks.TimeToDateMap_swap(self, v)

    def begin(self):
        r"""begin(TimeToDateMap self) -> std::map< xad::AReal< double >,Date >::iterator"""
        return _quantlib_risks.TimeToDateMap_begin(self)

    def end(self):
        r"""end(TimeToDateMap self) -> std::map< xad::AReal< double >,Date >::iterator"""
        return _quantlib_risks.TimeToDateMap_end(self)

    def rbegin(self):
        r"""rbegin(TimeToDateMap self) -> std::map< xad::AReal< double >,Date >::reverse_iterator"""
        return _quantlib_risks.TimeToDateMap_rbegin(self)

    def rend(self):
        r"""rend(TimeToDateMap self) -> std::map< xad::AReal< double >,Date >::reverse_iterator"""
        return _quantlib_risks.TimeToDateMap_rend(self)

    def clear(self):
        r"""clear(TimeToDateMap self)"""
        return _quantlib_risks.TimeToDateMap_clear(self)

    def get_allocator(self):
        r"""get_allocator(TimeToDateMap self) -> std::map< xad::AReal< double >,Date >::allocator_type"""
        return _quantlib_risks.TimeToDateMap_get_allocator(self)

    def count(self, x):
        r"""count(TimeToDateMap self, std::map< xad::AReal< double >,Date >::key_type const & x) -> std::map< xad::AReal< double >,Date >::size_type"""
        return _quantlib_risks.TimeToDateMap_count(self, x)

    def erase(self, *args):
        r"""
        erase(TimeToDateMap self, std::map< xad::AReal< double >,Date >::key_type const & x) -> std::map< xad::AReal< double >,Date >::size_type
        erase(TimeToDateMap self, std::map< xad::AReal< double >,Date >::iterator position)
        erase(TimeToDateMap self, std::map< xad::AReal< double >,Date >::iterator first, std::map< xad::AReal< double >,Date >::iterator last)
        """
        return _quantlib_risks.TimeToDateMap_erase(self, *args)

    def find(self, x):
        r"""find(TimeToDateMap self, std::map< xad::AReal< double >,Date >::key_type const & x) -> std::map< xad::AReal< double >,Date >::iterator"""
        return _quantlib_risks.TimeToDateMap_find(self, x)

    def lower_bound(self, x):
        r"""lower_bound(TimeToDateMap self, std::map< xad::AReal< double >,Date >::key_type const & x) -> std::map< xad::AReal< double >,Date >::iterator"""
        return _quantlib_risks.TimeToDateMap_lower_bound(self, x)

    def upper_bound(self, x):
        r"""upper_bound(TimeToDateMap self, std::map< xad::AReal< double >,Date >::key_type const & x) -> std::map< xad::AReal< double >,Date >::iterator"""
        return _quantlib_risks.TimeToDateMap_upper_bound(self, x)
    __swig_destroy__ = _quantlib_risks.delete_TimeToDateMap

# Register TimeToDateMap in _quantlib_risks:
_quantlib_risks.TimeToDateMap_swigregister(TimeToDateMap)
class FdmAffineG2ModelSwapInnerValue(FdmInnerValueCalculator):
    r"""Proxy of C++ FdmAffineModelSwapInnerValue< G2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, disModel, fwdModel, swap, exerciseDates, mesher, direction):
        r"""__init__(FdmAffineG2ModelSwapInnerValue self, ext::shared_ptr< G2 > const & disModel, ext::shared_ptr< G2 > const & fwdModel, ext::shared_ptr< VanillaSwap > const & swap, TimeToDateMap exerciseDates, ext::shared_ptr< FdmMesher > const & mesher, Size direction) -> FdmAffineG2ModelSwapInnerValue"""
        _quantlib_risks.FdmAffineG2ModelSwapInnerValue_swiginit(self, _quantlib_risks.new_FdmAffineG2ModelSwapInnerValue(disModel, fwdModel, swap, exerciseDates, mesher, direction))
    __swig_destroy__ = _quantlib_risks.delete_FdmAffineG2ModelSwapInnerValue

# Register FdmAffineG2ModelSwapInnerValue in _quantlib_risks:
_quantlib_risks.FdmAffineG2ModelSwapInnerValue_swigregister(FdmAffineG2ModelSwapInnerValue)
class FdmAffineHullWhiteModelSwapInnerValue(FdmInnerValueCalculator):
    r"""Proxy of C++ FdmAffineModelSwapInnerValue< HullWhite > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, disModel, fwdModel, swap, exerciseDates, mesher, direction):
        r"""__init__(FdmAffineHullWhiteModelSwapInnerValue self, ext::shared_ptr< HullWhite > const & disModel, ext::shared_ptr< HullWhite > const & fwdModel, ext::shared_ptr< VanillaSwap > const & swap, TimeToDateMap exerciseDates, ext::shared_ptr< FdmMesher > const & mesher, Size direction) -> FdmAffineHullWhiteModelSwapInnerValue"""
        _quantlib_risks.FdmAffineHullWhiteModelSwapInnerValue_swiginit(self, _quantlib_risks.new_FdmAffineHullWhiteModelSwapInnerValue(disModel, fwdModel, swap, exerciseDates, mesher, direction))
    __swig_destroy__ = _quantlib_risks.delete_FdmAffineHullWhiteModelSwapInnerValue

# Register FdmAffineHullWhiteModelSwapInnerValue in _quantlib_risks:
_quantlib_risks.FdmAffineHullWhiteModelSwapInnerValue_swigregister(FdmAffineHullWhiteModelSwapInnerValue)
class FdmSnapshotCondition(FdmStepCondition):
    r"""Proxy of C++ FdmSnapshotCondition class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, t):
        r"""__init__(FdmSnapshotCondition self, Time t) -> FdmSnapshotCondition"""
        _quantlib_risks.FdmSnapshotCondition_swiginit(self, _quantlib_risks.new_FdmSnapshotCondition(t))

    def getTime(self):
        r"""getTime(FdmSnapshotCondition self) -> Time"""
        return _quantlib_risks.FdmSnapshotCondition_getTime(self)

    def getValues(self):
        r"""getValues(FdmSnapshotCondition self) -> Array"""
        return _quantlib_risks.FdmSnapshotCondition_getValues(self)
    __swig_destroy__ = _quantlib_risks.delete_FdmSnapshotCondition

# Register FdmSnapshotCondition in _quantlib_risks:
_quantlib_risks.FdmSnapshotCondition_swigregister(FdmSnapshotCondition)
class FdmStepConditionVector(object):
    r"""Proxy of C++ std::vector< ext::shared_ptr< StepCondition< Array > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(FdmStepConditionVector self) -> SwigPyIterator"""
        return _quantlib_risks.FdmStepConditionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(FdmStepConditionVector self) -> bool"""
        return _quantlib_risks.FdmStepConditionVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(FdmStepConditionVector self) -> bool"""
        return _quantlib_risks.FdmStepConditionVector___bool__(self)

    def __len__(self):
        r"""__len__(FdmStepConditionVector self) -> std::vector< ext::shared_ptr< StepCondition< Array > > >::size_type"""
        return _quantlib_risks.FdmStepConditionVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(FdmStepConditionVector self, std::vector< ext::shared_ptr< StepCondition< Array > > >::difference_type i, std::vector< ext::shared_ptr< StepCondition< Array > > >::difference_type j) -> FdmStepConditionVector"""
        return _quantlib_risks.FdmStepConditionVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(FdmStepConditionVector self, std::vector< ext::shared_ptr< StepCondition< Array > > >::difference_type i, std::vector< ext::shared_ptr< StepCondition< Array > > >::difference_type j)
        __setslice__(FdmStepConditionVector self, std::vector< ext::shared_ptr< StepCondition< Array > > >::difference_type i, std::vector< ext::shared_ptr< StepCondition< Array > > >::difference_type j, FdmStepConditionVector v)
        """
        return _quantlib_risks.FdmStepConditionVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(FdmStepConditionVector self, std::vector< ext::shared_ptr< StepCondition< Array > > >::difference_type i, std::vector< ext::shared_ptr< StepCondition< Array > > >::difference_type j)"""
        return _quantlib_risks.FdmStepConditionVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(FdmStepConditionVector self, std::vector< ext::shared_ptr< StepCondition< Array > > >::difference_type i)
        __delitem__(FdmStepConditionVector self, SWIGPY_SLICEOBJECT * slice)
        """
        return _quantlib_risks.FdmStepConditionVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(FdmStepConditionVector self, SWIGPY_SLICEOBJECT * slice) -> FdmStepConditionVector
        __getitem__(FdmStepConditionVector self, std::vector< ext::shared_ptr< StepCondition< Array > > >::difference_type i) -> std::vector< ext::shared_ptr< StepCondition< Array > > >::value_type const &
        """
        return _quantlib_risks.FdmStepConditionVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(FdmStepConditionVector self, SWIGPY_SLICEOBJECT * slice, FdmStepConditionVector v)
        __setitem__(FdmStepConditionVector self, SWIGPY_SLICEOBJECT * slice)
        __setitem__(FdmStepConditionVector self, std::vector< ext::shared_ptr< StepCondition< Array > > >::difference_type i, std::vector< ext::shared_ptr< StepCondition< Array > > >::value_type const & x)
        """
        return _quantlib_risks.FdmStepConditionVector___setitem__(self, *args)

    def pop(self):
        r"""pop(FdmStepConditionVector self) -> std::vector< ext::shared_ptr< StepCondition< Array > > >::value_type"""
        return _quantlib_risks.FdmStepConditionVector_pop(self)

    def append(self, x):
        r"""append(FdmStepConditionVector self, std::vector< ext::shared_ptr< StepCondition< Array > > >::value_type const & x)"""
        return _quantlib_risks.FdmStepConditionVector_append(self, x)

    def empty(self):
        r"""empty(FdmStepConditionVector self) -> bool"""
        return _quantlib_risks.FdmStepConditionVector_empty(self)

    def size(self):
        r"""size(FdmStepConditionVector self) -> std::vector< ext::shared_ptr< StepCondition< Array > > >::size_type"""
        return _quantlib_risks.FdmStepConditionVector_size(self)

    def swap(self, v):
        r"""swap(FdmStepConditionVector self, FdmStepConditionVector v)"""
        return _quantlib_risks.FdmStepConditionVector_swap(self, v)

    def begin(self):
        r"""begin(FdmStepConditionVector self) -> std::vector< ext::shared_ptr< StepCondition< Array > > >::iterator"""
        return _quantlib_risks.FdmStepConditionVector_begin(self)

    def end(self):
        r"""end(FdmStepConditionVector self) -> std::vector< ext::shared_ptr< StepCondition< Array > > >::iterator"""
        return _quantlib_risks.FdmStepConditionVector_end(self)

    def rbegin(self):
        r"""rbegin(FdmStepConditionVector self) -> std::vector< ext::shared_ptr< StepCondition< Array > > >::reverse_iterator"""
        return _quantlib_risks.FdmStepConditionVector_rbegin(self)

    def rend(self):
        r"""rend(FdmStepConditionVector self) -> std::vector< ext::shared_ptr< StepCondition< Array > > >::reverse_iterator"""
        return _quantlib_risks.FdmStepConditionVector_rend(self)

    def clear(self):
        r"""clear(FdmStepConditionVector self)"""
        return _quantlib_risks.FdmStepConditionVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(FdmStepConditionVector self) -> std::vector< ext::shared_ptr< StepCondition< Array > > >::allocator_type"""
        return _quantlib_risks.FdmStepConditionVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(FdmStepConditionVector self)"""
        return _quantlib_risks.FdmStepConditionVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(FdmStepConditionVector self, std::vector< ext::shared_ptr< StepCondition< Array > > >::iterator pos) -> std::vector< ext::shared_ptr< StepCondition< Array > > >::iterator
        erase(FdmStepConditionVector self, std::vector< ext::shared_ptr< StepCondition< Array > > >::iterator first, std::vector< ext::shared_ptr< StepCondition< Array > > >::iterator last) -> std::vector< ext::shared_ptr< StepCondition< Array > > >::iterator
        """
        return _quantlib_risks.FdmStepConditionVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(FdmStepConditionVector self) -> FdmStepConditionVector
        __init__(FdmStepConditionVector self, FdmStepConditionVector other) -> FdmStepConditionVector
        __init__(FdmStepConditionVector self, std::vector< ext::shared_ptr< StepCondition< Array > > >::size_type size) -> FdmStepConditionVector
        __init__(FdmStepConditionVector self, std::vector< ext::shared_ptr< StepCondition< Array > > >::size_type size, std::vector< ext::shared_ptr< StepCondition< Array > > >::value_type const & value) -> FdmStepConditionVector
        """
        _quantlib_risks.FdmStepConditionVector_swiginit(self, _quantlib_risks.new_FdmStepConditionVector(*args))

    def push_back(self, x):
        r"""push_back(FdmStepConditionVector self, std::vector< ext::shared_ptr< StepCondition< Array > > >::value_type const & x)"""
        return _quantlib_risks.FdmStepConditionVector_push_back(self, x)

    def front(self):
        r"""front(FdmStepConditionVector self) -> std::vector< ext::shared_ptr< StepCondition< Array > > >::value_type const &"""
        return _quantlib_risks.FdmStepConditionVector_front(self)

    def back(self):
        r"""back(FdmStepConditionVector self) -> std::vector< ext::shared_ptr< StepCondition< Array > > >::value_type const &"""
        return _quantlib_risks.FdmStepConditionVector_back(self)

    def assign(self, n, x):
        r"""assign(FdmStepConditionVector self, std::vector< ext::shared_ptr< StepCondition< Array > > >::size_type n, std::vector< ext::shared_ptr< StepCondition< Array > > >::value_type const & x)"""
        return _quantlib_risks.FdmStepConditionVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(FdmStepConditionVector self, std::vector< ext::shared_ptr< StepCondition< Array > > >::size_type new_size)
        resize(FdmStepConditionVector self, std::vector< ext::shared_ptr< StepCondition< Array > > >::size_type new_size, std::vector< ext::shared_ptr< StepCondition< Array > > >::value_type const & x)
        """
        return _quantlib_risks.FdmStepConditionVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(FdmStepConditionVector self, std::vector< ext::shared_ptr< StepCondition< Array > > >::iterator pos, std::vector< ext::shared_ptr< StepCondition< Array > > >::value_type const & x) -> std::vector< ext::shared_ptr< StepCondition< Array > > >::iterator
        insert(FdmStepConditionVector self, std::vector< ext::shared_ptr< StepCondition< Array > > >::iterator pos, std::vector< ext::shared_ptr< StepCondition< Array > > >::size_type n, std::vector< ext::shared_ptr< StepCondition< Array > > >::value_type const & x)
        """
        return _quantlib_risks.FdmStepConditionVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(FdmStepConditionVector self, std::vector< ext::shared_ptr< StepCondition< Array > > >::size_type n)"""
        return _quantlib_risks.FdmStepConditionVector_reserve(self, n)

    def capacity(self):
        r"""capacity(FdmStepConditionVector self) -> std::vector< ext::shared_ptr< StepCondition< Array > > >::size_type"""
        return _quantlib_risks.FdmStepConditionVector_capacity(self)
    __swig_destroy__ = _quantlib_risks.delete_FdmStepConditionVector

# Register FdmStepConditionVector in _quantlib_risks:
_quantlib_risks.FdmStepConditionVector_swigregister(FdmStepConditionVector)
class FdmStepConditionComposite(FdmStepCondition):
    r"""Proxy of C++ FdmStepConditionComposite class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, stoppingTimes, conditions):
        r"""__init__(FdmStepConditionComposite self, std::vector< Time,std::allocator< Time > > const & stoppingTimes, FdmStepConditionVector conditions) -> FdmStepConditionComposite"""
        _quantlib_risks.FdmStepConditionComposite_swiginit(self, _quantlib_risks.new_FdmStepConditionComposite(stoppingTimes, conditions))

    def stoppingTimes(self):
        r"""stoppingTimes(FdmStepConditionComposite self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.FdmStepConditionComposite_stoppingTimes(self)

    def conditions(self):
        r"""conditions(FdmStepConditionComposite self) -> FdmStepConditionVector"""
        return _quantlib_risks.FdmStepConditionComposite_conditions(self)

    @staticmethod
    def joinConditions(c1, c2):
        r"""joinConditions(ext::shared_ptr< FdmSnapshotCondition > const & c1, ext::shared_ptr< FdmStepConditionComposite > const & c2) -> ext::shared_ptr< FdmStepConditionComposite >"""
        return _quantlib_risks.FdmStepConditionComposite_joinConditions(c1, c2)

    @staticmethod
    def vanillaComposite(schedule, exercise, mesher, calculator, refDate, dayCounter):
        r"""vanillaComposite(DividendSchedule schedule, ext::shared_ptr< Exercise > const & exercise, ext::shared_ptr< FdmMesher > const & mesher, ext::shared_ptr< FdmInnerValueCalculator > const & calculator, Date refDate, DayCounter dayCounter) -> ext::shared_ptr< FdmStepConditionComposite >"""
        return _quantlib_risks.FdmStepConditionComposite_vanillaComposite(schedule, exercise, mesher, calculator, refDate, dayCounter)
    __swig_destroy__ = _quantlib_risks.delete_FdmStepConditionComposite

# Register FdmStepConditionComposite in _quantlib_risks:
_quantlib_risks.FdmStepConditionComposite_swigregister(FdmStepConditionComposite)
class FdmAmericanStepCondition(FdmStepCondition):
    r"""Proxy of C++ FdmAmericanStepCondition class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, calculator):
        r"""__init__(FdmAmericanStepCondition self, ext::shared_ptr< FdmMesher > const & mesher, ext::shared_ptr< FdmInnerValueCalculator > const & calculator) -> FdmAmericanStepCondition"""
        _quantlib_risks.FdmAmericanStepCondition_swiginit(self, _quantlib_risks.new_FdmAmericanStepCondition(mesher, calculator))
    __swig_destroy__ = _quantlib_risks.delete_FdmAmericanStepCondition

# Register FdmAmericanStepCondition in _quantlib_risks:
_quantlib_risks.FdmAmericanStepCondition_swigregister(FdmAmericanStepCondition)
class FdmArithmeticAverageCondition(FdmStepCondition):
    r"""Proxy of C++ FdmArithmeticAverageCondition class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, averageTimes, arg3, pastFixings, mesher, equityDirection):
        r"""__init__(FdmArithmeticAverageCondition self, std::vector< Time,std::allocator< Time > > const & averageTimes, Real arg3, Size pastFixings, ext::shared_ptr< FdmMesher > const & mesher, Size equityDirection) -> FdmArithmeticAverageCondition"""
        _quantlib_risks.FdmArithmeticAverageCondition_swiginit(self, _quantlib_risks.new_FdmArithmeticAverageCondition(averageTimes, arg3, pastFixings, mesher, equityDirection))
    __swig_destroy__ = _quantlib_risks.delete_FdmArithmeticAverageCondition

# Register FdmArithmeticAverageCondition in _quantlib_risks:
_quantlib_risks.FdmArithmeticAverageCondition_swigregister(FdmArithmeticAverageCondition)
class FdmBermudanStepCondition(FdmStepCondition):
    r"""Proxy of C++ FdmBermudanStepCondition class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, exerciseDates, referenceDate, dayCounter, mesher, calculator):
        r"""__init__(FdmBermudanStepCondition self, DateVector exerciseDates, Date referenceDate, DayCounter dayCounter, ext::shared_ptr< FdmMesher > const & mesher, ext::shared_ptr< FdmInnerValueCalculator > const & calculator) -> FdmBermudanStepCondition"""
        _quantlib_risks.FdmBermudanStepCondition_swiginit(self, _quantlib_risks.new_FdmBermudanStepCondition(exerciseDates, referenceDate, dayCounter, mesher, calculator))

    def exerciseTimes(self):
        r"""exerciseTimes(FdmBermudanStepCondition self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.FdmBermudanStepCondition_exerciseTimes(self)
    __swig_destroy__ = _quantlib_risks.delete_FdmBermudanStepCondition

# Register FdmBermudanStepCondition in _quantlib_risks:
_quantlib_risks.FdmBermudanStepCondition_swigregister(FdmBermudanStepCondition)
class FdmSimpleStorageCondition(FdmStepCondition):
    r"""Proxy of C++ FdmSimpleStorageCondition class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, exerciseTimes, mesher, calculator, changeRate):
        r"""__init__(FdmSimpleStorageCondition self, std::vector< Time,std::allocator< Time > > const & exerciseTimes, ext::shared_ptr< FdmMesher > const & mesher, ext::shared_ptr< FdmInnerValueCalculator > const & calculator, Real changeRate) -> FdmSimpleStorageCondition"""
        _quantlib_risks.FdmSimpleStorageCondition_swiginit(self, _quantlib_risks.new_FdmSimpleStorageCondition(exerciseTimes, mesher, calculator, changeRate))
    __swig_destroy__ = _quantlib_risks.delete_FdmSimpleStorageCondition

# Register FdmSimpleStorageCondition in _quantlib_risks:
_quantlib_risks.FdmSimpleStorageCondition_swigregister(FdmSimpleStorageCondition)
class FdmSimpleSwingCondition(FdmStepCondition):
    r"""Proxy of C++ FdmSimpleSwingCondition class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, exerciseTimes, mesher, calculator, swingDirection, minExercises=0):
        r"""__init__(FdmSimpleSwingCondition self, std::vector< Time,std::allocator< Time > > const & exerciseTimes, ext::shared_ptr< FdmMesher > const & mesher, ext::shared_ptr< FdmInnerValueCalculator > const & calculator, Size swingDirection, Size minExercises=0) -> FdmSimpleSwingCondition"""
        _quantlib_risks.FdmSimpleSwingCondition_swiginit(self, _quantlib_risks.new_FdmSimpleSwingCondition(exerciseTimes, mesher, calculator, swingDirection, minExercises))
    __swig_destroy__ = _quantlib_risks.delete_FdmSimpleSwingCondition

# Register FdmSimpleSwingCondition in _quantlib_risks:
_quantlib_risks.FdmSimpleSwingCondition_swigregister(FdmSimpleSwingCondition)
class FdmDividendHandler(FdmStepCondition):
    r"""Proxy of C++ FdmDividendHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, schedule, mesher, referenceDate, dayCounter, equityDirection):
        r"""__init__(FdmDividendHandler self, DividendSchedule schedule, ext::shared_ptr< FdmMesher > const & mesher, Date referenceDate, DayCounter dayCounter, Size equityDirection) -> FdmDividendHandler"""
        _quantlib_risks.FdmDividendHandler_swiginit(self, _quantlib_risks.new_FdmDividendHandler(schedule, mesher, referenceDate, dayCounter, equityDirection))

    def dividendTimes(self):
        r"""dividendTimes(FdmDividendHandler self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.FdmDividendHandler_dividendTimes(self)

    def dividendDates(self):
        r"""dividendDates(FdmDividendHandler self) -> DateVector"""
        return _quantlib_risks.FdmDividendHandler_dividendDates(self)

    def dividends(self):
        r"""dividends(FdmDividendHandler self) -> std::vector< Real,std::allocator< Real > > const &"""
        return _quantlib_risks.FdmDividendHandler_dividends(self)
    __swig_destroy__ = _quantlib_risks.delete_FdmDividendHandler

# Register FdmDividendHandler in _quantlib_risks:
_quantlib_risks.FdmDividendHandler_swigregister(FdmDividendHandler)
class FdmSolverDesc(object):
    r"""Proxy of C++ FdmSolverDesc class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesher, bcSet, condition, calculator, maturity, timeSteps, dampingSteps):
        r"""__init__(FdmSolverDesc self, ext::shared_ptr< FdmMesher > const & mesher, FdmBoundaryConditionSet bcSet, ext::shared_ptr< FdmStepConditionComposite > const & condition, ext::shared_ptr< FdmInnerValueCalculator > const & calculator, Time maturity, Size timeSteps, Size dampingSteps) -> FdmSolverDesc"""
        _quantlib_risks.FdmSolverDesc_swiginit(self, _quantlib_risks.new_FdmSolverDesc(mesher, bcSet, condition, calculator, maturity, timeSteps, dampingSteps))

    def getMesher(self):
        r"""getMesher(FdmSolverDesc self) -> ext::shared_ptr< FdmMesher >"""
        return _quantlib_risks.FdmSolverDesc_getMesher(self)

    def getBcSet(self):
        r"""getBcSet(FdmSolverDesc self) -> FdmBoundaryConditionSet"""
        return _quantlib_risks.FdmSolverDesc_getBcSet(self)

    def getStepConditions(self):
        r"""getStepConditions(FdmSolverDesc self) -> ext::shared_ptr< FdmStepConditionComposite >"""
        return _quantlib_risks.FdmSolverDesc_getStepConditions(self)

    def getCalculator(self):
        r"""getCalculator(FdmSolverDesc self) -> ext::shared_ptr< FdmInnerValueCalculator >"""
        return _quantlib_risks.FdmSolverDesc_getCalculator(self)

    def getMaturity(self):
        r"""getMaturity(FdmSolverDesc self) -> Time"""
        return _quantlib_risks.FdmSolverDesc_getMaturity(self)

    def getTimeSteps(self):
        r"""getTimeSteps(FdmSolverDesc self) -> Size"""
        return _quantlib_risks.FdmSolverDesc_getTimeSteps(self)

    def getDampingSteps(self):
        r"""getDampingSteps(FdmSolverDesc self) -> Size"""
        return _quantlib_risks.FdmSolverDesc_getDampingSteps(self)
    __swig_destroy__ = _quantlib_risks.delete_FdmSolverDesc

# Register FdmSolverDesc in _quantlib_risks:
_quantlib_risks.FdmSolverDesc_swigregister(FdmSolverDesc)
class Fdm1DimSolver(object):
    r"""Proxy of C++ Fdm1DimSolver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, solverDesc, schemeDesc, op):
        r"""__init__(Fdm1DimSolver self, FdmSolverDesc solverDesc, FdmSchemeDesc schemeDesc, ext::shared_ptr< FdmLinearOpComposite > const & op) -> Fdm1DimSolver"""
        _quantlib_risks.Fdm1DimSolver_swiginit(self, _quantlib_risks.new_Fdm1DimSolver(solverDesc, schemeDesc, op))

    def interpolateAt(self, x):
        r"""interpolateAt(Fdm1DimSolver self, Real x) -> Real"""
        return _quantlib_risks.Fdm1DimSolver_interpolateAt(self, x)

    def thetaAt(self, x):
        r"""thetaAt(Fdm1DimSolver self, Real x) -> Real"""
        return _quantlib_risks.Fdm1DimSolver_thetaAt(self, x)

    def derivativeX(self, x):
        r"""derivativeX(Fdm1DimSolver self, Real x) -> Real"""
        return _quantlib_risks.Fdm1DimSolver_derivativeX(self, x)

    def derivativeXX(self, x):
        r"""derivativeXX(Fdm1DimSolver self, Real x) -> Real"""
        return _quantlib_risks.Fdm1DimSolver_derivativeXX(self, x)
    __swig_destroy__ = _quantlib_risks.delete_Fdm1DimSolver

# Register Fdm1DimSolver in _quantlib_risks:
_quantlib_risks.Fdm1DimSolver_swigregister(Fdm1DimSolver)
class FdmBackwardSolver(object):
    r"""Proxy of C++ FdmBackwardSolver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, map, bcSet, condition, schemeDesc):
        r"""__init__(FdmBackwardSolver self, ext::shared_ptr< FdmLinearOpComposite > const & map, FdmBoundaryConditionSet bcSet, ext::shared_ptr< FdmStepConditionComposite > const condition, FdmSchemeDesc schemeDesc) -> FdmBackwardSolver"""
        _quantlib_risks.FdmBackwardSolver_swiginit(self, _quantlib_risks.new_FdmBackwardSolver(map, bcSet, condition, schemeDesc))

    def rollback(self, a, _from, to, steps, dampingSteps):
        r"""rollback(FdmBackwardSolver self, Array a, Time _from, Time to, Size steps, Size dampingSteps)"""
        return _quantlib_risks.FdmBackwardSolver_rollback(self, a, _from, to, steps, dampingSteps)
    __swig_destroy__ = _quantlib_risks.delete_FdmBackwardSolver

# Register FdmBackwardSolver in _quantlib_risks:
_quantlib_risks.FdmBackwardSolver_swigregister(FdmBackwardSolver)
class Fdm2dBlackScholesSolver(object):
    r"""Proxy of C++ Fdm2dBlackScholesSolver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(Fdm2dBlackScholesSolver self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & p1, ext::shared_ptr< GeneralizedBlackScholesProcess > const & p2, Real const correlation, FdmSolverDesc solverDesc, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Hundsdorfer(), bool localVol=False, Real illegalLocalVolOverwrite=-Null< Real >()) -> Fdm2dBlackScholesSolver"""
        _quantlib_risks.Fdm2dBlackScholesSolver_swiginit(self, _quantlib_risks.new_Fdm2dBlackScholesSolver(*args, **kwargs))

    def valueAt(self, x, y):
        r"""valueAt(Fdm2dBlackScholesSolver self, Real x, Real y) -> Real"""
        return _quantlib_risks.Fdm2dBlackScholesSolver_valueAt(self, x, y)

    def thetaAt(self, x, y):
        r"""thetaAt(Fdm2dBlackScholesSolver self, Real x, Real y) -> Real"""
        return _quantlib_risks.Fdm2dBlackScholesSolver_thetaAt(self, x, y)

    def deltaXat(self, x, y):
        r"""deltaXat(Fdm2dBlackScholesSolver self, Real x, Real y) -> Real"""
        return _quantlib_risks.Fdm2dBlackScholesSolver_deltaXat(self, x, y)

    def deltaYat(self, x, y):
        r"""deltaYat(Fdm2dBlackScholesSolver self, Real x, Real y) -> Real"""
        return _quantlib_risks.Fdm2dBlackScholesSolver_deltaYat(self, x, y)

    def gammaXat(self, x, y):
        r"""gammaXat(Fdm2dBlackScholesSolver self, Real x, Real y) -> Real"""
        return _quantlib_risks.Fdm2dBlackScholesSolver_gammaXat(self, x, y)

    def gammaYat(self, x, y):
        r"""gammaYat(Fdm2dBlackScholesSolver self, Real x, Real y) -> Real"""
        return _quantlib_risks.Fdm2dBlackScholesSolver_gammaYat(self, x, y)

    def gammaXYat(self, x, y):
        r"""gammaXYat(Fdm2dBlackScholesSolver self, Real x, Real y) -> Real"""
        return _quantlib_risks.Fdm2dBlackScholesSolver_gammaXYat(self, x, y)
    __swig_destroy__ = _quantlib_risks.delete_Fdm2dBlackScholesSolver

# Register Fdm2dBlackScholesSolver in _quantlib_risks:
_quantlib_risks.Fdm2dBlackScholesSolver_swigregister(Fdm2dBlackScholesSolver)
class Fdm2DimSolver(object):
    r"""Proxy of C++ Fdm2DimSolver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, solverDesc, schemeDesc, op):
        r"""__init__(Fdm2DimSolver self, FdmSolverDesc solverDesc, FdmSchemeDesc schemeDesc, ext::shared_ptr< FdmLinearOpComposite > const & op) -> Fdm2DimSolver"""
        _quantlib_risks.Fdm2DimSolver_swiginit(self, _quantlib_risks.new_Fdm2DimSolver(solverDesc, schemeDesc, op))

    def interpolateAt(self, x, y):
        r"""interpolateAt(Fdm2DimSolver self, Real x, Real y) -> Real"""
        return _quantlib_risks.Fdm2DimSolver_interpolateAt(self, x, y)

    def thetaAt(self, x, y):
        r"""thetaAt(Fdm2DimSolver self, Real x, Real y) -> Real"""
        return _quantlib_risks.Fdm2DimSolver_thetaAt(self, x, y)

    def derivativeX(self, x, y):
        r"""derivativeX(Fdm2DimSolver self, Real x, Real y) -> Real"""
        return _quantlib_risks.Fdm2DimSolver_derivativeX(self, x, y)

    def derivativeY(self, x, y):
        r"""derivativeY(Fdm2DimSolver self, Real x, Real y) -> Real"""
        return _quantlib_risks.Fdm2DimSolver_derivativeY(self, x, y)

    def derivativeXX(self, x, y):
        r"""derivativeXX(Fdm2DimSolver self, Real x, Real y) -> Real"""
        return _quantlib_risks.Fdm2DimSolver_derivativeXX(self, x, y)

    def derivativeYY(self, x, y):
        r"""derivativeYY(Fdm2DimSolver self, Real x, Real y) -> Real"""
        return _quantlib_risks.Fdm2DimSolver_derivativeYY(self, x, y)

    def derivativeXY(self, x, y):
        r"""derivativeXY(Fdm2DimSolver self, Real x, Real y) -> Real"""
        return _quantlib_risks.Fdm2DimSolver_derivativeXY(self, x, y)
    __swig_destroy__ = _quantlib_risks.delete_Fdm2DimSolver

# Register Fdm2DimSolver in _quantlib_risks:
_quantlib_risks.Fdm2DimSolver_swigregister(Fdm2DimSolver)
class Fdm3DimSolver(object):
    r"""Proxy of C++ Fdm3DimSolver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, solverDesc, schemeDesc, op):
        r"""__init__(Fdm3DimSolver self, FdmSolverDesc solverDesc, FdmSchemeDesc schemeDesc, ext::shared_ptr< FdmLinearOpComposite > const & op) -> Fdm3DimSolver"""
        _quantlib_risks.Fdm3DimSolver_swiginit(self, _quantlib_risks.new_Fdm3DimSolver(solverDesc, schemeDesc, op))

    def performCalculations(self):
        r"""performCalculations(Fdm3DimSolver self)"""
        return _quantlib_risks.Fdm3DimSolver_performCalculations(self)

    def interpolateAt(self, x, y, z):
        r"""interpolateAt(Fdm3DimSolver self, Real x, Real y, Rate z) -> Real"""
        return _quantlib_risks.Fdm3DimSolver_interpolateAt(self, x, y, z)

    def thetaAt(self, x, y, z):
        r"""thetaAt(Fdm3DimSolver self, Real x, Real y, Rate z) -> Real"""
        return _quantlib_risks.Fdm3DimSolver_thetaAt(self, x, y, z)
    __swig_destroy__ = _quantlib_risks.delete_Fdm3DimSolver

# Register Fdm3DimSolver in _quantlib_risks:
_quantlib_risks.Fdm3DimSolver_swigregister(Fdm3DimSolver)
class FdmG2Solver(object):
    r"""Proxy of C++ FdmG2Solver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(FdmG2Solver self, ext::shared_ptr< G2 > const & model, FdmSolverDesc solverDesc, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Hundsdorfer()) -> FdmG2Solver"""
        _quantlib_risks.FdmG2Solver_swiginit(self, _quantlib_risks.new_FdmG2Solver(*args))

    def valueAt(self, x, y):
        r"""valueAt(FdmG2Solver self, Real x, Real y) -> Real"""
        return _quantlib_risks.FdmG2Solver_valueAt(self, x, y)
    __swig_destroy__ = _quantlib_risks.delete_FdmG2Solver

# Register FdmG2Solver in _quantlib_risks:
_quantlib_risks.FdmG2Solver_swigregister(FdmG2Solver)
class FdmHestonHullWhiteSolver(object):
    r"""Proxy of C++ FdmHestonHullWhiteSolver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(FdmHestonHullWhiteSolver self, ext::shared_ptr< HestonProcess > const & hestonProcess, ext::shared_ptr< HullWhiteProcess > const & hwProcess, Rate corrEquityShortRate, FdmSolverDesc solverDesc, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Hundsdorfer()) -> FdmHestonHullWhiteSolver"""
        _quantlib_risks.FdmHestonHullWhiteSolver_swiginit(self, _quantlib_risks.new_FdmHestonHullWhiteSolver(*args))

    def valueAt(self, s, v, r):
        r"""valueAt(FdmHestonHullWhiteSolver self, Real s, Real v, Rate r) -> Real"""
        return _quantlib_risks.FdmHestonHullWhiteSolver_valueAt(self, s, v, r)

    def thetaAt(self, s, v, r):
        r"""thetaAt(FdmHestonHullWhiteSolver self, Real s, Real v, Rate r) -> Real"""
        return _quantlib_risks.FdmHestonHullWhiteSolver_thetaAt(self, s, v, r)

    def deltaAt(self, s, v, r, eps):
        r"""deltaAt(FdmHestonHullWhiteSolver self, Real s, Real v, Rate r, Real eps) -> Real"""
        return _quantlib_risks.FdmHestonHullWhiteSolver_deltaAt(self, s, v, r, eps)

    def gammaAt(self, s, v, r, eps):
        r"""gammaAt(FdmHestonHullWhiteSolver self, Real s, Real v, Rate r, Real eps) -> Real"""
        return _quantlib_risks.FdmHestonHullWhiteSolver_gammaAt(self, s, v, r, eps)
    __swig_destroy__ = _quantlib_risks.delete_FdmHestonHullWhiteSolver

# Register FdmHestonHullWhiteSolver in _quantlib_risks:
_quantlib_risks.FdmHestonHullWhiteSolver_swigregister(FdmHestonHullWhiteSolver)
class FdmHestonSolver(object):
    r"""Proxy of C++ FdmHestonSolver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(FdmHestonSolver self, ext::shared_ptr< HestonProcess > const & process, FdmSolverDesc solverDesc, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Hundsdorfer(), ext::shared_ptr< FdmQuantoHelper > const & quantoHelper=ext::shared_ptr< FdmQuantoHelper >(), ext::shared_ptr< LocalVolTermStructure > const & leverageFct=ext::shared_ptr< LocalVolTermStructure >()) -> FdmHestonSolver"""
        _quantlib_risks.FdmHestonSolver_swiginit(self, _quantlib_risks.new_FdmHestonSolver(*args, **kwargs))

    def valueAt(self, s, v):
        r"""valueAt(FdmHestonSolver self, Real s, Real v) -> Real"""
        return _quantlib_risks.FdmHestonSolver_valueAt(self, s, v)

    def thetaAt(self, s, v):
        r"""thetaAt(FdmHestonSolver self, Real s, Real v) -> Real"""
        return _quantlib_risks.FdmHestonSolver_thetaAt(self, s, v)

    def deltaAt(self, s, v):
        r"""deltaAt(FdmHestonSolver self, Real s, Real v) -> Real"""
        return _quantlib_risks.FdmHestonSolver_deltaAt(self, s, v)

    def gammaAt(self, s, v):
        r"""gammaAt(FdmHestonSolver self, Real s, Real v) -> Real"""
        return _quantlib_risks.FdmHestonSolver_gammaAt(self, s, v)

    def meanVarianceDeltaAt(self, s, v):
        r"""meanVarianceDeltaAt(FdmHestonSolver self, Real s, Real v) -> Real"""
        return _quantlib_risks.FdmHestonSolver_meanVarianceDeltaAt(self, s, v)

    def meanVarianceGammaAt(self, s, v):
        r"""meanVarianceGammaAt(FdmHestonSolver self, Real s, Real v) -> Real"""
        return _quantlib_risks.FdmHestonSolver_meanVarianceGammaAt(self, s, v)
    __swig_destroy__ = _quantlib_risks.delete_FdmHestonSolver

# Register FdmHestonSolver in _quantlib_risks:
_quantlib_risks.FdmHestonSolver_swigregister(FdmHestonSolver)
class FdmHullWhiteSolver(object):
    r"""Proxy of C++ FdmHullWhiteSolver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(FdmHullWhiteSolver self, ext::shared_ptr< HullWhite > const & model, FdmSolverDesc solverDesc, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Hundsdorfer()) -> FdmHullWhiteSolver"""
        _quantlib_risks.FdmHullWhiteSolver_swiginit(self, _quantlib_risks.new_FdmHullWhiteSolver(*args))

    def valueAt(self, r):
        r"""valueAt(FdmHullWhiteSolver self, Real r) -> Real"""
        return _quantlib_risks.FdmHullWhiteSolver_valueAt(self, r)
    __swig_destroy__ = _quantlib_risks.delete_FdmHullWhiteSolver

# Register FdmHullWhiteSolver in _quantlib_risks:
_quantlib_risks.FdmHullWhiteSolver_swigregister(FdmHullWhiteSolver)
class Fdm4dimSolver(object):
    r"""Proxy of C++ FdmNdimSolver< 4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, solverDesc, schemeDesc, op):
        r"""__init__(Fdm4dimSolver self, FdmSolverDesc solverDesc, FdmSchemeDesc schemeDesc, ext::shared_ptr< FdmLinearOpComposite > const & op) -> Fdm4dimSolver"""
        _quantlib_risks.Fdm4dimSolver_swiginit(self, _quantlib_risks.new_Fdm4dimSolver(solverDesc, schemeDesc, op))

    def interpolateAt(self, x):
        r"""interpolateAt(Fdm4dimSolver self, std::vector< Real,std::allocator< Real > > const & x) -> Real"""
        return _quantlib_risks.Fdm4dimSolver_interpolateAt(self, x)

    def thetaAt(self, x):
        r"""thetaAt(Fdm4dimSolver self, std::vector< Real,std::allocator< Real > > const & x) -> Real"""
        return _quantlib_risks.Fdm4dimSolver_thetaAt(self, x)
    __swig_destroy__ = _quantlib_risks.delete_Fdm4dimSolver

# Register Fdm4dimSolver in _quantlib_risks:
_quantlib_risks.Fdm4dimSolver_swigregister(Fdm4dimSolver)
class Fdm5dimSolver(object):
    r"""Proxy of C++ FdmNdimSolver< 5 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, solverDesc, schemeDesc, op):
        r"""__init__(Fdm5dimSolver self, FdmSolverDesc solverDesc, FdmSchemeDesc schemeDesc, ext::shared_ptr< FdmLinearOpComposite > const & op) -> Fdm5dimSolver"""
        _quantlib_risks.Fdm5dimSolver_swiginit(self, _quantlib_risks.new_Fdm5dimSolver(solverDesc, schemeDesc, op))

    def interpolateAt(self, x):
        r"""interpolateAt(Fdm5dimSolver self, std::vector< Real,std::allocator< Real > > const & x) -> Real"""
        return _quantlib_risks.Fdm5dimSolver_interpolateAt(self, x)

    def thetaAt(self, x):
        r"""thetaAt(Fdm5dimSolver self, std::vector< Real,std::allocator< Real > > const & x) -> Real"""
        return _quantlib_risks.Fdm5dimSolver_thetaAt(self, x)
    __swig_destroy__ = _quantlib_risks.delete_Fdm5dimSolver

# Register Fdm5dimSolver in _quantlib_risks:
_quantlib_risks.Fdm5dimSolver_swigregister(Fdm5dimSolver)
class Fdm6dimSolver(object):
    r"""Proxy of C++ FdmNdimSolver< 6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, solverDesc, schemeDesc, op):
        r"""__init__(Fdm6dimSolver self, FdmSolverDesc solverDesc, FdmSchemeDesc schemeDesc, ext::shared_ptr< FdmLinearOpComposite > const & op) -> Fdm6dimSolver"""
        _quantlib_risks.Fdm6dimSolver_swiginit(self, _quantlib_risks.new_Fdm6dimSolver(solverDesc, schemeDesc, op))

    def interpolateAt(self, x):
        r"""interpolateAt(Fdm6dimSolver self, std::vector< Real,std::allocator< Real > > const & x) -> Real"""
        return _quantlib_risks.Fdm6dimSolver_interpolateAt(self, x)

    def thetaAt(self, x):
        r"""thetaAt(Fdm6dimSolver self, std::vector< Real,std::allocator< Real > > const & x) -> Real"""
        return _quantlib_risks.Fdm6dimSolver_thetaAt(self, x)
    __swig_destroy__ = _quantlib_risks.delete_Fdm6dimSolver

# Register Fdm6dimSolver in _quantlib_risks:
_quantlib_risks.Fdm6dimSolver_swigregister(Fdm6dimSolver)
class FdmIndicesOnBoundary(object):
    r"""Proxy of C++ FdmIndicesOnBoundary class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, l, direction, side):
        r"""__init__(FdmIndicesOnBoundary self, ext::shared_ptr< FdmLinearOpLayout > const & l, Size direction, FdmDirichletBoundary::Side side) -> FdmIndicesOnBoundary"""
        _quantlib_risks.FdmIndicesOnBoundary_swiginit(self, _quantlib_risks.new_FdmIndicesOnBoundary(l, direction, side))

    def getIndices(self):
        r"""getIndices(FdmIndicesOnBoundary self) -> UnsignedIntVector"""
        return _quantlib_risks.FdmIndicesOnBoundary_getIndices(self)
    __swig_destroy__ = _quantlib_risks.delete_FdmIndicesOnBoundary

# Register FdmIndicesOnBoundary in _quantlib_risks:
_quantlib_risks.FdmIndicesOnBoundary_swigregister(FdmIndicesOnBoundary)
class RiskNeutralDensityCalculator(object):
    r"""Proxy of C++ RiskNeutralDensityCalculator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def pdf(self, x, t):
        r"""pdf(RiskNeutralDensityCalculator self, Real x, Time t) -> Real"""
        return _quantlib_risks.RiskNeutralDensityCalculator_pdf(self, x, t)

    def cdf(self, x, t):
        r"""cdf(RiskNeutralDensityCalculator self, Real x, Time t) -> Real"""
        return _quantlib_risks.RiskNeutralDensityCalculator_cdf(self, x, t)

    def invcdf(self, p, t):
        r"""invcdf(RiskNeutralDensityCalculator self, Real p, Time t) -> Real"""
        return _quantlib_risks.RiskNeutralDensityCalculator_invcdf(self, p, t)
    __swig_destroy__ = _quantlib_risks.delete_RiskNeutralDensityCalculator

# Register RiskNeutralDensityCalculator in _quantlib_risks:
_quantlib_risks.RiskNeutralDensityCalculator_swigregister(RiskNeutralDensityCalculator)
class BSMRNDCalculator(RiskNeutralDensityCalculator):
    r"""Proxy of C++ BSMRNDCalculator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(BSMRNDCalculator self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process) -> BSMRNDCalculator"""
        _quantlib_risks.BSMRNDCalculator_swiginit(self, _quantlib_risks.new_BSMRNDCalculator(process))
    __swig_destroy__ = _quantlib_risks.delete_BSMRNDCalculator

# Register BSMRNDCalculator in _quantlib_risks:
_quantlib_risks.BSMRNDCalculator_swigregister(BSMRNDCalculator)
class CEVRNDCalculator(RiskNeutralDensityCalculator):
    r"""Proxy of C++ CEVRNDCalculator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, f0, alpha, beta):
        r"""__init__(CEVRNDCalculator self, Real f0, Real alpha, Real beta) -> CEVRNDCalculator"""
        _quantlib_risks.CEVRNDCalculator_swiginit(self, _quantlib_risks.new_CEVRNDCalculator(f0, alpha, beta))

    def massAtZero(self, t):
        r"""massAtZero(CEVRNDCalculator self, Time t) -> Real"""
        return _quantlib_risks.CEVRNDCalculator_massAtZero(self, t)
    __swig_destroy__ = _quantlib_risks.delete_CEVRNDCalculator

# Register CEVRNDCalculator in _quantlib_risks:
_quantlib_risks.CEVRNDCalculator_swigregister(CEVRNDCalculator)
class GBSMRNDCalculator(RiskNeutralDensityCalculator):
    r"""Proxy of C++ GBSMRNDCalculator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(GBSMRNDCalculator self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process) -> GBSMRNDCalculator"""
        _quantlib_risks.GBSMRNDCalculator_swiginit(self, _quantlib_risks.new_GBSMRNDCalculator(process))
    __swig_destroy__ = _quantlib_risks.delete_GBSMRNDCalculator

# Register GBSMRNDCalculator in _quantlib_risks:
_quantlib_risks.GBSMRNDCalculator_swigregister(GBSMRNDCalculator)
class HestonRNDCalculator(RiskNeutralDensityCalculator):
    r"""Proxy of C++ HestonRNDCalculator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, hestonProcess, integrationEps=1e-6, maxIntegrationIterations=10000):
        r"""__init__(HestonRNDCalculator self, ext::shared_ptr< HestonProcess > const & hestonProcess, Real integrationEps=1e-6, Size maxIntegrationIterations=10000) -> HestonRNDCalculator"""
        _quantlib_risks.HestonRNDCalculator_swiginit(self, _quantlib_risks.new_HestonRNDCalculator(hestonProcess, integrationEps, maxIntegrationIterations))
    __swig_destroy__ = _quantlib_risks.delete_HestonRNDCalculator

# Register HestonRNDCalculator in _quantlib_risks:
_quantlib_risks.HestonRNDCalculator_swigregister(HestonRNDCalculator)
class LocalVolRNDCalculator(RiskNeutralDensityCalculator):
    r"""Proxy of C++ LocalVolRNDCalculator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(LocalVolRNDCalculator self, ext::shared_ptr< Quote > const & spot, ext::shared_ptr< YieldTermStructure > const & rTS, ext::shared_ptr< YieldTermStructure > const & qTS, ext::shared_ptr< LocalVolTermStructure > const & localVol, Size xGrid=101, Size tGrid=51, Real x0Density=0.1, Real localVolProbEps=1e-6, Size maxIter=10000, Time gaussianStepSize=-Null< Time >()) -> LocalVolRNDCalculator"""
        _quantlib_risks.LocalVolRNDCalculator_swiginit(self, _quantlib_risks.new_LocalVolRNDCalculator(*args, **kwargs))

    def mesher(self, t):
        r"""mesher(LocalVolRNDCalculator self, Time t) -> ext::shared_ptr< Fdm1dMesher >"""
        return _quantlib_risks.LocalVolRNDCalculator_mesher(self, t)

    def rescaleTimeSteps(self):
        r"""rescaleTimeSteps(LocalVolRNDCalculator self) -> UnsignedIntVector"""
        return _quantlib_risks.LocalVolRNDCalculator_rescaleTimeSteps(self)
    __swig_destroy__ = _quantlib_risks.delete_LocalVolRNDCalculator

# Register LocalVolRNDCalculator in _quantlib_risks:
_quantlib_risks.LocalVolRNDCalculator_swigregister(LocalVolRNDCalculator)
class SquareRootProcessRNDCalculator(RiskNeutralDensityCalculator):
    r"""Proxy of C++ SquareRootProcessRNDCalculator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, v0, kappa, theta, sigma):
        r"""__init__(SquareRootProcessRNDCalculator self, Real v0, Real kappa, Real theta, Real sigma) -> SquareRootProcessRNDCalculator"""
        _quantlib_risks.SquareRootProcessRNDCalculator_swiginit(self, _quantlib_risks.new_SquareRootProcessRNDCalculator(v0, kappa, theta, sigma))

    def stationary_pdf(self, v):
        r"""stationary_pdf(SquareRootProcessRNDCalculator self, Real v) -> Real"""
        return _quantlib_risks.SquareRootProcessRNDCalculator_stationary_pdf(self, v)

    def stationary_cdf(self, v):
        r"""stationary_cdf(SquareRootProcessRNDCalculator self, Real v) -> Real"""
        return _quantlib_risks.SquareRootProcessRNDCalculator_stationary_cdf(self, v)

    def stationary_invcdf(self, q):
        r"""stationary_invcdf(SquareRootProcessRNDCalculator self, Real q) -> Real"""
        return _quantlib_risks.SquareRootProcessRNDCalculator_stationary_invcdf(self, q)
    __swig_destroy__ = _quantlib_risks.delete_SquareRootProcessRNDCalculator

# Register SquareRootProcessRNDCalculator in _quantlib_risks:
_quantlib_risks.SquareRootProcessRNDCalculator_swigregister(SquareRootProcessRNDCalculator)
class FittingMethod(object):
    r"""Proxy of C++ FittingMethod class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quantlib_risks.delete_FittingMethod

    def size(self):
        r"""size(FittingMethod self) -> Size"""
        return _quantlib_risks.FittingMethod_size(self)

    def solution(self):
        r"""solution(FittingMethod self) -> Array"""
        return _quantlib_risks.FittingMethod_solution(self)

    def numberOfIterations(self):
        r"""numberOfIterations(FittingMethod self) -> Integer"""
        return _quantlib_risks.FittingMethod_numberOfIterations(self)

    def minimumCostValue(self):
        r"""minimumCostValue(FittingMethod self) -> Real"""
        return _quantlib_risks.FittingMethod_minimumCostValue(self)

    def constrainAtZero(self):
        r"""constrainAtZero(FittingMethod self) -> bool"""
        return _quantlib_risks.FittingMethod_constrainAtZero(self)

    def weights(self):
        r"""weights(FittingMethod self) -> Array"""
        return _quantlib_risks.FittingMethod_weights(self)

# Register FittingMethod in _quantlib_risks:
_quantlib_risks.FittingMethod_swigregister(FittingMethod)
class FittedBondDiscountCurve(YieldTermStructure):
    r"""Proxy of C++ FittedBondDiscountCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FittedBondDiscountCurve self, Natural settlementDays, Calendar calendar, BondHelperVector helpers, DayCounter dayCounter, FittingMethod fittingMethod, Real accuracy=1.0e-10, Size maxEvaluations=10000, Array guess=Array(), Real simplexLambda=1.0) -> FittedBondDiscountCurve
        __init__(FittedBondDiscountCurve self, Date referenceDate, BondHelperVector helpers, DayCounter dayCounter, FittingMethod fittingMethod, Real accuracy=1.0e-10, Size maxEvaluations=10000, Array guess=Array(), Real simplexLambda=1.0) -> FittedBondDiscountCurve
        """
        _quantlib_risks.FittedBondDiscountCurve_swiginit(self, _quantlib_risks.new_FittedBondDiscountCurve(*args))

    def fitResults(self):
        r"""fitResults(FittedBondDiscountCurve self) -> FittingMethod"""
        return _quantlib_risks.FittedBondDiscountCurve_fitResults(self)
    __swig_destroy__ = _quantlib_risks.delete_FittedBondDiscountCurve

# Register FittedBondDiscountCurve in _quantlib_risks:
_quantlib_risks.FittedBondDiscountCurve_swigregister(FittedBondDiscountCurve)
class ExponentialSplinesFitting(FittingMethod):
    r"""Proxy of C++ ExponentialSplinesFitting class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ExponentialSplinesFitting self, bool constrainAtZero=True, Array weights=Array(), Array l2=Array(), Real minCutoffTime=0.0, Real maxCutoffTime=QL_MAX_REAL, Size numCoeffs=9, Real fixedKappa=Null< Real >()) -> ExponentialSplinesFitting"""
        _quantlib_risks.ExponentialSplinesFitting_swiginit(self, _quantlib_risks.new_ExponentialSplinesFitting(*args))
    __swig_destroy__ = _quantlib_risks.delete_ExponentialSplinesFitting

# Register ExponentialSplinesFitting in _quantlib_risks:
_quantlib_risks.ExponentialSplinesFitting_swigregister(ExponentialSplinesFitting)
class NelsonSiegelFitting(FittingMethod):
    r"""Proxy of C++ NelsonSiegelFitting class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(NelsonSiegelFitting self, Array weights=Array()) -> NelsonSiegelFitting"""
        _quantlib_risks.NelsonSiegelFitting_swiginit(self, _quantlib_risks.new_NelsonSiegelFitting(*args))
    __swig_destroy__ = _quantlib_risks.delete_NelsonSiegelFitting

# Register NelsonSiegelFitting in _quantlib_risks:
_quantlib_risks.NelsonSiegelFitting_swigregister(NelsonSiegelFitting)
class SvenssonFitting(FittingMethod):
    r"""Proxy of C++ SvenssonFitting class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(SvenssonFitting self, Array weights=Array()) -> SvenssonFitting"""
        _quantlib_risks.SvenssonFitting_swiginit(self, _quantlib_risks.new_SvenssonFitting(*args))
    __swig_destroy__ = _quantlib_risks.delete_SvenssonFitting

# Register SvenssonFitting in _quantlib_risks:
_quantlib_risks.SvenssonFitting_swigregister(SvenssonFitting)
class CubicBSplinesFitting(FittingMethod):
    r"""Proxy of C++ CubicBSplinesFitting class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(CubicBSplinesFitting self, std::vector< Time,std::allocator< Time > > const & knotVector, bool constrainAtZero=True, Array weights=Array()) -> CubicBSplinesFitting"""
        _quantlib_risks.CubicBSplinesFitting_swiginit(self, _quantlib_risks.new_CubicBSplinesFitting(*args))

    def basisFunction(self, i, t):
        r"""basisFunction(CubicBSplinesFitting self, Integer i, Time t) -> Real"""
        return _quantlib_risks.CubicBSplinesFitting_basisFunction(self, i, t)
    __swig_destroy__ = _quantlib_risks.delete_CubicBSplinesFitting

# Register CubicBSplinesFitting in _quantlib_risks:
_quantlib_risks.CubicBSplinesFitting_swigregister(CubicBSplinesFitting)
class SimplePolynomialFitting(FittingMethod):
    r"""Proxy of C++ SimplePolynomialFitting class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(SimplePolynomialFitting self, Natural degree, bool constrainAtZero=True, Array weights=Array()) -> SimplePolynomialFitting"""
        _quantlib_risks.SimplePolynomialFitting_swiginit(self, _quantlib_risks.new_SimplePolynomialFitting(*args))
    __swig_destroy__ = _quantlib_risks.delete_SimplePolynomialFitting

# Register SimplePolynomialFitting in _quantlib_risks:
_quantlib_risks.SimplePolynomialFitting_swigregister(SimplePolynomialFitting)
class SpreadFittingMethod(FittingMethod):
    r"""Proxy of C++ SpreadFittingMethod class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(SpreadFittingMethod self, ext::shared_ptr< FittingMethod > const & method, YieldTermStructureHandle discountCurve, Real minCutoffTime=0.0, Real maxCutoffTime=QL_MAX_REAL) -> SpreadFittingMethod"""
        _quantlib_risks.SpreadFittingMethod_swiginit(self, _quantlib_risks.new_SpreadFittingMethod(*args))
    __swig_destroy__ = _quantlib_risks.delete_SpreadFittingMethod

# Register SpreadFittingMethod in _quantlib_risks:
_quantlib_risks.SpreadFittingMethod_swigregister(SpreadFittingMethod)
class ForwardCurve(YieldTermStructure):
    r"""Proxy of C++ InterpolatedForwardCurve< BackwardFlat > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ForwardCurve self, DateVector dates, std::vector< Rate,std::allocator< Rate > > const & forwards, DayCounter dayCounter, Calendar calendar=Calendar(), BackwardFlat i=BackwardFlat()) -> ForwardCurve"""
        _quantlib_risks.ForwardCurve_swiginit(self, _quantlib_risks.new_ForwardCurve(*args))

    def dates(self):
        r"""dates(ForwardCurve self) -> DateVector"""
        return _quantlib_risks.ForwardCurve_dates(self)

    def forwards(self):
        r"""forwards(ForwardCurve self) -> std::vector< Rate,std::allocator< Rate > > const &"""
        return _quantlib_risks.ForwardCurve_forwards(self)

    def nodes(self):
        r"""nodes(ForwardCurve self) -> std::vector< std::pair< Date,Rate >,std::allocator< std::pair< Date,Rate > > >"""
        return _quantlib_risks.ForwardCurve_nodes(self)
    __swig_destroy__ = _quantlib_risks.delete_ForwardCurve

# Register ForwardCurve in _quantlib_risks:
_quantlib_risks.ForwardCurve_swigregister(ForwardCurve)
class Position(object):
    r"""Proxy of C++ Position class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Long = _quantlib_risks.Position_Long
    
    Short = _quantlib_risks.Position_Short
    

    def __init__(self):
        r"""__init__(Position self) -> Position"""
        _quantlib_risks.Position_swiginit(self, _quantlib_risks.new_Position())
    __swig_destroy__ = _quantlib_risks.delete_Position

# Register Position in _quantlib_risks:
_quantlib_risks.Position_swigregister(Position)
class ForwardRateAgreement(Instrument):
    r"""Proxy of C++ ForwardRateAgreement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ForwardRateAgreement self, Date valueDate, Date maturityDate, Position::Type type, Rate strikeForwardRate, Real notionalAmount, ext::shared_ptr< IborIndex > const & index, YieldTermStructureHandle discountCurve=Handle< YieldTermStructure >(), bool useIndexedCoupon=True) -> ForwardRateAgreement
        __init__(ForwardRateAgreement self, Date valueDate, Position::Type type, Rate strikeForwardRate, Real notionalAmount, ext::shared_ptr< IborIndex > const & index, YieldTermStructureHandle discountCurve=Handle< YieldTermStructure >()) -> ForwardRateAgreement
        __init__(ForwardRateAgreement self, ext::shared_ptr< IborIndex > const & index, Date valueDate, Position::Type type, Rate strikeForwardRate, Real notionalAmount, YieldTermStructureHandle discountCurve={}) -> ForwardRateAgreement
        __init__(ForwardRateAgreement self, ext::shared_ptr< IborIndex > const & index, Date valueDate, Date maturityDate, Position::Type type, Rate strikeForwardRate, Real notionalAmount, YieldTermStructureHandle discountCurve={}) -> ForwardRateAgreement
        """
        _quantlib_risks.ForwardRateAgreement_swiginit(self, _quantlib_risks.new_ForwardRateAgreement(*args))

    def amount(self):
        r"""amount(ForwardRateAgreement self) -> Real"""
        return _quantlib_risks.ForwardRateAgreement_amount(self)

    def fixingDate(self):
        r"""fixingDate(ForwardRateAgreement self) -> Date"""
        return _quantlib_risks.ForwardRateAgreement_fixingDate(self)

    def forwardRate(self):
        r"""forwardRate(ForwardRateAgreement self) -> InterestRate"""
        return _quantlib_risks.ForwardRateAgreement_forwardRate(self)
    __swig_destroy__ = _quantlib_risks.delete_ForwardRateAgreement

# Register ForwardRateAgreement in _quantlib_risks:
_quantlib_risks.ForwardRateAgreement_swigregister(ForwardRateAgreement)
class Gaussian1dModel(TermStructureConsistentModel):
    r"""Proxy of C++ Gaussian1dModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def stateProcess(self):
        r"""stateProcess(Gaussian1dModel self) -> ext::shared_ptr< StochasticProcess1D > const"""
        return _quantlib_risks.Gaussian1dModel_stateProcess(self)

    def numeraire(self, *args):
        r"""
        numeraire(Gaussian1dModel self, Time const t, Real const y=0.0, YieldTermStructureHandle yts=Handle< YieldTermStructure >()) -> Real const
        numeraire(Gaussian1dModel self, Date referenceDate, Real const y=0.0, YieldTermStructureHandle yts=Handle< YieldTermStructure >()) -> Real const
        """
        return _quantlib_risks.Gaussian1dModel_numeraire(self, *args)

    def zerobond(self, *args):
        r"""
        zerobond(Gaussian1dModel self, Time const T, Time const t=0.0, Real const y=0.0, YieldTermStructureHandle yts=Handle< YieldTermStructure >()) -> Real const
        zerobond(Gaussian1dModel self, Date maturity, Date referenceDate=Null< Date >(), Real const y=0.0, YieldTermStructureHandle yts=Handle< YieldTermStructure >()) -> Real const
        """
        return _quantlib_risks.Gaussian1dModel_zerobond(self, *args)

    def zerobondOption(self, *args):
        r"""zerobondOption(Gaussian1dModel self, Option::Type const & type, Date expiry, Date valueDate, Date maturity, Rate const strike, Date referenceDate=Null< Date >(), Real const y=0.0, YieldTermStructureHandle yts=Handle< YieldTermStructure >(), Real const yStdDevs=7.0, Size const yGridPoints=64, bool const extrapolatePayoff=True, bool const flatPayoffExtrapolation=False) -> Real const"""
        return _quantlib_risks.Gaussian1dModel_zerobondOption(self, *args)

    def forwardRate(self, *args):
        r"""forwardRate(Gaussian1dModel self, Date fixing, Date referenceDate=Null< Date >(), Real const y=0.0, ext::shared_ptr< IborIndex > iborIdx=ext::shared_ptr< IborIndex >()) -> Real const"""
        return _quantlib_risks.Gaussian1dModel_forwardRate(self, *args)

    def swapRate(self, *args):
        r"""swapRate(Gaussian1dModel self, Date fixing, Period tenor, Date referenceDate=Null< Date >(), Real const y=0.0, ext::shared_ptr< SwapIndex > swapIdx=ext::shared_ptr< SwapIndex >()) -> Real const"""
        return _quantlib_risks.Gaussian1dModel_swapRate(self, *args)

    def swapAnnuity(self, *args):
        r"""swapAnnuity(Gaussian1dModel self, Date fixing, Period tenor, Date referenceDate=Null< Date >(), Real const y=0.0, ext::shared_ptr< SwapIndex > swapIdx=ext::shared_ptr< SwapIndex >()) -> Real const"""
        return _quantlib_risks.Gaussian1dModel_swapAnnuity(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_Gaussian1dModel

# Register Gaussian1dModel in _quantlib_risks:
_quantlib_risks.Gaussian1dModel_swigregister(Gaussian1dModel)
class Gsr(Gaussian1dModel):
    r"""Proxy of C++ Gsr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, termStructure, volstepdates, volatilities, reversions, T=60.0):
        r"""__init__(Gsr self, YieldTermStructureHandle termStructure, DateVector volstepdates, QuoteHandleVector volatilities, QuoteHandleVector reversions, Real const T=60.0) -> Gsr"""
        _quantlib_risks.Gsr_swiginit(self, _quantlib_risks.new_Gsr(termStructure, volstepdates, volatilities, reversions, T))

    def calibrateVolatilitiesIterative(self, *args):
        r"""calibrateVolatilitiesIterative(Gsr self, BlackCalibrationHelperVector helpers, OptimizationMethod method, EndCriteria endCriteria, Constraint constraint=Constraint(), std::vector< Real,std::allocator< Real > > const & weights=std::vector< Real >())"""
        return _quantlib_risks.Gsr_calibrateVolatilitiesIterative(self, *args)

    def reversion(self):
        r"""reversion(Gsr self) -> Array"""
        return _quantlib_risks.Gsr_reversion(self)

    def volatility(self):
        r"""volatility(Gsr self) -> Array"""
        return _quantlib_risks.Gsr_volatility(self)

    def params(self):
        r"""params(Gsr self) -> Array"""
        return _quantlib_risks.Gsr_params(self)

    def calibrate(self, *args):
        r"""calibrate(Gsr self, CalibrationHelperVector instruments, OptimizationMethod method, EndCriteria endCriteria, Constraint constraint=Constraint(), std::vector< Real,std::allocator< Real > > const & weights=std::vector< Real >(), BoolVector fixParameters=std::vector< bool >())"""
        return _quantlib_risks.Gsr_calibrate(self, *args)

    def setParams(self, params):
        r"""setParams(Gsr self, Array params)"""
        return _quantlib_risks.Gsr_setParams(self, params)

    def value(self, params, instruments):
        r"""value(Gsr self, Array params, CalibrationHelperVector instruments) -> Real"""
        return _quantlib_risks.Gsr_value(self, params, instruments)

    def constraint(self):
        r"""constraint(Gsr self) -> ext::shared_ptr< Constraint > const &"""
        return _quantlib_risks.Gsr_constraint(self)

    def endCriteria(self):
        r"""endCriteria(Gsr self) -> EndCriteria::Type"""
        return _quantlib_risks.Gsr_endCriteria(self)

    def problemValues(self):
        r"""problemValues(Gsr self) -> Array"""
        return _quantlib_risks.Gsr_problemValues(self)

    def functionEvaluation(self):
        r"""functionEvaluation(Gsr self) -> Integer"""
        return _quantlib_risks.Gsr_functionEvaluation(self)
    __swig_destroy__ = _quantlib_risks.delete_Gsr

# Register Gsr in _quantlib_risks:
_quantlib_risks.Gsr_swigregister(Gsr)
class MarkovFunctional(Gaussian1dModel):
    r"""Proxy of C++ MarkovFunctional class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MarkovFunctional self, YieldTermStructureHandle termStructure, Real const reversion, DateVector volstepdates, std::vector< Real,std::allocator< Real > > const & volatilities, SwaptionVolatilityStructureHandle swaptionVol, DateVector swaptionExpiries, PeriodVector swaptionTenors, ext::shared_ptr< SwapIndex > const & swapIndexBase, MarkovFunctionalSettings modelSettings=MarkovFunctional::ModelSettings()) -> MarkovFunctional
        __init__(MarkovFunctional self, YieldTermStructureHandle termStructure, Real const reversion, DateVector volstepdates, std::vector< Real,std::allocator< Real > > const & volatilities, OptionletVolatilityStructureHandle capletVol, DateVector capletExpiries, ext::shared_ptr< IborIndex > const & iborIndex, MarkovFunctionalSettings modelSettings=MarkovFunctional::ModelSettings()) -> MarkovFunctional
        """
        _quantlib_risks.MarkovFunctional_swiginit(self, _quantlib_risks.new_MarkovFunctional(*args))

    def volatility(self):
        r"""volatility(MarkovFunctional self) -> Array"""
        return _quantlib_risks.MarkovFunctional_volatility(self)

    def calibrate(self, *args):
        r"""calibrate(MarkovFunctional self, CalibrationHelperVector helper, OptimizationMethod method, EndCriteria endCriteria, Constraint constraint=Constraint(), std::vector< Real,std::allocator< Real > > const & weights=std::vector< Real >(), BoolVector fixParameters=std::vector< bool >())"""
        return _quantlib_risks.MarkovFunctional_calibrate(self, *args)

    def params(self):
        r"""params(MarkovFunctional self) -> Array"""
        return _quantlib_risks.MarkovFunctional_params(self)

    def setParams(self, params):
        r"""setParams(MarkovFunctional self, Array params)"""
        return _quantlib_risks.MarkovFunctional_setParams(self, params)

    def value(self, params, instruments):
        r"""value(MarkovFunctional self, Array params, CalibrationHelperVector instruments) -> Real"""
        return _quantlib_risks.MarkovFunctional_value(self, params, instruments)

    def constraint(self):
        r"""constraint(MarkovFunctional self) -> ext::shared_ptr< Constraint > const &"""
        return _quantlib_risks.MarkovFunctional_constraint(self)

    def endCriteria(self):
        r"""endCriteria(MarkovFunctional self) -> EndCriteria::Type"""
        return _quantlib_risks.MarkovFunctional_endCriteria(self)

    def problemValues(self):
        r"""problemValues(MarkovFunctional self) -> Array"""
        return _quantlib_risks.MarkovFunctional_problemValues(self)

    def functionEvaluation(self):
        r"""functionEvaluation(MarkovFunctional self) -> Integer"""
        return _quantlib_risks.MarkovFunctional_functionEvaluation(self)
    __swig_destroy__ = _quantlib_risks.delete_MarkovFunctional

# Register MarkovFunctional in _quantlib_risks:
_quantlib_risks.MarkovFunctional_swigregister(MarkovFunctional)
class MarkovFunctionalSettings(object):
    r"""Proxy of C++ MarkovFunctional::ModelSettings class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AdjustNone = _quantlib_risks.MarkovFunctionalSettings_AdjustNone
    
    AdjustDigitals = _quantlib_risks.MarkovFunctionalSettings_AdjustDigitals
    
    AdjustYts = _quantlib_risks.MarkovFunctionalSettings_AdjustYts
    
    ExtrapolatePayoffFlat = _quantlib_risks.MarkovFunctionalSettings_ExtrapolatePayoffFlat
    
    NoPayoffExtrapolation = _quantlib_risks.MarkovFunctionalSettings_NoPayoffExtrapolation
    
    KahaleSmile = _quantlib_risks.MarkovFunctionalSettings_KahaleSmile
    
    SmileExponentialExtrapolation = _quantlib_risks.MarkovFunctionalSettings_SmileExponentialExtrapolation
    
    KahaleInterpolation = _quantlib_risks.MarkovFunctionalSettings_KahaleInterpolation
    
    SmileDeleteArbitragePoints = _quantlib_risks.MarkovFunctionalSettings_SmileDeleteArbitragePoints
    
    SabrSmile = _quantlib_risks.MarkovFunctionalSettings_SabrSmile
    

    def __init__(self, *args):
        r"""
        ModelSettings() -> MarkovFunctionalSettings
        ModelSettings(Size yGridPoints, Real yStdDevs, Size gaussHermitePoints, Real digitalGap, Real marketRateAccuracy, Real lowerRateBound, Real upperRateBound, int adjustments, std::vector< Real,std::allocator< Real > > const & smileMoneyCheckpoints=std::vector< Real >()) -> MarkovFunctionalSettings
        """
        _quantlib_risks.MarkovFunctionalSettings_swiginit(self, _quantlib_risks.new_MarkovFunctionalSettings(*args))

    def validate(self):
        r"""validate(MarkovFunctionalSettings self)"""
        return _quantlib_risks.MarkovFunctionalSettings_validate(self)
    __swig_destroy__ = _quantlib_risks.delete_MarkovFunctionalSettings

# Register MarkovFunctionalSettings in _quantlib_risks:
_quantlib_risks.MarkovFunctionalSettings_swigregister(MarkovFunctionalSettings)
class Gaussian1dCapFloorEngine(PricingEngine):
    r"""Proxy of C++ Gaussian1dCapFloorEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Gaussian1dCapFloorEngine self, ext::shared_ptr< Gaussian1dModel > const & model, int const integrationPoints=64, Real const stddevs=7.0, bool const extrapolatePayoff=True, bool const flatPayoffExtrapolation=False, YieldTermStructureHandle discountCurve=Handle< YieldTermStructure >()) -> Gaussian1dCapFloorEngine"""
        _quantlib_risks.Gaussian1dCapFloorEngine_swiginit(self, _quantlib_risks.new_Gaussian1dCapFloorEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_Gaussian1dCapFloorEngine

# Register Gaussian1dCapFloorEngine in _quantlib_risks:
_quantlib_risks.Gaussian1dCapFloorEngine_swigregister(Gaussian1dCapFloorEngine)
class Gaussian1dSwaptionEngine(PricingEngine):
    r"""Proxy of C++ Gaussian1dSwaptionEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoProb = _quantlib_risks.Gaussian1dSwaptionEngine_NoProb
    
    Naive = _quantlib_risks.Gaussian1dSwaptionEngine_Naive
    
    Digital = _quantlib_risks.Gaussian1dSwaptionEngine_Digital
    

    def __init__(self, *args):
        r"""__init__(Gaussian1dSwaptionEngine self, ext::shared_ptr< Gaussian1dModel > const & model, int const integrationPoints=64, Real const stddevs=7.0, bool const extrapolatePayoff=True, bool const flatPayoffExtrapolation=False, YieldTermStructureHandle discountCurve=Handle< YieldTermStructure >(), Gaussian1dSwaptionEngine::Probabilities const probabilities=NoProb) -> Gaussian1dSwaptionEngine"""
        _quantlib_risks.Gaussian1dSwaptionEngine_swiginit(self, _quantlib_risks.new_Gaussian1dSwaptionEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_Gaussian1dSwaptionEngine

# Register Gaussian1dSwaptionEngine in _quantlib_risks:
_quantlib_risks.Gaussian1dSwaptionEngine_swigregister(Gaussian1dSwaptionEngine)
class Gaussian1dJamshidianSwaptionEngine(PricingEngine):
    r"""Proxy of C++ Gaussian1dJamshidianSwaptionEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model):
        r"""__init__(Gaussian1dJamshidianSwaptionEngine self, ext::shared_ptr< Gaussian1dModel > const & model) -> Gaussian1dJamshidianSwaptionEngine"""
        _quantlib_risks.Gaussian1dJamshidianSwaptionEngine_swiginit(self, _quantlib_risks.new_Gaussian1dJamshidianSwaptionEngine(model))
    __swig_destroy__ = _quantlib_risks.delete_Gaussian1dJamshidianSwaptionEngine

# Register Gaussian1dJamshidianSwaptionEngine in _quantlib_risks:
_quantlib_risks.Gaussian1dJamshidianSwaptionEngine_swigregister(Gaussian1dJamshidianSwaptionEngine)
class Gaussian1dNonstandardSwaptionEngine(PricingEngine):
    r"""Proxy of C++ Gaussian1dNonstandardSwaptionEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoProb = _quantlib_risks.Gaussian1dNonstandardSwaptionEngine_NoProb
    
    Naive = _quantlib_risks.Gaussian1dNonstandardSwaptionEngine_Naive
    
    Digital = _quantlib_risks.Gaussian1dNonstandardSwaptionEngine_Digital
    

    def __init__(self, *args):
        r"""__init__(Gaussian1dNonstandardSwaptionEngine self, ext::shared_ptr< Gaussian1dModel > const & model, int const integrationPoints=64, Real const stddevs=7.0, bool const extrapolatePayoff=True, bool const flatPayoffExtrapolation=False, QuoteHandle oas=Handle< Quote >(), YieldTermStructureHandle discountCurve=Handle< YieldTermStructure >(), Gaussian1dNonstandardSwaptionEngine::Probabilities const probabilities=NoProb) -> Gaussian1dNonstandardSwaptionEngine"""
        _quantlib_risks.Gaussian1dNonstandardSwaptionEngine_swiginit(self, _quantlib_risks.new_Gaussian1dNonstandardSwaptionEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_Gaussian1dNonstandardSwaptionEngine

# Register Gaussian1dNonstandardSwaptionEngine in _quantlib_risks:
_quantlib_risks.Gaussian1dNonstandardSwaptionEngine_swigregister(Gaussian1dNonstandardSwaptionEngine)
class Gaussian1dFloatFloatSwaptionEngine(PricingEngine):
    r"""Proxy of C++ Gaussian1dFloatFloatSwaptionEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoProb = _quantlib_risks.Gaussian1dFloatFloatSwaptionEngine_NoProb
    
    Naive = _quantlib_risks.Gaussian1dFloatFloatSwaptionEngine_Naive
    
    Digital = _quantlib_risks.Gaussian1dFloatFloatSwaptionEngine_Digital
    

    def __init__(self, *args):
        r"""__init__(Gaussian1dFloatFloatSwaptionEngine self, ext::shared_ptr< Gaussian1dModel > const & model, int const integrationPoints=64, Real const stddevs=7.0, bool const extrapolatePayoff=True, bool const flatPayoffExtrapolation=False, QuoteHandle oas=Handle< Quote >(), YieldTermStructureHandle discountCurve=Handle< YieldTermStructure >(), bool const includeTodaysExercise=False, Gaussian1dFloatFloatSwaptionEngine::Probabilities const probabilities=NoProb) -> Gaussian1dFloatFloatSwaptionEngine"""
        _quantlib_risks.Gaussian1dFloatFloatSwaptionEngine_swiginit(self, _quantlib_risks.new_Gaussian1dFloatFloatSwaptionEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_Gaussian1dFloatFloatSwaptionEngine

# Register Gaussian1dFloatFloatSwaptionEngine in _quantlib_risks:
_quantlib_risks.Gaussian1dFloatFloatSwaptionEngine_swigregister(Gaussian1dFloatFloatSwaptionEngine)
class SegmentIntegral(object):
    r"""Proxy of C++ SegmentIntegral class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, intervals):
        r"""__init__(SegmentIntegral self, Size intervals) -> SegmentIntegral"""
        _quantlib_risks.SegmentIntegral_swiginit(self, _quantlib_risks.new_SegmentIntegral(intervals))

    def numberOfEvaluations(self):
        r"""numberOfEvaluations(SegmentIntegral self) -> Size"""
        return _quantlib_risks.SegmentIntegral_numberOfEvaluations(self)

    def __call__(self, pyFunction, a, b):
        r"""__call__(SegmentIntegral self, PyObject * pyFunction, Real a, Real b) -> Real"""
        return _quantlib_risks.SegmentIntegral___call__(self, pyFunction, a, b)
    __swig_destroy__ = _quantlib_risks.delete_SegmentIntegral

# Register SegmentIntegral in _quantlib_risks:
_quantlib_risks.SegmentIntegral_swigregister(SegmentIntegral)
class TrapezoidIntegralDefault(object):
    r"""Proxy of C++ TrapezoidIntegral< Default > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, accuracy, maxIterations):
        r"""__init__(TrapezoidIntegralDefault self, Real accuracy, Size maxIterations) -> TrapezoidIntegralDefault"""
        _quantlib_risks.TrapezoidIntegralDefault_swiginit(self, _quantlib_risks.new_TrapezoidIntegralDefault(accuracy, maxIterations))

    def numberOfEvaluations(self):
        r"""numberOfEvaluations(TrapezoidIntegralDefault self) -> Size"""
        return _quantlib_risks.TrapezoidIntegralDefault_numberOfEvaluations(self)

    def __call__(self, pyFunction, a, b):
        r"""__call__(TrapezoidIntegralDefault self, PyObject * pyFunction, Real a, Real b) -> Real"""
        return _quantlib_risks.TrapezoidIntegralDefault___call__(self, pyFunction, a, b)
    __swig_destroy__ = _quantlib_risks.delete_TrapezoidIntegralDefault

# Register TrapezoidIntegralDefault in _quantlib_risks:
_quantlib_risks.TrapezoidIntegralDefault_swigregister(TrapezoidIntegralDefault)
class TrapezoidIntegralMidPoint(object):
    r"""Proxy of C++ TrapezoidIntegral< MidPoint > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, accuracy, maxIterations):
        r"""__init__(TrapezoidIntegralMidPoint self, Real accuracy, Size maxIterations) -> TrapezoidIntegralMidPoint"""
        _quantlib_risks.TrapezoidIntegralMidPoint_swiginit(self, _quantlib_risks.new_TrapezoidIntegralMidPoint(accuracy, maxIterations))

    def numberOfEvaluations(self):
        r"""numberOfEvaluations(TrapezoidIntegralMidPoint self) -> Size"""
        return _quantlib_risks.TrapezoidIntegralMidPoint_numberOfEvaluations(self)

    def __call__(self, pyFunction, a, b):
        r"""__call__(TrapezoidIntegralMidPoint self, PyObject * pyFunction, Real a, Real b) -> Real"""
        return _quantlib_risks.TrapezoidIntegralMidPoint___call__(self, pyFunction, a, b)
    __swig_destroy__ = _quantlib_risks.delete_TrapezoidIntegralMidPoint

# Register TrapezoidIntegralMidPoint in _quantlib_risks:
_quantlib_risks.TrapezoidIntegralMidPoint_swigregister(TrapezoidIntegralMidPoint)
class SimpsonIntegral(object):
    r"""Proxy of C++ SimpsonIntegral class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, accuracy, maxIterations):
        r"""__init__(SimpsonIntegral self, Real accuracy, Size maxIterations) -> SimpsonIntegral"""
        _quantlib_risks.SimpsonIntegral_swiginit(self, _quantlib_risks.new_SimpsonIntegral(accuracy, maxIterations))

    def numberOfEvaluations(self):
        r"""numberOfEvaluations(SimpsonIntegral self) -> Size"""
        return _quantlib_risks.SimpsonIntegral_numberOfEvaluations(self)

    def __call__(self, pyFunction, a, b):
        r"""__call__(SimpsonIntegral self, PyObject * pyFunction, Real a, Real b) -> Real"""
        return _quantlib_risks.SimpsonIntegral___call__(self, pyFunction, a, b)
    __swig_destroy__ = _quantlib_risks.delete_SimpsonIntegral

# Register SimpsonIntegral in _quantlib_risks:
_quantlib_risks.SimpsonIntegral_swigregister(SimpsonIntegral)
class GaussKronrodAdaptive(object):
    r"""Proxy of C++ GaussKronrodAdaptive class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(GaussKronrodAdaptive self, Real tolerance, Size maxFunctionEvaluations=Null< Size >()) -> GaussKronrodAdaptive"""
        _quantlib_risks.GaussKronrodAdaptive_swiginit(self, _quantlib_risks.new_GaussKronrodAdaptive(*args))

    def numberOfEvaluations(self):
        r"""numberOfEvaluations(GaussKronrodAdaptive self) -> Size"""
        return _quantlib_risks.GaussKronrodAdaptive_numberOfEvaluations(self)

    def __call__(self, pyFunction, a, b):
        r"""__call__(GaussKronrodAdaptive self, PyObject * pyFunction, Real a, Real b) -> Real"""
        return _quantlib_risks.GaussKronrodAdaptive___call__(self, pyFunction, a, b)
    __swig_destroy__ = _quantlib_risks.delete_GaussKronrodAdaptive

# Register GaussKronrodAdaptive in _quantlib_risks:
_quantlib_risks.GaussKronrodAdaptive_swigregister(GaussKronrodAdaptive)
class GaussKronrodNonAdaptive(object):
    r"""Proxy of C++ GaussKronrodNonAdaptive class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, absoluteAccuracy, maxEvaluations, relativeAccuracy):
        r"""__init__(GaussKronrodNonAdaptive self, Real absoluteAccuracy, Size maxEvaluations, Real relativeAccuracy) -> GaussKronrodNonAdaptive"""
        _quantlib_risks.GaussKronrodNonAdaptive_swiginit(self, _quantlib_risks.new_GaussKronrodNonAdaptive(absoluteAccuracy, maxEvaluations, relativeAccuracy))

    def numberOfEvaluations(self):
        r"""numberOfEvaluations(GaussKronrodNonAdaptive self) -> Size"""
        return _quantlib_risks.GaussKronrodNonAdaptive_numberOfEvaluations(self)

    def __call__(self, pyFunction, a, b):
        r"""__call__(GaussKronrodNonAdaptive self, PyObject * pyFunction, Real a, Real b) -> Real"""
        return _quantlib_risks.GaussKronrodNonAdaptive___call__(self, pyFunction, a, b)
    __swig_destroy__ = _quantlib_risks.delete_GaussKronrodNonAdaptive

# Register GaussKronrodNonAdaptive in _quantlib_risks:
_quantlib_risks.GaussKronrodNonAdaptive_swigregister(GaussKronrodNonAdaptive)
class GaussLobattoIntegral(object):
    r"""Proxy of C++ GaussLobattoIntegral class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(GaussLobattoIntegral self, Size maxIterations, Real absAccuracy, Real relAccuracy=Null< Real >(), bool useConvergenceEstimate=True) -> GaussLobattoIntegral"""
        _quantlib_risks.GaussLobattoIntegral_swiginit(self, _quantlib_risks.new_GaussLobattoIntegral(*args))

    def numberOfEvaluations(self):
        r"""numberOfEvaluations(GaussLobattoIntegral self) -> Size"""
        return _quantlib_risks.GaussLobattoIntegral_numberOfEvaluations(self)

    def __call__(self, pyFunction, a, b):
        r"""__call__(GaussLobattoIntegral self, PyObject * pyFunction, Real a, Real b) -> Real"""
        return _quantlib_risks.GaussLobattoIntegral___call__(self, pyFunction, a, b)
    __swig_destroy__ = _quantlib_risks.delete_GaussLobattoIntegral

# Register GaussLobattoIntegral in _quantlib_risks:
_quantlib_risks.GaussLobattoIntegral_swigregister(GaussLobattoIntegral)
class GaussianQuadrature(object):
    r"""Proxy of C++ GaussianQuadrature class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def order(self):
        r"""order(GaussianQuadrature self) -> Size"""
        return _quantlib_risks.GaussianQuadrature_order(self)

    def weights(self):
        r"""weights(GaussianQuadrature self) -> Array"""
        return _quantlib_risks.GaussianQuadrature_weights(self)

    def x(self):
        r"""x(GaussianQuadrature self) -> Array"""
        return _quantlib_risks.GaussianQuadrature_x(self)

    def __call__(self, pyFunction):
        r"""__call__(GaussianQuadrature self, PyObject * pyFunction) -> Real"""
        return _quantlib_risks.GaussianQuadrature___call__(self, pyFunction)
    __swig_destroy__ = _quantlib_risks.delete_GaussianQuadrature

# Register GaussianQuadrature in _quantlib_risks:
_quantlib_risks.GaussianQuadrature_swigregister(GaussianQuadrature)
class GaussLaguerreIntegration(GaussianQuadrature):
    r"""Proxy of C++ GaussLaguerreIntegration class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n, s=0.0):
        r"""__init__(GaussLaguerreIntegration self, Size n, Real s=0.0) -> GaussLaguerreIntegration"""
        _quantlib_risks.GaussLaguerreIntegration_swiginit(self, _quantlib_risks.new_GaussLaguerreIntegration(n, s))
    __swig_destroy__ = _quantlib_risks.delete_GaussLaguerreIntegration

# Register GaussLaguerreIntegration in _quantlib_risks:
_quantlib_risks.GaussLaguerreIntegration_swigregister(GaussLaguerreIntegration)
class GaussHermiteIntegration(GaussianQuadrature):
    r"""Proxy of C++ GaussHermiteIntegration class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n, mu=0.0):
        r"""__init__(GaussHermiteIntegration self, Size n, Real mu=0.0) -> GaussHermiteIntegration"""
        _quantlib_risks.GaussHermiteIntegration_swiginit(self, _quantlib_risks.new_GaussHermiteIntegration(n, mu))
    __swig_destroy__ = _quantlib_risks.delete_GaussHermiteIntegration

# Register GaussHermiteIntegration in _quantlib_risks:
_quantlib_risks.GaussHermiteIntegration_swigregister(GaussHermiteIntegration)
class GaussJacobiIntegration(GaussianQuadrature):
    r"""Proxy of C++ GaussJacobiIntegration class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n, alpha, beta):
        r"""__init__(GaussJacobiIntegration self, Size n, Real alpha, Real beta) -> GaussJacobiIntegration"""
        _quantlib_risks.GaussJacobiIntegration_swiginit(self, _quantlib_risks.new_GaussJacobiIntegration(n, alpha, beta))
    __swig_destroy__ = _quantlib_risks.delete_GaussJacobiIntegration

# Register GaussJacobiIntegration in _quantlib_risks:
_quantlib_risks.GaussJacobiIntegration_swigregister(GaussJacobiIntegration)
class GaussHyperbolicIntegration(GaussianQuadrature):
    r"""Proxy of C++ GaussHyperbolicIntegration class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n):
        r"""__init__(GaussHyperbolicIntegration self, Size n) -> GaussHyperbolicIntegration"""
        _quantlib_risks.GaussHyperbolicIntegration_swiginit(self, _quantlib_risks.new_GaussHyperbolicIntegration(n))
    __swig_destroy__ = _quantlib_risks.delete_GaussHyperbolicIntegration

# Register GaussHyperbolicIntegration in _quantlib_risks:
_quantlib_risks.GaussHyperbolicIntegration_swigregister(GaussHyperbolicIntegration)
class GaussLegendreIntegration(GaussianQuadrature):
    r"""Proxy of C++ GaussLegendreIntegration class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n):
        r"""__init__(GaussLegendreIntegration self, Size n) -> GaussLegendreIntegration"""
        _quantlib_risks.GaussLegendreIntegration_swiginit(self, _quantlib_risks.new_GaussLegendreIntegration(n))
    __swig_destroy__ = _quantlib_risks.delete_GaussLegendreIntegration

# Register GaussLegendreIntegration in _quantlib_risks:
_quantlib_risks.GaussLegendreIntegration_swigregister(GaussLegendreIntegration)
class GaussChebyshevIntegration(GaussianQuadrature):
    r"""Proxy of C++ GaussChebyshevIntegration class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n):
        r"""__init__(GaussChebyshevIntegration self, Size n) -> GaussChebyshevIntegration"""
        _quantlib_risks.GaussChebyshevIntegration_swiginit(self, _quantlib_risks.new_GaussChebyshevIntegration(n))
    __swig_destroy__ = _quantlib_risks.delete_GaussChebyshevIntegration

# Register GaussChebyshevIntegration in _quantlib_risks:
_quantlib_risks.GaussChebyshevIntegration_swigregister(GaussChebyshevIntegration)
class GaussChebyshev2ndIntegration(GaussianQuadrature):
    r"""Proxy of C++ GaussChebyshev2ndIntegration class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n):
        r"""__init__(GaussChebyshev2ndIntegration self, Size n) -> GaussChebyshev2ndIntegration"""
        _quantlib_risks.GaussChebyshev2ndIntegration_swiginit(self, _quantlib_risks.new_GaussChebyshev2ndIntegration(n))
    __swig_destroy__ = _quantlib_risks.delete_GaussChebyshev2ndIntegration

# Register GaussChebyshev2ndIntegration in _quantlib_risks:
_quantlib_risks.GaussChebyshev2ndIntegration_swigregister(GaussChebyshev2ndIntegration)
class GaussGegenbauerIntegration(GaussianQuadrature):
    r"""Proxy of C++ GaussGegenbauerIntegration class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n, lambda_parameter):
        r"""__init__(GaussGegenbauerIntegration self, Size n, Real lambda_parameter) -> GaussGegenbauerIntegration"""
        _quantlib_risks.GaussGegenbauerIntegration_swiginit(self, _quantlib_risks.new_GaussGegenbauerIntegration(n, lambda_parameter))
    __swig_destroy__ = _quantlib_risks.delete_GaussGegenbauerIntegration

# Register GaussGegenbauerIntegration in _quantlib_risks:
_quantlib_risks.GaussGegenbauerIntegration_swigregister(GaussGegenbauerIntegration)
class TanhSinhIntegral(object):
    r"""Proxy of C++ TanhSinhIntegral class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(TanhSinhIntegral self, Real relTolerance=std::sqrt(std::numeric_limits<Real>::epsilon()), Size maxRefinements=15, Real minComplement=std::numeric_limits< Real >::min()*4) -> TanhSinhIntegral"""
        _quantlib_risks.TanhSinhIntegral_swiginit(self, _quantlib_risks.new_TanhSinhIntegral(*args))

    def numberOfEvaluations(self):
        r"""numberOfEvaluations(TanhSinhIntegral self) -> Size"""
        return _quantlib_risks.TanhSinhIntegral_numberOfEvaluations(self)

    def __call__(self, pyFunction, a, b):
        r"""__call__(TanhSinhIntegral self, PyObject * pyFunction, Real a, Real b) -> Real"""
        return _quantlib_risks.TanhSinhIntegral___call__(self, pyFunction, a, b)
    __swig_destroy__ = _quantlib_risks.delete_TanhSinhIntegral

# Register TanhSinhIntegral in _quantlib_risks:
_quantlib_risks.TanhSinhIntegral_swigregister(TanhSinhIntegral)
class ExpSinhIntegral(object):
    r"""Proxy of C++ ExpSinhIntegral class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ExpSinhIntegral self, Real relTolerance=std::sqrt(std::numeric_limits<Real>::epsilon()), Size maxRefinements=9) -> ExpSinhIntegral"""
        _quantlib_risks.ExpSinhIntegral_swiginit(self, _quantlib_risks.new_ExpSinhIntegral(*args))

    def integrate(self, pyFunction):
        r"""integrate(ExpSinhIntegral self, PyObject * pyFunction) -> Real"""
        return _quantlib_risks.ExpSinhIntegral_integrate(self, pyFunction)

    def numberOfEvaluations(self):
        r"""numberOfEvaluations(ExpSinhIntegral self) -> Size"""
        return _quantlib_risks.ExpSinhIntegral_numberOfEvaluations(self)

    def __call__(self, pyFunction, a, b):
        r"""__call__(ExpSinhIntegral self, PyObject * pyFunction, Real a, Real b) -> Real"""
        return _quantlib_risks.ExpSinhIntegral___call__(self, pyFunction, a, b)
    __swig_destroy__ = _quantlib_risks.delete_ExpSinhIntegral

# Register ExpSinhIntegral in _quantlib_risks:
_quantlib_risks.ExpSinhIntegral_swigregister(ExpSinhIntegral)
class LocalConstantVol(LocalVolTermStructure):
    r"""Proxy of C++ LocalConstantVol class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(LocalConstantVol self, Date referenceDate, Volatility volatility, DayCounter dayCounter) -> LocalConstantVol
        __init__(LocalConstantVol self, Date referenceDate, QuoteHandle volatility, DayCounter dayCounter) -> LocalConstantVol
        __init__(LocalConstantVol self, Integer settlementDays, Calendar calendar, Volatility volatility, DayCounter dayCounter) -> LocalConstantVol
        __init__(LocalConstantVol self, Integer settlementDays, Calendar calendar, QuoteHandle volatility, DayCounter dayCounter) -> LocalConstantVol
        """
        _quantlib_risks.LocalConstantVol_swiginit(self, _quantlib_risks.new_LocalConstantVol(*args))
    __swig_destroy__ = _quantlib_risks.delete_LocalConstantVol

# Register LocalConstantVol in _quantlib_risks:
_quantlib_risks.LocalConstantVol_swigregister(LocalConstantVol)
class LocalVolSurface(LocalVolTermStructure):
    r"""Proxy of C++ LocalVolSurface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(LocalVolSurface self, BlackVolTermStructureHandle blackTS, YieldTermStructureHandle riskFreeTS, YieldTermStructureHandle dividendTS, QuoteHandle underlying) -> LocalVolSurface
        __init__(LocalVolSurface self, BlackVolTermStructureHandle blackTS, YieldTermStructureHandle riskFreeTS, YieldTermStructureHandle dividendTS, Real underlying) -> LocalVolSurface
        """
        _quantlib_risks.LocalVolSurface_swiginit(self, _quantlib_risks.new_LocalVolSurface(*args))
    __swig_destroy__ = _quantlib_risks.delete_LocalVolSurface

# Register LocalVolSurface in _quantlib_risks:
_quantlib_risks.LocalVolSurface_swigregister(LocalVolSurface)
class NoExceptLocalVolSurface(LocalVolSurface):
    r"""Proxy of C++ NoExceptLocalVolSurface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(NoExceptLocalVolSurface self, BlackVolTermStructureHandle blackTS, YieldTermStructureHandle riskFreeTS, YieldTermStructureHandle dividendTS, QuoteHandle underlying, Real illegalLocalVolOverwrite) -> NoExceptLocalVolSurface
        __init__(NoExceptLocalVolSurface self, BlackVolTermStructureHandle blackTS, YieldTermStructureHandle riskFreeTS, YieldTermStructureHandle dividendTS, Real underlying, Real illegalLocalVolOverwrite) -> NoExceptLocalVolSurface
        """
        _quantlib_risks.NoExceptLocalVolSurface_swiginit(self, _quantlib_risks.new_NoExceptLocalVolSurface(*args))
    __swig_destroy__ = _quantlib_risks.delete_NoExceptLocalVolSurface

# Register NoExceptLocalVolSurface in _quantlib_risks:
_quantlib_risks.NoExceptLocalVolSurface_swigregister(NoExceptLocalVolSurface)
class FixedLocalVolSurface(LocalVolTermStructure):
    r"""Proxy of C++ FixedLocalVolSurface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ConstantExtrapolation = _quantlib_risks.FixedLocalVolSurface_ConstantExtrapolation
    
    InterpolatorDefaultExtrapolation = _quantlib_risks.FixedLocalVolSurface_InterpolatorDefaultExtrapolation
    

    def __init__(self, *args):
        r"""
        __init__(FixedLocalVolSurface self, Date referenceDate, DateVector dates, std::vector< Real,std::allocator< Real > > const & strikes, Matrix localVolMatrix, DayCounter dayCounter, FixedLocalVolSurface::Extrapolation lowerExtrapolation=ConstantExtrapolation, FixedLocalVolSurface::Extrapolation upperExtrapolation=ConstantExtrapolation) -> FixedLocalVolSurface
        __init__(FixedLocalVolSurface self, Date referenceDate, std::vector< Time,std::allocator< Time > > const & times, std::vector< Real,std::allocator< Real > > const & strikes, Matrix localVolMatrix, DayCounter dayCounter, FixedLocalVolSurface::Extrapolation lowerExtrapolation=ConstantExtrapolation, FixedLocalVolSurface::Extrapolation upperExtrapolation=ConstantExtrapolation) -> FixedLocalVolSurface
        __init__(FixedLocalVolSurface self, Date referenceDate, std::vector< Time,std::allocator< Time > > const & times, std::vector< std::vector< Real,std::allocator< Real > >,std::allocator< std::vector< Real,std::allocator< Real > > > > const & strikes, Matrix localVolMatrix, DayCounter dayCounter, FixedLocalVolSurface::Extrapolation lowerExtrapolation=ConstantExtrapolation, FixedLocalVolSurface::Extrapolation upperExtrapolation=ConstantExtrapolation) -> FixedLocalVolSurface
        """
        _quantlib_risks.FixedLocalVolSurface_swiginit(self, _quantlib_risks.new_FixedLocalVolSurface(*args))

    def setInterpolation(self, *args):
        r"""setInterpolation(FixedLocalVolSurface self, std::string const & interpolator="")"""
        return _quantlib_risks.FixedLocalVolSurface_setInterpolation(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_FixedLocalVolSurface

# Register FixedLocalVolSurface in _quantlib_risks:
_quantlib_risks.FixedLocalVolSurface_swigregister(FixedLocalVolSurface)
class GridModelLocalVolSurface(LocalVolTermStructure, CalibratedModel):
    r"""Proxy of C++ GridModelLocalVolSurface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(GridModelLocalVolSurface self, Date referenceDate, DateVector dates, std::vector< std::vector< Real,std::allocator< Real > >,std::allocator< std::vector< Real,std::allocator< Real > > > > const & strikes, DayCounter dayCounter, GridModelLocalVolSurface::Extrapolation lowerExtrapolation=ConstantExtrapolation, GridModelLocalVolSurface::Extrapolation upperExtrapolation=ConstantExtrapolation) -> GridModelLocalVolSurface"""
        _quantlib_risks.GridModelLocalVolSurface_swiginit(self, _quantlib_risks.new_GridModelLocalVolSurface(*args))
    __swig_destroy__ = _quantlib_risks.delete_GridModelLocalVolSurface

# Register GridModelLocalVolSurface in _quantlib_risks:
_quantlib_risks.GridModelLocalVolSurface_swigregister(GridModelLocalVolSurface)
class SampleNumber(object):
    r"""Proxy of C++ Sample< Real > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self):
        r"""value(SampleNumber self) -> xad::AReal< double > const &"""
        return _quantlib_risks.SampleNumber_value(self)

    def weight(self):
        r"""weight(SampleNumber self) -> Real"""
        return _quantlib_risks.SampleNumber_weight(self)
    __swig_destroy__ = _quantlib_risks.delete_SampleNumber

# Register SampleNumber in _quantlib_risks:
_quantlib_risks.SampleNumber_swigregister(SampleNumber)
class SampleArray(object):
    r"""Proxy of C++ Sample< Array > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self):
        r"""value(SampleArray self) -> Array"""
        return _quantlib_risks.SampleArray_value(self)

    def weight(self):
        r"""weight(SampleArray self) -> Real"""
        return _quantlib_risks.SampleArray_weight(self)
    __swig_destroy__ = _quantlib_risks.delete_SampleArray

# Register SampleArray in _quantlib_risks:
_quantlib_risks.SampleArray_swigregister(SampleArray)
class SampleRealVector(object):
    r"""Proxy of C++ Sample< std::vector< Real > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self):
        r"""value(SampleRealVector self) -> std::vector< xad::AReal< double >,std::allocator< xad::AReal< double > > > const &"""
        return _quantlib_risks.SampleRealVector_value(self)

    def weight(self):
        r"""weight(SampleRealVector self) -> Real"""
        return _quantlib_risks.SampleRealVector_weight(self)
    __swig_destroy__ = _quantlib_risks.delete_SampleRealVector

# Register SampleRealVector in _quantlib_risks:
_quantlib_risks.SampleRealVector_swigregister(SampleRealVector)
class LecuyerUniformRng(object):
    r"""Proxy of C++ LecuyerUniformRng class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        r"""__init__(LecuyerUniformRng self, BigInteger seed=0) -> LecuyerUniformRng"""
        _quantlib_risks.LecuyerUniformRng_swiginit(self, _quantlib_risks.new_LecuyerUniformRng(seed))

    def next(self):
        r"""next(LecuyerUniformRng self) -> SampleNumber"""
        return _quantlib_risks.LecuyerUniformRng_next(self)
    __swig_destroy__ = _quantlib_risks.delete_LecuyerUniformRng

# Register LecuyerUniformRng in _quantlib_risks:
_quantlib_risks.LecuyerUniformRng_swigregister(LecuyerUniformRng)
class KnuthUniformRng(object):
    r"""Proxy of C++ KnuthUniformRng class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        r"""__init__(KnuthUniformRng self, BigInteger seed=0) -> KnuthUniformRng"""
        _quantlib_risks.KnuthUniformRng_swiginit(self, _quantlib_risks.new_KnuthUniformRng(seed))

    def next(self):
        r"""next(KnuthUniformRng self) -> SampleNumber"""
        return _quantlib_risks.KnuthUniformRng_next(self)
    __swig_destroy__ = _quantlib_risks.delete_KnuthUniformRng

# Register KnuthUniformRng in _quantlib_risks:
_quantlib_risks.KnuthUniformRng_swigregister(KnuthUniformRng)
class MersenneTwisterUniformRng(object):
    r"""Proxy of C++ MersenneTwisterUniformRng class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        r"""__init__(MersenneTwisterUniformRng self, BigInteger seed=0) -> MersenneTwisterUniformRng"""
        _quantlib_risks.MersenneTwisterUniformRng_swiginit(self, _quantlib_risks.new_MersenneTwisterUniformRng(seed))

    def next(self):
        r"""next(MersenneTwisterUniformRng self) -> SampleNumber"""
        return _quantlib_risks.MersenneTwisterUniformRng_next(self)
    __swig_destroy__ = _quantlib_risks.delete_MersenneTwisterUniformRng

# Register MersenneTwisterUniformRng in _quantlib_risks:
_quantlib_risks.MersenneTwisterUniformRng_swigregister(MersenneTwisterUniformRng)
class Xoshiro256StarStarUniformRng(object):
    r"""Proxy of C++ Xoshiro256StarStarUniformRng class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        r"""__init__(Xoshiro256StarStarUniformRng self, BigInteger seed=0) -> Xoshiro256StarStarUniformRng"""
        _quantlib_risks.Xoshiro256StarStarUniformRng_swiginit(self, _quantlib_risks.new_Xoshiro256StarStarUniformRng(seed))

    def next(self):
        r"""next(Xoshiro256StarStarUniformRng self) -> SampleNumber"""
        return _quantlib_risks.Xoshiro256StarStarUniformRng_next(self)
    __swig_destroy__ = _quantlib_risks.delete_Xoshiro256StarStarUniformRng

# Register Xoshiro256StarStarUniformRng in _quantlib_risks:
_quantlib_risks.Xoshiro256StarStarUniformRng_swigregister(Xoshiro256StarStarUniformRng)
class UniformRandomGenerator(object):
    r"""Proxy of C++ UniformRandomGenerator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        r"""__init__(UniformRandomGenerator self, BigInteger seed=0) -> UniformRandomGenerator"""
        _quantlib_risks.UniformRandomGenerator_swiginit(self, _quantlib_risks.new_UniformRandomGenerator(seed))

    def next(self):
        r"""next(UniformRandomGenerator self) -> SampleNumber"""
        return _quantlib_risks.UniformRandomGenerator_next(self)

    def nextValue(self):
        r"""nextValue(UniformRandomGenerator self) -> Real"""
        return _quantlib_risks.UniformRandomGenerator_nextValue(self)
    __swig_destroy__ = _quantlib_risks.delete_UniformRandomGenerator

# Register UniformRandomGenerator in _quantlib_risks:
_quantlib_risks.UniformRandomGenerator_swigregister(UniformRandomGenerator)
class CentralLimitLecuyerGaussianRng(object):
    r"""Proxy of C++ CLGaussianRng< LecuyerUniformRng > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        r"""__init__(CentralLimitLecuyerGaussianRng self, LecuyerUniformRng rng) -> CentralLimitLecuyerGaussianRng"""
        _quantlib_risks.CentralLimitLecuyerGaussianRng_swiginit(self, _quantlib_risks.new_CentralLimitLecuyerGaussianRng(rng))

    def next(self):
        r"""next(CentralLimitLecuyerGaussianRng self) -> SampleNumber"""
        return _quantlib_risks.CentralLimitLecuyerGaussianRng_next(self)
    __swig_destroy__ = _quantlib_risks.delete_CentralLimitLecuyerGaussianRng

# Register CentralLimitLecuyerGaussianRng in _quantlib_risks:
_quantlib_risks.CentralLimitLecuyerGaussianRng_swigregister(CentralLimitLecuyerGaussianRng)
class CentralLimitKnuthGaussianRng(object):
    r"""Proxy of C++ CLGaussianRng< KnuthUniformRng > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        r"""__init__(CentralLimitKnuthGaussianRng self, KnuthUniformRng rng) -> CentralLimitKnuthGaussianRng"""
        _quantlib_risks.CentralLimitKnuthGaussianRng_swiginit(self, _quantlib_risks.new_CentralLimitKnuthGaussianRng(rng))

    def next(self):
        r"""next(CentralLimitKnuthGaussianRng self) -> SampleNumber"""
        return _quantlib_risks.CentralLimitKnuthGaussianRng_next(self)
    __swig_destroy__ = _quantlib_risks.delete_CentralLimitKnuthGaussianRng

# Register CentralLimitKnuthGaussianRng in _quantlib_risks:
_quantlib_risks.CentralLimitKnuthGaussianRng_swigregister(CentralLimitKnuthGaussianRng)
class CentralLimitMersenneTwisterGaussianRng(object):
    r"""Proxy of C++ CLGaussianRng< MersenneTwisterUniformRng > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        r"""__init__(CentralLimitMersenneTwisterGaussianRng self, MersenneTwisterUniformRng rng) -> CentralLimitMersenneTwisterGaussianRng"""
        _quantlib_risks.CentralLimitMersenneTwisterGaussianRng_swiginit(self, _quantlib_risks.new_CentralLimitMersenneTwisterGaussianRng(rng))

    def next(self):
        r"""next(CentralLimitMersenneTwisterGaussianRng self) -> SampleNumber"""
        return _quantlib_risks.CentralLimitMersenneTwisterGaussianRng_next(self)
    __swig_destroy__ = _quantlib_risks.delete_CentralLimitMersenneTwisterGaussianRng

# Register CentralLimitMersenneTwisterGaussianRng in _quantlib_risks:
_quantlib_risks.CentralLimitMersenneTwisterGaussianRng_swigregister(CentralLimitMersenneTwisterGaussianRng)
class CentralLimitXoshiro256StarStarGaussianRng(object):
    r"""Proxy of C++ CLGaussianRng< Xoshiro256StarStarUniformRng > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        r"""__init__(CentralLimitXoshiro256StarStarGaussianRng self, Xoshiro256StarStarUniformRng rng) -> CentralLimitXoshiro256StarStarGaussianRng"""
        _quantlib_risks.CentralLimitXoshiro256StarStarGaussianRng_swiginit(self, _quantlib_risks.new_CentralLimitXoshiro256StarStarGaussianRng(rng))

    def next(self):
        r"""next(CentralLimitXoshiro256StarStarGaussianRng self) -> SampleNumber"""
        return _quantlib_risks.CentralLimitXoshiro256StarStarGaussianRng_next(self)
    __swig_destroy__ = _quantlib_risks.delete_CentralLimitXoshiro256StarStarGaussianRng

# Register CentralLimitXoshiro256StarStarGaussianRng in _quantlib_risks:
_quantlib_risks.CentralLimitXoshiro256StarStarGaussianRng_swigregister(CentralLimitXoshiro256StarStarGaussianRng)
class BoxMullerLecuyerGaussianRng(object):
    r"""Proxy of C++ BoxMullerGaussianRng< LecuyerUniformRng > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        r"""__init__(BoxMullerLecuyerGaussianRng self, LecuyerUniformRng rng) -> BoxMullerLecuyerGaussianRng"""
        _quantlib_risks.BoxMullerLecuyerGaussianRng_swiginit(self, _quantlib_risks.new_BoxMullerLecuyerGaussianRng(rng))

    def next(self):
        r"""next(BoxMullerLecuyerGaussianRng self) -> SampleNumber"""
        return _quantlib_risks.BoxMullerLecuyerGaussianRng_next(self)
    __swig_destroy__ = _quantlib_risks.delete_BoxMullerLecuyerGaussianRng

# Register BoxMullerLecuyerGaussianRng in _quantlib_risks:
_quantlib_risks.BoxMullerLecuyerGaussianRng_swigregister(BoxMullerLecuyerGaussianRng)
class BoxMullerKnuthGaussianRng(object):
    r"""Proxy of C++ BoxMullerGaussianRng< KnuthUniformRng > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        r"""__init__(BoxMullerKnuthGaussianRng self, KnuthUniformRng rng) -> BoxMullerKnuthGaussianRng"""
        _quantlib_risks.BoxMullerKnuthGaussianRng_swiginit(self, _quantlib_risks.new_BoxMullerKnuthGaussianRng(rng))

    def next(self):
        r"""next(BoxMullerKnuthGaussianRng self) -> SampleNumber"""
        return _quantlib_risks.BoxMullerKnuthGaussianRng_next(self)
    __swig_destroy__ = _quantlib_risks.delete_BoxMullerKnuthGaussianRng

# Register BoxMullerKnuthGaussianRng in _quantlib_risks:
_quantlib_risks.BoxMullerKnuthGaussianRng_swigregister(BoxMullerKnuthGaussianRng)
class BoxMullerMersenneTwisterGaussianRng(object):
    r"""Proxy of C++ BoxMullerGaussianRng< MersenneTwisterUniformRng > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        r"""__init__(BoxMullerMersenneTwisterGaussianRng self, MersenneTwisterUniformRng rng) -> BoxMullerMersenneTwisterGaussianRng"""
        _quantlib_risks.BoxMullerMersenneTwisterGaussianRng_swiginit(self, _quantlib_risks.new_BoxMullerMersenneTwisterGaussianRng(rng))

    def next(self):
        r"""next(BoxMullerMersenneTwisterGaussianRng self) -> SampleNumber"""
        return _quantlib_risks.BoxMullerMersenneTwisterGaussianRng_next(self)
    __swig_destroy__ = _quantlib_risks.delete_BoxMullerMersenneTwisterGaussianRng

# Register BoxMullerMersenneTwisterGaussianRng in _quantlib_risks:
_quantlib_risks.BoxMullerMersenneTwisterGaussianRng_swigregister(BoxMullerMersenneTwisterGaussianRng)
class BoxMullerXoshiro256StarStarGaussianRng(object):
    r"""Proxy of C++ BoxMullerGaussianRng< Xoshiro256StarStarUniformRng > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        r"""__init__(BoxMullerXoshiro256StarStarGaussianRng self, Xoshiro256StarStarUniformRng rng) -> BoxMullerXoshiro256StarStarGaussianRng"""
        _quantlib_risks.BoxMullerXoshiro256StarStarGaussianRng_swiginit(self, _quantlib_risks.new_BoxMullerXoshiro256StarStarGaussianRng(rng))

    def next(self):
        r"""next(BoxMullerXoshiro256StarStarGaussianRng self) -> SampleNumber"""
        return _quantlib_risks.BoxMullerXoshiro256StarStarGaussianRng_next(self)
    __swig_destroy__ = _quantlib_risks.delete_BoxMullerXoshiro256StarStarGaussianRng

# Register BoxMullerXoshiro256StarStarGaussianRng in _quantlib_risks:
_quantlib_risks.BoxMullerXoshiro256StarStarGaussianRng_swigregister(BoxMullerXoshiro256StarStarGaussianRng)
class MoroInvCumulativeLecuyerGaussianRng(object):
    r"""Proxy of C++ InverseCumulativeRng< LecuyerUniformRng,MoroInverseCumulativeNormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        r"""__init__(MoroInvCumulativeLecuyerGaussianRng self, LecuyerUniformRng rng) -> MoroInvCumulativeLecuyerGaussianRng"""
        _quantlib_risks.MoroInvCumulativeLecuyerGaussianRng_swiginit(self, _quantlib_risks.new_MoroInvCumulativeLecuyerGaussianRng(rng))

    def next(self):
        r"""next(MoroInvCumulativeLecuyerGaussianRng self) -> SampleNumber"""
        return _quantlib_risks.MoroInvCumulativeLecuyerGaussianRng_next(self)
    __swig_destroy__ = _quantlib_risks.delete_MoroInvCumulativeLecuyerGaussianRng

# Register MoroInvCumulativeLecuyerGaussianRng in _quantlib_risks:
_quantlib_risks.MoroInvCumulativeLecuyerGaussianRng_swigregister(MoroInvCumulativeLecuyerGaussianRng)
class MoroInvCumulativeKnuthGaussianRng(object):
    r"""Proxy of C++ InverseCumulativeRng< KnuthUniformRng,MoroInverseCumulativeNormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        r"""__init__(MoroInvCumulativeKnuthGaussianRng self, KnuthUniformRng rng) -> MoroInvCumulativeKnuthGaussianRng"""
        _quantlib_risks.MoroInvCumulativeKnuthGaussianRng_swiginit(self, _quantlib_risks.new_MoroInvCumulativeKnuthGaussianRng(rng))

    def next(self):
        r"""next(MoroInvCumulativeKnuthGaussianRng self) -> SampleNumber"""
        return _quantlib_risks.MoroInvCumulativeKnuthGaussianRng_next(self)
    __swig_destroy__ = _quantlib_risks.delete_MoroInvCumulativeKnuthGaussianRng

# Register MoroInvCumulativeKnuthGaussianRng in _quantlib_risks:
_quantlib_risks.MoroInvCumulativeKnuthGaussianRng_swigregister(MoroInvCumulativeKnuthGaussianRng)
class MoroInvCumulativeMersenneTwisterGaussianRng(object):
    r"""Proxy of C++ InverseCumulativeRng< MersenneTwisterUniformRng,MoroInverseCumulativeNormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        r"""__init__(MoroInvCumulativeMersenneTwisterGaussianRng self, MersenneTwisterUniformRng rng) -> MoroInvCumulativeMersenneTwisterGaussianRng"""
        _quantlib_risks.MoroInvCumulativeMersenneTwisterGaussianRng_swiginit(self, _quantlib_risks.new_MoroInvCumulativeMersenneTwisterGaussianRng(rng))

    def next(self):
        r"""next(MoroInvCumulativeMersenneTwisterGaussianRng self) -> SampleNumber"""
        return _quantlib_risks.MoroInvCumulativeMersenneTwisterGaussianRng_next(self)
    __swig_destroy__ = _quantlib_risks.delete_MoroInvCumulativeMersenneTwisterGaussianRng

# Register MoroInvCumulativeMersenneTwisterGaussianRng in _quantlib_risks:
_quantlib_risks.MoroInvCumulativeMersenneTwisterGaussianRng_swigregister(MoroInvCumulativeMersenneTwisterGaussianRng)
class MoroInvCumulativeXoshiro256StarStarGaussianRng(object):
    r"""Proxy of C++ InverseCumulativeRng< Xoshiro256StarStarUniformRng,MoroInverseCumulativeNormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        r"""__init__(MoroInvCumulativeXoshiro256StarStarGaussianRng self, Xoshiro256StarStarUniformRng rng) -> MoroInvCumulativeXoshiro256StarStarGaussianRng"""
        _quantlib_risks.MoroInvCumulativeXoshiro256StarStarGaussianRng_swiginit(self, _quantlib_risks.new_MoroInvCumulativeXoshiro256StarStarGaussianRng(rng))

    def next(self):
        r"""next(MoroInvCumulativeXoshiro256StarStarGaussianRng self) -> SampleNumber"""
        return _quantlib_risks.MoroInvCumulativeXoshiro256StarStarGaussianRng_next(self)
    __swig_destroy__ = _quantlib_risks.delete_MoroInvCumulativeXoshiro256StarStarGaussianRng

# Register MoroInvCumulativeXoshiro256StarStarGaussianRng in _quantlib_risks:
_quantlib_risks.MoroInvCumulativeXoshiro256StarStarGaussianRng_swigregister(MoroInvCumulativeXoshiro256StarStarGaussianRng)
class InvCumulativeLecuyerGaussianRng(object):
    r"""Proxy of C++ InverseCumulativeRng< LecuyerUniformRng,InverseCumulativeNormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        r"""__init__(InvCumulativeLecuyerGaussianRng self, LecuyerUniformRng rng) -> InvCumulativeLecuyerGaussianRng"""
        _quantlib_risks.InvCumulativeLecuyerGaussianRng_swiginit(self, _quantlib_risks.new_InvCumulativeLecuyerGaussianRng(rng))

    def next(self):
        r"""next(InvCumulativeLecuyerGaussianRng self) -> SampleNumber"""
        return _quantlib_risks.InvCumulativeLecuyerGaussianRng_next(self)
    __swig_destroy__ = _quantlib_risks.delete_InvCumulativeLecuyerGaussianRng

# Register InvCumulativeLecuyerGaussianRng in _quantlib_risks:
_quantlib_risks.InvCumulativeLecuyerGaussianRng_swigregister(InvCumulativeLecuyerGaussianRng)
class InvCumulativeKnuthGaussianRng(object):
    r"""Proxy of C++ InverseCumulativeRng< KnuthUniformRng,InverseCumulativeNormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        r"""__init__(InvCumulativeKnuthGaussianRng self, KnuthUniformRng rng) -> InvCumulativeKnuthGaussianRng"""
        _quantlib_risks.InvCumulativeKnuthGaussianRng_swiginit(self, _quantlib_risks.new_InvCumulativeKnuthGaussianRng(rng))

    def next(self):
        r"""next(InvCumulativeKnuthGaussianRng self) -> SampleNumber"""
        return _quantlib_risks.InvCumulativeKnuthGaussianRng_next(self)
    __swig_destroy__ = _quantlib_risks.delete_InvCumulativeKnuthGaussianRng

# Register InvCumulativeKnuthGaussianRng in _quantlib_risks:
_quantlib_risks.InvCumulativeKnuthGaussianRng_swigregister(InvCumulativeKnuthGaussianRng)
class InvCumulativeMersenneTwisterGaussianRng(object):
    r"""Proxy of C++ InverseCumulativeRng< MersenneTwisterUniformRng,InverseCumulativeNormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        r"""__init__(InvCumulativeMersenneTwisterGaussianRng self, MersenneTwisterUniformRng rng) -> InvCumulativeMersenneTwisterGaussianRng"""
        _quantlib_risks.InvCumulativeMersenneTwisterGaussianRng_swiginit(self, _quantlib_risks.new_InvCumulativeMersenneTwisterGaussianRng(rng))

    def next(self):
        r"""next(InvCumulativeMersenneTwisterGaussianRng self) -> SampleNumber"""
        return _quantlib_risks.InvCumulativeMersenneTwisterGaussianRng_next(self)
    __swig_destroy__ = _quantlib_risks.delete_InvCumulativeMersenneTwisterGaussianRng

# Register InvCumulativeMersenneTwisterGaussianRng in _quantlib_risks:
_quantlib_risks.InvCumulativeMersenneTwisterGaussianRng_swigregister(InvCumulativeMersenneTwisterGaussianRng)
class InvCumulativeXoshiro256StarStarGaussianRng(object):
    r"""Proxy of C++ InverseCumulativeRng< Xoshiro256StarStarUniformRng,InverseCumulativeNormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        r"""__init__(InvCumulativeXoshiro256StarStarGaussianRng self, Xoshiro256StarStarUniformRng rng) -> InvCumulativeXoshiro256StarStarGaussianRng"""
        _quantlib_risks.InvCumulativeXoshiro256StarStarGaussianRng_swiginit(self, _quantlib_risks.new_InvCumulativeXoshiro256StarStarGaussianRng(rng))

    def next(self):
        r"""next(InvCumulativeXoshiro256StarStarGaussianRng self) -> SampleNumber"""
        return _quantlib_risks.InvCumulativeXoshiro256StarStarGaussianRng_next(self)
    __swig_destroy__ = _quantlib_risks.delete_InvCumulativeXoshiro256StarStarGaussianRng

# Register InvCumulativeXoshiro256StarStarGaussianRng in _quantlib_risks:
_quantlib_risks.InvCumulativeXoshiro256StarStarGaussianRng_swigregister(InvCumulativeXoshiro256StarStarGaussianRng)
class GaussianRandomGenerator(object):
    r"""Proxy of C++ GaussianRandomGenerator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rng):
        r"""__init__(GaussianRandomGenerator self, UniformRandomGenerator rng) -> GaussianRandomGenerator"""
        _quantlib_risks.GaussianRandomGenerator_swiginit(self, _quantlib_risks.new_GaussianRandomGenerator(rng))

    def next(self):
        r"""next(GaussianRandomGenerator self) -> SampleNumber"""
        return _quantlib_risks.GaussianRandomGenerator_next(self)

    def nextValue(self):
        r"""nextValue(GaussianRandomGenerator self) -> Real"""
        return _quantlib_risks.GaussianRandomGenerator_nextValue(self)
    __swig_destroy__ = _quantlib_risks.delete_GaussianRandomGenerator

# Register GaussianRandomGenerator in _quantlib_risks:
_quantlib_risks.GaussianRandomGenerator_swigregister(GaussianRandomGenerator)
class HaltonRsg(object):
    r"""Proxy of C++ HaltonRsg class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dimensionality, seed=0, randomStart=True, randomShift=False):
        r"""__init__(HaltonRsg self, Size dimensionality, unsigned long seed=0, bool randomStart=True, bool randomShift=False) -> HaltonRsg"""
        _quantlib_risks.HaltonRsg_swiginit(self, _quantlib_risks.new_HaltonRsg(dimensionality, seed, randomStart, randomShift))

    def nextSequence(self):
        r"""nextSequence(HaltonRsg self) -> SampleRealVector"""
        return _quantlib_risks.HaltonRsg_nextSequence(self)

    def lastSequence(self):
        r"""lastSequence(HaltonRsg self) -> SampleRealVector"""
        return _quantlib_risks.HaltonRsg_lastSequence(self)

    def dimension(self):
        r"""dimension(HaltonRsg self) -> Size"""
        return _quantlib_risks.HaltonRsg_dimension(self)
    __swig_destroy__ = _quantlib_risks.delete_HaltonRsg

# Register HaltonRsg in _quantlib_risks:
_quantlib_risks.HaltonRsg_swigregister(HaltonRsg)
class SobolRsg(object):
    r"""Proxy of C++ SobolRsg class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Unit = _quantlib_risks.SobolRsg_Unit
    
    Jaeckel = _quantlib_risks.SobolRsg_Jaeckel
    
    SobolLevitan = _quantlib_risks.SobolRsg_SobolLevitan
    
    SobolLevitanLemieux = _quantlib_risks.SobolRsg_SobolLevitanLemieux
    
    JoeKuoD5 = _quantlib_risks.SobolRsg_JoeKuoD5
    
    JoeKuoD6 = _quantlib_risks.SobolRsg_JoeKuoD6
    
    JoeKuoD7 = _quantlib_risks.SobolRsg_JoeKuoD7
    
    Kuo = _quantlib_risks.SobolRsg_Kuo
    
    Kuo2 = _quantlib_risks.SobolRsg_Kuo2
    
    Kuo3 = _quantlib_risks.SobolRsg_Kuo3
    

    def __init__(self, *args):
        r"""__init__(SobolRsg self, Size dimensionality, BigInteger seed=0, SobolRsg::DirectionIntegers directionIntegers=QuantLib::SobolRsg::Jaeckel) -> SobolRsg"""
        _quantlib_risks.SobolRsg_swiginit(self, _quantlib_risks.new_SobolRsg(*args))

    def nextSequence(self):
        r"""nextSequence(SobolRsg self) -> SampleRealVector"""
        return _quantlib_risks.SobolRsg_nextSequence(self)

    def lastSequence(self):
        r"""lastSequence(SobolRsg self) -> SampleRealVector"""
        return _quantlib_risks.SobolRsg_lastSequence(self)

    def dimension(self):
        r"""dimension(SobolRsg self) -> Size"""
        return _quantlib_risks.SobolRsg_dimension(self)

    def skipTo(self, n):
        r"""skipTo(SobolRsg self, Size n)"""
        return _quantlib_risks.SobolRsg_skipTo(self, n)

    def nextInt32Sequence(self):
        r"""nextInt32Sequence(SobolRsg self) -> UnsignedIntVector"""
        return _quantlib_risks.SobolRsg_nextInt32Sequence(self)
    __swig_destroy__ = _quantlib_risks.delete_SobolRsg

# Register SobolRsg in _quantlib_risks:
_quantlib_risks.SobolRsg_swigregister(SobolRsg)
class Burley2020SobolRsg(object):
    r"""Proxy of C++ Burley2020SobolRsg class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Burley2020SobolRsg self, Size dimensionality, BigInteger seed=42, SobolRsg::DirectionIntegers directionIntegers=QuantLib::SobolRsg::Jaeckel, BigInteger scrambleSeed=43) -> Burley2020SobolRsg"""
        _quantlib_risks.Burley2020SobolRsg_swiginit(self, _quantlib_risks.new_Burley2020SobolRsg(*args))

    def nextSequence(self):
        r"""nextSequence(Burley2020SobolRsg self) -> SampleRealVector"""
        return _quantlib_risks.Burley2020SobolRsg_nextSequence(self)

    def lastSequence(self):
        r"""lastSequence(Burley2020SobolRsg self) -> SampleRealVector"""
        return _quantlib_risks.Burley2020SobolRsg_lastSequence(self)

    def dimension(self):
        r"""dimension(Burley2020SobolRsg self) -> Size"""
        return _quantlib_risks.Burley2020SobolRsg_dimension(self)

    def nextInt32Sequence(self):
        r"""nextInt32Sequence(Burley2020SobolRsg self) -> UnsignedIntVector"""
        return _quantlib_risks.Burley2020SobolRsg_nextInt32Sequence(self)
    __swig_destroy__ = _quantlib_risks.delete_Burley2020SobolRsg

# Register Burley2020SobolRsg in _quantlib_risks:
_quantlib_risks.Burley2020SobolRsg_swigregister(Burley2020SobolRsg)
class SobolBrownianBridgeRsg(object):
    r"""Proxy of C++ SobolBrownianBridgeRsg class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, factors, steps):
        r"""__init__(SobolBrownianBridgeRsg self, Size factors, Size steps) -> SobolBrownianBridgeRsg"""
        _quantlib_risks.SobolBrownianBridgeRsg_swiginit(self, _quantlib_risks.new_SobolBrownianBridgeRsg(factors, steps))

    def nextSequence(self):
        r"""nextSequence(SobolBrownianBridgeRsg self) -> SampleRealVector"""
        return _quantlib_risks.SobolBrownianBridgeRsg_nextSequence(self)

    def lastSequence(self):
        r"""lastSequence(SobolBrownianBridgeRsg self) -> SampleRealVector"""
        return _quantlib_risks.SobolBrownianBridgeRsg_lastSequence(self)

    def dimension(self):
        r"""dimension(SobolBrownianBridgeRsg self) -> Size"""
        return _quantlib_risks.SobolBrownianBridgeRsg_dimension(self)
    __swig_destroy__ = _quantlib_risks.delete_SobolBrownianBridgeRsg

# Register SobolBrownianBridgeRsg in _quantlib_risks:
_quantlib_risks.SobolBrownianBridgeRsg_swigregister(SobolBrownianBridgeRsg)
class Burley2020SobolBrownianBridgeRsg(object):
    r"""Proxy of C++ Burley2020SobolBrownianBridgeRsg class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, factors, steps):
        r"""__init__(Burley2020SobolBrownianBridgeRsg self, Size factors, Size steps) -> Burley2020SobolBrownianBridgeRsg"""
        _quantlib_risks.Burley2020SobolBrownianBridgeRsg_swiginit(self, _quantlib_risks.new_Burley2020SobolBrownianBridgeRsg(factors, steps))

    def nextSequence(self):
        r"""nextSequence(Burley2020SobolBrownianBridgeRsg self) -> SampleRealVector"""
        return _quantlib_risks.Burley2020SobolBrownianBridgeRsg_nextSequence(self)

    def lastSequence(self):
        r"""lastSequence(Burley2020SobolBrownianBridgeRsg self) -> SampleRealVector"""
        return _quantlib_risks.Burley2020SobolBrownianBridgeRsg_lastSequence(self)

    def dimension(self):
        r"""dimension(Burley2020SobolBrownianBridgeRsg self) -> Size"""
        return _quantlib_risks.Burley2020SobolBrownianBridgeRsg_dimension(self)
    __swig_destroy__ = _quantlib_risks.delete_Burley2020SobolBrownianBridgeRsg

# Register Burley2020SobolBrownianBridgeRsg in _quantlib_risks:
_quantlib_risks.Burley2020SobolBrownianBridgeRsg_swigregister(Burley2020SobolBrownianBridgeRsg)
class LecuyerUniformRsg(object):
    r"""Proxy of C++ RandomSequenceGenerator< LecuyerUniformRng > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(LecuyerUniformRsg self, Size dimensionality, LecuyerUniformRng rng) -> LecuyerUniformRsg
        __init__(LecuyerUniformRsg self, Size dimensionality, BigNatural seed=0) -> LecuyerUniformRsg
        """
        _quantlib_risks.LecuyerUniformRsg_swiginit(self, _quantlib_risks.new_LecuyerUniformRsg(*args))

    def nextSequence(self):
        r"""nextSequence(LecuyerUniformRsg self) -> SampleRealVector"""
        return _quantlib_risks.LecuyerUniformRsg_nextSequence(self)

    def dimension(self):
        r"""dimension(LecuyerUniformRsg self) -> Size"""
        return _quantlib_risks.LecuyerUniformRsg_dimension(self)
    __swig_destroy__ = _quantlib_risks.delete_LecuyerUniformRsg

# Register LecuyerUniformRsg in _quantlib_risks:
_quantlib_risks.LecuyerUniformRsg_swigregister(LecuyerUniformRsg)
class KnuthUniformRsg(object):
    r"""Proxy of C++ RandomSequenceGenerator< KnuthUniformRng > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(KnuthUniformRsg self, Size dimensionality, KnuthUniformRng rng) -> KnuthUniformRsg
        __init__(KnuthUniformRsg self, Size dimensionality, BigNatural seed=0) -> KnuthUniformRsg
        """
        _quantlib_risks.KnuthUniformRsg_swiginit(self, _quantlib_risks.new_KnuthUniformRsg(*args))

    def nextSequence(self):
        r"""nextSequence(KnuthUniformRsg self) -> SampleRealVector"""
        return _quantlib_risks.KnuthUniformRsg_nextSequence(self)

    def dimension(self):
        r"""dimension(KnuthUniformRsg self) -> Size"""
        return _quantlib_risks.KnuthUniformRsg_dimension(self)
    __swig_destroy__ = _quantlib_risks.delete_KnuthUniformRsg

# Register KnuthUniformRsg in _quantlib_risks:
_quantlib_risks.KnuthUniformRsg_swigregister(KnuthUniformRsg)
class MersenneTwisterUniformRsg(object):
    r"""Proxy of C++ RandomSequenceGenerator< MersenneTwisterUniformRng > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MersenneTwisterUniformRsg self, Size dimensionality, MersenneTwisterUniformRng rng) -> MersenneTwisterUniformRsg
        __init__(MersenneTwisterUniformRsg self, Size dimensionality, BigNatural seed=0) -> MersenneTwisterUniformRsg
        """
        _quantlib_risks.MersenneTwisterUniformRsg_swiginit(self, _quantlib_risks.new_MersenneTwisterUniformRsg(*args))

    def nextSequence(self):
        r"""nextSequence(MersenneTwisterUniformRsg self) -> SampleRealVector"""
        return _quantlib_risks.MersenneTwisterUniformRsg_nextSequence(self)

    def dimension(self):
        r"""dimension(MersenneTwisterUniformRsg self) -> Size"""
        return _quantlib_risks.MersenneTwisterUniformRsg_dimension(self)
    __swig_destroy__ = _quantlib_risks.delete_MersenneTwisterUniformRsg

# Register MersenneTwisterUniformRsg in _quantlib_risks:
_quantlib_risks.MersenneTwisterUniformRsg_swigregister(MersenneTwisterUniformRsg)
class Xoshiro256StarStarUniformRsg(object):
    r"""Proxy of C++ RandomSequenceGenerator< Xoshiro256StarStarUniformRng > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Xoshiro256StarStarUniformRsg self, Size dimensionality, Xoshiro256StarStarUniformRng rng) -> Xoshiro256StarStarUniformRsg
        __init__(Xoshiro256StarStarUniformRsg self, Size dimensionality, BigNatural seed=0) -> Xoshiro256StarStarUniformRsg
        """
        _quantlib_risks.Xoshiro256StarStarUniformRsg_swiginit(self, _quantlib_risks.new_Xoshiro256StarStarUniformRsg(*args))

    def nextSequence(self):
        r"""nextSequence(Xoshiro256StarStarUniformRsg self) -> SampleRealVector"""
        return _quantlib_risks.Xoshiro256StarStarUniformRsg_nextSequence(self)

    def dimension(self):
        r"""dimension(Xoshiro256StarStarUniformRsg self) -> Size"""
        return _quantlib_risks.Xoshiro256StarStarUniformRsg_dimension(self)
    __swig_destroy__ = _quantlib_risks.delete_Xoshiro256StarStarUniformRsg

# Register Xoshiro256StarStarUniformRsg in _quantlib_risks:
_quantlib_risks.Xoshiro256StarStarUniformRsg_swigregister(Xoshiro256StarStarUniformRsg)
class UniformRandomSequenceGenerator(object):
    r"""Proxy of C++ UniformRandomSequenceGenerator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dimensionality, rng):
        r"""__init__(UniformRandomSequenceGenerator self, Size dimensionality, UniformRandomGenerator rng) -> UniformRandomSequenceGenerator"""
        _quantlib_risks.UniformRandomSequenceGenerator_swiginit(self, _quantlib_risks.new_UniformRandomSequenceGenerator(dimensionality, rng))

    def nextSequence(self):
        r"""nextSequence(UniformRandomSequenceGenerator self) -> SampleRealVector"""
        return _quantlib_risks.UniformRandomSequenceGenerator_nextSequence(self)

    def dimension(self):
        r"""dimension(UniformRandomSequenceGenerator self) -> Size"""
        return _quantlib_risks.UniformRandomSequenceGenerator_dimension(self)
    __swig_destroy__ = _quantlib_risks.delete_UniformRandomSequenceGenerator

# Register UniformRandomSequenceGenerator in _quantlib_risks:
_quantlib_risks.UniformRandomSequenceGenerator_swigregister(UniformRandomSequenceGenerator)
class UniformLowDiscrepancySequenceGenerator(object):
    r"""Proxy of C++ UniformLowDiscrepancySequenceGenerator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(UniformLowDiscrepancySequenceGenerator self, Size dimensionality, BigInteger seed=0, SobolRsg::DirectionIntegers directionIntegers=QuantLib::SobolRsg::Jaeckel) -> UniformLowDiscrepancySequenceGenerator"""
        _quantlib_risks.UniformLowDiscrepancySequenceGenerator_swiginit(self, _quantlib_risks.new_UniformLowDiscrepancySequenceGenerator(*args))

    def nextSequence(self):
        r"""nextSequence(UniformLowDiscrepancySequenceGenerator self) -> SampleRealVector"""
        return _quantlib_risks.UniformLowDiscrepancySequenceGenerator_nextSequence(self)

    def dimension(self):
        r"""dimension(UniformLowDiscrepancySequenceGenerator self) -> Size"""
        return _quantlib_risks.UniformLowDiscrepancySequenceGenerator_dimension(self)
    __swig_destroy__ = _quantlib_risks.delete_UniformLowDiscrepancySequenceGenerator

# Register UniformLowDiscrepancySequenceGenerator in _quantlib_risks:
_quantlib_risks.UniformLowDiscrepancySequenceGenerator_swigregister(UniformLowDiscrepancySequenceGenerator)
class MoroInvCumulativeLecuyerGaussianRsg(object):
    r"""Proxy of C++ InverseCumulativeRsg< RandomSequenceGenerator< LecuyerUniformRng >,MoroInverseCumulativeNormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MoroInvCumulativeLecuyerGaussianRsg self, LecuyerUniformRsg uniformSequenceGenerator) -> MoroInvCumulativeLecuyerGaussianRsg
        __init__(MoroInvCumulativeLecuyerGaussianRsg self, LecuyerUniformRsg uniformSequenceGenerator, MoroInverseCumulativeNormal inverseCumulative) -> MoroInvCumulativeLecuyerGaussianRsg
        """
        _quantlib_risks.MoroInvCumulativeLecuyerGaussianRsg_swiginit(self, _quantlib_risks.new_MoroInvCumulativeLecuyerGaussianRsg(*args))

    def nextSequence(self):
        r"""nextSequence(MoroInvCumulativeLecuyerGaussianRsg self) -> SampleRealVector"""
        return _quantlib_risks.MoroInvCumulativeLecuyerGaussianRsg_nextSequence(self)

    def dimension(self):
        r"""dimension(MoroInvCumulativeLecuyerGaussianRsg self) -> Size"""
        return _quantlib_risks.MoroInvCumulativeLecuyerGaussianRsg_dimension(self)
    __swig_destroy__ = _quantlib_risks.delete_MoroInvCumulativeLecuyerGaussianRsg

# Register MoroInvCumulativeLecuyerGaussianRsg in _quantlib_risks:
_quantlib_risks.MoroInvCumulativeLecuyerGaussianRsg_swigregister(MoroInvCumulativeLecuyerGaussianRsg)
class MoroInvCumulativeKnuthGaussianRsg(object):
    r"""Proxy of C++ InverseCumulativeRsg< RandomSequenceGenerator< KnuthUniformRng >,MoroInverseCumulativeNormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MoroInvCumulativeKnuthGaussianRsg self, KnuthUniformRsg uniformSequenceGenerator) -> MoroInvCumulativeKnuthGaussianRsg
        __init__(MoroInvCumulativeKnuthGaussianRsg self, KnuthUniformRsg uniformSequenceGenerator, MoroInverseCumulativeNormal inverseCumulative) -> MoroInvCumulativeKnuthGaussianRsg
        """
        _quantlib_risks.MoroInvCumulativeKnuthGaussianRsg_swiginit(self, _quantlib_risks.new_MoroInvCumulativeKnuthGaussianRsg(*args))

    def nextSequence(self):
        r"""nextSequence(MoroInvCumulativeKnuthGaussianRsg self) -> SampleRealVector"""
        return _quantlib_risks.MoroInvCumulativeKnuthGaussianRsg_nextSequence(self)

    def dimension(self):
        r"""dimension(MoroInvCumulativeKnuthGaussianRsg self) -> Size"""
        return _quantlib_risks.MoroInvCumulativeKnuthGaussianRsg_dimension(self)
    __swig_destroy__ = _quantlib_risks.delete_MoroInvCumulativeKnuthGaussianRsg

# Register MoroInvCumulativeKnuthGaussianRsg in _quantlib_risks:
_quantlib_risks.MoroInvCumulativeKnuthGaussianRsg_swigregister(MoroInvCumulativeKnuthGaussianRsg)
class MoroInvCumulativeMersenneTwisterGaussianRsg(object):
    r"""Proxy of C++ InverseCumulativeRsg< RandomSequenceGenerator< MersenneTwisterUniformRng >,MoroInverseCumulativeNormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MoroInvCumulativeMersenneTwisterGaussianRsg self, MersenneTwisterUniformRsg uniformSequenceGenerator) -> MoroInvCumulativeMersenneTwisterGaussianRsg
        __init__(MoroInvCumulativeMersenneTwisterGaussianRsg self, MersenneTwisterUniformRsg uniformSequenceGenerator, MoroInverseCumulativeNormal inverseCumulative) -> MoroInvCumulativeMersenneTwisterGaussianRsg
        """
        _quantlib_risks.MoroInvCumulativeMersenneTwisterGaussianRsg_swiginit(self, _quantlib_risks.new_MoroInvCumulativeMersenneTwisterGaussianRsg(*args))

    def nextSequence(self):
        r"""nextSequence(MoroInvCumulativeMersenneTwisterGaussianRsg self) -> SampleRealVector"""
        return _quantlib_risks.MoroInvCumulativeMersenneTwisterGaussianRsg_nextSequence(self)

    def dimension(self):
        r"""dimension(MoroInvCumulativeMersenneTwisterGaussianRsg self) -> Size"""
        return _quantlib_risks.MoroInvCumulativeMersenneTwisterGaussianRsg_dimension(self)
    __swig_destroy__ = _quantlib_risks.delete_MoroInvCumulativeMersenneTwisterGaussianRsg

# Register MoroInvCumulativeMersenneTwisterGaussianRsg in _quantlib_risks:
_quantlib_risks.MoroInvCumulativeMersenneTwisterGaussianRsg_swigregister(MoroInvCumulativeMersenneTwisterGaussianRsg)
class MoroInvCumulativeXoshiro256StarStarGaussianRsg(object):
    r"""Proxy of C++ InverseCumulativeRsg< RandomSequenceGenerator< Xoshiro256StarStarUniformRng >,MoroInverseCumulativeNormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MoroInvCumulativeXoshiro256StarStarGaussianRsg self, Xoshiro256StarStarUniformRsg uniformSequenceGenerator) -> MoroInvCumulativeXoshiro256StarStarGaussianRsg
        __init__(MoroInvCumulativeXoshiro256StarStarGaussianRsg self, Xoshiro256StarStarUniformRsg uniformSequenceGenerator, MoroInverseCumulativeNormal inverseCumulative) -> MoroInvCumulativeXoshiro256StarStarGaussianRsg
        """
        _quantlib_risks.MoroInvCumulativeXoshiro256StarStarGaussianRsg_swiginit(self, _quantlib_risks.new_MoroInvCumulativeXoshiro256StarStarGaussianRsg(*args))

    def nextSequence(self):
        r"""nextSequence(MoroInvCumulativeXoshiro256StarStarGaussianRsg self) -> SampleRealVector"""
        return _quantlib_risks.MoroInvCumulativeXoshiro256StarStarGaussianRsg_nextSequence(self)

    def dimension(self):
        r"""dimension(MoroInvCumulativeXoshiro256StarStarGaussianRsg self) -> Size"""
        return _quantlib_risks.MoroInvCumulativeXoshiro256StarStarGaussianRsg_dimension(self)
    __swig_destroy__ = _quantlib_risks.delete_MoroInvCumulativeXoshiro256StarStarGaussianRsg

# Register MoroInvCumulativeXoshiro256StarStarGaussianRsg in _quantlib_risks:
_quantlib_risks.MoroInvCumulativeXoshiro256StarStarGaussianRsg_swigregister(MoroInvCumulativeXoshiro256StarStarGaussianRsg)
class MoroInvCumulativeHaltonGaussianRsg(object):
    r"""Proxy of C++ InverseCumulativeRsg< HaltonRsg,MoroInverseCumulativeNormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MoroInvCumulativeHaltonGaussianRsg self, HaltonRsg uniformSequenceGenerator) -> MoroInvCumulativeHaltonGaussianRsg
        __init__(MoroInvCumulativeHaltonGaussianRsg self, HaltonRsg uniformSequenceGenerator, MoroInverseCumulativeNormal inverseCumulative) -> MoroInvCumulativeHaltonGaussianRsg
        """
        _quantlib_risks.MoroInvCumulativeHaltonGaussianRsg_swiginit(self, _quantlib_risks.new_MoroInvCumulativeHaltonGaussianRsg(*args))

    def nextSequence(self):
        r"""nextSequence(MoroInvCumulativeHaltonGaussianRsg self) -> SampleRealVector"""
        return _quantlib_risks.MoroInvCumulativeHaltonGaussianRsg_nextSequence(self)

    def dimension(self):
        r"""dimension(MoroInvCumulativeHaltonGaussianRsg self) -> Size"""
        return _quantlib_risks.MoroInvCumulativeHaltonGaussianRsg_dimension(self)
    __swig_destroy__ = _quantlib_risks.delete_MoroInvCumulativeHaltonGaussianRsg

# Register MoroInvCumulativeHaltonGaussianRsg in _quantlib_risks:
_quantlib_risks.MoroInvCumulativeHaltonGaussianRsg_swigregister(MoroInvCumulativeHaltonGaussianRsg)
class MoroInvCumulativeSobolGaussianRsg(object):
    r"""Proxy of C++ InverseCumulativeRsg< SobolRsg,MoroInverseCumulativeNormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MoroInvCumulativeSobolGaussianRsg self, SobolRsg uniformSequenceGenerator) -> MoroInvCumulativeSobolGaussianRsg
        __init__(MoroInvCumulativeSobolGaussianRsg self, SobolRsg uniformSequenceGenerator, MoroInverseCumulativeNormal inverseCumulative) -> MoroInvCumulativeSobolGaussianRsg
        """
        _quantlib_risks.MoroInvCumulativeSobolGaussianRsg_swiginit(self, _quantlib_risks.new_MoroInvCumulativeSobolGaussianRsg(*args))

    def nextSequence(self):
        r"""nextSequence(MoroInvCumulativeSobolGaussianRsg self) -> SampleRealVector"""
        return _quantlib_risks.MoroInvCumulativeSobolGaussianRsg_nextSequence(self)

    def dimension(self):
        r"""dimension(MoroInvCumulativeSobolGaussianRsg self) -> Size"""
        return _quantlib_risks.MoroInvCumulativeSobolGaussianRsg_dimension(self)
    __swig_destroy__ = _quantlib_risks.delete_MoroInvCumulativeSobolGaussianRsg

# Register MoroInvCumulativeSobolGaussianRsg in _quantlib_risks:
_quantlib_risks.MoroInvCumulativeSobolGaussianRsg_swigregister(MoroInvCumulativeSobolGaussianRsg)
class MoroInvCumulativeBurley2020SobolGaussianRsg(object):
    r"""Proxy of C++ InverseCumulativeRsg< Burley2020SobolRsg,MoroInverseCumulativeNormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MoroInvCumulativeBurley2020SobolGaussianRsg self, Burley2020SobolRsg uniformSequenceGenerator) -> MoroInvCumulativeBurley2020SobolGaussianRsg
        __init__(MoroInvCumulativeBurley2020SobolGaussianRsg self, Burley2020SobolRsg uniformSequenceGenerator, MoroInverseCumulativeNormal inverseCumulative) -> MoroInvCumulativeBurley2020SobolGaussianRsg
        """
        _quantlib_risks.MoroInvCumulativeBurley2020SobolGaussianRsg_swiginit(self, _quantlib_risks.new_MoroInvCumulativeBurley2020SobolGaussianRsg(*args))

    def nextSequence(self):
        r"""nextSequence(MoroInvCumulativeBurley2020SobolGaussianRsg self) -> SampleRealVector"""
        return _quantlib_risks.MoroInvCumulativeBurley2020SobolGaussianRsg_nextSequence(self)

    def dimension(self):
        r"""dimension(MoroInvCumulativeBurley2020SobolGaussianRsg self) -> Size"""
        return _quantlib_risks.MoroInvCumulativeBurley2020SobolGaussianRsg_dimension(self)
    __swig_destroy__ = _quantlib_risks.delete_MoroInvCumulativeBurley2020SobolGaussianRsg

# Register MoroInvCumulativeBurley2020SobolGaussianRsg in _quantlib_risks:
_quantlib_risks.MoroInvCumulativeBurley2020SobolGaussianRsg_swigregister(MoroInvCumulativeBurley2020SobolGaussianRsg)
class InvCumulativeLecuyerGaussianRsg(object):
    r"""Proxy of C++ InverseCumulativeRsg< RandomSequenceGenerator< LecuyerUniformRng >,InverseCumulativeNormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InvCumulativeLecuyerGaussianRsg self, LecuyerUniformRsg uniformSequenceGenerator) -> InvCumulativeLecuyerGaussianRsg
        __init__(InvCumulativeLecuyerGaussianRsg self, LecuyerUniformRsg uniformSequenceGenerator, InverseCumulativeNormal inverseCumulative) -> InvCumulativeLecuyerGaussianRsg
        """
        _quantlib_risks.InvCumulativeLecuyerGaussianRsg_swiginit(self, _quantlib_risks.new_InvCumulativeLecuyerGaussianRsg(*args))

    def nextSequence(self):
        r"""nextSequence(InvCumulativeLecuyerGaussianRsg self) -> SampleRealVector"""
        return _quantlib_risks.InvCumulativeLecuyerGaussianRsg_nextSequence(self)

    def dimension(self):
        r"""dimension(InvCumulativeLecuyerGaussianRsg self) -> Size"""
        return _quantlib_risks.InvCumulativeLecuyerGaussianRsg_dimension(self)
    __swig_destroy__ = _quantlib_risks.delete_InvCumulativeLecuyerGaussianRsg

# Register InvCumulativeLecuyerGaussianRsg in _quantlib_risks:
_quantlib_risks.InvCumulativeLecuyerGaussianRsg_swigregister(InvCumulativeLecuyerGaussianRsg)
class InvCumulativeKnuthGaussianRsg(object):
    r"""Proxy of C++ InverseCumulativeRsg< RandomSequenceGenerator< KnuthUniformRng >,InverseCumulativeNormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InvCumulativeKnuthGaussianRsg self, KnuthUniformRsg uniformSequenceGenerator) -> InvCumulativeKnuthGaussianRsg
        __init__(InvCumulativeKnuthGaussianRsg self, KnuthUniformRsg uniformSequenceGenerator, InverseCumulativeNormal inverseCumulative) -> InvCumulativeKnuthGaussianRsg
        """
        _quantlib_risks.InvCumulativeKnuthGaussianRsg_swiginit(self, _quantlib_risks.new_InvCumulativeKnuthGaussianRsg(*args))

    def nextSequence(self):
        r"""nextSequence(InvCumulativeKnuthGaussianRsg self) -> SampleRealVector"""
        return _quantlib_risks.InvCumulativeKnuthGaussianRsg_nextSequence(self)

    def dimension(self):
        r"""dimension(InvCumulativeKnuthGaussianRsg self) -> Size"""
        return _quantlib_risks.InvCumulativeKnuthGaussianRsg_dimension(self)
    __swig_destroy__ = _quantlib_risks.delete_InvCumulativeKnuthGaussianRsg

# Register InvCumulativeKnuthGaussianRsg in _quantlib_risks:
_quantlib_risks.InvCumulativeKnuthGaussianRsg_swigregister(InvCumulativeKnuthGaussianRsg)
class InvCumulativeMersenneTwisterGaussianRsg(object):
    r"""Proxy of C++ InverseCumulativeRsg< RandomSequenceGenerator< MersenneTwisterUniformRng >,InverseCumulativeNormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InvCumulativeMersenneTwisterGaussianRsg self, MersenneTwisterUniformRsg uniformSequenceGenerator) -> InvCumulativeMersenneTwisterGaussianRsg
        __init__(InvCumulativeMersenneTwisterGaussianRsg self, MersenneTwisterUniformRsg uniformSequenceGenerator, InverseCumulativeNormal inverseCumulative) -> InvCumulativeMersenneTwisterGaussianRsg
        """
        _quantlib_risks.InvCumulativeMersenneTwisterGaussianRsg_swiginit(self, _quantlib_risks.new_InvCumulativeMersenneTwisterGaussianRsg(*args))

    def nextSequence(self):
        r"""nextSequence(InvCumulativeMersenneTwisterGaussianRsg self) -> SampleRealVector"""
        return _quantlib_risks.InvCumulativeMersenneTwisterGaussianRsg_nextSequence(self)

    def dimension(self):
        r"""dimension(InvCumulativeMersenneTwisterGaussianRsg self) -> Size"""
        return _quantlib_risks.InvCumulativeMersenneTwisterGaussianRsg_dimension(self)
    __swig_destroy__ = _quantlib_risks.delete_InvCumulativeMersenneTwisterGaussianRsg

# Register InvCumulativeMersenneTwisterGaussianRsg in _quantlib_risks:
_quantlib_risks.InvCumulativeMersenneTwisterGaussianRsg_swigregister(InvCumulativeMersenneTwisterGaussianRsg)
class InvCumulativeXoshiro256StarStarGaussianRsg(object):
    r"""Proxy of C++ InverseCumulativeRsg< RandomSequenceGenerator< Xoshiro256StarStarUniformRng >,InverseCumulativeNormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InvCumulativeXoshiro256StarStarGaussianRsg self, Xoshiro256StarStarUniformRsg uniformSequenceGenerator) -> InvCumulativeXoshiro256StarStarGaussianRsg
        __init__(InvCumulativeXoshiro256StarStarGaussianRsg self, Xoshiro256StarStarUniformRsg uniformSequenceGenerator, InverseCumulativeNormal inverseCumulative) -> InvCumulativeXoshiro256StarStarGaussianRsg
        """
        _quantlib_risks.InvCumulativeXoshiro256StarStarGaussianRsg_swiginit(self, _quantlib_risks.new_InvCumulativeXoshiro256StarStarGaussianRsg(*args))

    def nextSequence(self):
        r"""nextSequence(InvCumulativeXoshiro256StarStarGaussianRsg self) -> SampleRealVector"""
        return _quantlib_risks.InvCumulativeXoshiro256StarStarGaussianRsg_nextSequence(self)

    def dimension(self):
        r"""dimension(InvCumulativeXoshiro256StarStarGaussianRsg self) -> Size"""
        return _quantlib_risks.InvCumulativeXoshiro256StarStarGaussianRsg_dimension(self)
    __swig_destroy__ = _quantlib_risks.delete_InvCumulativeXoshiro256StarStarGaussianRsg

# Register InvCumulativeXoshiro256StarStarGaussianRsg in _quantlib_risks:
_quantlib_risks.InvCumulativeXoshiro256StarStarGaussianRsg_swigregister(InvCumulativeXoshiro256StarStarGaussianRsg)
class InvCumulativeHaltonGaussianRsg(object):
    r"""Proxy of C++ InverseCumulativeRsg< HaltonRsg,InverseCumulativeNormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InvCumulativeHaltonGaussianRsg self, HaltonRsg uniformSequenceGenerator) -> InvCumulativeHaltonGaussianRsg
        __init__(InvCumulativeHaltonGaussianRsg self, HaltonRsg uniformSequenceGenerator, InverseCumulativeNormal inverseCumulative) -> InvCumulativeHaltonGaussianRsg
        """
        _quantlib_risks.InvCumulativeHaltonGaussianRsg_swiginit(self, _quantlib_risks.new_InvCumulativeHaltonGaussianRsg(*args))

    def nextSequence(self):
        r"""nextSequence(InvCumulativeHaltonGaussianRsg self) -> SampleRealVector"""
        return _quantlib_risks.InvCumulativeHaltonGaussianRsg_nextSequence(self)

    def dimension(self):
        r"""dimension(InvCumulativeHaltonGaussianRsg self) -> Size"""
        return _quantlib_risks.InvCumulativeHaltonGaussianRsg_dimension(self)
    __swig_destroy__ = _quantlib_risks.delete_InvCumulativeHaltonGaussianRsg

# Register InvCumulativeHaltonGaussianRsg in _quantlib_risks:
_quantlib_risks.InvCumulativeHaltonGaussianRsg_swigregister(InvCumulativeHaltonGaussianRsg)
class InvCumulativeSobolGaussianRsg(object):
    r"""Proxy of C++ InverseCumulativeRsg< SobolRsg,InverseCumulativeNormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InvCumulativeSobolGaussianRsg self, SobolRsg uniformSequenceGenerator) -> InvCumulativeSobolGaussianRsg
        __init__(InvCumulativeSobolGaussianRsg self, SobolRsg uniformSequenceGenerator, InverseCumulativeNormal inverseCumulative) -> InvCumulativeSobolGaussianRsg
        """
        _quantlib_risks.InvCumulativeSobolGaussianRsg_swiginit(self, _quantlib_risks.new_InvCumulativeSobolGaussianRsg(*args))

    def nextSequence(self):
        r"""nextSequence(InvCumulativeSobolGaussianRsg self) -> SampleRealVector"""
        return _quantlib_risks.InvCumulativeSobolGaussianRsg_nextSequence(self)

    def dimension(self):
        r"""dimension(InvCumulativeSobolGaussianRsg self) -> Size"""
        return _quantlib_risks.InvCumulativeSobolGaussianRsg_dimension(self)
    __swig_destroy__ = _quantlib_risks.delete_InvCumulativeSobolGaussianRsg

# Register InvCumulativeSobolGaussianRsg in _quantlib_risks:
_quantlib_risks.InvCumulativeSobolGaussianRsg_swigregister(InvCumulativeSobolGaussianRsg)
class InvCumulativeBurley2020SobolGaussianRsg(object):
    r"""Proxy of C++ InverseCumulativeRsg< Burley2020SobolRsg,InverseCumulativeNormal > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InvCumulativeBurley2020SobolGaussianRsg self, Burley2020SobolRsg uniformSequenceGenerator) -> InvCumulativeBurley2020SobolGaussianRsg
        __init__(InvCumulativeBurley2020SobolGaussianRsg self, Burley2020SobolRsg uniformSequenceGenerator, InverseCumulativeNormal inverseCumulative) -> InvCumulativeBurley2020SobolGaussianRsg
        """
        _quantlib_risks.InvCumulativeBurley2020SobolGaussianRsg_swiginit(self, _quantlib_risks.new_InvCumulativeBurley2020SobolGaussianRsg(*args))

    def nextSequence(self):
        r"""nextSequence(InvCumulativeBurley2020SobolGaussianRsg self) -> SampleRealVector"""
        return _quantlib_risks.InvCumulativeBurley2020SobolGaussianRsg_nextSequence(self)

    def dimension(self):
        r"""dimension(InvCumulativeBurley2020SobolGaussianRsg self) -> Size"""
        return _quantlib_risks.InvCumulativeBurley2020SobolGaussianRsg_dimension(self)
    __swig_destroy__ = _quantlib_risks.delete_InvCumulativeBurley2020SobolGaussianRsg

# Register InvCumulativeBurley2020SobolGaussianRsg in _quantlib_risks:
_quantlib_risks.InvCumulativeBurley2020SobolGaussianRsg_swigregister(InvCumulativeBurley2020SobolGaussianRsg)
class GaussianRandomSequenceGenerator(object):
    r"""Proxy of C++ GaussianRandomSequenceGenerator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, uniformSequenceGenerator):
        r"""__init__(GaussianRandomSequenceGenerator self, UniformRandomSequenceGenerator uniformSequenceGenerator) -> GaussianRandomSequenceGenerator"""
        _quantlib_risks.GaussianRandomSequenceGenerator_swiginit(self, _quantlib_risks.new_GaussianRandomSequenceGenerator(uniformSequenceGenerator))

    def nextSequence(self):
        r"""nextSequence(GaussianRandomSequenceGenerator self) -> SampleRealVector"""
        return _quantlib_risks.GaussianRandomSequenceGenerator_nextSequence(self)

    def dimension(self):
        r"""dimension(GaussianRandomSequenceGenerator self) -> Size"""
        return _quantlib_risks.GaussianRandomSequenceGenerator_dimension(self)
    __swig_destroy__ = _quantlib_risks.delete_GaussianRandomSequenceGenerator

# Register GaussianRandomSequenceGenerator in _quantlib_risks:
_quantlib_risks.GaussianRandomSequenceGenerator_swigregister(GaussianRandomSequenceGenerator)
class GaussianLowDiscrepancySequenceGenerator(object):
    r"""Proxy of C++ GaussianLowDiscrepancySequenceGenerator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, u):
        r"""__init__(GaussianLowDiscrepancySequenceGenerator self, UniformLowDiscrepancySequenceGenerator u) -> GaussianLowDiscrepancySequenceGenerator"""
        _quantlib_risks.GaussianLowDiscrepancySequenceGenerator_swiginit(self, _quantlib_risks.new_GaussianLowDiscrepancySequenceGenerator(u))

    def nextSequence(self):
        r"""nextSequence(GaussianLowDiscrepancySequenceGenerator self) -> SampleRealVector"""
        return _quantlib_risks.GaussianLowDiscrepancySequenceGenerator_nextSequence(self)

    def dimension(self):
        r"""dimension(GaussianLowDiscrepancySequenceGenerator self) -> Size"""
        return _quantlib_risks.GaussianLowDiscrepancySequenceGenerator_dimension(self)
    __swig_destroy__ = _quantlib_risks.delete_GaussianLowDiscrepancySequenceGenerator

# Register GaussianLowDiscrepancySequenceGenerator in _quantlib_risks:
_quantlib_risks.GaussianLowDiscrepancySequenceGenerator_swigregister(GaussianLowDiscrepancySequenceGenerator)
class BrownianGenerator(object):
    r"""Proxy of C++ BrownianGenerator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def nextStep(self, arg2):
        r"""nextStep(BrownianGenerator self, std::vector< Real,std::allocator< Real > > & arg2) -> Real"""
        return _quantlib_risks.BrownianGenerator_nextStep(self, arg2)

    def nextPath(self):
        r"""nextPath(BrownianGenerator self) -> Real"""
        return _quantlib_risks.BrownianGenerator_nextPath(self)

    def numberOfFactors(self):
        r"""numberOfFactors(BrownianGenerator self) -> Size"""
        return _quantlib_risks.BrownianGenerator_numberOfFactors(self)

    def numberOfSteps(self):
        r"""numberOfSteps(BrownianGenerator self) -> Size"""
        return _quantlib_risks.BrownianGenerator_numberOfSteps(self)
    __swig_destroy__ = _quantlib_risks.delete_BrownianGenerator

# Register BrownianGenerator in _quantlib_risks:
_quantlib_risks.BrownianGenerator_swigregister(BrownianGenerator)
class BrownianGeneratorFactory(object):
    r"""Proxy of C++ BrownianGeneratorFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def create(self, factors, steps):
        r"""create(BrownianGeneratorFactory self, Size factors, Size steps) -> ext::shared_ptr< BrownianGenerator >"""
        return _quantlib_risks.BrownianGeneratorFactory_create(self, factors, steps)
    __swig_destroy__ = _quantlib_risks.delete_BrownianGeneratorFactory

# Register BrownianGeneratorFactory in _quantlib_risks:
_quantlib_risks.BrownianGeneratorFactory_swigregister(BrownianGeneratorFactory)
class MTBrownianGenerator(BrownianGenerator):
    r"""Proxy of C++ MTBrownianGenerator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, factors, steps, seed=0):
        r"""__init__(MTBrownianGenerator self, Size factors, Size steps, unsigned long seed=0) -> MTBrownianGenerator"""
        _quantlib_risks.MTBrownianGenerator_swiginit(self, _quantlib_risks.new_MTBrownianGenerator(factors, steps, seed))
    __swig_destroy__ = _quantlib_risks.delete_MTBrownianGenerator

# Register MTBrownianGenerator in _quantlib_risks:
_quantlib_risks.MTBrownianGenerator_swigregister(MTBrownianGenerator)
class MTBrownianGeneratorFactory(BrownianGeneratorFactory):
    r"""Proxy of C++ MTBrownianGeneratorFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, seed=0):
        r"""__init__(MTBrownianGeneratorFactory self, unsigned long seed=0) -> MTBrownianGeneratorFactory"""
        _quantlib_risks.MTBrownianGeneratorFactory_swiginit(self, _quantlib_risks.new_MTBrownianGeneratorFactory(seed))
    __swig_destroy__ = _quantlib_risks.delete_MTBrownianGeneratorFactory

# Register MTBrownianGeneratorFactory in _quantlib_risks:
_quantlib_risks.MTBrownianGeneratorFactory_swigregister(MTBrownianGeneratorFactory)
class SobolBrownianGenerator(BrownianGenerator):
    r"""Proxy of C++ SobolBrownianGenerator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Factors = _quantlib_risks.SobolBrownianGenerator_Factors
    
    Steps = _quantlib_risks.SobolBrownianGenerator_Steps
    
    Diagonal = _quantlib_risks.SobolBrownianGenerator_Diagonal
    

    def __init__(self, *args):
        r"""__init__(SobolBrownianGenerator self, Size factors, Size steps, SobolBrownianGenerator::Ordering ordering, unsigned long seed=0, SobolRsg::DirectionIntegers directionIntegers=Jaeckel) -> SobolBrownianGenerator"""
        _quantlib_risks.SobolBrownianGenerator_swiginit(self, _quantlib_risks.new_SobolBrownianGenerator(*args))
    __swig_destroy__ = _quantlib_risks.delete_SobolBrownianGenerator

# Register SobolBrownianGenerator in _quantlib_risks:
_quantlib_risks.SobolBrownianGenerator_swigregister(SobolBrownianGenerator)
class SobolBrownianGeneratorFactory(BrownianGeneratorFactory):
    r"""Proxy of C++ SobolBrownianGeneratorFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(SobolBrownianGeneratorFactory self, SobolBrownianGenerator::Ordering ordering, unsigned long seed=0, SobolRsg::DirectionIntegers directionIntegers=Jaeckel) -> SobolBrownianGeneratorFactory"""
        _quantlib_risks.SobolBrownianGeneratorFactory_swiginit(self, _quantlib_risks.new_SobolBrownianGeneratorFactory(*args))
    __swig_destroy__ = _quantlib_risks.delete_SobolBrownianGeneratorFactory

# Register SobolBrownianGeneratorFactory in _quantlib_risks:
_quantlib_risks.SobolBrownianGeneratorFactory_swigregister(SobolBrownianGeneratorFactory)
class EvolutionDescription(object):
    r"""Proxy of C++ EvolutionDescription class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(EvolutionDescription self, std::vector< Time,std::allocator< Time > > const & rateTimes, std::vector< Time,std::allocator< Time > > const & evolutionTimes={}, UnsignedIntPairVector relevanceRates={}) -> EvolutionDescription"""
        _quantlib_risks.EvolutionDescription_swiginit(self, _quantlib_risks.new_EvolutionDescription(*args))

    def rateTimes(self):
        r"""rateTimes(EvolutionDescription self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.EvolutionDescription_rateTimes(self)

    def rateTaus(self):
        r"""rateTaus(EvolutionDescription self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.EvolutionDescription_rateTaus(self)

    def evolutionTimes(self):
        r"""evolutionTimes(EvolutionDescription self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.EvolutionDescription_evolutionTimes(self)

    def firstAliveRate(self):
        r"""firstAliveRate(EvolutionDescription self) -> UnsignedIntVector"""
        return _quantlib_risks.EvolutionDescription_firstAliveRate(self)

    def relevanceRates(self):
        r"""relevanceRates(EvolutionDescription self) -> UnsignedIntPairVector"""
        return _quantlib_risks.EvolutionDescription_relevanceRates(self)

    def numberOfRates(self):
        r"""numberOfRates(EvolutionDescription self) -> Size"""
        return _quantlib_risks.EvolutionDescription_numberOfRates(self)

    def numberOfSteps(self):
        r"""numberOfSteps(EvolutionDescription self) -> Size"""
        return _quantlib_risks.EvolutionDescription_numberOfSteps(self)
    __swig_destroy__ = _quantlib_risks.delete_EvolutionDescription

# Register EvolutionDescription in _quantlib_risks:
_quantlib_risks.EvolutionDescription_swigregister(EvolutionDescription)

def checkCompatibility(evolution, numeraires):
    r"""checkCompatibility(EvolutionDescription evolution, UnsignedIntVector numeraires)"""
    return _quantlib_risks.checkCompatibility(evolution, numeraires)

def isInTerminalMeasure(evolution, numeraires):
    r"""isInTerminalMeasure(EvolutionDescription evolution, UnsignedIntVector numeraires) -> bool"""
    return _quantlib_risks.isInTerminalMeasure(evolution, numeraires)

def isInMoneyMarketPlusMeasure(evolution, numeraires, offset=1):
    r"""isInMoneyMarketPlusMeasure(EvolutionDescription evolution, UnsignedIntVector numeraires, Size offset=1) -> bool"""
    return _quantlib_risks.isInMoneyMarketPlusMeasure(evolution, numeraires, offset)

def isInMoneyMarketMeasure(evolution, numeraires):
    r"""isInMoneyMarketMeasure(EvolutionDescription evolution, UnsignedIntVector numeraires) -> bool"""
    return _quantlib_risks.isInMoneyMarketMeasure(evolution, numeraires)

def terminalMeasure(evolution):
    r"""terminalMeasure(EvolutionDescription evolution) -> UnsignedIntVector"""
    return _quantlib_risks.terminalMeasure(evolution)

def moneyMarketPlusMeasure(evolution, offset=1):
    r"""moneyMarketPlusMeasure(EvolutionDescription evolution, Size offset=1) -> UnsignedIntVector"""
    return _quantlib_risks.moneyMarketPlusMeasure(evolution, offset)

def moneyMarketMeasure(evolution):
    r"""moneyMarketMeasure(EvolutionDescription evolution) -> UnsignedIntVector"""
    return _quantlib_risks.moneyMarketMeasure(evolution)
class MarketModel(object):
    r"""Proxy of C++ MarketModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def initialRates(self):
        r"""initialRates(MarketModel self) -> std::vector< Rate,std::allocator< Rate > > const &"""
        return _quantlib_risks.MarketModel_initialRates(self)

    def displacements(self):
        r"""displacements(MarketModel self) -> std::vector< Spread,std::allocator< Spread > > const &"""
        return _quantlib_risks.MarketModel_displacements(self)

    def evolution(self):
        r"""evolution(MarketModel self) -> EvolutionDescription"""
        return _quantlib_risks.MarketModel_evolution(self)

    def numberOfRates(self):
        r"""numberOfRates(MarketModel self) -> Size"""
        return _quantlib_risks.MarketModel_numberOfRates(self)

    def numberOfFactors(self):
        r"""numberOfFactors(MarketModel self) -> Size"""
        return _quantlib_risks.MarketModel_numberOfFactors(self)

    def numberOfSteps(self):
        r"""numberOfSteps(MarketModel self) -> Size"""
        return _quantlib_risks.MarketModel_numberOfSteps(self)

    def pseudoRoot(self, i):
        r"""pseudoRoot(MarketModel self, Size i) -> Matrix"""
        return _quantlib_risks.MarketModel_pseudoRoot(self, i)

    def covariance(self, i):
        r"""covariance(MarketModel self, Size i) -> Matrix"""
        return _quantlib_risks.MarketModel_covariance(self, i)

    def totalCovariance(self, endIndex):
        r"""totalCovariance(MarketModel self, Size endIndex) -> Matrix"""
        return _quantlib_risks.MarketModel_totalCovariance(self, endIndex)

    def timeDependentVolatility(self, i):
        r"""timeDependentVolatility(MarketModel self, Size i) -> std::vector< Volatility,std::allocator< Volatility > >"""
        return _quantlib_risks.MarketModel_timeDependentVolatility(self, i)
    __swig_destroy__ = _quantlib_risks.delete_MarketModel

# Register MarketModel in _quantlib_risks:
_quantlib_risks.MarketModel_swigregister(MarketModel)
class MarketModelFactory(object):
    r"""Proxy of C++ MarketModelFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def create(self, arg2, numberOfFactors):
        r"""create(MarketModelFactory self, EvolutionDescription arg2, Size numberOfFactors) -> ext::shared_ptr< MarketModel >"""
        return _quantlib_risks.MarketModelFactory_create(self, arg2, numberOfFactors)
    __swig_destroy__ = _quantlib_risks.delete_MarketModelFactory

# Register MarketModelFactory in _quantlib_risks:
_quantlib_risks.MarketModelFactory_swigregister(MarketModelFactory)
class PiecewiseConstantCorrelation(object):
    r"""Proxy of C++ PiecewiseConstantCorrelation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def times(self):
        r"""times(PiecewiseConstantCorrelation self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.PiecewiseConstantCorrelation_times(self)

    def rateTimes(self):
        r"""rateTimes(PiecewiseConstantCorrelation self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.PiecewiseConstantCorrelation_rateTimes(self)

    def correlations(self):
        r"""correlations(PiecewiseConstantCorrelation self) -> std::vector< Matrix,std::allocator< Matrix > > const &"""
        return _quantlib_risks.PiecewiseConstantCorrelation_correlations(self)

    def correlation(self, i):
        r"""correlation(PiecewiseConstantCorrelation self, Size i) -> Matrix"""
        return _quantlib_risks.PiecewiseConstantCorrelation_correlation(self, i)

    def numberOfRates(self):
        r"""numberOfRates(PiecewiseConstantCorrelation self) -> Size"""
        return _quantlib_risks.PiecewiseConstantCorrelation_numberOfRates(self)
    __swig_destroy__ = _quantlib_risks.delete_PiecewiseConstantCorrelation

# Register PiecewiseConstantCorrelation in _quantlib_risks:
_quantlib_risks.PiecewiseConstantCorrelation_swigregister(PiecewiseConstantCorrelation)
class ExponentialForwardCorrelation(PiecewiseConstantCorrelation):
    r"""Proxy of C++ ExponentialForwardCorrelation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ExponentialForwardCorrelation self, std::vector< Time,std::allocator< Time > > const & rateTimes, Real longTermCorr=0.5, Real beta=0.2, Real gamma=1.0, std::vector< Time,std::allocator< Time > > times={}) -> ExponentialForwardCorrelation"""
        _quantlib_risks.ExponentialForwardCorrelation_swiginit(self, _quantlib_risks.new_ExponentialForwardCorrelation(*args))
    __swig_destroy__ = _quantlib_risks.delete_ExponentialForwardCorrelation

# Register ExponentialForwardCorrelation in _quantlib_risks:
_quantlib_risks.ExponentialForwardCorrelation_swigregister(ExponentialForwardCorrelation)
class CurveState(object):
    r"""Proxy of C++ CurveState class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def numberOfRates(self):
        r"""numberOfRates(CurveState self) -> Size"""
        return _quantlib_risks.CurveState_numberOfRates(self)

    def rateTimes(self):
        r"""rateTimes(CurveState self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.CurveState_rateTimes(self)

    def rateTaus(self):
        r"""rateTaus(CurveState self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.CurveState_rateTaus(self)

    def discountRatio(self, i, j):
        r"""discountRatio(CurveState self, Size i, Size j) -> Real"""
        return _quantlib_risks.CurveState_discountRatio(self, i, j)

    def forwardRate(self, i):
        r"""forwardRate(CurveState self, Size i) -> Rate"""
        return _quantlib_risks.CurveState_forwardRate(self, i)

    def coterminalSwapAnnuity(self, numeraire, i):
        r"""coterminalSwapAnnuity(CurveState self, Size numeraire, Size i) -> Rate"""
        return _quantlib_risks.CurveState_coterminalSwapAnnuity(self, numeraire, i)

    def coterminalSwapRate(self, i):
        r"""coterminalSwapRate(CurveState self, Size i) -> Rate"""
        return _quantlib_risks.CurveState_coterminalSwapRate(self, i)

    def cmSwapAnnuity(self, numeraire, i, spanningForwards):
        r"""cmSwapAnnuity(CurveState self, Size numeraire, Size i, Size spanningForwards) -> Rate"""
        return _quantlib_risks.CurveState_cmSwapAnnuity(self, numeraire, i, spanningForwards)

    def cmSwapRate(self, i, spanningForwards):
        r"""cmSwapRate(CurveState self, Size i, Size spanningForwards) -> Rate"""
        return _quantlib_risks.CurveState_cmSwapRate(self, i, spanningForwards)

    def forwardRates(self):
        r"""forwardRates(CurveState self) -> std::vector< Rate,std::allocator< Rate > > const &"""
        return _quantlib_risks.CurveState_forwardRates(self)

    def coterminalSwapRates(self):
        r"""coterminalSwapRates(CurveState self) -> std::vector< Rate,std::allocator< Rate > > const &"""
        return _quantlib_risks.CurveState_coterminalSwapRates(self)

    def cmSwapRates(self, spanningForwards):
        r"""cmSwapRates(CurveState self, Size spanningForwards) -> std::vector< Rate,std::allocator< Rate > > const &"""
        return _quantlib_risks.CurveState_cmSwapRates(self, spanningForwards)

    def swapRate(self, begin, end):
        r"""swapRate(CurveState self, Size begin, Size end) -> Rate"""
        return _quantlib_risks.CurveState_swapRate(self, begin, end)
    __swig_destroy__ = _quantlib_risks.delete_CurveState

# Register CurveState in _quantlib_risks:
_quantlib_risks.CurveState_swigregister(CurveState)
class LMMCurveState(CurveState):
    r"""Proxy of C++ LMMCurveState class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, rateTimes):
        r"""__init__(LMMCurveState self, std::vector< Time,std::allocator< Time > > const & rateTimes) -> LMMCurveState"""
        _quantlib_risks.LMMCurveState_swiginit(self, _quantlib_risks.new_LMMCurveState(rateTimes))

    def setOnForwardRates(self, fwdRates, firstValidIndex=0):
        r"""setOnForwardRates(LMMCurveState self, std::vector< Rate,std::allocator< Rate > > const & fwdRates, Size firstValidIndex=0)"""
        return _quantlib_risks.LMMCurveState_setOnForwardRates(self, fwdRates, firstValidIndex)

    def setOnDiscountRatios(self, discRatios, firstValidIndex=0):
        r"""setOnDiscountRatios(LMMCurveState self, std::vector< DiscountFactor,std::allocator< DiscountFactor > > const & discRatios, Size firstValidIndex=0)"""
        return _quantlib_risks.LMMCurveState_setOnDiscountRatios(self, discRatios, firstValidIndex)
    __swig_destroy__ = _quantlib_risks.delete_LMMCurveState

# Register LMMCurveState in _quantlib_risks:
_quantlib_risks.LMMCurveState_swigregister(LMMCurveState)
class LMMDriftCalculator(object):
    r"""Proxy of C++ LMMDriftCalculator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pseudo, displacements, taus, numeraire, alive):
        r"""__init__(LMMDriftCalculator self, Matrix pseudo, std::vector< Spread,std::allocator< Spread > > const & displacements, std::vector< Time,std::allocator< Time > > const & taus, Size numeraire, Size alive) -> LMMDriftCalculator"""
        _quantlib_risks.LMMDriftCalculator_swiginit(self, _quantlib_risks.new_LMMDriftCalculator(pseudo, displacements, taus, numeraire, alive))

    def compute(self, *args):
        r"""
        compute(LMMDriftCalculator self, LMMCurveState cs, std::vector< Real,std::allocator< Real > > & drifts)
        compute(LMMDriftCalculator self, std::vector< Rate,std::allocator< Rate > > const & fwds, std::vector< Real,std::allocator< Real > > & drifts)
        """
        return _quantlib_risks.LMMDriftCalculator_compute(self, *args)

    def computePlain(self, *args):
        r"""
        computePlain(LMMDriftCalculator self, LMMCurveState cs, std::vector< Real,std::allocator< Real > > & drifts)
        computePlain(LMMDriftCalculator self, std::vector< Rate,std::allocator< Rate > > const & fwds, std::vector< Real,std::allocator< Real > > & drifts)
        """
        return _quantlib_risks.LMMDriftCalculator_computePlain(self, *args)

    def computeReduced(self, *args):
        r"""
        computeReduced(LMMDriftCalculator self, LMMCurveState cs, std::vector< Real,std::allocator< Real > > & drifts)
        computeReduced(LMMDriftCalculator self, std::vector< Rate,std::allocator< Rate > > const & fwds, std::vector< Real,std::allocator< Real > > & drifts)
        """
        return _quantlib_risks.LMMDriftCalculator_computeReduced(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_LMMDriftCalculator

# Register LMMDriftCalculator in _quantlib_risks:
_quantlib_risks.LMMDriftCalculator_swigregister(LMMDriftCalculator)
class MarketModelEvolver(object):
    r"""Proxy of C++ MarketModelEvolver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def numeraires(self):
        r"""numeraires(MarketModelEvolver self) -> UnsignedIntVector"""
        return _quantlib_risks.MarketModelEvolver_numeraires(self)

    def startNewPath(self):
        r"""startNewPath(MarketModelEvolver self) -> Real"""
        return _quantlib_risks.MarketModelEvolver_startNewPath(self)

    def advanceStep(self):
        r"""advanceStep(MarketModelEvolver self) -> Real"""
        return _quantlib_risks.MarketModelEvolver_advanceStep(self)

    def currentStep(self):
        r"""currentStep(MarketModelEvolver self) -> Size"""
        return _quantlib_risks.MarketModelEvolver_currentStep(self)

    def currentState(self):
        r"""currentState(MarketModelEvolver self) -> CurveState"""
        return _quantlib_risks.MarketModelEvolver_currentState(self)

    def setInitialState(self, arg2):
        r"""setInitialState(MarketModelEvolver self, CurveState arg2)"""
        return _quantlib_risks.MarketModelEvolver_setInitialState(self, arg2)
    __swig_destroy__ = _quantlib_risks.delete_MarketModelEvolver

# Register MarketModelEvolver in _quantlib_risks:
_quantlib_risks.MarketModelEvolver_swigregister(MarketModelEvolver)
class LogNormalFwdRateIpc(MarketModelEvolver):
    r"""Proxy of C++ LogNormalFwdRateIpc class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model, factory, numeraires, initialStep=0):
        r"""__init__(LogNormalFwdRateIpc self, ext::shared_ptr< MarketModel > const & model, BrownianGeneratorFactory factory, UnsignedIntVector numeraires, Size initialStep=0) -> LogNormalFwdRateIpc"""
        _quantlib_risks.LogNormalFwdRateIpc_swiginit(self, _quantlib_risks.new_LogNormalFwdRateIpc(model, factory, numeraires, initialStep))
    __swig_destroy__ = _quantlib_risks.delete_LogNormalFwdRateIpc

# Register LogNormalFwdRateIpc in _quantlib_risks:
_quantlib_risks.LogNormalFwdRateIpc_swigregister(LogNormalFwdRateIpc)
class AbcdVol(MarketModel):
    r"""Proxy of C++ AbcdVol class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, a, b, c, d, ks, corr, evolution, numberOfFactors, initialRates, displacements):
        r"""__init__(AbcdVol self, Real a, Real b, Real c, Real d, std::vector< Real,std::allocator< Real > > const & ks, ext::shared_ptr< PiecewiseConstantCorrelation > const & corr, EvolutionDescription evolution, Size numberOfFactors, std::vector< Rate,std::allocator< Rate > > const & initialRates, std::vector< Spread,std::allocator< Spread > > const & displacements) -> AbcdVol"""
        _quantlib_risks.AbcdVol_swiginit(self, _quantlib_risks.new_AbcdVol(a, b, c, d, ks, corr, evolution, numberOfFactors, initialRates, displacements))
    __swig_destroy__ = _quantlib_risks.delete_AbcdVol

# Register AbcdVol in _quantlib_risks:
_quantlib_risks.AbcdVol_swigregister(AbcdVol)
class AbcdMathFunction(object):
    r"""Proxy of C++ AbcdMathFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(AbcdMathFunction self, Real a=0.002, Real b=0.001, Real c=0.16, Real d=0.0005) -> AbcdMathFunction
        __init__(AbcdMathFunction self, std::vector< Real,std::allocator< Real > > abcd) -> AbcdMathFunction
        """
        _quantlib_risks.AbcdMathFunction_swiginit(self, _quantlib_risks.new_AbcdMathFunction(*args))

    def __call__(self, t):
        r"""__call__(AbcdMathFunction self, Time t) -> Real"""
        return _quantlib_risks.AbcdMathFunction___call__(self, t)

    def maximumLocation(self):
        r"""maximumLocation(AbcdMathFunction self) -> Time"""
        return _quantlib_risks.AbcdMathFunction_maximumLocation(self)

    def maximumValue(self):
        r"""maximumValue(AbcdMathFunction self) -> Real"""
        return _quantlib_risks.AbcdMathFunction_maximumValue(self)

    def longTermValue(self):
        r"""longTermValue(AbcdMathFunction self) -> Real"""
        return _quantlib_risks.AbcdMathFunction_longTermValue(self)

    def derivative(self, t):
        r"""derivative(AbcdMathFunction self, Time t) -> Real"""
        return _quantlib_risks.AbcdMathFunction_derivative(self, t)

    def primitive(self, t):
        r"""primitive(AbcdMathFunction self, Time t) -> Real"""
        return _quantlib_risks.AbcdMathFunction_primitive(self, t)

    def definiteIntegral(self, t1, t2):
        r"""definiteIntegral(AbcdMathFunction self, Time t1, Time t2) -> Real"""
        return _quantlib_risks.AbcdMathFunction_definiteIntegral(self, t1, t2)

    def a(self):
        r"""a(AbcdMathFunction self) -> Real"""
        return _quantlib_risks.AbcdMathFunction_a(self)

    def b(self):
        r"""b(AbcdMathFunction self) -> Real"""
        return _quantlib_risks.AbcdMathFunction_b(self)

    def c(self):
        r"""c(AbcdMathFunction self) -> Real"""
        return _quantlib_risks.AbcdMathFunction_c(self)

    def d(self):
        r"""d(AbcdMathFunction self) -> Real"""
        return _quantlib_risks.AbcdMathFunction_d(self)

    def coefficients(self):
        r"""coefficients(AbcdMathFunction self) -> std::vector< Real,std::allocator< Real > > const &"""
        return _quantlib_risks.AbcdMathFunction_coefficients(self)

    def derivativeCoefficients(self):
        r"""derivativeCoefficients(AbcdMathFunction self) -> std::vector< Real,std::allocator< Real > > const &"""
        return _quantlib_risks.AbcdMathFunction_derivativeCoefficients(self)

    def definiteIntegralCoefficients(self, t, t2):
        r"""definiteIntegralCoefficients(AbcdMathFunction self, Time t, Time t2) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.AbcdMathFunction_definiteIntegralCoefficients(self, t, t2)

    def definiteDerivativeCoefficients(self, t, t2):
        r"""definiteDerivativeCoefficients(AbcdMathFunction self, Time t, Time t2) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.AbcdMathFunction_definiteDerivativeCoefficients(self, t, t2)

    @staticmethod
    def validate(a, b, c, d):
        r"""validate(Real a, Real b, Real c, Real d)"""
        return _quantlib_risks.AbcdMathFunction_validate(a, b, c, d)
    __swig_destroy__ = _quantlib_risks.delete_AbcdMathFunction

# Register AbcdMathFunction in _quantlib_risks:
_quantlib_risks.AbcdMathFunction_swigregister(AbcdMathFunction)
class AbcdFunction(AbcdMathFunction):
    r"""Proxy of C++ AbcdFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, a=-0.06, b=0.17, c=0.54, d=0.17):
        r"""__init__(AbcdFunction self, Real a=-0.06, Real b=0.17, Real c=0.54, Real d=0.17) -> AbcdFunction"""
        _quantlib_risks.AbcdFunction_swiginit(self, _quantlib_risks.new_AbcdFunction(a, b, c, d))

    def maximumVolatility(self):
        r"""maximumVolatility(AbcdFunction self) -> Real"""
        return _quantlib_risks.AbcdFunction_maximumVolatility(self)

    def shortTermVolatility(self):
        r"""shortTermVolatility(AbcdFunction self) -> Real"""
        return _quantlib_risks.AbcdFunction_shortTermVolatility(self)

    def longTermVolatility(self):
        r"""longTermVolatility(AbcdFunction self) -> Real"""
        return _quantlib_risks.AbcdFunction_longTermVolatility(self)

    def covariance(self, *args):
        r"""
        covariance(AbcdFunction self, Time t, Time T, Time S) -> Real
        covariance(AbcdFunction self, Time t1, Time t2, Time T, Time S) -> Real
        """
        return _quantlib_risks.AbcdFunction_covariance(self, *args)

    def volatility(self, tMin, tMax, T):
        r"""volatility(AbcdFunction self, Time tMin, Time tMax, Time T) -> Real"""
        return _quantlib_risks.AbcdFunction_volatility(self, tMin, tMax, T)

    def variance(self, tMin, tMax, T):
        r"""variance(AbcdFunction self, Time tMin, Time tMax, Time T) -> Real"""
        return _quantlib_risks.AbcdFunction_variance(self, tMin, tMax, T)

    def instantaneousVolatility(self, t, T):
        r"""instantaneousVolatility(AbcdFunction self, Time t, Time T) -> Real"""
        return _quantlib_risks.AbcdFunction_instantaneousVolatility(self, t, T)

    def instantaneousVariance(self, t, T):
        r"""instantaneousVariance(AbcdFunction self, Time t, Time T) -> Real"""
        return _quantlib_risks.AbcdFunction_instantaneousVariance(self, t, T)

    def instantaneousCovariance(self, u, T, S):
        r"""instantaneousCovariance(AbcdFunction self, Time u, Time T, Time S) -> Real"""
        return _quantlib_risks.AbcdFunction_instantaneousCovariance(self, u, T, S)

    def primitive(self, t, T, S):
        r"""primitive(AbcdFunction self, Time t, Time T, Time S) -> Real"""
        return _quantlib_risks.AbcdFunction_primitive(self, t, T, S)
    __swig_destroy__ = _quantlib_risks.delete_AbcdFunction

# Register AbcdFunction in _quantlib_risks:
_quantlib_risks.AbcdFunction_swigregister(AbcdFunction)
class ContinuousFloatingLookbackOption(OneAssetOption):
    r"""Proxy of C++ ContinuousFloatingLookbackOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, currentMinmax, payoff, exercise):
        r"""__init__(ContinuousFloatingLookbackOption self, Real currentMinmax, ext::shared_ptr< TypePayoff > const & payoff, ext::shared_ptr< Exercise > const & exercise) -> ContinuousFloatingLookbackOption"""
        _quantlib_risks.ContinuousFloatingLookbackOption_swiginit(self, _quantlib_risks.new_ContinuousFloatingLookbackOption(currentMinmax, payoff, exercise))
    __swig_destroy__ = _quantlib_risks.delete_ContinuousFloatingLookbackOption

# Register ContinuousFloatingLookbackOption in _quantlib_risks:
_quantlib_risks.ContinuousFloatingLookbackOption_swigregister(ContinuousFloatingLookbackOption)
class ContinuousFixedLookbackOption(OneAssetOption):
    r"""Proxy of C++ ContinuousFixedLookbackOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, currentMinmax, payoff, exercise):
        r"""__init__(ContinuousFixedLookbackOption self, Real currentMinmax, ext::shared_ptr< StrikedTypePayoff > const & payoff, ext::shared_ptr< Exercise > const & exercise) -> ContinuousFixedLookbackOption"""
        _quantlib_risks.ContinuousFixedLookbackOption_swiginit(self, _quantlib_risks.new_ContinuousFixedLookbackOption(currentMinmax, payoff, exercise))
    __swig_destroy__ = _quantlib_risks.delete_ContinuousFixedLookbackOption

# Register ContinuousFixedLookbackOption in _quantlib_risks:
_quantlib_risks.ContinuousFixedLookbackOption_swigregister(ContinuousFixedLookbackOption)
class ContinuousPartialFloatingLookbackOption(ContinuousFloatingLookbackOption):
    r"""Proxy of C++ ContinuousPartialFloatingLookbackOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, currentMinmax, lambda_parameter, lookbackPeriodEnd, payoff, exercise):
        r"""__init__(ContinuousPartialFloatingLookbackOption self, Real currentMinmax, Real lambda_parameter, Date lookbackPeriodEnd, ext::shared_ptr< TypePayoff > const & payoff, ext::shared_ptr< Exercise > const & exercise) -> ContinuousPartialFloatingLookbackOption"""
        _quantlib_risks.ContinuousPartialFloatingLookbackOption_swiginit(self, _quantlib_risks.new_ContinuousPartialFloatingLookbackOption(currentMinmax, lambda_parameter, lookbackPeriodEnd, payoff, exercise))
    __swig_destroy__ = _quantlib_risks.delete_ContinuousPartialFloatingLookbackOption

# Register ContinuousPartialFloatingLookbackOption in _quantlib_risks:
_quantlib_risks.ContinuousPartialFloatingLookbackOption_swigregister(ContinuousPartialFloatingLookbackOption)
class ContinuousPartialFixedLookbackOption(ContinuousFixedLookbackOption):
    r"""Proxy of C++ ContinuousPartialFixedLookbackOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, lookbackPeriodStart, payoff, exercise):
        r"""__init__(ContinuousPartialFixedLookbackOption self, Date lookbackPeriodStart, ext::shared_ptr< StrikedTypePayoff > const & payoff, ext::shared_ptr< Exercise > const & exercise) -> ContinuousPartialFixedLookbackOption"""
        _quantlib_risks.ContinuousPartialFixedLookbackOption_swiginit(self, _quantlib_risks.new_ContinuousPartialFixedLookbackOption(lookbackPeriodStart, payoff, exercise))
    __swig_destroy__ = _quantlib_risks.delete_ContinuousPartialFixedLookbackOption

# Register ContinuousPartialFixedLookbackOption in _quantlib_risks:
_quantlib_risks.ContinuousPartialFixedLookbackOption_swigregister(ContinuousPartialFixedLookbackOption)
class AnalyticContinuousFloatingLookbackEngine(PricingEngine):
    r"""Proxy of C++ AnalyticContinuousFloatingLookbackEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(AnalyticContinuousFloatingLookbackEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process) -> AnalyticContinuousFloatingLookbackEngine"""
        _quantlib_risks.AnalyticContinuousFloatingLookbackEngine_swiginit(self, _quantlib_risks.new_AnalyticContinuousFloatingLookbackEngine(process))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticContinuousFloatingLookbackEngine

# Register AnalyticContinuousFloatingLookbackEngine in _quantlib_risks:
_quantlib_risks.AnalyticContinuousFloatingLookbackEngine_swigregister(AnalyticContinuousFloatingLookbackEngine)
class AnalyticContinuousFixedLookbackEngine(PricingEngine):
    r"""Proxy of C++ AnalyticContinuousFixedLookbackEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(AnalyticContinuousFixedLookbackEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process) -> AnalyticContinuousFixedLookbackEngine"""
        _quantlib_risks.AnalyticContinuousFixedLookbackEngine_swiginit(self, _quantlib_risks.new_AnalyticContinuousFixedLookbackEngine(process))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticContinuousFixedLookbackEngine

# Register AnalyticContinuousFixedLookbackEngine in _quantlib_risks:
_quantlib_risks.AnalyticContinuousFixedLookbackEngine_swigregister(AnalyticContinuousFixedLookbackEngine)
class AnalyticContinuousPartialFloatingLookbackEngine(PricingEngine):
    r"""Proxy of C++ AnalyticContinuousPartialFloatingLookbackEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(AnalyticContinuousPartialFloatingLookbackEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process) -> AnalyticContinuousPartialFloatingLookbackEngine"""
        _quantlib_risks.AnalyticContinuousPartialFloatingLookbackEngine_swiginit(self, _quantlib_risks.new_AnalyticContinuousPartialFloatingLookbackEngine(process))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticContinuousPartialFloatingLookbackEngine

# Register AnalyticContinuousPartialFloatingLookbackEngine in _quantlib_risks:
_quantlib_risks.AnalyticContinuousPartialFloatingLookbackEngine_swigregister(AnalyticContinuousPartialFloatingLookbackEngine)
class AnalyticContinuousPartialFixedLookbackEngine(PricingEngine):
    r"""Proxy of C++ AnalyticContinuousPartialFixedLookbackEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process):
        r"""__init__(AnalyticContinuousPartialFixedLookbackEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process) -> AnalyticContinuousPartialFixedLookbackEngine"""
        _quantlib_risks.AnalyticContinuousPartialFixedLookbackEngine_swiginit(self, _quantlib_risks.new_AnalyticContinuousPartialFixedLookbackEngine(process))
    __swig_destroy__ = _quantlib_risks.delete_AnalyticContinuousPartialFixedLookbackEngine

# Register AnalyticContinuousPartialFixedLookbackEngine in _quantlib_risks:
_quantlib_risks.AnalyticContinuousPartialFixedLookbackEngine_swigregister(AnalyticContinuousPartialFixedLookbackEngine)

def getCovariance(volatilities, correlations):
    r"""getCovariance(Array volatilities, Matrix correlations) -> Matrix"""
    return _quantlib_risks.getCovariance(volatilities, correlations)
class Path(object):
    r"""Proxy of C++ Path class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __len__(self):
        r"""__len__(Path self) -> Size"""
        return _quantlib_risks.Path___len__(self)

    def value(self, i):
        r"""value(Path self, Size i) -> Real"""
        return _quantlib_risks.Path_value(self, i)

    def front(self):
        r"""front(Path self) -> Real"""
        return _quantlib_risks.Path_front(self)

    def back(self):
        r"""back(Path self) -> Real"""
        return _quantlib_risks.Path_back(self)

    def time(self, i):
        r"""time(Path self, Size i) -> Time"""
        return _quantlib_risks.Path_time(self, i)

    def __getitem__(self, i):
        r"""__getitem__(Path self, Integer i) -> Real"""
        return _quantlib_risks.Path___getitem__(self, i)
    __swig_destroy__ = _quantlib_risks.delete_Path

# Register Path in _quantlib_risks:
_quantlib_risks.Path_swigregister(Path)
class SamplePath(object):
    r"""Proxy of C++ Sample< Path > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self):
        r"""value(SamplePath self) -> Path"""
        return _quantlib_risks.SamplePath_value(self)

    def weight(self):
        r"""weight(SamplePath self) -> Real"""
        return _quantlib_risks.SamplePath_weight(self)
    __swig_destroy__ = _quantlib_risks.delete_SamplePath

# Register SamplePath in _quantlib_risks:
_quantlib_risks.SamplePath_swigregister(SamplePath)
class GaussianPathGenerator(object):
    r"""Proxy of C++ PathGenerator< GaussianRandomSequenceGenerator > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GaussianPathGenerator self, ext::shared_ptr< StochasticProcess > const & arg2, Time length, Size timeSteps, GaussianRandomSequenceGenerator generator, bool brownianBridge) -> GaussianPathGenerator
        __init__(GaussianPathGenerator self, ext::shared_ptr< StochasticProcess > const & arg2, TimeGrid timeGrid, GaussianRandomSequenceGenerator generator, bool brownianBridge) -> GaussianPathGenerator
        """
        _quantlib_risks.GaussianPathGenerator_swiginit(self, _quantlib_risks.new_GaussianPathGenerator(*args))

    def next(self):
        r"""next(GaussianPathGenerator self) -> SamplePath"""
        return _quantlib_risks.GaussianPathGenerator_next(self)

    def antithetic(self):
        r"""antithetic(GaussianPathGenerator self) -> SamplePath"""
        return _quantlib_risks.GaussianPathGenerator_antithetic(self)

    def size(self):
        r"""size(GaussianPathGenerator self) -> Size"""
        return _quantlib_risks.GaussianPathGenerator_size(self)

    def timeGrid(self):
        r"""timeGrid(GaussianPathGenerator self) -> TimeGrid"""
        return _quantlib_risks.GaussianPathGenerator_timeGrid(self)
    __swig_destroy__ = _quantlib_risks.delete_GaussianPathGenerator

# Register GaussianPathGenerator in _quantlib_risks:
_quantlib_risks.GaussianPathGenerator_swigregister(GaussianPathGenerator)
class GaussianSobolPathGenerator(object):
    r"""Proxy of C++ PathGenerator< GaussianLowDiscrepancySequenceGenerator > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GaussianSobolPathGenerator self, ext::shared_ptr< StochasticProcess > const & arg2, Time length, Size timeSteps, GaussianLowDiscrepancySequenceGenerator generator, bool brownianBridge) -> GaussianSobolPathGenerator
        __init__(GaussianSobolPathGenerator self, ext::shared_ptr< StochasticProcess > const & arg2, TimeGrid timeGrid, GaussianLowDiscrepancySequenceGenerator generator, bool brownianBridge) -> GaussianSobolPathGenerator
        """
        _quantlib_risks.GaussianSobolPathGenerator_swiginit(self, _quantlib_risks.new_GaussianSobolPathGenerator(*args))

    def next(self):
        r"""next(GaussianSobolPathGenerator self) -> SamplePath"""
        return _quantlib_risks.GaussianSobolPathGenerator_next(self)

    def antithetic(self):
        r"""antithetic(GaussianSobolPathGenerator self) -> SamplePath"""
        return _quantlib_risks.GaussianSobolPathGenerator_antithetic(self)

    def size(self):
        r"""size(GaussianSobolPathGenerator self) -> Size"""
        return _quantlib_risks.GaussianSobolPathGenerator_size(self)

    def timeGrid(self):
        r"""timeGrid(GaussianSobolPathGenerator self) -> TimeGrid"""
        return _quantlib_risks.GaussianSobolPathGenerator_timeGrid(self)
    __swig_destroy__ = _quantlib_risks.delete_GaussianSobolPathGenerator

# Register GaussianSobolPathGenerator in _quantlib_risks:
_quantlib_risks.GaussianSobolPathGenerator_swigregister(GaussianSobolPathGenerator)
class InvCumulativeMersenneTwisterPathGenerator(object):
    r"""Proxy of C++ PathGenerator< InverseCumulativeRsg< RandomSequenceGenerator< MersenneTwisterUniformRng >,InverseCumulativeNormal > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InvCumulativeMersenneTwisterPathGenerator self, ext::shared_ptr< StochasticProcess > const & arg2, Time length, Size timeSteps, InvCumulativeMersenneTwisterGaussianRsg generator, bool brownianBridge) -> InvCumulativeMersenneTwisterPathGenerator
        __init__(InvCumulativeMersenneTwisterPathGenerator self, ext::shared_ptr< StochasticProcess > const & arg2, TimeGrid timeGrid, InvCumulativeMersenneTwisterGaussianRsg generator, bool brownianBridge) -> InvCumulativeMersenneTwisterPathGenerator
        """
        _quantlib_risks.InvCumulativeMersenneTwisterPathGenerator_swiginit(self, _quantlib_risks.new_InvCumulativeMersenneTwisterPathGenerator(*args))

    def next(self):
        r"""next(InvCumulativeMersenneTwisterPathGenerator self) -> SamplePath"""
        return _quantlib_risks.InvCumulativeMersenneTwisterPathGenerator_next(self)

    def antithetic(self):
        r"""antithetic(InvCumulativeMersenneTwisterPathGenerator self) -> SamplePath"""
        return _quantlib_risks.InvCumulativeMersenneTwisterPathGenerator_antithetic(self)

    def size(self):
        r"""size(InvCumulativeMersenneTwisterPathGenerator self) -> Size"""
        return _quantlib_risks.InvCumulativeMersenneTwisterPathGenerator_size(self)

    def timeGrid(self):
        r"""timeGrid(InvCumulativeMersenneTwisterPathGenerator self) -> TimeGrid"""
        return _quantlib_risks.InvCumulativeMersenneTwisterPathGenerator_timeGrid(self)
    __swig_destroy__ = _quantlib_risks.delete_InvCumulativeMersenneTwisterPathGenerator

# Register InvCumulativeMersenneTwisterPathGenerator in _quantlib_risks:
_quantlib_risks.InvCumulativeMersenneTwisterPathGenerator_swigregister(InvCumulativeMersenneTwisterPathGenerator)
class MultiPath(object):
    r"""Proxy of C++ MultiPath class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __len__(self):
        r"""__len__(MultiPath self) -> Size"""
        return _quantlib_risks.MultiPath___len__(self)

    def assetNumber(self):
        r"""assetNumber(MultiPath self) -> Size"""
        return _quantlib_risks.MultiPath_assetNumber(self)

    def at(self, j):
        r"""at(MultiPath self, Size j) -> Path"""
        return _quantlib_risks.MultiPath_at(self, j)

    def __getitem__(self, i):
        r"""__getitem__(MultiPath self, Integer i) -> Path"""
        return _quantlib_risks.MultiPath___getitem__(self, i)
    __swig_destroy__ = _quantlib_risks.delete_MultiPath

# Register MultiPath in _quantlib_risks:
_quantlib_risks.MultiPath_swigregister(MultiPath)
class SampleMultiPath(object):
    r"""Proxy of C++ Sample< MultiPath > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def value(self):
        r"""value(SampleMultiPath self) -> MultiPath"""
        return _quantlib_risks.SampleMultiPath_value(self)

    def weight(self):
        r"""weight(SampleMultiPath self) -> Real"""
        return _quantlib_risks.SampleMultiPath_weight(self)
    __swig_destroy__ = _quantlib_risks.delete_SampleMultiPath

# Register SampleMultiPath in _quantlib_risks:
_quantlib_risks.SampleMultiPath_swigregister(SampleMultiPath)
class GaussianMultiPathGenerator(object):
    r"""Proxy of C++ MultiPathGenerator< GaussianRandomSequenceGenerator > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GaussianMultiPathGenerator self, ext::shared_ptr< StochasticProcess > const & arg2, TimeGrid timeGrid, GaussianRandomSequenceGenerator generator, bool brownianBridge=False) -> GaussianMultiPathGenerator
        __init__(GaussianMultiPathGenerator self, ext::shared_ptr< StochasticProcess > const & process, std::vector< Time,std::allocator< Time > > const & times, GaussianRandomSequenceGenerator generator, bool brownianBridge=False) -> GaussianMultiPathGenerator
        """
        _quantlib_risks.GaussianMultiPathGenerator_swiginit(self, _quantlib_risks.new_GaussianMultiPathGenerator(*args))

    def next(self):
        r"""next(GaussianMultiPathGenerator self) -> SampleMultiPath"""
        return _quantlib_risks.GaussianMultiPathGenerator_next(self)

    def antithetic(self):
        r"""antithetic(GaussianMultiPathGenerator self) -> SampleMultiPath"""
        return _quantlib_risks.GaussianMultiPathGenerator_antithetic(self)
    __swig_destroy__ = _quantlib_risks.delete_GaussianMultiPathGenerator

# Register GaussianMultiPathGenerator in _quantlib_risks:
_quantlib_risks.GaussianMultiPathGenerator_swigregister(GaussianMultiPathGenerator)
class GaussianSobolMultiPathGenerator(object):
    r"""Proxy of C++ MultiPathGenerator< GaussianLowDiscrepancySequenceGenerator > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GaussianSobolMultiPathGenerator self, ext::shared_ptr< StochasticProcess > const & arg2, TimeGrid timeGrid, GaussianLowDiscrepancySequenceGenerator generator, bool brownianBridge=False) -> GaussianSobolMultiPathGenerator
        __init__(GaussianSobolMultiPathGenerator self, ext::shared_ptr< StochasticProcess > const & process, std::vector< Time,std::allocator< Time > > const & times, GaussianLowDiscrepancySequenceGenerator generator, bool brownianBridge=False) -> GaussianSobolMultiPathGenerator
        """
        _quantlib_risks.GaussianSobolMultiPathGenerator_swiginit(self, _quantlib_risks.new_GaussianSobolMultiPathGenerator(*args))

    def next(self):
        r"""next(GaussianSobolMultiPathGenerator self) -> SampleMultiPath"""
        return _quantlib_risks.GaussianSobolMultiPathGenerator_next(self)

    def antithetic(self):
        r"""antithetic(GaussianSobolMultiPathGenerator self) -> SampleMultiPath"""
        return _quantlib_risks.GaussianSobolMultiPathGenerator_antithetic(self)
    __swig_destroy__ = _quantlib_risks.delete_GaussianSobolMultiPathGenerator

# Register GaussianSobolMultiPathGenerator in _quantlib_risks:
_quantlib_risks.GaussianSobolMultiPathGenerator_swigregister(GaussianSobolMultiPathGenerator)
class BrownianBridge(object):
    r"""Proxy of C++ BrownianBridge class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BrownianBridge self, Size steps) -> BrownianBridge
        __init__(BrownianBridge self, std::vector< Time,std::allocator< Time > > const & times) -> BrownianBridge
        __init__(BrownianBridge self, TimeGrid timeGrid) -> BrownianBridge
        """
        _quantlib_risks.BrownianBridge_swiginit(self, _quantlib_risks.new_BrownianBridge(*args))

    def size(self):
        r"""size(BrownianBridge self) -> Size"""
        return _quantlib_risks.BrownianBridge_size(self)

    def times(self):
        r"""times(BrownianBridge self) -> std::vector< Time,std::allocator< Time > >"""
        return _quantlib_risks.BrownianBridge_times(self)

    def leftWeight(self):
        r"""leftWeight(BrownianBridge self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.BrownianBridge_leftWeight(self)

    def rightWeight(self):
        r"""rightWeight(BrownianBridge self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.BrownianBridge_rightWeight(self)

    def stdDeviation(self):
        r"""stdDeviation(BrownianBridge self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.BrownianBridge_stdDeviation(self)

    def transform(self, input):
        r"""transform(BrownianBridge self, std::vector< Real,std::allocator< Real > > const & input) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.BrownianBridge_transform(self, input)

    def bridgeIndex(self):
        r"""bridgeIndex(BrownianBridge self) -> UnsignedIntVector"""
        return _quantlib_risks.BrownianBridge_bridgeIndex(self)

    def leftIndex(self):
        r"""leftIndex(BrownianBridge self) -> UnsignedIntVector"""
        return _quantlib_risks.BrownianBridge_leftIndex(self)

    def rightIndex(self):
        r"""rightIndex(BrownianBridge self) -> UnsignedIntVector"""
        return _quantlib_risks.BrownianBridge_rightIndex(self)
    __swig_destroy__ = _quantlib_risks.delete_BrownianBridge

# Register BrownianBridge in _quantlib_risks:
_quantlib_risks.BrownianBridge_swigregister(BrownianBridge)
class RungeKutta(object):
    r"""Proxy of C++ AdaptiveRungeKutta< Real > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, eps=1.0e-6, h1=1.0e-4, hmin=0.0):
        r"""__init__(RungeKutta self, Real const eps=1.0e-6, Real const h1=1.0e-4, Real const hmin=0.0) -> RungeKutta"""
        _quantlib_risks.RungeKutta_swiginit(self, _quantlib_risks.new_RungeKutta(eps, h1, hmin))

    def __call__(self, *args):
        r"""
        __call__(RungeKutta self, PyObject * fct, xad::AReal< double > y1, Real x1, Real x2) -> xad::AReal< double >
        __call__(RungeKutta self, PyObject * fct, std::vector< xad::AReal< double >,std::allocator< xad::AReal< double > > > const & y1, Real x1, Real x2) -> std::vector< xad::AReal< double >,std::allocator< xad::AReal< double > > >
        """
        return _quantlib_risks.RungeKutta___call__(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_RungeKutta

# Register RungeKutta in _quantlib_risks:
_quantlib_risks.RungeKutta_swigregister(RungeKutta)
class DefaultBoundaryCondition(object):
    r"""Proxy of C++ DefaultBoundaryCondition class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    NoSide = _quantlib_risks.DefaultBoundaryCondition_NoSide
    
    Upper = _quantlib_risks.DefaultBoundaryCondition_Upper
    
    Lower = _quantlib_risks.DefaultBoundaryCondition_Lower
    
    __swig_destroy__ = _quantlib_risks.delete_DefaultBoundaryCondition

# Register DefaultBoundaryCondition in _quantlib_risks:
_quantlib_risks.DefaultBoundaryCondition_swigregister(DefaultBoundaryCondition)
class NeumannBC(DefaultBoundaryCondition):
    r"""Proxy of C++ NeumannBC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, side):
        r"""__init__(NeumannBC self, Real value, DefaultBoundaryCondition::Side side) -> NeumannBC"""
        _quantlib_risks.NeumannBC_swiginit(self, _quantlib_risks.new_NeumannBC(value, side))
    __swig_destroy__ = _quantlib_risks.delete_NeumannBC

# Register NeumannBC in _quantlib_risks:
_quantlib_risks.NeumannBC_swigregister(NeumannBC)
class DirichletBC(DefaultBoundaryCondition):
    r"""Proxy of C++ DirichletBC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value, side):
        r"""__init__(DirichletBC self, Real value, DefaultBoundaryCondition::Side side) -> DirichletBC"""
        _quantlib_risks.DirichletBC_swiginit(self, _quantlib_risks.new_DirichletBC(value, side))
    __swig_destroy__ = _quantlib_risks.delete_DirichletBC

# Register DirichletBC in _quantlib_risks:
_quantlib_risks.DirichletBC_swigregister(DirichletBC)
class TridiagonalOperator(object):
    r"""Proxy of C++ TridiagonalOperator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, low, mid, high):
        r"""__init__(TridiagonalOperator self, Array low, Array mid, Array high) -> TridiagonalOperator"""
        _quantlib_risks.TridiagonalOperator_swiginit(self, _quantlib_risks.new_TridiagonalOperator(low, mid, high))

    def solveFor(self, rhs):
        r"""solveFor(TridiagonalOperator self, Array rhs) -> Array"""
        return _quantlib_risks.TridiagonalOperator_solveFor(self, rhs)

    def applyTo(self, v):
        r"""applyTo(TridiagonalOperator self, Array v) -> Array"""
        return _quantlib_risks.TridiagonalOperator_applyTo(self, v)

    def size(self):
        r"""size(TridiagonalOperator self) -> Size"""
        return _quantlib_risks.TridiagonalOperator_size(self)

    def setFirstRow(self, arg2, arg3):
        r"""setFirstRow(TridiagonalOperator self, Real arg2, Real arg3)"""
        return _quantlib_risks.TridiagonalOperator_setFirstRow(self, arg2, arg3)

    def setMidRow(self, arg2, arg3, arg4, arg5):
        r"""setMidRow(TridiagonalOperator self, Size arg2, Real arg3, Real arg4, Real arg5)"""
        return _quantlib_risks.TridiagonalOperator_setMidRow(self, arg2, arg3, arg4, arg5)

    def setMidRows(self, arg2, arg3, arg4):
        r"""setMidRows(TridiagonalOperator self, Real arg2, Real arg3, Real arg4)"""
        return _quantlib_risks.TridiagonalOperator_setMidRows(self, arg2, arg3, arg4)

    def setLastRow(self, arg2, arg3):
        r"""setLastRow(TridiagonalOperator self, Real arg2, Real arg3)"""
        return _quantlib_risks.TridiagonalOperator_setLastRow(self, arg2, arg3)

    @staticmethod
    def identity(size):
        r"""identity(Size size) -> TridiagonalOperator"""
        return _quantlib_risks.TridiagonalOperator_identity(size)

    def __add__(self, O):
        r"""__add__(TridiagonalOperator self, TridiagonalOperator O) -> TridiagonalOperator"""
        return _quantlib_risks.TridiagonalOperator___add__(self, O)

    def __sub__(self, O):
        r"""__sub__(TridiagonalOperator self, TridiagonalOperator O) -> TridiagonalOperator"""
        return _quantlib_risks.TridiagonalOperator___sub__(self, O)

    def __mul__(self, a):
        r"""__mul__(TridiagonalOperator self, Real a) -> TridiagonalOperator"""
        return _quantlib_risks.TridiagonalOperator___mul__(self, a)

    def __div__(self, a):
        r"""__div__(TridiagonalOperator self, Real a) -> TridiagonalOperator"""
        return _quantlib_risks.TridiagonalOperator___div__(self, a)

    def __iadd__(self, O):
        r"""__iadd__(TridiagonalOperator self, TridiagonalOperator O) -> TridiagonalOperator"""
        return _quantlib_risks.TridiagonalOperator___iadd__(self, O)

    def __isub__(self, O):
        r"""__isub__(TridiagonalOperator self, TridiagonalOperator O) -> TridiagonalOperator"""
        return _quantlib_risks.TridiagonalOperator___isub__(self, O)

    def __imul__(self, a):
        r"""__imul__(TridiagonalOperator self, Real a) -> TridiagonalOperator"""
        return _quantlib_risks.TridiagonalOperator___imul__(self, a)

    def __rmul__(self, a):
        r"""__rmul__(TridiagonalOperator self, Real a) -> TridiagonalOperator"""
        return _quantlib_risks.TridiagonalOperator___rmul__(self, a)

    def __idiv__(self, a):
        r"""__idiv__(TridiagonalOperator self, Real a) -> TridiagonalOperator"""
        return _quantlib_risks.TridiagonalOperator___idiv__(self, a)
    __swig_destroy__ = _quantlib_risks.delete_TridiagonalOperator

# Register TridiagonalOperator in _quantlib_risks:
_quantlib_risks.TridiagonalOperator_swigregister(TridiagonalOperator)
class DPlus(TridiagonalOperator):
    r"""Proxy of C++ DPlus class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gridPoints, h):
        r"""__init__(DPlus self, Size gridPoints, Real h) -> DPlus"""
        _quantlib_risks.DPlus_swiginit(self, _quantlib_risks.new_DPlus(gridPoints, h))
    __swig_destroy__ = _quantlib_risks.delete_DPlus

# Register DPlus in _quantlib_risks:
_quantlib_risks.DPlus_swigregister(DPlus)
class DMinus(TridiagonalOperator):
    r"""Proxy of C++ DMinus class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gridPoints, h):
        r"""__init__(DMinus self, Size gridPoints, Real h) -> DMinus"""
        _quantlib_risks.DMinus_swiginit(self, _quantlib_risks.new_DMinus(gridPoints, h))
    __swig_destroy__ = _quantlib_risks.delete_DMinus

# Register DMinus in _quantlib_risks:
_quantlib_risks.DMinus_swigregister(DMinus)
class DZero(TridiagonalOperator):
    r"""Proxy of C++ DZero class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gridPoints, h):
        r"""__init__(DZero self, Size gridPoints, Real h) -> DZero"""
        _quantlib_risks.DZero_swiginit(self, _quantlib_risks.new_DZero(gridPoints, h))
    __swig_destroy__ = _quantlib_risks.delete_DZero

# Register DZero in _quantlib_risks:
_quantlib_risks.DZero_swigregister(DZero)
class DPlusDMinus(TridiagonalOperator):
    r"""Proxy of C++ DPlusDMinus class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, gridPoints, h):
        r"""__init__(DPlusDMinus self, Size gridPoints, Real h) -> DPlusDMinus"""
        _quantlib_risks.DPlusDMinus_swiginit(self, _quantlib_risks.new_DPlusDMinus(gridPoints, h))
    __swig_destroy__ = _quantlib_risks.delete_DPlusDMinus

# Register DPlusDMinus in _quantlib_risks:
_quantlib_risks.DPlusDMinus_swigregister(DPlusDMinus)
class SampledCurve(object):
    r"""Proxy of C++ SampledCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SampledCurve self) -> SampledCurve
        __init__(SampledCurve self, Array arg2) -> SampledCurve
        """
        _quantlib_risks.SampledCurve_swiginit(self, _quantlib_risks.new_SampledCurve(*args))

    def grid(self):
        r"""grid(SampledCurve self) -> Array"""
        return _quantlib_risks.SampledCurve_grid(self)

    def values(self):
        r"""values(SampledCurve self) -> Array"""
        return _quantlib_risks.SampledCurve_values(self)

    def gridValue(self, i):
        r"""gridValue(SampledCurve self, Size i) -> Real"""
        return _quantlib_risks.SampledCurve_gridValue(self, i)

    def value(self, i):
        r"""value(SampledCurve self, Size i) -> Real"""
        return _quantlib_risks.SampledCurve_value(self, i)

    def size(self):
        r"""size(SampledCurve self) -> Size"""
        return _quantlib_risks.SampledCurve_size(self)

    def empty(self):
        r"""empty(SampledCurve self) -> bool"""
        return _quantlib_risks.SampledCurve_empty(self)

    def setGrid(self, arg2):
        r"""setGrid(SampledCurve self, Array arg2)"""
        return _quantlib_risks.SampledCurve_setGrid(self, arg2)

    def setValues(self, arg2):
        r"""setValues(SampledCurve self, Array arg2)"""
        return _quantlib_risks.SampledCurve_setValues(self, arg2)

    def swap(self, arg2):
        r"""swap(SampledCurve self, SampledCurve arg2)"""
        return _quantlib_risks.SampledCurve_swap(self, arg2)

    def setLogGrid(self, min, max):
        r"""setLogGrid(SampledCurve self, Real min, Real max)"""
        return _quantlib_risks.SampledCurve_setLogGrid(self, min, max)

    def regridLogGrid(self, min, max):
        r"""regridLogGrid(SampledCurve self, Real min, Real max)"""
        return _quantlib_risks.SampledCurve_regridLogGrid(self, min, max)

    def shiftGrid(self, s):
        r"""shiftGrid(SampledCurve self, Real s)"""
        return _quantlib_risks.SampledCurve_shiftGrid(self, s)

    def scaleGrid(self, s):
        r"""scaleGrid(SampledCurve self, Real s)"""
        return _quantlib_risks.SampledCurve_scaleGrid(self, s)

    def regrid(self, arg2):
        r"""regrid(SampledCurve self, Array arg2)"""
        return _quantlib_risks.SampledCurve_regrid(self, arg2)
    __swig_destroy__ = _quantlib_risks.delete_SampledCurve

# Register SampledCurve in _quantlib_risks:
_quantlib_risks.SampledCurve_swigregister(SampledCurve)
class HestonSLVProcess(StochasticProcess):
    r"""Proxy of C++ HestonSLVProcess class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, hestonProcess, leverageFct, mixingFactor=1.0):
        r"""__init__(HestonSLVProcess self, ext::shared_ptr< HestonProcess > const & hestonProcess, ext::shared_ptr< LocalVolTermStructure > const & leverageFct, Real const mixingFactor=1.0) -> HestonSLVProcess"""
        _quantlib_risks.HestonSLVProcess_swiginit(self, _quantlib_risks.new_HestonSLVProcess(hestonProcess, leverageFct, mixingFactor))
    __swig_destroy__ = _quantlib_risks.delete_HestonSLVProcess

# Register HestonSLVProcess in _quantlib_risks:
_quantlib_risks.HestonSLVProcess_swigregister(HestonSLVProcess)
class HestonSLVMCModel(object):
    r"""Proxy of C++ HestonSLVMCModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(HestonSLVMCModel self, ext::shared_ptr< LocalVolTermStructure > const & localVol, ext::shared_ptr< HestonModel > const & model, ext::shared_ptr< BrownianGeneratorFactory > const & brownianGeneratorFactory, Date endDate, Size timeStepsPerYear=365, Size nBins=201, Size calibrationPaths=(1 << 15), DateVector mandatoryDates=std::vector< Date >(), Real mixingFactor=1.0) -> HestonSLVMCModel"""
        _quantlib_risks.HestonSLVMCModel_swiginit(self, _quantlib_risks.new_HestonSLVMCModel(*args))

    def hestonProcess(self):
        r"""hestonProcess(HestonSLVMCModel self) -> ext::shared_ptr< HestonProcess >"""
        return _quantlib_risks.HestonSLVMCModel_hestonProcess(self)

    def localVol(self):
        r"""localVol(HestonSLVMCModel self) -> ext::shared_ptr< LocalVolTermStructure >"""
        return _quantlib_risks.HestonSLVMCModel_localVol(self)

    def leverageFunction(self):
        r"""leverageFunction(HestonSLVMCModel self) -> ext::shared_ptr< LocalVolTermStructure >"""
        return _quantlib_risks.HestonSLVMCModel_leverageFunction(self)
    __swig_destroy__ = _quantlib_risks.delete_HestonSLVMCModel

# Register HestonSLVMCModel in _quantlib_risks:
_quantlib_risks.HestonSLVMCModel_swigregister(HestonSLVMCModel)
class FdmHestonGreensFct(object):
    r"""Proxy of C++ FdmHestonGreensFct class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ZeroCorrelation = _quantlib_risks.FdmHestonGreensFct_ZeroCorrelation
    
    Gaussian = _quantlib_risks.FdmHestonGreensFct_Gaussian
    
    SemiAnalytical = _quantlib_risks.FdmHestonGreensFct_SemiAnalytical
    
    __swig_destroy__ = _quantlib_risks.delete_FdmHestonGreensFct

# Register FdmHestonGreensFct in _quantlib_risks:
_quantlib_risks.FdmHestonGreensFct_swigregister(FdmHestonGreensFct)
class HestonSLVFokkerPlanckFdmParams(object):
    r"""Proxy of C++ HestonSLVFokkerPlanckFdmParams class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, xGrid, vGrid, tMaxStepsPerYear, tMinStepsPerYear, tStepNumberDecay, nRannacherTimeSteps, predictionCorretionSteps, x0Density, localVolEpsProb, maxIntegrationIterations, vLowerEps, vUpperEps, vMin, v0Density, vLowerBoundDensity, vUpperBoundDensity, leverageFctPropEps, greensAlgorithm, trafoType, schemeDesc):
        r"""__init__(HestonSLVFokkerPlanckFdmParams self, Size xGrid, Size vGrid, Size tMaxStepsPerYear, Size tMinStepsPerYear, Real tStepNumberDecay, Size nRannacherTimeSteps, Size predictionCorretionSteps, Real x0Density, Real localVolEpsProb, Size maxIntegrationIterations, Real vLowerEps, Real vUpperEps, Real vMin, Real v0Density, Real vLowerBoundDensity, Real vUpperBoundDensity, Real leverageFctPropEps, FdmHestonGreensFct::Algorithm greensAlgorithm, FdmSquareRootFwdOp::TransformationType trafoType, FdmSchemeDesc schemeDesc) -> HestonSLVFokkerPlanckFdmParams"""
        _quantlib_risks.HestonSLVFokkerPlanckFdmParams_swiginit(self, _quantlib_risks.new_HestonSLVFokkerPlanckFdmParams(xGrid, vGrid, tMaxStepsPerYear, tMinStepsPerYear, tStepNumberDecay, nRannacherTimeSteps, predictionCorretionSteps, x0Density, localVolEpsProb, maxIntegrationIterations, vLowerEps, vUpperEps, vMin, v0Density, vLowerBoundDensity, vUpperBoundDensity, leverageFctPropEps, greensAlgorithm, trafoType, schemeDesc))
    __swig_destroy__ = _quantlib_risks.delete_HestonSLVFokkerPlanckFdmParams

# Register HestonSLVFokkerPlanckFdmParams in _quantlib_risks:
_quantlib_risks.HestonSLVFokkerPlanckFdmParams_swigregister(HestonSLVFokkerPlanckFdmParams)
class HestonSLVFDMModel(object):
    r"""Proxy of C++ HestonSLVFDMModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(HestonSLVFDMModel self, ext::shared_ptr< LocalVolTermStructure > const & localVol, ext::shared_ptr< HestonModel > const & model, Date endDate, HestonSLVFokkerPlanckFdmParams params, bool const logging=False, DateVector mandatoryDates=std::vector< Date >(), Real mixingFactor=1.0) -> HestonSLVFDMModel"""
        _quantlib_risks.HestonSLVFDMModel_swiginit(self, _quantlib_risks.new_HestonSLVFDMModel(*args))

    def hestonProcess(self):
        r"""hestonProcess(HestonSLVFDMModel self) -> ext::shared_ptr< HestonProcess >"""
        return _quantlib_risks.HestonSLVFDMModel_hestonProcess(self)

    def localVol(self):
        r"""localVol(HestonSLVFDMModel self) -> ext::shared_ptr< LocalVolTermStructure >"""
        return _quantlib_risks.HestonSLVFDMModel_localVol(self)

    def leverageFunction(self):
        r"""leverageFunction(HestonSLVFDMModel self) -> ext::shared_ptr< LocalVolTermStructure >"""
        return _quantlib_risks.HestonSLVFDMModel_leverageFunction(self)
    __swig_destroy__ = _quantlib_risks.delete_HestonSLVFDMModel

# Register HestonSLVFDMModel in _quantlib_risks:
_quantlib_risks.HestonSLVFDMModel_swigregister(HestonSLVFDMModel)
class SpreadOption(MultiAssetOption):
    r"""Proxy of C++ SpreadOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff, exercise):
        r"""__init__(SpreadOption self, ext::shared_ptr< PlainVanillaPayoff > const & payoff, ext::shared_ptr< Exercise > const & exercise) -> SpreadOption"""
        _quantlib_risks.SpreadOption_swiginit(self, _quantlib_risks.new_SpreadOption(payoff, exercise))
    __swig_destroy__ = _quantlib_risks.delete_SpreadOption

# Register SpreadOption in _quantlib_risks:
_quantlib_risks.SpreadOption_swigregister(SpreadOption)
class KirkSpreadOptionEngine(PricingEngine):
    r"""Proxy of C++ KirkSpreadOptionEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, process1, process2, correlation):
        r"""__init__(KirkSpreadOptionEngine self, ext::shared_ptr< BlackProcess > const & process1, ext::shared_ptr< BlackProcess > const & process2, QuoteHandle correlation) -> KirkSpreadOptionEngine"""
        _quantlib_risks.KirkSpreadOptionEngine_swiginit(self, _quantlib_risks.new_KirkSpreadOptionEngine(process1, process2, correlation))
    __swig_destroy__ = _quantlib_risks.delete_KirkSpreadOptionEngine

# Register KirkSpreadOptionEngine in _quantlib_risks:
_quantlib_risks.KirkSpreadOptionEngine_swigregister(KirkSpreadOptionEngine)
class Statistics(object):
    r"""Proxy of C++ Statistics class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def samples(self):
        r"""samples(Statistics self) -> Size"""
        return _quantlib_risks.Statistics_samples(self)

    def weightSum(self):
        r"""weightSum(Statistics self) -> Real"""
        return _quantlib_risks.Statistics_weightSum(self)

    def mean(self):
        r"""mean(Statistics self) -> Real"""
        return _quantlib_risks.Statistics_mean(self)

    def variance(self):
        r"""variance(Statistics self) -> Real"""
        return _quantlib_risks.Statistics_variance(self)

    def standardDeviation(self):
        r"""standardDeviation(Statistics self) -> Real"""
        return _quantlib_risks.Statistics_standardDeviation(self)

    def errorEstimate(self):
        r"""errorEstimate(Statistics self) -> Real"""
        return _quantlib_risks.Statistics_errorEstimate(self)

    def skewness(self):
        r"""skewness(Statistics self) -> Real"""
        return _quantlib_risks.Statistics_skewness(self)

    def kurtosis(self):
        r"""kurtosis(Statistics self) -> Real"""
        return _quantlib_risks.Statistics_kurtosis(self)

    def min(self):
        r"""min(Statistics self) -> Real"""
        return _quantlib_risks.Statistics_min(self)

    def max(self):
        r"""max(Statistics self) -> Real"""
        return _quantlib_risks.Statistics_max(self)

    def reset(self):
        r"""reset(Statistics self)"""
        return _quantlib_risks.Statistics_reset(self)

    def add(self, *args):
        r"""
        add(Statistics self, Real value, Real weight=1.0)
        add(Statistics self, std::vector< Real,std::allocator< Real > > const & values)
        add(Statistics self, std::vector< Real,std::allocator< Real > > const & values, std::vector< Real,std::allocator< Real > > const & weights)
        """
        return _quantlib_risks.Statistics_add(self, *args)

    def __init__(self):
        r"""__init__(Statistics self) -> Statistics"""
        _quantlib_risks.Statistics_swiginit(self, _quantlib_risks.new_Statistics())
    __swig_destroy__ = _quantlib_risks.delete_Statistics

# Register Statistics in _quantlib_risks:
_quantlib_risks.Statistics_swigregister(Statistics)
class IncrementalStatistics(object):
    r"""Proxy of C++ IncrementalStatistics class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def samples(self):
        r"""samples(IncrementalStatistics self) -> Size"""
        return _quantlib_risks.IncrementalStatistics_samples(self)

    def weightSum(self):
        r"""weightSum(IncrementalStatistics self) -> Real"""
        return _quantlib_risks.IncrementalStatistics_weightSum(self)

    def mean(self):
        r"""mean(IncrementalStatistics self) -> Real"""
        return _quantlib_risks.IncrementalStatistics_mean(self)

    def variance(self):
        r"""variance(IncrementalStatistics self) -> Real"""
        return _quantlib_risks.IncrementalStatistics_variance(self)

    def standardDeviation(self):
        r"""standardDeviation(IncrementalStatistics self) -> Real"""
        return _quantlib_risks.IncrementalStatistics_standardDeviation(self)

    def errorEstimate(self):
        r"""errorEstimate(IncrementalStatistics self) -> Real"""
        return _quantlib_risks.IncrementalStatistics_errorEstimate(self)

    def skewness(self):
        r"""skewness(IncrementalStatistics self) -> Real"""
        return _quantlib_risks.IncrementalStatistics_skewness(self)

    def kurtosis(self):
        r"""kurtosis(IncrementalStatistics self) -> Real"""
        return _quantlib_risks.IncrementalStatistics_kurtosis(self)

    def min(self):
        r"""min(IncrementalStatistics self) -> Real"""
        return _quantlib_risks.IncrementalStatistics_min(self)

    def max(self):
        r"""max(IncrementalStatistics self) -> Real"""
        return _quantlib_risks.IncrementalStatistics_max(self)

    def reset(self):
        r"""reset(IncrementalStatistics self)"""
        return _quantlib_risks.IncrementalStatistics_reset(self)

    def add(self, *args):
        r"""
        add(IncrementalStatistics self, Real value, Real weight=1.0)
        add(IncrementalStatistics self, std::vector< Real,std::allocator< Real > > const & values)
        add(IncrementalStatistics self, std::vector< Real,std::allocator< Real > > const & values, std::vector< Real,std::allocator< Real > > const & weights)
        """
        return _quantlib_risks.IncrementalStatistics_add(self, *args)

    def __init__(self):
        r"""__init__(IncrementalStatistics self) -> IncrementalStatistics"""
        _quantlib_risks.IncrementalStatistics_swiginit(self, _quantlib_risks.new_IncrementalStatistics())
    __swig_destroy__ = _quantlib_risks.delete_IncrementalStatistics

# Register IncrementalStatistics in _quantlib_risks:
_quantlib_risks.IncrementalStatistics_swigregister(IncrementalStatistics)
class RiskStatistics(Statistics):
    r"""Proxy of C++ RiskStatistics class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def semiVariance(self):
        r"""semiVariance(RiskStatistics self) -> Real"""
        return _quantlib_risks.RiskStatistics_semiVariance(self)

    def semiDeviation(self):
        r"""semiDeviation(RiskStatistics self) -> Real"""
        return _quantlib_risks.RiskStatistics_semiDeviation(self)

    def downsideVariance(self):
        r"""downsideVariance(RiskStatistics self) -> Real"""
        return _quantlib_risks.RiskStatistics_downsideVariance(self)

    def downsideDeviation(self):
        r"""downsideDeviation(RiskStatistics self) -> Real"""
        return _quantlib_risks.RiskStatistics_downsideDeviation(self)

    def regret(self, target):
        r"""regret(RiskStatistics self, Real target) -> Real"""
        return _quantlib_risks.RiskStatistics_regret(self, target)

    def potentialUpside(self, percentile):
        r"""potentialUpside(RiskStatistics self, Real percentile) -> Real"""
        return _quantlib_risks.RiskStatistics_potentialUpside(self, percentile)

    def valueAtRisk(self, percentile):
        r"""valueAtRisk(RiskStatistics self, Real percentile) -> Real"""
        return _quantlib_risks.RiskStatistics_valueAtRisk(self, percentile)

    def expectedShortfall(self, percentile):
        r"""expectedShortfall(RiskStatistics self, Real percentile) -> Real"""
        return _quantlib_risks.RiskStatistics_expectedShortfall(self, percentile)

    def shortfall(self, target):
        r"""shortfall(RiskStatistics self, Real target) -> Real"""
        return _quantlib_risks.RiskStatistics_shortfall(self, target)

    def averageShortfall(self, target):
        r"""averageShortfall(RiskStatistics self, Real target) -> Real"""
        return _quantlib_risks.RiskStatistics_averageShortfall(self, target)

    def __init__(self):
        r"""__init__(RiskStatistics self) -> RiskStatistics"""
        _quantlib_risks.RiskStatistics_swiginit(self, _quantlib_risks.new_RiskStatistics())
    __swig_destroy__ = _quantlib_risks.delete_RiskStatistics

# Register RiskStatistics in _quantlib_risks:
_quantlib_risks.RiskStatistics_swigregister(RiskStatistics)
class MultipleStatistics(object):
    r"""Proxy of C++ GenericSequenceStatistics< Statistics > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dimension):
        r"""__init__(MultipleStatistics self, Size dimension) -> MultipleStatistics"""
        _quantlib_risks.MultipleStatistics_swiginit(self, _quantlib_risks.new_MultipleStatistics(dimension))

    def size(self):
        r"""size(MultipleStatistics self) -> Size"""
        return _quantlib_risks.MultipleStatistics_size(self)

    def samples(self):
        r"""samples(MultipleStatistics self) -> Size"""
        return _quantlib_risks.MultipleStatistics_samples(self)

    def weightSum(self):
        r"""weightSum(MultipleStatistics self) -> Real"""
        return _quantlib_risks.MultipleStatistics_weightSum(self)

    def mean(self):
        r"""mean(MultipleStatistics self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.MultipleStatistics_mean(self)

    def variance(self):
        r"""variance(MultipleStatistics self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.MultipleStatistics_variance(self)

    def standardDeviation(self):
        r"""standardDeviation(MultipleStatistics self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.MultipleStatistics_standardDeviation(self)

    def errorEstimate(self):
        r"""errorEstimate(MultipleStatistics self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.MultipleStatistics_errorEstimate(self)

    def skewness(self):
        r"""skewness(MultipleStatistics self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.MultipleStatistics_skewness(self)

    def kurtosis(self):
        r"""kurtosis(MultipleStatistics self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.MultipleStatistics_kurtosis(self)

    def min(self):
        r"""min(MultipleStatistics self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.MultipleStatistics_min(self)

    def max(self):
        r"""max(MultipleStatistics self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.MultipleStatistics_max(self)

    def covariance(self):
        r"""covariance(MultipleStatistics self) -> Matrix"""
        return _quantlib_risks.MultipleStatistics_covariance(self)

    def correlation(self):
        r"""correlation(MultipleStatistics self) -> Matrix"""
        return _quantlib_risks.MultipleStatistics_correlation(self)

    def reset(self):
        r"""reset(MultipleStatistics self)"""
        return _quantlib_risks.MultipleStatistics_reset(self)

    def add(self, *args):
        r"""
        add(MultipleStatistics self, std::vector< Real,std::allocator< Real > > const & value, Real weight=1.0)
        add(MultipleStatistics self, Array value, Real weight=1.0)
        """
        return _quantlib_risks.MultipleStatistics_add(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_MultipleStatistics

# Register MultipleStatistics in _quantlib_risks:
_quantlib_risks.MultipleStatistics_swigregister(MultipleStatistics)
class SequenceStatistics(object):
    r"""Proxy of C++ GenericSequenceStatistics< RiskStatistics > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dimension):
        r"""__init__(SequenceStatistics self, Size dimension) -> SequenceStatistics"""
        _quantlib_risks.SequenceStatistics_swiginit(self, _quantlib_risks.new_SequenceStatistics(dimension))

    def size(self):
        r"""size(SequenceStatistics self) -> Size"""
        return _quantlib_risks.SequenceStatistics_size(self)

    def samples(self):
        r"""samples(SequenceStatistics self) -> Size"""
        return _quantlib_risks.SequenceStatistics_samples(self)

    def weightSum(self):
        r"""weightSum(SequenceStatistics self) -> Real"""
        return _quantlib_risks.SequenceStatistics_weightSum(self)

    def mean(self):
        r"""mean(SequenceStatistics self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.SequenceStatistics_mean(self)

    def variance(self):
        r"""variance(SequenceStatistics self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.SequenceStatistics_variance(self)

    def standardDeviation(self):
        r"""standardDeviation(SequenceStatistics self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.SequenceStatistics_standardDeviation(self)

    def errorEstimate(self):
        r"""errorEstimate(SequenceStatistics self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.SequenceStatistics_errorEstimate(self)

    def skewness(self):
        r"""skewness(SequenceStatistics self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.SequenceStatistics_skewness(self)

    def kurtosis(self):
        r"""kurtosis(SequenceStatistics self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.SequenceStatistics_kurtosis(self)

    def min(self):
        r"""min(SequenceStatistics self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.SequenceStatistics_min(self)

    def max(self):
        r"""max(SequenceStatistics self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.SequenceStatistics_max(self)

    def covariance(self):
        r"""covariance(SequenceStatistics self) -> Matrix"""
        return _quantlib_risks.SequenceStatistics_covariance(self)

    def correlation(self):
        r"""correlation(SequenceStatistics self) -> Matrix"""
        return _quantlib_risks.SequenceStatistics_correlation(self)

    def reset(self):
        r"""reset(SequenceStatistics self)"""
        return _quantlib_risks.SequenceStatistics_reset(self)

    def add(self, *args):
        r"""
        add(SequenceStatistics self, std::vector< Real,std::allocator< Real > > const & value, Real weight=1.0)
        add(SequenceStatistics self, Array value, Real weight=1.0)
        """
        return _quantlib_risks.SequenceStatistics_add(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_SequenceStatistics

# Register SequenceStatistics in _quantlib_risks:
_quantlib_risks.SequenceStatistics_swigregister(SequenceStatistics)
class MultipleIncrementalStatistics(object):
    r"""Proxy of C++ GenericSequenceStatistics< IncrementalStatistics > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dimension):
        r"""__init__(MultipleIncrementalStatistics self, Size dimension) -> MultipleIncrementalStatistics"""
        _quantlib_risks.MultipleIncrementalStatistics_swiginit(self, _quantlib_risks.new_MultipleIncrementalStatistics(dimension))

    def size(self):
        r"""size(MultipleIncrementalStatistics self) -> Size"""
        return _quantlib_risks.MultipleIncrementalStatistics_size(self)

    def samples(self):
        r"""samples(MultipleIncrementalStatistics self) -> Size"""
        return _quantlib_risks.MultipleIncrementalStatistics_samples(self)

    def weightSum(self):
        r"""weightSum(MultipleIncrementalStatistics self) -> Real"""
        return _quantlib_risks.MultipleIncrementalStatistics_weightSum(self)

    def mean(self):
        r"""mean(MultipleIncrementalStatistics self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.MultipleIncrementalStatistics_mean(self)

    def variance(self):
        r"""variance(MultipleIncrementalStatistics self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.MultipleIncrementalStatistics_variance(self)

    def standardDeviation(self):
        r"""standardDeviation(MultipleIncrementalStatistics self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.MultipleIncrementalStatistics_standardDeviation(self)

    def errorEstimate(self):
        r"""errorEstimate(MultipleIncrementalStatistics self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.MultipleIncrementalStatistics_errorEstimate(self)

    def skewness(self):
        r"""skewness(MultipleIncrementalStatistics self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.MultipleIncrementalStatistics_skewness(self)

    def kurtosis(self):
        r"""kurtosis(MultipleIncrementalStatistics self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.MultipleIncrementalStatistics_kurtosis(self)

    def min(self):
        r"""min(MultipleIncrementalStatistics self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.MultipleIncrementalStatistics_min(self)

    def max(self):
        r"""max(MultipleIncrementalStatistics self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.MultipleIncrementalStatistics_max(self)

    def covariance(self):
        r"""covariance(MultipleIncrementalStatistics self) -> Matrix"""
        return _quantlib_risks.MultipleIncrementalStatistics_covariance(self)

    def correlation(self):
        r"""correlation(MultipleIncrementalStatistics self) -> Matrix"""
        return _quantlib_risks.MultipleIncrementalStatistics_correlation(self)

    def reset(self):
        r"""reset(MultipleIncrementalStatistics self)"""
        return _quantlib_risks.MultipleIncrementalStatistics_reset(self)

    def add(self, *args):
        r"""
        add(MultipleIncrementalStatistics self, std::vector< Real,std::allocator< Real > > const & value, Real weight=1.0)
        add(MultipleIncrementalStatistics self, Array value, Real weight=1.0)
        """
        return _quantlib_risks.MultipleIncrementalStatistics_add(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_MultipleIncrementalStatistics

# Register MultipleIncrementalStatistics in _quantlib_risks:
_quantlib_risks.MultipleIncrementalStatistics_swigregister(MultipleIncrementalStatistics)
class CapFloorTermVolatilityStructure(VolatilityTermStructure):
    r"""Proxy of C++ CapFloorTermVolatilityStructure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def volatility(self, *args):
        r"""
        volatility(CapFloorTermVolatilityStructure self, Period length, Rate strike, bool extrapolate=False) -> Volatility
        volatility(CapFloorTermVolatilityStructure self, Date end, Rate strike, bool extrapolate=False) -> Volatility
        volatility(CapFloorTermVolatilityStructure self, Time end, Rate strike, bool extrapolate=False) -> Volatility
        """
        return _quantlib_risks.CapFloorTermVolatilityStructure_volatility(self, *args)
    __swig_destroy__ = _quantlib_risks.delete_CapFloorTermVolatilityStructure

# Register CapFloorTermVolatilityStructure in _quantlib_risks:
_quantlib_risks.CapFloorTermVolatilityStructure_swigregister(CapFloorTermVolatilityStructure)
class CapFloorTermVolatilityStructureHandle(object):
    r"""Proxy of C++ Handle< CapFloorTermVolatilityStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(CapFloorTermVolatilityStructureHandle self, ext::shared_ptr< CapFloorTermVolatilityStructure > const & arg2=ext::shared_ptr()) -> CapFloorTermVolatilityStructureHandle"""
        _quantlib_risks.CapFloorTermVolatilityStructureHandle_swiginit(self, _quantlib_risks.new_CapFloorTermVolatilityStructureHandle(*args))

    def __deref__(self):
        r"""__deref__(CapFloorTermVolatilityStructureHandle self) -> ext::shared_ptr< CapFloorTermVolatilityStructure >"""
        return _quantlib_risks.CapFloorTermVolatilityStructureHandle___deref__(self)

    def currentLink(self):
        r"""currentLink(CapFloorTermVolatilityStructureHandle self) -> ext::shared_ptr< CapFloorTermVolatilityStructure >"""
        return _quantlib_risks.CapFloorTermVolatilityStructureHandle_currentLink(self)

    def __nonzero__(self):
        r"""__nonzero__(CapFloorTermVolatilityStructureHandle self) -> bool"""
        return _quantlib_risks.CapFloorTermVolatilityStructureHandle___nonzero__(self)

    def __bool__(self):
        r"""__bool__(CapFloorTermVolatilityStructureHandle self) -> bool"""
        return _quantlib_risks.CapFloorTermVolatilityStructureHandle___bool__(self)

    def asObservable(self):
        r"""asObservable(CapFloorTermVolatilityStructureHandle self) -> ext::shared_ptr< Observable >"""
        return _quantlib_risks.CapFloorTermVolatilityStructureHandle_asObservable(self)
    __swig_destroy__ = _quantlib_risks.delete_CapFloorTermVolatilityStructureHandle

    def volatility(self, *args):
        r"""
        volatility(CapFloorTermVolatilityStructureHandle self, Period length, Rate strike, bool extrapolate=False) -> Volatility
        volatility(CapFloorTermVolatilityStructureHandle self, Date end, Rate strike, bool extrapolate=False) -> Volatility
        volatility(CapFloorTermVolatilityStructureHandle self, Time end, Rate strike, bool extrapolate=False) -> Volatility
        """
        return _quantlib_risks.CapFloorTermVolatilityStructureHandle_volatility(self, *args)

    def minStrike(self):
        r"""minStrike(CapFloorTermVolatilityStructureHandle self) -> Real"""
        return _quantlib_risks.CapFloorTermVolatilityStructureHandle_minStrike(self)

    def maxStrike(self):
        r"""maxStrike(CapFloorTermVolatilityStructureHandle self) -> Real"""
        return _quantlib_risks.CapFloorTermVolatilityStructureHandle_maxStrike(self)

    def dayCounter(self):
        r"""dayCounter(CapFloorTermVolatilityStructureHandle self) -> DayCounter"""
        return _quantlib_risks.CapFloorTermVolatilityStructureHandle_dayCounter(self)

    def timeFromReference(self, date):
        r"""timeFromReference(CapFloorTermVolatilityStructureHandle self, Date date) -> Time"""
        return _quantlib_risks.CapFloorTermVolatilityStructureHandle_timeFromReference(self, date)

    def calendar(self):
        r"""calendar(CapFloorTermVolatilityStructureHandle self) -> Calendar"""
        return _quantlib_risks.CapFloorTermVolatilityStructureHandle_calendar(self)

    def referenceDate(self):
        r"""referenceDate(CapFloorTermVolatilityStructureHandle self) -> Date"""
        return _quantlib_risks.CapFloorTermVolatilityStructureHandle_referenceDate(self)

    def maxDate(self):
        r"""maxDate(CapFloorTermVolatilityStructureHandle self) -> Date"""
        return _quantlib_risks.CapFloorTermVolatilityStructureHandle_maxDate(self)

    def maxTime(self):
        r"""maxTime(CapFloorTermVolatilityStructureHandle self) -> Time"""
        return _quantlib_risks.CapFloorTermVolatilityStructureHandle_maxTime(self)

    def enableExtrapolation(self):
        r"""enableExtrapolation(CapFloorTermVolatilityStructureHandle self)"""
        return _quantlib_risks.CapFloorTermVolatilityStructureHandle_enableExtrapolation(self)

    def disableExtrapolation(self):
        r"""disableExtrapolation(CapFloorTermVolatilityStructureHandle self)"""
        return _quantlib_risks.CapFloorTermVolatilityStructureHandle_disableExtrapolation(self)

    def allowsExtrapolation(self):
        r"""allowsExtrapolation(CapFloorTermVolatilityStructureHandle self) -> bool"""
        return _quantlib_risks.CapFloorTermVolatilityStructureHandle_allowsExtrapolation(self)

# Register CapFloorTermVolatilityStructureHandle in _quantlib_risks:
_quantlib_risks.CapFloorTermVolatilityStructureHandle_swigregister(CapFloorTermVolatilityStructureHandle)
class RelinkableCapFloorTermVolatilityStructureHandle(CapFloorTermVolatilityStructureHandle):
    r"""Proxy of C++ RelinkableHandle< CapFloorTermVolatilityStructure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(RelinkableCapFloorTermVolatilityStructureHandle self, ext::shared_ptr< CapFloorTermVolatilityStructure > const & arg2=ext::shared_ptr()) -> RelinkableCapFloorTermVolatilityStructureHandle"""
        _quantlib_risks.RelinkableCapFloorTermVolatilityStructureHandle_swiginit(self, _quantlib_risks.new_RelinkableCapFloorTermVolatilityStructureHandle(*args))

    def linkTo(self, arg2):
        r"""linkTo(RelinkableCapFloorTermVolatilityStructureHandle self, ext::shared_ptr< CapFloorTermVolatilityStructure > const & arg2)"""
        return _quantlib_risks.RelinkableCapFloorTermVolatilityStructureHandle_linkTo(self, arg2)

    def reset(self):
        r"""reset(RelinkableCapFloorTermVolatilityStructureHandle self)"""
        return _quantlib_risks.RelinkableCapFloorTermVolatilityStructureHandle_reset(self)
    __swig_destroy__ = _quantlib_risks.delete_RelinkableCapFloorTermVolatilityStructureHandle

# Register RelinkableCapFloorTermVolatilityStructureHandle in _quantlib_risks:
_quantlib_risks.RelinkableCapFloorTermVolatilityStructureHandle_swigregister(RelinkableCapFloorTermVolatilityStructureHandle)
class CapFloorTermVolCurve(CapFloorTermVolatilityStructure):
    r"""Proxy of C++ CapFloorTermVolCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CapFloorTermVolCurve self, Date referenceDate, Calendar calendar, BusinessDayConvention bdc, PeriodVector lengths, std::vector< Volatility,std::allocator< Volatility > > const & vols, DayCounter dc=QuantLib::Actual365Fixed()) -> CapFloorTermVolCurve
        __init__(CapFloorTermVolCurve self, Natural settlementDays, Calendar calendar, BusinessDayConvention bdc, PeriodVector lengths, std::vector< Volatility,std::allocator< Volatility > > const & vols, DayCounter dc=QuantLib::Actual365Fixed()) -> CapFloorTermVolCurve
        """
        _quantlib_risks.CapFloorTermVolCurve_swiginit(self, _quantlib_risks.new_CapFloorTermVolCurve(*args))
    __swig_destroy__ = _quantlib_risks.delete_CapFloorTermVolCurve

# Register CapFloorTermVolCurve in _quantlib_risks:
_quantlib_risks.CapFloorTermVolCurve_swigregister(CapFloorTermVolCurve)
class CapFloorTermVolSurface(CapFloorTermVolatilityStructure):
    r"""Proxy of C++ CapFloorTermVolSurface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CapFloorTermVolSurface self, Natural settlementDays, Calendar calendar, BusinessDayConvention bdc, PeriodVector optionTenors, std::vector< Rate,std::allocator< Rate > > const & strikes, QuoteHandleVectorVector quotes, DayCounter dc=QuantLib::Actual365Fixed()) -> CapFloorTermVolSurface
        __init__(CapFloorTermVolSurface self, Date settlementDate, Calendar calendar, BusinessDayConvention bdc, PeriodVector optionTenors, std::vector< Rate,std::allocator< Rate > > const & strikes, QuoteHandleVectorVector quotes, DayCounter dc=QuantLib::Actual365Fixed()) -> CapFloorTermVolSurface
        __init__(CapFloorTermVolSurface self, Date settlementDate, Calendar calendar, BusinessDayConvention bdc, PeriodVector optionTenors, std::vector< Rate,std::allocator< Rate > > const & strikes, Matrix volatilities, DayCounter dc=QuantLib::Actual365Fixed()) -> CapFloorTermVolSurface
        __init__(CapFloorTermVolSurface self, Natural settlementDays, Calendar calendar, BusinessDayConvention bdc, PeriodVector optionTenors, std::vector< Rate,std::allocator< Rate > > const & strikes, Matrix volatilities, DayCounter dc=QuantLib::Actual365Fixed()) -> CapFloorTermVolSurface
        """
        _quantlib_risks.CapFloorTermVolSurface_swiginit(self, _quantlib_risks.new_CapFloorTermVolSurface(*args))

    def maxDate(self):
        r"""maxDate(CapFloorTermVolSurface self) -> Date"""
        return _quantlib_risks.CapFloorTermVolSurface_maxDate(self)

    def minStrike(self):
        r"""minStrike(CapFloorTermVolSurface self) -> Real"""
        return _quantlib_risks.CapFloorTermVolSurface_minStrike(self)

    def maxStrike(self):
        r"""maxStrike(CapFloorTermVolSurface self) -> Real"""
        return _quantlib_risks.CapFloorTermVolSurface_maxStrike(self)

    def optionTenors(self):
        r"""optionTenors(CapFloorTermVolSurface self) -> PeriodVector"""
        return _quantlib_risks.CapFloorTermVolSurface_optionTenors(self)

    def optionDates(self):
        r"""optionDates(CapFloorTermVolSurface self) -> DateVector"""
        return _quantlib_risks.CapFloorTermVolSurface_optionDates(self)

    def optionTimes(self):
        r"""optionTimes(CapFloorTermVolSurface self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.CapFloorTermVolSurface_optionTimes(self)

    def strikes(self):
        r"""strikes(CapFloorTermVolSurface self) -> std::vector< Rate,std::allocator< Rate > > const &"""
        return _quantlib_risks.CapFloorTermVolSurface_strikes(self)
    __swig_destroy__ = _quantlib_risks.delete_CapFloorTermVolSurface

# Register CapFloorTermVolSurface in _quantlib_risks:
_quantlib_risks.CapFloorTermVolSurface_swigregister(CapFloorTermVolSurface)
class StrippedOptionletBase(object):
    r"""Proxy of C++ StrippedOptionletBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def optionletStrikes(self, i):
        r"""optionletStrikes(StrippedOptionletBase self, Size i) -> std::vector< Rate,std::allocator< Rate > > const &"""
        return _quantlib_risks.StrippedOptionletBase_optionletStrikes(self, i)

    def optionletVolatilities(self, i):
        r"""optionletVolatilities(StrippedOptionletBase self, Size i) -> std::vector< Volatility,std::allocator< Volatility > > const &"""
        return _quantlib_risks.StrippedOptionletBase_optionletVolatilities(self, i)

    def optionletFixingDates(self):
        r"""optionletFixingDates(StrippedOptionletBase self) -> DateVector"""
        return _quantlib_risks.StrippedOptionletBase_optionletFixingDates(self)

    def optionletFixingTimes(self):
        r"""optionletFixingTimes(StrippedOptionletBase self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.StrippedOptionletBase_optionletFixingTimes(self)

    def optionletMaturities(self):
        r"""optionletMaturities(StrippedOptionletBase self) -> Size"""
        return _quantlib_risks.StrippedOptionletBase_optionletMaturities(self)

    def atmOptionletRates(self):
        r"""atmOptionletRates(StrippedOptionletBase self) -> std::vector< Rate,std::allocator< Rate > > const &"""
        return _quantlib_risks.StrippedOptionletBase_atmOptionletRates(self)

    def dayCounter(self):
        r"""dayCounter(StrippedOptionletBase self) -> DayCounter"""
        return _quantlib_risks.StrippedOptionletBase_dayCounter(self)

    def calendar(self):
        r"""calendar(StrippedOptionletBase self) -> Calendar"""
        return _quantlib_risks.StrippedOptionletBase_calendar(self)

    def settlementDays(self):
        r"""settlementDays(StrippedOptionletBase self) -> Natural"""
        return _quantlib_risks.StrippedOptionletBase_settlementDays(self)

    def businessDayConvention(self):
        r"""businessDayConvention(StrippedOptionletBase self) -> BusinessDayConvention"""
        return _quantlib_risks.StrippedOptionletBase_businessDayConvention(self)

    def volatilityType(self):
        r"""volatilityType(StrippedOptionletBase self) -> VolatilityType"""
        return _quantlib_risks.StrippedOptionletBase_volatilityType(self)

    def displacement(self):
        r"""displacement(StrippedOptionletBase self) -> Real"""
        return _quantlib_risks.StrippedOptionletBase_displacement(self)
    __swig_destroy__ = _quantlib_risks.delete_StrippedOptionletBase

# Register StrippedOptionletBase in _quantlib_risks:
_quantlib_risks.StrippedOptionletBase_swigregister(StrippedOptionletBase)
class StrippedOptionlet(StrippedOptionletBase):
    r"""Proxy of C++ StrippedOptionlet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, settlementDays, calendar, bdc, iborIndex, optionletDates, strikes, volatilities, dc, type=ShiftedLognormal, displacement=0.0):
        r"""__init__(StrippedOptionlet self, Natural settlementDays, Calendar calendar, BusinessDayConvention bdc, ext::shared_ptr< IborIndex > iborIndex, DateVector optionletDates, std::vector< Rate,std::allocator< Rate > > const & strikes, QuoteHandleVectorVector volatilities, DayCounter dc, VolatilityType type=ShiftedLognormal, Real displacement=0.0) -> StrippedOptionlet"""
        _quantlib_risks.StrippedOptionlet_swiginit(self, _quantlib_risks.new_StrippedOptionlet(settlementDays, calendar, bdc, iborIndex, optionletDates, strikes, volatilities, dc, type, displacement))
    __swig_destroy__ = _quantlib_risks.delete_StrippedOptionlet

# Register StrippedOptionlet in _quantlib_risks:
_quantlib_risks.StrippedOptionlet_swigregister(StrippedOptionlet)
class OptionletStripper1(StrippedOptionletBase):
    r"""Proxy of C++ OptionletStripper1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(OptionletStripper1 self, ext::shared_ptr< CapFloorTermVolSurface > const & parVolSurface, ext::shared_ptr< IborIndex > const & index, Rate switchStrikes=Null< Rate >(), Real accuracy=1.0e-6, Natural maxIter=100, YieldTermStructureHandle discount=Handle< YieldTermStructure >(), VolatilityType type=ShiftedLognormal, Real displacement=0.0, bool dontThrow=False) -> OptionletStripper1"""
        _quantlib_risks.OptionletStripper1_swiginit(self, _quantlib_risks.new_OptionletStripper1(*args, **kwargs))

    def capFloorPrices(self):
        r"""capFloorPrices(OptionletStripper1 self) -> Matrix"""
        return _quantlib_risks.OptionletStripper1_capFloorPrices(self)

    def capFloorVolatilities(self):
        r"""capFloorVolatilities(OptionletStripper1 self) -> Matrix"""
        return _quantlib_risks.OptionletStripper1_capFloorVolatilities(self)

    def optionletPrices(self):
        r"""optionletPrices(OptionletStripper1 self) -> Matrix"""
        return _quantlib_risks.OptionletStripper1_optionletPrices(self)

    def switchStrike(self):
        r"""switchStrike(OptionletStripper1 self) -> Rate"""
        return _quantlib_risks.OptionletStripper1_switchStrike(self)
    __swig_destroy__ = _quantlib_risks.delete_OptionletStripper1

# Register OptionletStripper1 in _quantlib_risks:
_quantlib_risks.OptionletStripper1_swigregister(OptionletStripper1)
class StrippedOptionletAdapter(OptionletVolatilityStructure):
    r"""Proxy of C++ StrippedOptionletAdapter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2):
        r"""__init__(StrippedOptionletAdapter self, ext::shared_ptr< StrippedOptionletBase > const & arg2) -> StrippedOptionletAdapter"""
        _quantlib_risks.StrippedOptionletAdapter_swiginit(self, _quantlib_risks.new_StrippedOptionletAdapter(arg2))
    __swig_destroy__ = _quantlib_risks.delete_StrippedOptionletAdapter

# Register StrippedOptionletAdapter in _quantlib_risks:
_quantlib_risks.StrippedOptionletAdapter_swigregister(StrippedOptionletAdapter)
class Settlement(object):
    r"""Proxy of C++ Settlement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Physical = _quantlib_risks.Settlement_Physical
    
    Cash = _quantlib_risks.Settlement_Cash
    
    PhysicalOTC = _quantlib_risks.Settlement_PhysicalOTC
    
    PhysicalCleared = _quantlib_risks.Settlement_PhysicalCleared
    
    CollateralizedCashPrice = _quantlib_risks.Settlement_CollateralizedCashPrice
    
    ParYieldCurve = _quantlib_risks.Settlement_ParYieldCurve
    

    def __init__(self):
        r"""__init__(Settlement self) -> Settlement"""
        _quantlib_risks.Settlement_swiginit(self, _quantlib_risks.new_Settlement())
    __swig_destroy__ = _quantlib_risks.delete_Settlement

# Register Settlement in _quantlib_risks:
_quantlib_risks.Settlement_swigregister(Settlement)
class Swaption(Option):
    r"""Proxy of C++ Swaption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Swaption self, ext::shared_ptr< VanillaSwap > const & swap, ext::shared_ptr< Exercise > const & exercise, Settlement::Type type=Physical, Settlement::Method settlementMethod=PhysicalOTC) -> Swaption"""
        _quantlib_risks.Swaption_swiginit(self, _quantlib_risks.new_Swaption(*args))

    def settlementType(self):
        r"""settlementType(Swaption self) -> Settlement::Type"""
        return _quantlib_risks.Swaption_settlementType(self)

    def settlementMethod(self):
        r"""settlementMethod(Swaption self) -> Settlement::Method"""
        return _quantlib_risks.Swaption_settlementMethod(self)

    def type(self):
        r"""type(Swaption self) -> VanillaSwap::Type"""
        return _quantlib_risks.Swaption_type(self)

    def underlyingSwap(self):
        r"""underlyingSwap(Swaption self) -> ext::shared_ptr< VanillaSwap > const &"""
        return _quantlib_risks.Swaption_underlyingSwap(self)

    def impliedVolatility(self, price, discountCurve, guess, accuracy=1.0e-4, maxEvaluations=100, minVol=1.0e-7, maxVol=4.0, type=ShiftedLognormal, displacement=0.0):
        r"""impliedVolatility(Swaption self, Real price, YieldTermStructureHandle discountCurve, Volatility guess, Real accuracy=1.0e-4, Natural maxEvaluations=100, Volatility minVol=1.0e-7, Volatility maxVol=4.0, VolatilityType type=ShiftedLognormal, Real displacement=0.0) -> Volatility"""
        return _quantlib_risks.Swaption_impliedVolatility(self, price, discountCurve, guess, accuracy, maxEvaluations, minVol, maxVol, type, displacement)

    def vega(self):
        r"""vega(Swaption self) -> Real"""
        return _quantlib_risks.Swaption_vega(self)

    def delta(self):
        r"""delta(Swaption self) -> Real"""
        return _quantlib_risks.Swaption_delta(self)

    def annuity(self):
        r"""annuity(Swaption self) -> Real"""
        return _quantlib_risks.Swaption_annuity(self)
    __swig_destroy__ = _quantlib_risks.delete_Swaption

# Register Swaption in _quantlib_risks:
_quantlib_risks.Swaption_swigregister(Swaption)
class NonstandardSwaption(Instrument):
    r"""Proxy of C++ NonstandardSwaption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(NonstandardSwaption self, ext::shared_ptr< NonstandardSwap > const & swap, ext::shared_ptr< Exercise > const & exercise, Settlement::Type type=Physical, Settlement::Method settlementMethod=PhysicalOTC) -> NonstandardSwaption"""
        _quantlib_risks.NonstandardSwaption_swiginit(self, _quantlib_risks.new_NonstandardSwaption(*args))

    def underlyingSwap(self):
        r"""underlyingSwap(NonstandardSwaption self) -> ext::shared_ptr< NonstandardSwap > const &"""
        return _quantlib_risks.NonstandardSwaption_underlyingSwap(self)

    def calibrationBasket(self, swapIndex, swaptionVolatility, typeStr):
        r"""calibrationBasket(NonstandardSwaption self, ext::shared_ptr< SwapIndex > swapIndex, ext::shared_ptr< SwaptionVolatilityStructure > swaptionVolatility, std::string typeStr) -> BlackCalibrationHelperVector"""
        return _quantlib_risks.NonstandardSwaption_calibrationBasket(self, swapIndex, swaptionVolatility, typeStr)

    def probabilities(self):
        r"""probabilities(NonstandardSwaption self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.NonstandardSwaption_probabilities(self)
    __swig_destroy__ = _quantlib_risks.delete_NonstandardSwaption

# Register NonstandardSwaption in _quantlib_risks:
_quantlib_risks.NonstandardSwaption_swigregister(NonstandardSwaption)
class FloatFloatSwaption(Instrument):
    r"""Proxy of C++ FloatFloatSwaption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(FloatFloatSwaption self, ext::shared_ptr< FloatFloatSwap > const & swap, ext::shared_ptr< Exercise > const & exercise, Settlement::Type delivery=Physical, Settlement::Method settlementMethod=PhysicalOTC) -> FloatFloatSwaption"""
        _quantlib_risks.FloatFloatSwaption_swiginit(self, _quantlib_risks.new_FloatFloatSwaption(*args))

    def underlyingSwap(self):
        r"""underlyingSwap(FloatFloatSwaption self) -> ext::shared_ptr< FloatFloatSwap > const &"""
        return _quantlib_risks.FloatFloatSwaption_underlyingSwap(self)

    def calibrationBasket(self, swapIndex, swaptionVolatility, typeStr):
        r"""calibrationBasket(FloatFloatSwaption self, ext::shared_ptr< SwapIndex > swapIndex, ext::shared_ptr< SwaptionVolatilityStructure > swaptionVolatility, std::string typeStr) -> BlackCalibrationHelperVector"""
        return _quantlib_risks.FloatFloatSwaption_calibrationBasket(self, swapIndex, swaptionVolatility, typeStr)

    def underlyingValue(self):
        r"""underlyingValue(FloatFloatSwaption self) -> Real"""
        return _quantlib_risks.FloatFloatSwaption_underlyingValue(self)

    def probabilities(self):
        r"""probabilities(FloatFloatSwaption self) -> std::vector< Real,std::allocator< Real > >"""
        return _quantlib_risks.FloatFloatSwaption_probabilities(self)
    __swig_destroy__ = _quantlib_risks.delete_FloatFloatSwaption

# Register FloatFloatSwaption in _quantlib_risks:
_quantlib_risks.FloatFloatSwaption_swigregister(FloatFloatSwaption)
class BlackSwaptionEngine(PricingEngine):
    r"""Proxy of C++ BlackSwaptionEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BlackSwaptionEngine self, YieldTermStructureHandle discountCurve, QuoteHandle vol, DayCounter dc=Actual365Fixed(), Real displacement=0.0) -> BlackSwaptionEngine
        __init__(BlackSwaptionEngine self, YieldTermStructureHandle discountCurve, SwaptionVolatilityStructureHandle v) -> BlackSwaptionEngine
        """
        _quantlib_risks.BlackSwaptionEngine_swiginit(self, _quantlib_risks.new_BlackSwaptionEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_BlackSwaptionEngine

# Register BlackSwaptionEngine in _quantlib_risks:
_quantlib_risks.BlackSwaptionEngine_swigregister(BlackSwaptionEngine)
class BachelierSwaptionEngine(PricingEngine):
    r"""Proxy of C++ BachelierSwaptionEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BachelierSwaptionEngine self, YieldTermStructureHandle discountCurve, QuoteHandle vol, DayCounter dc=Actual365Fixed()) -> BachelierSwaptionEngine
        __init__(BachelierSwaptionEngine self, YieldTermStructureHandle discountCurve, SwaptionVolatilityStructureHandle v) -> BachelierSwaptionEngine
        """
        _quantlib_risks.BachelierSwaptionEngine_swiginit(self, _quantlib_risks.new_BachelierSwaptionEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_BachelierSwaptionEngine

# Register BachelierSwaptionEngine in _quantlib_risks:
_quantlib_risks.BachelierSwaptionEngine_swigregister(BachelierSwaptionEngine)
class VanillaSwingOption(OneAssetOption):
    r"""Proxy of C++ VanillaSwingOption class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, payoff, ex, minExerciseRights, maxExerciseRights):
        r"""__init__(VanillaSwingOption self, ext::shared_ptr< Payoff > const & payoff, ext::shared_ptr< SwingExercise > const & ex, Size minExerciseRights, Size maxExerciseRights) -> VanillaSwingOption"""
        _quantlib_risks.VanillaSwingOption_swiginit(self, _quantlib_risks.new_VanillaSwingOption(payoff, ex, minExerciseRights, maxExerciseRights))
    __swig_destroy__ = _quantlib_risks.delete_VanillaSwingOption

# Register VanillaSwingOption in _quantlib_risks:
_quantlib_risks.VanillaSwingOption_swigregister(VanillaSwingOption)
class FdSimpleBSSwingEngine(PricingEngine):
    r"""Proxy of C++ FdSimpleBSSwingEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(FdSimpleBSSwingEngine self, ext::shared_ptr< GeneralizedBlackScholesProcess > const & process, Size tGrid=50, Size xGrid=100, FdmSchemeDesc schemeDesc=FdmSchemeDesc::Douglas()) -> FdSimpleBSSwingEngine"""
        _quantlib_risks.FdSimpleBSSwingEngine_swiginit(self, _quantlib_risks.new_FdSimpleBSSwingEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_FdSimpleBSSwingEngine

# Register FdSimpleBSSwingEngine in _quantlib_risks:
_quantlib_risks.FdSimpleBSSwingEngine_swigregister(FdSimpleBSSwingEngine)
class FdSimpleExtOUJumpSwingEngine(PricingEngine):
    r"""Proxy of C++ FdSimpleExtOUJumpSwingEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(FdSimpleExtOUJumpSwingEngine self, ext::shared_ptr< ExtOUWithJumpsProcess > const & process, ext::shared_ptr< YieldTermStructure > const & rTS, Size tGrid=50, Size xGrid=200, Size yGrid=50, std::vector< std::pair< Time,Real >,std::allocator< std::pair< Time,Real > > > const & shape=std::vector< std::pair< Time,Real > >(), FdmSchemeDesc schemeDesc=FdmSchemeDesc::Hundsdorfer()) -> FdSimpleExtOUJumpSwingEngine"""
        _quantlib_risks.FdSimpleExtOUJumpSwingEngine_swiginit(self, _quantlib_risks.new_FdSimpleExtOUJumpSwingEngine(*args))
    __swig_destroy__ = _quantlib_risks.delete_FdSimpleExtOUJumpSwingEngine

# Register FdSimpleExtOUJumpSwingEngine in _quantlib_risks:
_quantlib_risks.FdSimpleExtOUJumpSwingEngine_swigregister(FdSimpleExtOUJumpSwingEngine)

def enableTracing():
    r"""enableTracing()"""
    return _quantlib_risks.enableTracing()

def disableTracing():
    r"""disableTracing()"""
    return _quantlib_risks.disableTracing()
class ConstantEstimator(object):
    r"""Proxy of C++ ConstantEstimator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size):
        r"""__init__(ConstantEstimator self, Size size) -> ConstantEstimator"""
        _quantlib_risks.ConstantEstimator_swiginit(self, _quantlib_risks.new_ConstantEstimator(size))

    def calculate(self, arg2):
        r"""calculate(ConstantEstimator self, RealTimeSeries arg2) -> RealTimeSeries"""
        return _quantlib_risks.ConstantEstimator_calculate(self, arg2)
    __swig_destroy__ = _quantlib_risks.delete_ConstantEstimator

# Register ConstantEstimator in _quantlib_risks:
_quantlib_risks.ConstantEstimator_swigregister(ConstantEstimator)
class ParkinsonSigma(object):
    r"""Proxy of C++ ParkinsonSigma class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, yearFraction):
        r"""__init__(ParkinsonSigma self, Real yearFraction) -> ParkinsonSigma"""
        _quantlib_risks.ParkinsonSigma_swiginit(self, _quantlib_risks.new_ParkinsonSigma(yearFraction))

    def calculate(self, arg2):
        r"""calculate(ParkinsonSigma self, IntervalPriceTimeSeries arg2) -> RealTimeSeries"""
        return _quantlib_risks.ParkinsonSigma_calculate(self, arg2)
    __swig_destroy__ = _quantlib_risks.delete_ParkinsonSigma

# Register ParkinsonSigma in _quantlib_risks:
_quantlib_risks.ParkinsonSigma_swigregister(ParkinsonSigma)
class GarmanKlassSigma1(object):
    r"""Proxy of C++ GarmanKlassSigma1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, yearFraction, marketOpenFraction):
        r"""__init__(GarmanKlassSigma1 self, Real yearFraction, Real marketOpenFraction) -> GarmanKlassSigma1"""
        _quantlib_risks.GarmanKlassSigma1_swiginit(self, _quantlib_risks.new_GarmanKlassSigma1(yearFraction, marketOpenFraction))

    def calculate(self, arg2):
        r"""calculate(GarmanKlassSigma1 self, IntervalPriceTimeSeries arg2) -> RealTimeSeries"""
        return _quantlib_risks.GarmanKlassSigma1_calculate(self, arg2)
    __swig_destroy__ = _quantlib_risks.delete_GarmanKlassSigma1

# Register GarmanKlassSigma1 in _quantlib_risks:
_quantlib_risks.GarmanKlassSigma1_swigregister(GarmanKlassSigma1)
class GarmanKlassSigma3(object):
    r"""Proxy of C++ GarmanKlassSigma3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, yearFraction, marketOpenFraction):
        r"""__init__(GarmanKlassSigma3 self, Real yearFraction, Real marketOpenFraction) -> GarmanKlassSigma3"""
        _quantlib_risks.GarmanKlassSigma3_swiginit(self, _quantlib_risks.new_GarmanKlassSigma3(yearFraction, marketOpenFraction))

    def calculate(self, arg2):
        r"""calculate(GarmanKlassSigma3 self, IntervalPriceTimeSeries arg2) -> RealTimeSeries"""
        return _quantlib_risks.GarmanKlassSigma3_calculate(self, arg2)
    __swig_destroy__ = _quantlib_risks.delete_GarmanKlassSigma3

# Register GarmanKlassSigma3 in _quantlib_risks:
_quantlib_risks.GarmanKlassSigma3_swigregister(GarmanKlassSigma3)
class GarmanKlassSigma4(object):
    r"""Proxy of C++ GarmanKlassSigma4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, yearFraction):
        r"""__init__(GarmanKlassSigma4 self, Real yearFraction) -> GarmanKlassSigma4"""
        _quantlib_risks.GarmanKlassSigma4_swiginit(self, _quantlib_risks.new_GarmanKlassSigma4(yearFraction))

    def calculate(self, arg2):
        r"""calculate(GarmanKlassSigma4 self, IntervalPriceTimeSeries arg2) -> RealTimeSeries"""
        return _quantlib_risks.GarmanKlassSigma4_calculate(self, arg2)
    __swig_destroy__ = _quantlib_risks.delete_GarmanKlassSigma4

# Register GarmanKlassSigma4 in _quantlib_risks:
_quantlib_risks.GarmanKlassSigma4_swigregister(GarmanKlassSigma4)
class GarmanKlassSigma5(object):
    r"""Proxy of C++ GarmanKlassSigma5 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, yearFraction):
        r"""__init__(GarmanKlassSigma5 self, Real yearFraction) -> GarmanKlassSigma5"""
        _quantlib_risks.GarmanKlassSigma5_swiginit(self, _quantlib_risks.new_GarmanKlassSigma5(yearFraction))

    def calculate(self, arg2):
        r"""calculate(GarmanKlassSigma5 self, IntervalPriceTimeSeries arg2) -> RealTimeSeries"""
        return _quantlib_risks.GarmanKlassSigma5_calculate(self, arg2)
    __swig_destroy__ = _quantlib_risks.delete_GarmanKlassSigma5

# Register GarmanKlassSigma5 in _quantlib_risks:
_quantlib_risks.GarmanKlassSigma5_swigregister(GarmanKlassSigma5)
class GarmanKlassSigma6(object):
    r"""Proxy of C++ GarmanKlassSigma6 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, yearFraction, marketOpenFraction):
        r"""__init__(GarmanKlassSigma6 self, Real yearFraction, Real marketOpenFraction) -> GarmanKlassSigma6"""
        _quantlib_risks.GarmanKlassSigma6_swiginit(self, _quantlib_risks.new_GarmanKlassSigma6(yearFraction, marketOpenFraction))

    def calculate(self, arg2):
        r"""calculate(GarmanKlassSigma6 self, IntervalPriceTimeSeries arg2) -> RealTimeSeries"""
        return _quantlib_risks.GarmanKlassSigma6_calculate(self, arg2)
    __swig_destroy__ = _quantlib_risks.delete_GarmanKlassSigma6

# Register GarmanKlassSigma6 in _quantlib_risks:
_quantlib_risks.GarmanKlassSigma6_swigregister(GarmanKlassSigma6)
class ZeroCurve(YieldTermStructure):
    r"""Proxy of C++ InterpolatedZeroCurve< Linear > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ZeroCurve self, DateVector dates, std::vector< Rate,std::allocator< Rate > > const & yields, DayCounter dayCounter, Calendar calendar=Calendar(), Linear i=Linear(), Compounding compounding=Continuous, Frequency frequency=Annual) -> ZeroCurve"""
        _quantlib_risks.ZeroCurve_swiginit(self, _quantlib_risks.new_ZeroCurve(*args))

    def times(self):
        r"""times(ZeroCurve self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.ZeroCurve_times(self)

    def data(self):
        r"""data(ZeroCurve self) -> std::vector< Real,std::allocator< Real > > const &"""
        return _quantlib_risks.ZeroCurve_data(self)

    def dates(self):
        r"""dates(ZeroCurve self) -> DateVector"""
        return _quantlib_risks.ZeroCurve_dates(self)

    def zeroRates(self):
        r"""zeroRates(ZeroCurve self) -> std::vector< Rate,std::allocator< Rate > > const &"""
        return _quantlib_risks.ZeroCurve_zeroRates(self)

    def nodes(self):
        r"""nodes(ZeroCurve self) -> std::vector< std::pair< Date,Rate >,std::allocator< std::pair< Date,Rate > > >"""
        return _quantlib_risks.ZeroCurve_nodes(self)
    __swig_destroy__ = _quantlib_risks.delete_ZeroCurve

# Register ZeroCurve in _quantlib_risks:
_quantlib_risks.ZeroCurve_swigregister(ZeroCurve)
class LogLinearZeroCurve(YieldTermStructure):
    r"""Proxy of C++ InterpolatedZeroCurve< LogLinear > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(LogLinearZeroCurve self, DateVector dates, std::vector< Rate,std::allocator< Rate > > const & yields, DayCounter dayCounter, Calendar calendar=Calendar(), LogLinear i=LogLinear(), Compounding compounding=Continuous, Frequency frequency=Annual) -> LogLinearZeroCurve"""
        _quantlib_risks.LogLinearZeroCurve_swiginit(self, _quantlib_risks.new_LogLinearZeroCurve(*args))

    def times(self):
        r"""times(LogLinearZeroCurve self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.LogLinearZeroCurve_times(self)

    def data(self):
        r"""data(LogLinearZeroCurve self) -> std::vector< Real,std::allocator< Real > > const &"""
        return _quantlib_risks.LogLinearZeroCurve_data(self)

    def dates(self):
        r"""dates(LogLinearZeroCurve self) -> DateVector"""
        return _quantlib_risks.LogLinearZeroCurve_dates(self)

    def zeroRates(self):
        r"""zeroRates(LogLinearZeroCurve self) -> std::vector< Rate,std::allocator< Rate > > const &"""
        return _quantlib_risks.LogLinearZeroCurve_zeroRates(self)

    def nodes(self):
        r"""nodes(LogLinearZeroCurve self) -> std::vector< std::pair< Date,Rate >,std::allocator< std::pair< Date,Rate > > >"""
        return _quantlib_risks.LogLinearZeroCurve_nodes(self)
    __swig_destroy__ = _quantlib_risks.delete_LogLinearZeroCurve

# Register LogLinearZeroCurve in _quantlib_risks:
_quantlib_risks.LogLinearZeroCurve_swigregister(LogLinearZeroCurve)
class CubicZeroCurve(YieldTermStructure):
    r"""Proxy of C++ InterpolatedZeroCurve< Cubic > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(CubicZeroCurve self, DateVector dates, std::vector< Rate,std::allocator< Rate > > const & yields, DayCounter dayCounter, Calendar calendar=Calendar(), Cubic i=Cubic(), Compounding compounding=Continuous, Frequency frequency=Annual) -> CubicZeroCurve"""
        _quantlib_risks.CubicZeroCurve_swiginit(self, _quantlib_risks.new_CubicZeroCurve(*args))

    def times(self):
        r"""times(CubicZeroCurve self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.CubicZeroCurve_times(self)

    def data(self):
        r"""data(CubicZeroCurve self) -> std::vector< Real,std::allocator< Real > > const &"""
        return _quantlib_risks.CubicZeroCurve_data(self)

    def dates(self):
        r"""dates(CubicZeroCurve self) -> DateVector"""
        return _quantlib_risks.CubicZeroCurve_dates(self)

    def zeroRates(self):
        r"""zeroRates(CubicZeroCurve self) -> std::vector< Rate,std::allocator< Rate > > const &"""
        return _quantlib_risks.CubicZeroCurve_zeroRates(self)

    def nodes(self):
        r"""nodes(CubicZeroCurve self) -> std::vector< std::pair< Date,Rate >,std::allocator< std::pair< Date,Rate > > >"""
        return _quantlib_risks.CubicZeroCurve_nodes(self)
    __swig_destroy__ = _quantlib_risks.delete_CubicZeroCurve

# Register CubicZeroCurve in _quantlib_risks:
_quantlib_risks.CubicZeroCurve_swigregister(CubicZeroCurve)
class NaturalCubicZeroCurve(YieldTermStructure):
    r"""Proxy of C++ InterpolatedZeroCurve< SplineCubic > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(NaturalCubicZeroCurve self, DateVector dates, std::vector< Rate,std::allocator< Rate > > const & yields, DayCounter dayCounter, Calendar calendar=Calendar(), SplineCubic i=SplineCubic(), Compounding compounding=Continuous, Frequency frequency=Annual) -> NaturalCubicZeroCurve"""
        _quantlib_risks.NaturalCubicZeroCurve_swiginit(self, _quantlib_risks.new_NaturalCubicZeroCurve(*args))

    def times(self):
        r"""times(NaturalCubicZeroCurve self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.NaturalCubicZeroCurve_times(self)

    def data(self):
        r"""data(NaturalCubicZeroCurve self) -> std::vector< Real,std::allocator< Real > > const &"""
        return _quantlib_risks.NaturalCubicZeroCurve_data(self)

    def dates(self):
        r"""dates(NaturalCubicZeroCurve self) -> DateVector"""
        return _quantlib_risks.NaturalCubicZeroCurve_dates(self)

    def zeroRates(self):
        r"""zeroRates(NaturalCubicZeroCurve self) -> std::vector< Rate,std::allocator< Rate > > const &"""
        return _quantlib_risks.NaturalCubicZeroCurve_zeroRates(self)

    def nodes(self):
        r"""nodes(NaturalCubicZeroCurve self) -> std::vector< std::pair< Date,Rate >,std::allocator< std::pair< Date,Rate > > >"""
        return _quantlib_risks.NaturalCubicZeroCurve_nodes(self)
    __swig_destroy__ = _quantlib_risks.delete_NaturalCubicZeroCurve

# Register NaturalCubicZeroCurve in _quantlib_risks:
_quantlib_risks.NaturalCubicZeroCurve_swigregister(NaturalCubicZeroCurve)
class LogCubicZeroCurve(YieldTermStructure):
    r"""Proxy of C++ InterpolatedZeroCurve< DefaultLogCubic > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(LogCubicZeroCurve self, DateVector dates, std::vector< Rate,std::allocator< Rate > > const & yields, DayCounter dayCounter, Calendar calendar=Calendar(), DefaultLogCubic i=DefaultLogCubic(), Compounding compounding=Continuous, Frequency frequency=Annual) -> LogCubicZeroCurve"""
        _quantlib_risks.LogCubicZeroCurve_swiginit(self, _quantlib_risks.new_LogCubicZeroCurve(*args))

    def times(self):
        r"""times(LogCubicZeroCurve self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.LogCubicZeroCurve_times(self)

    def data(self):
        r"""data(LogCubicZeroCurve self) -> std::vector< Real,std::allocator< Real > > const &"""
        return _quantlib_risks.LogCubicZeroCurve_data(self)

    def dates(self):
        r"""dates(LogCubicZeroCurve self) -> DateVector"""
        return _quantlib_risks.LogCubicZeroCurve_dates(self)

    def zeroRates(self):
        r"""zeroRates(LogCubicZeroCurve self) -> std::vector< Rate,std::allocator< Rate > > const &"""
        return _quantlib_risks.LogCubicZeroCurve_zeroRates(self)

    def nodes(self):
        r"""nodes(LogCubicZeroCurve self) -> std::vector< std::pair< Date,Rate >,std::allocator< std::pair< Date,Rate > > >"""
        return _quantlib_risks.LogCubicZeroCurve_nodes(self)
    __swig_destroy__ = _quantlib_risks.delete_LogCubicZeroCurve

# Register LogCubicZeroCurve in _quantlib_risks:
_quantlib_risks.LogCubicZeroCurve_swigregister(LogCubicZeroCurve)
class MonotonicCubicZeroCurve(YieldTermStructure):
    r"""Proxy of C++ InterpolatedZeroCurve< MonotonicCubic > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(MonotonicCubicZeroCurve self, DateVector dates, std::vector< Rate,std::allocator< Rate > > const & yields, DayCounter dayCounter, Calendar calendar=Calendar(), MonotonicCubic i=MonotonicCubic(), Compounding compounding=Continuous, Frequency frequency=Annual) -> MonotonicCubicZeroCurve"""
        _quantlib_risks.MonotonicCubicZeroCurve_swiginit(self, _quantlib_risks.new_MonotonicCubicZeroCurve(*args))

    def times(self):
        r"""times(MonotonicCubicZeroCurve self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.MonotonicCubicZeroCurve_times(self)

    def data(self):
        r"""data(MonotonicCubicZeroCurve self) -> std::vector< Real,std::allocator< Real > > const &"""
        return _quantlib_risks.MonotonicCubicZeroCurve_data(self)

    def dates(self):
        r"""dates(MonotonicCubicZeroCurve self) -> DateVector"""
        return _quantlib_risks.MonotonicCubicZeroCurve_dates(self)

    def zeroRates(self):
        r"""zeroRates(MonotonicCubicZeroCurve self) -> std::vector< Rate,std::allocator< Rate > > const &"""
        return _quantlib_risks.MonotonicCubicZeroCurve_zeroRates(self)

    def nodes(self):
        r"""nodes(MonotonicCubicZeroCurve self) -> std::vector< std::pair< Date,Rate >,std::allocator< std::pair< Date,Rate > > >"""
        return _quantlib_risks.MonotonicCubicZeroCurve_nodes(self)
    __swig_destroy__ = _quantlib_risks.delete_MonotonicCubicZeroCurve

# Register MonotonicCubicZeroCurve in _quantlib_risks:
_quantlib_risks.MonotonicCubicZeroCurve_swigregister(MonotonicCubicZeroCurve)
class KrugerZeroCurve(YieldTermStructure):
    r"""Proxy of C++ InterpolatedZeroCurve< Kruger > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(KrugerZeroCurve self, DateVector dates, std::vector< Rate,std::allocator< Rate > > const & yields, DayCounter dayCounter, Calendar calendar=Calendar(), Kruger i=Kruger(), Compounding compounding=Continuous, Frequency frequency=Annual) -> KrugerZeroCurve"""
        _quantlib_risks.KrugerZeroCurve_swiginit(self, _quantlib_risks.new_KrugerZeroCurve(*args))

    def times(self):
        r"""times(KrugerZeroCurve self) -> std::vector< Time,std::allocator< Time > > const &"""
        return _quantlib_risks.KrugerZeroCurve_times(self)

    def data(self):
        r"""data(KrugerZeroCurve self) -> std::vector< Real,std::allocator< Real > > const &"""
        return _quantlib_risks.KrugerZeroCurve_data(self)

    def dates(self):
        r"""dates(KrugerZeroCurve self) -> DateVector"""
        return _quantlib_risks.KrugerZeroCurve_dates(self)

    def zeroRates(self):
        r"""zeroRates(KrugerZeroCurve self) -> std::vector< Rate,std::allocator< Rate > > const &"""
        return _quantlib_risks.KrugerZeroCurve_zeroRates(self)

    def nodes(self):
        r"""nodes(KrugerZeroCurve self) -> std::vector< std::pair< Date,Rate >,std::allocator< std::pair< Date,Rate > > >"""
        return _quantlib_risks.KrugerZeroCurve_nodes(self)
    __swig_destroy__ = _quantlib_risks.delete_KrugerZeroCurve

# Register KrugerZeroCurve in _quantlib_risks:
_quantlib_risks.KrugerZeroCurve_swigregister(KrugerZeroCurve)

