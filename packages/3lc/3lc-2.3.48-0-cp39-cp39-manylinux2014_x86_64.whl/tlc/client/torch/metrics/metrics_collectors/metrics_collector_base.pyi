import abc
import torch
from _typeshed import Incomplete
from abc import abstractmethod
from tlc.client.torch.metrics.metrics_aggregators import MeanAggregator as MeanAggregator
from tlc.core.builtins.types import MetricData as MetricData, SampleData as SampleData
from tlc.core.schema import Schema as Schema

logger: Incomplete

class MetricsCollector(metaclass=abc.ABCMeta):
    def __init__(self, compute_aggregates: bool = True) -> None: ...
    def reset(self) -> None: ...
    @abstractmethod
    def compute_metrics(self, batch: SampleData, predictions: SampleData | None | torch.Tensor, hook_outputs: dict[int, torch.Tensor] | None = None) -> dict[str, MetricData]: ...
    @property
    def column_schemas(self) -> dict[str, Schema]: ...
    @property
    def model(self) -> torch.nn.Module | None: ...
    @property
    def layers(self) -> list[int]: ...
    def __call__(self, batch: SampleData, predictions: SampleData | None = None, hook_outputs: dict[int, torch.Tensor] | None = None) -> dict[str, MetricData]: ...
    @property
    def aggregate_values(self) -> dict[str, float]: ...
