{"version":3,"file":"lib_index_js.5a158fc134045726682f.js","mappings":";;;;;;;;;;;;;;;;;AAAA,sDAAsD;AACtD,yDAAyD;AACzD,qDAAqD;AAUvB;AAKH;AAE3B;;GAEG;AAEH,IAAI,UAAU,GAAG,YAAY,CAAC;AAC9B,IAAI,YAAY,GAAG,cAAc,CAAC;AAClC,IAAI,YAAY,GAAG,cAAc,CAAC;AAElC,MAAM,MAAM,GAAgC;IAC1C,EAAE,EAAE,cAAc;IAClB,WAAW,EAAE,kHAAkH;IAC/H,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,CAAC,GAAoB,EAAE,QAAkB,EAAE,EAAE;QACrD,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;QAExD,iEAAe,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE;;YAE3C,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;YACtB,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;YAEzB,OAAO,CAAC,GAAG,CAAC,iCAAiC,GAAG,kEAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YAE7E,IAAI,kEAAe,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBAE/B,IAAI,OAAO,EAAE;oBAEX,oBAAoB;oBACpB,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;oBAC9C,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;oBAEhB,IAAI,UAAU,IAAI,EAAE,EAAE;wBACpB,OAAO,CAAC,GAAG,CAAC,cAAc,GAAG,UAAU,CAAC,CAAC;wBACzC,IAAI,CAAC,IAAI,EAAE,CAAC;qBACb;oBAED,IAAI,YAAY,IAAI,EAAE,EAAE;wBACtB,OAAO,CAAC,GAAG,CAAC,gBAAgB,GAAG,YAAY,CAAC,CAAC;wBAC7C,UAAI,CAAC,SAAS,0CAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;wBAC/D,2BAA2B;wBAC3B,6DAA6D;qBAC9D;oBAED,IAAI,YAAY,IAAI,EAAE,EAAE;wBACtB,OAAO,CAAC,GAAG,CAAC,gBAAgB,GAAG,YAAY,CAAC,CAAC;wBAC7C,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;wBAC3B,+BAA+B;wBAC/B,yDAAyD;wBACzD,8DAA8D;wBAC9D,iDAAiD;wBACjD,wCAAwC;qBACzC;iBAEF;aAEF;QAEH,CAAC,CAAC,CAAC;IAEL,CAAC;CACF,CAAC;AAEF,iEAAe,MAAM,EAAC","sources":["webpack://ihide/./src/index.ts"],"sourcesContent":["// The functionality for hiding cell source and output\n// is already a built-in feature in Jupyter Lab/Notebooks\n// https://github.com/jupyterlab/jupyterlab/pull/5968\n\nimport {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin,\n} from '@jupyterlab/application';\n\nimport {\n  NotebookActions,\n  Notebook,\n} from '@jupyterlab/notebook';\n\nimport {\n  // CodeCellModel,\n  isCodeCellModel,\n} from '@jupyterlab/cells';\n\n/**\n * Initialization data for the ihide extension.\n */\n\nlet ihide_cell = \"ihide_cell\";\nlet ihide_source = \"ihide_source\";\nlet ihide_output = \"ihide_output\";\n\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'ihide:plugin',\n  description: 'A jupyter lab/notebook front-end extension for hiding cells after execution by specifying metadata \"ihide\": true',\n  autoStart: true,\n  activate: (app: JupyterFrontEnd, notebook: Notebook) => {\n    console.log('JupyterLab extension ihide is activated!');\n\n    NotebookActions.executed.connect((_, args) => {\n      \n      const { cell } = args;\n      const { success } = args;\n\n      console.log(\"isCodeCellMode(cell.model) === \" + isCodeCellModel(cell.model));\n\n      if (isCodeCellModel(cell.model)) {\n\n        if (success) {\n\n          // get cell metadata\n          let md = cell.model.sharedModel.getMetadata();\n          console.log(md);\n\n          if (ihide_cell in md) {\n            console.log(\"ihide_cell: \" + ihide_cell);\n            cell.hide();\n          }\n\n          if (ihide_source in md) {\n            console.log(\"ihide_source: \" + ihide_source);\n            cell.inputArea?.node.classList.add(\"jp-inputArea-hidden-cell\");\n            // cell.inputHidden = true;\n            // cell.model.sharedModel.setMetadata(\"source_hidden\", true);\n          }\n\n          if (ihide_output in md) {\n            console.log(\"ihide_output: \" + ihide_output);            \n            cell.model.outputs.clear();            \n            // cell.model.clearExecution();\n            // cell.model.sharedModel.setMetadata(\"collapsed\", true);\n            // cell.model.sharedModel.setMetadata(\"outputs_hidden\", true);\n            // let codeCellModel = <CodeCellModel>cell.model;\n            // codeCellModel.sharedModel.setOutputs;\n          }\n\n        }\n\n      }\n\n    });\n        \n  }\n};\n\nexport default plugin;\n"],"names":[],"sourceRoot":""}