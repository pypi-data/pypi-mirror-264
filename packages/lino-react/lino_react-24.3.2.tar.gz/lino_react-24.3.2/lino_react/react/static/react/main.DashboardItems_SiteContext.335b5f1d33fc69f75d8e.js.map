{"version":3,"file":"main.DashboardItems_SiteContext.335b5f1d33fc69f75d8e.js","mappings":"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","sources":["webpack://lino_react/./lino_react/react/components/DataProvider.jsx","webpack://lino_react/./lino_react/react/components/DashboardItems.jsx"],"sourcesContent":["export const name = \"DataProvider\";\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as constants from './constants';\nimport { RegisterImportPool, Component } from \"./Base\";\n\nlet ex; const exModulePromises = ex = {\n    queryString: import(/* webpackChunkName: \"queryString_DataProvider\" */\"query-string\"),\n    AbortController: import(/* webpackChunkName: \"AbortController_DataProvider\" */\"abort-controller\"),\n    whatwgFetch: import(/* webpackChunkName: \"whatwgFetch_DataProvider\" */\"whatwg-fetch\"),\n    prProgressSpinner: import(/* webpackChunkName: \"prProgressSpinner_DataProvider\" */\"primereact/progressspinner\"),\n    lm: import(/* webpackChunkName: \"LoadingMask_DataProvider\" */\"./LoadingMask\"),\n}\nRegisterImportPool(ex);\n\n\nexport class DataProvider extends Component {\n    static requiredModules = [\n        'queryString', \"AbortController\", \"whatwgFetch\", \"prProgressSpinner\",\n        \"lm\"]\n\n    static iPool = ex;\n\n    static propTypes = {\n        endpoint: PropTypes.string.isRequired,\n        render: PropTypes.func.isRequired,\n        post_data: PropTypes.func,\n        hideLoading: PropTypes.bool,\n        useEverLoaded: PropTypes.bool,\n\n    };\n    static defaultProps = {\n        post_data: (data) => (data),\n        hideLoading: false,\n        useEverLoaded: false,\n    };\n\n    constructor() {\n        super();\n        this.state = {\n            ...this.state,\n            data: [],\n            loaded: false,\n            placeholder: \"Loading...\",\n            actorID: null,\n        };\n        this.reloadData = this.reloadData.bind(this);\n        this.reload = this.reloadData;\n        this.update = this.reloadData;\n    }\n\n    onReady() {\n        this.controller = new this.ex.AbortController.default();\n        this.reloadData();\n    }\n\n    componentWillUnmount() {\n        this.controller.abort();\n        delete window.App.URLContext.globals.panels[this.state.actorID];\n    }\n\n    liveUpdate = (params) => this.update();\n\n    reloadData() {\n        this.setState({loaded: false});\n        let query = {fmt: \"json\"}\n        window.App.add_su(query);\n        query[constants.URL_PARAM_LINO_VERSION] = window.Lino[constants.URL_PARAM_LINO_VERSION];\n        query[constants.URL_PARAM_USER_LANGUAGE] = window.App.data.selectedLanguage || window.App.state.user_settings.lang;\n        this.ex.whatwgFetch.fetch(this.props.endpoint + `?${this.ex.queryString.default.stringify(query)}`, {\n            signal: this.controller.signal})\n            .then(response => {\n                if (response.status !== 200) {\n                    this.setState({placeholder: \"Something went wrong\"});\n                    return {status:response.status$} //\n                }\n                return response.json();\n            })\n            .then(data => {\n                this.props.post_data(data);\n                this.setState({data: data, loaded: true,\n                    everloaded: true, actorID: data.actorID});\n                window.App.URLContext.globals.panels[data.actorID] = this;\n            }).catch(function(ex) {\n              if (ex.name === 'AbortError') {\n                console.log('request aborted', ex)\n              }\n            })\n    };\n\n    render() {\n        if (!this.state.ready) return null;\n        const {data, loaded, placeholder, everloaded} = this.state;\n        const {render} = this.props;\n        // const Comp = \"Table\";\n        // return loaded ? this.props.render(data, Comp) : <p>{placeholder}</p>;\n        if (everloaded && !loaded) {\n            // is loading with data, use loading mask\n            return <this.ex.lm.LoadingMask mask={true}>\n                {render(data)}\n            </this.ex.lm.LoadingMask>\n        }\n        else {\n            return <this.ex.lm.LoadingMask mask={false}>\n                {loaded || everloaded && this.props.useEverLoaded\n                    ? render(data) : this.props.hideLoading ? <div/> : <this.ex.prProgressSpinner.ProgressSpinner/>}\n            </this.ex.lm.LoadingMask>\n        }\n    }\n}\n","export const name = \"DashboardItems\";\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { RegisterImportPool, Component } from \"./Base\";\n\nimport { DataProvider } from \"./DataProvider\";\n\nlet ex; const exModulePromises = ex = {\n    prButton: import(/* webpackChunkName: \"prButton_DashboardItems\" */\"primereact/button\"),\n    lm: import(/* webpackChunkName: \"LoadingMask_DashboardItems\" */\"./LoadingMask\"),\n}\nRegisterImportPool(ex);\n\n\nexport class DashboardItems extends Component {\n    static requiredModules = [\"prButton\", \"lm\"];\n    static iPool = ex;\n    static propTypes = {\n        // dashboard_items: PropTypes.number.\n        user: PropTypes.string\n    };\n    static defaultProps = {\n        P: 0\n    };\n\n    constructor() {\n        super();\n        this.state = {\n            ...this.state,\n            stamp: Date(),\n            unloaded: true,\n        };\n        // this.method = this.method.bind(this);\n        this.reloadData = this.reload;\n        this.onDataGet = this.onDataGet.bind(this)\n    }\n\n    // method() {return this.props.}\n\n    reload() {\n        // this.setState({ // Set new stamp forcing reloading of each DP\n        //     stamp:Date()\n        // });\n        Object.keys(window.App.rps).filter(k => k.includes(\"dashboard\")).forEach(d => {\n            window.App.rps[d].reload();\n        })\n    }\n\n    onDataGet(d) {\n        this.setState({\n            unloaded: false\n        })\n    }\n\n    renderDashboard(showReloadButton, rp) {\n        return (data) => {\n            if (data.version_mismatch && rp === \"dashboard-0\") {\n                window.App.reload();\n                return\n            }\n            if (data.html) {\n                return <div>\n                    {showReloadButton && <this.ex.prButton.Button icon={\"pi pi-refresh\"} style={{float:\"right\"}} onClick={() => {\n                        let dp = window.App.rps[rp];\n                        dp && dp.reload();\n                    }\n                    }/>}\n                    <div dangerouslySetInnerHTML={{__html: data.html}}></div>\n                </div>\n            }\n        }\n    }\n\n    render() {\n        if (!this.state.ready) return null;\n        const S = this.state;\n        const P = this.props;\n        let len = P.dashboard_items;\n        if (len === undefined) {\n            len = 0\n        }\n        // const Comp = \"Table\";\n        // return loaded ? this.props.render(data, Comp) : <p>{placeholder}</p>;\n        return <this.ex.lm.LoadingMask mask={S.unloaded} fillHeight={true} backgroundColor={\"\"}>\n            <DataProvider\n                ref={(el) => {\n                    window.App.setRpRef(el, `dashboard-main`)\n                }}\n                key={`${P.user}-${S.stamp}`}\n                endpoint={\"api/main_html\"}\n                useEverLoaded={true}\n                hideLoading={true}\n                post_data={this.onDataGet}\n                render={this.renderDashboard(false, `dashboard-main`)}\n            />\n            {[...Array(len).keys()].map(i =>\n                <DataProvider\n                    key={`${P.user}-${i}-${S.stamp}`}\n                    ref={(el) => {\n                        window.App.setRpRef(el, `dashboard-${i}`)\n                    }}\n                    endpoint={`dashboard/${i}`}\n                    post_data={this.onDataGet}\n                    hideLoading={true}\n                    render={this.renderDashboard(true, `dashboard-${i}`)}\n                />)\n            }\n        </this.ex.lm.LoadingMask>\n    }\n}\n"],"names":["ex","queryString","AbortController","whatwgFetch","prProgressSpinner","lm","RegisterImportPool","DataProvider","Component","constructor","super","liveUpdate","params","this","update","state","data","loaded","placeholder","actorID","reloadData","bind","reload","onReady","controller","default","componentWillUnmount","abort","window","App","URLContext","globals","panels","setState","query","fmt","add_su","constants","URL_PARAM_LINO_VERSION","Lino","URL_PARAM_USER_LANGUAGE","selectedLanguage","user_settings","lang","fetch","props","endpoint","stringify","signal","then","response","status","status$","json","post_data","everloaded","catch","name","console","log","render","ready","_jsx","LoadingMask","mask","children","useEverLoaded","hideLoading","ProgressSpinner","requiredModules","iPool","propTypes","PropTypes","isRequired","defaultProps","prButton","DashboardItems","stamp","Date","unloaded","onDataGet","Object","keys","rps","filter","k","includes","forEach","d","renderDashboard","showReloadButton","rp","version_mismatch","html","_jsxs","Button","icon","style","float","onClick","dp","dangerouslySetInnerHTML","__html","S","P","len","dashboard_items","undefined","fillHeight","backgroundColor","ref","el","setRpRef","user","Array","map","i"],"sourceRoot":""}