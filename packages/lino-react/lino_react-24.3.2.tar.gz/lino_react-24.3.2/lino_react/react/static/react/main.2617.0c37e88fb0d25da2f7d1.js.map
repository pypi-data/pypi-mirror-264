{"version":3,"file":"main.2617.0c37e88fb0d25da2f7d1.js","mappings":"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","sources":["webpack://lino_react/./lino_react/react/components/LinoComponentUtils.jsx","webpack://lino_react/./lino_react/react/components/AutoComplete.tsx"],"sourcesContent":["export const name = \"LinoComponentUtils\";\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { RegisterImportPool, getExReady, Component, DataContextType } from \"./Base\";\n\nimport * as constants from \"./constants\";\n\n\nlet ex; const exModulePromises = ex = {\n    classNames: import(/* webpackChunkName: \"classNames_LinoComponentUtils\" */\"classnames\"),\n    queryString: import(/* webpackChunkName: \"queryString_LinoComponentUtils\" */\"query-string\"),\n    prDropdown: import(/* webpackChunkName: \"prDropdown_LinoComponentUtils\" */\"primereact/dropdown\"),\n    prInputText: import(/* webpackChunkName: \"prInputText_LinoComponentUtils\" */\"primereact/inputtext\"),\n}\nRegisterImportPool(ex);\n\n\nfunction messageInterceptor(elem) {\n    return (event) => {\n        if (event.data.hasOwnProperty('master_data')) {\n            if (elem.props[constants.URL_PARAM_WINDOW_TYPE] !== constants.WINDOW_TYPE_TABLE && Object.keys(event.data.master_data).includes(elem.props.elem.name)) {\n                elem.setState({value : event.data.master_data[elem.props.elem.name]});\n            }\n        }\n    }\n}\n\nexport function maintainTableWidth(elem, count) {\n    let ctx;\n    if (elem !== undefined) ctx = elem\n    else ctx = this;\n    let keys = Object.keys(ctx.flexs),\n        fo_conditional = count !== undefined ? keys.length === count : keys.length > 1;\n    if (fo_conditional) {\n        keys.forEach(key => {\n            var tbl = document.getElementById(key)\n                .getElementsByClassName('p-datatable');\n            if (tbl.length === 1) {\n                tbl = tbl[0]\n                let width = tbl.getBoundingClientRect().width / document\n                    .getElementsByClassName('layout-topbar')[0]\n                    .getBoundingClientRect().width;\n                if (width > ctx.flexs[key]) {\n                    Array.from(tbl.querySelectorAll(\n                        '.p-datatable table')).forEach(el => {\n                            if (Array.from(el.classList).join(' ')\n                                .includes('p-datatable')) el.style\n                                    .setProperty('table-layout', 'auto');\n                        });\n                }\n            }\n        });\n    }\n}\n\nexport const Labeled = (props) => {\n    const localEx = getExReady(ex, ['classNames']);\n    let label = props.label || props.elem.label;\n    return !localEx.ready ? null : <React.Fragment>\n        {!props.hide_label && label && <React.Fragment>\n            <label\n                className={localEx.classNames.default(\n                    \"l-label\",\n                    {\"l-label--unfilled\": !props.isFilled},\n                )}\n                title={\n                    Object.assign({}, props.elem.value || {}).quicktip\n                    || props.elem.help_text}>{label}:</label>\n            {props.helpText\n                && <span style={{float: 'right', cursor: 'pointer'}}\n                title={props.helpText}>?</span>}\n            <br/>\n        </React.Fragment>}\n        {props.children}\n    </React.Fragment>\n}\n\n\nLabeled.propTypes = {\n    label: PropTypes.string,\n    elem: PropTypes.object.isRequired,\n    hide_label: PropTypes.bool,\n    isFilled: PropTypes.bool,\n    helpText: PropTypes.string,\n    children: PropTypes.element.isRequired,\n}\nLabeled.defaultProps = {\n    hide_label: false,\n    isFilled: false,\n}\n\n\nexport class ABCComponent {\n    static getValueByName({name, props, context}) {\n        if (props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_PARAMS)\n            return context.param_values[name];\n        return props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE\n            ? context.rows[props.column.rowIndex][name]\n            : props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_CARDS\n                ? context[name] : context.data[name];\n    }\n}\n\n\nexport class LeafComponentBase extends Component {\n    static requiredModules = [\"classNames\"];\n    static iPool = ex;\n    static contextType = DataContextType;\n    static propTypesFromLinoLayout = {\n        column: PropTypes.object,\n        editing_mode: PropTypes.bool,\n        hide_label: PropTypes.bool,\n        [constants.URL_PARAM_WINDOW_TYPE]: PropTypes.oneOf([\n            constants.WINDOW_TYPE_TABLE,\n            constants.WINDOW_TYPE_DETAIL,\n            constants.WINDOW_TYPE_CARDS,\n            constants.WINDOW_TYPE_GALLERIA,\n            constants.WINDOW_TYPE_INSERT,\n            constants.WINDOW_TYPE_PARAMS,\n            constants.WINDOW_TYPE_UNKNOWN,\n        ]),\n        tabIndex: PropTypes.number.isRequired,\n    }\n\n    static propTypes = {\n        ...LeafComponentBase.propTypesFromLinoLayout,\n        elem: PropTypes.object.isRequired,\n        urlParams: PropTypes.object.isRequired,\n    }\n\n    static defaultProps = {\n        editing_mode: false,\n        hide_label: false,\n        [constants.URL_PARAM_WINDOW_TYPE]: constants.WINDOW_TYPE_UNKNOWN,\n    }\n\n    constructor(props) {\n        super(props);\n        this.wrapperClasses = []\n        this.dataKey = props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE\n            ? props.elem.fields_index : props.elem.name;\n        this.upController = props.urlParams.controller;\n\n        this.filled = this.filled.bind(this);\n        this.getValue = this.getValue.bind(this);\n        this.getValueByName = this.getValueByName.bind(this);\n        this.innerHTML = this.innerHTML.bind(this);\n        this.setLeafRef = this.setLeafRef.bind(this);\n    }\n\n    filled = () => (![\"\", null, undefined].includes(this.getValue()));\n\n    getValueByName(name) {\n        return ABCComponent.getValueByName({\n            name: name, props: this.props, context: this.context});\n    }\n\n    getValue() {\n        return this.getValueByName(this.dataKey);\n    }\n\n    innerHTML(dangerous, style={}) {\n        let v = this.getValue() || \"\\u00a0\";\n        if (v instanceof Object) v = JSON.stringify(v);\n        if (dangerous) {\n            return <div style={style} dangerouslySetInnerHTML={{__html: v}}/>\n        } else {\n            return <div style={style}>{v}</div>\n        }\n    }\n\n    setLeafRef({input=false, type=\"\"} = {}) {\n        if (this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_DETAIL)\n            this.upController.dataContext.setLeafRef({\n                name: type === 'slave' ? this.actorID\n                    : this.props.elem.name, ref: this, input: input, type: type});\n    }\n}\n\n\nexport class LeafComponentDelayedValue extends LeafComponentBase {\n    static requiredModules = [\"queryString\"].concat(LeafComponentBase.requiredModules);\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...this.state, value: null, data_url: null,\n            mk: props.urlParams.pk,\n            mt: this.upController.static.actorData.content_type\n        }\n        this.actorID = props.elem.actor_id || (props.elem.name.includes('.')\n            ? props.elem.name : `${props.urlParams.packId}.${props.elem.name}`);\n\n        this.shouldComponentUpdate = this.shouldComponentUpdate.bind(this);\n        this.getData = this.getData.bind(this);\n        this.getValue = this.getValue.bind(this);\n        this.update = this.update.bind(this);\n    }\n\n    async prepare() {\n        await super.prepare();\n        let val = super.getValue();\n        if (!this.upController.filled(val)) return;\n        this.delayed = val.hasOwnProperty('delayed_value_url');\n    }\n\n    onReady() {\n        let val = super.getValue();\n        if (this.delayed) {\n            this.setLeafRef({type: \"slave\"});\n            this.getData(val.delayed_value_url);\n            this.upController.globals.panels[this.actorID] = this;\n        } else {\n            this.setState({value: val});\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (!this.delayed) return this.state.value !== super.getValue();\n        return this.state.value !== nextState.value || (this.state.value !== null &&\n            super.getValue().delayed_value_url !== this.state.data_url);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.delayed) {\n            if (this.state.data_url !== super.getValue().delayed_value_url) {\n                this.setState({value: null});\n                this.update();\n            }\n        } else this.setState({value: super.getValue()});\n    }\n\n    componentWillUnmount() {\n        delete this.upController.globals.panels[this.actorID];\n    }\n\n    getValue() {\n        return this.state.value;\n    }\n\n    getData(data_url) {\n        this.upController.actionHandler.silentFetch({\n            path: `${data_url}?${this.ex.queryString.default.stringify(this.upController.actionHandler.defaultStaticParams())}`\n        }).then((data) => {\n            this.setState({value: data.data, data_url: data_url});\n        });\n    }\n\n    liveUpdate = (params) => {\n        if (params.mk === null ||\n            (params.mk === this.state.mk && params.mt === this.state.mt)\n        ) this.update();\n    }\n\n    update() {\n        this.getData(super.getValue().delayed_value_url);\n    }\n}\n\n\nexport class LeafComponentInput extends LeafComponentBase {\n    static requiredModules = [\"prInputText\"].concat(LeafComponentBase.requiredModules);\n    constructor(props) {\n        super(props);\n        this.styleClasses = [\n            \"disabled-input\",\n            \"l-card\",\n            \"unsaved-modification\",\n        ]\n\n        this.componentWillUnmount = this.componentWillUnmount.bind(this);\n\n        this.disabled = this.disabled.bind(this);\n        this.filled = this.filled.bind(this);\n        this.focus = this.focus.bind(this);\n        this.getCellStyleClasses = this.getCellStyleClasses.bind(this);\n        this.getInput = this.getInput.bind(this);\n        this.onChangeUpdate = this.onChangeUpdate.bind(this);\n        this.onInputRef = this.onInputRef.bind(this);\n        this.onRef = this.onRef.bind(this);\n        this.setCellStyle = this.setCellStyle.bind(this);\n        this.submit = this.submit.bind(this);\n        this.tabIndexMatch = this.tabIndexMatch.bind(this);\n        this.update = this.update.bind(this);\n    }\n\n    async prepare() {\n        this.inputState = {\n            inputComponent: this.ex.prInputText.InputText,\n            inputOnly: false,\n            inputProps: {},\n            onChangeUpdateAssert: (event) => (true),\n            postOnChange: (event) => (null),\n        }\n        window.addEventListener('message', messageInterceptor(this));\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('message', messageInterceptor(this));\n    }\n\n    disabled() {\n        if (this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_CARDS)\n            return true;\n        if (this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_PARAMS)\n            return false;\n        if (!this.props.elem.editable) return true;\n        if (this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE) {\n            let row = this.context.rows[this.props.column.rowIndex],\n                last_item = row[row.length - 1];\n\n            // No meta, assume not disabled;\n            if (!last_item || !last_item.meta) return false;\n            // disable_editing set to true;\n            if (row[row.length - 2]) return true;\n            // check name in the disabled_fields meta;\n            return row[row.length - 3][this.props.elem.name] || false;\n        } else {\n            if (this.context.data.disable_editing) return true;\n            return this.context.data.disabled_fields[this.props.elem.name] || false;\n        }\n    }\n\n    focus() {\n        let ref = this.inputEl;\n        if (ref.focus) ref.focus()\n        else if (ref.focusInput) ref.focusInput.focus()\n        else if (ref.inputRef) ref.inputRef.current.focus()\n    }\n\n    getCellStyleClasses() {\n        let styleClasses = [];\n        if (this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE) {\n            if (this.context.modifiedRows[this.props.column.rowIndex].includes(\n                this.props.elem.fields_index\n            )) {\n                styleClasses.push(\"unsaved-modification\");\n            }\n        } else {\n            styleClasses.push('l-card');\n            if (this.props[constants.URL_PARAM_WINDOW_TYPE] !== constants.WINDOW_TYPE_CARDS) {\n                if (this.disabled()) styleClasses.push(\"disabled-input\")\n                else if (this.context.modified.includes(this.props.elem.name))\n                    styleClasses.push(\"unsaved-modification\");\n            }\n        }\n        return styleClasses;\n    }\n\n    getInput() {\n        return <this.inputState.inputComponent\n            autoFocus={this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE ? true : undefined}\n            onChange={(e) => {\n                if (!this.inputState.onChangeUpdateAssert(e)) return;\n                this.onChangeUpdate(e);\n                this.inputState.postOnChange(e);\n            }}\n            ref={this.onInputRef}\n            style={{width: \"100%\"}}\n            tabIndex={this.props.tabIndex}\n            value={this.getValue() || \"\"}\n            {...this.inputState.inputProps}/>;\n    }\n\n    onChangeUpdate(e) {\n        this.update({[this.dataKey]: e.target.value});\n        this.setState({});\n    }\n\n    onInputRef(ref) {\n        this.inputEl = ref;\n        if (ref && this.tabIndexMatch()) this.focus();\n    }\n\n    onKeyDown = (event) => null;\n\n    onRef(ref) {\n        const onClick = () => {\n            this.container.onclick = (event) => {\n                if (!this.disabled()) {\n                    Object.assign(this.upController.globals, {\n                        currentInputRowIndex: Object.assign({rowIndex: 0}, this.props.column).rowIndex,\n                        currentInputTabIndex: this.props.tabIndex,\n                        currentInputWindowType: this.props[constants.URL_PARAM_WINDOW_TYPE],\n                        currentInputAHRefName: this.upController.actionHandler.refName,\n                    });\n                    if (this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_DETAIL\n                        && !this.props.editing_mode\n                    ) this.upController.history.replaceState({editing_mode: true});\n                }\n            }\n        }\n        if (ref) {\n            this.container = ref;\n            if (this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE) {\n                this.container = ref.closest(\"td\");\n                onClick();\n            }\n            else if (\n                this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_DETAIL\n            ) onClick();\n        }\n        this.setCellStyle(this.container);\n    }\n\n    setCellStyle(ref) {\n        if (ref) {\n            let classes = this.getCellStyleClasses();\n            this.styleClasses.forEach(item => {ref.classList.remove(item)});\n            classes.forEach(item => {ref.classList.add(item)});\n        }\n    }\n\n    submit() {\n        this.upController.actionHandler.submit({\n            cellInfo: {rowIndex: this.props.column.rowIndex}});\n    }\n\n    tabIndexMatch() {\n        if (\n            this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE &&\n            this.props.column.rowIndex !== this.upController.globals.currentInputRowIndex\n        ) return false;\n        if (\n            this.props[constants.URL_PARAM_WINDOW_TYPE] === this.upController.globals.currentInputWindowType &&\n            this.upController.actionHandler.refName === this.upController.globals.currentInputAHRefName &&\n            this.props.tabIndex === this.upController.globals.currentInputTabIndex\n        ) return true;\n        return false;\n    }\n\n    update(values) {\n        this.upController.actionHandler.update({\n            values: values, elem: this.props.elem, col: this.props.column,\n            windowType: this.props[constants.URL_PARAM_WINDOW_TYPE]});\n    }\n\n    render() {\n        if (!this.state.ready) return null;\n        if (this.container) this.setCellStyle(this.container);\n        return <Labeled {...this.props} elem={this.props.elem} isFilled={this.filled()}>\n            <div\n                className={this.ex.classNames.default(this.wrapperClasses)}\n                onKeyDown={this.onKeyDown}\n                ref={this.onRef}>\n                    {this.inputState.inputOnly ? this.getInput() :\n                        this.props.editing_mode && !this.disabled() ?\n                            this.getInput() : this.innerHTML()}\n            </div>\n        </Labeled>\n    }\n}\n\n\nexport class LeafComponentInputChoices extends LeafComponentInput {\n    static requiredModules = [\"prDropdown\"].concat(LeafComponentInput.requiredModules);\n    constructor(props) {\n        super(props);\n        this.wrapperClasses.push(\"l-ChoiceListFieldElement\");\n        this.state = {\n            ...this.state,\n            hidden_value: null\n        }\n\n        this.dataKeyHidden = props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE\n            ? props.elem.fields_index_hidden\n            : props.elem.name + \"Hidden\";\n\n        this.getInput = this.getInput.bind(this);\n        this.getValue = this.getValue.bind(this);\n        this.innerHTML = this.innerHTML.bind(this);\n    }\n\n    getValue() {\n        return {\n            text: super.getValue(),\n            value: this.getValueByName(this.dataKeyHidden)};\n    }\n\n    getInput() {\n        return <this.ex.prDropdown.Dropdown\n            onChange={(e) => {\n                if (e.originalEvent.ctrlKey || e.originalEvent.altKey) return;\n                this.update({[this.dataKey]: e.value,\n                    [this.dataKeyHidden]: e.value});\n                    this.setState({});\n            }}\n            optionLabel=\"text\"\n            options={this.options}\n            ref={this.onInputRef}\n            showClear={this.props.elem.field_options.allowBlank}\n            style={{width: \"100%\"}}\n            tabIndex={this.props.tabIndex}\n            value={this.getValue().value}/>\n    }\n\n    innerHTML() {\n        let v = super.getValue() || \"\\u00a0\";\n        return <div style={{whiteSpace: \"nowrap\"}}>{v}</div>\n    }\n}\n","export const name: string = \"AutoComplete\";\nimport * as t from './types';\n\n// @ts-ignore\nimport React from \"react\";\n// @ts-ignore\nimport PropTypes from \"prop-types\";\nimport { RegisterImportPool } from \"./Base\";\nimport { LeafComponentInput } from \"./LinoComponentUtils\";\nimport * as constants from \"./constants\";\n\nlet ex; const exModulePromises = ex = {\n    // @ts-ignore\n    queryString: import(/* webpackChunkName: \"queryString_AutoComplete\" */\"query-string\"),\n    // @ts-ignore\n    prAutoComplete: import(/* webpackChunkName: \"prAutoComplete_AutoComplete\" */\"primereact/autocomplete\"),\n    // @ts-ignore\n    AbortController: import(/* webpackChunkName: \"AbortController_AutoComplete\" */\"abort-controller\"),\n};RegisterImportPool(ex);\n\n\nexport class AutoComplete extends LeafComponentInput {\n    static requiredModules = ['prAutoComplete', \"AbortController\"].concat(LeafComponentInput.requiredModules);\n    static iPool = Object.assign(ex, LeafComponentInput.iPool.copy());\n\n    hasClearButton: boolean;\n    clear?: () => void;\n    props: t.LeafInputProps;\n    choicesURL?(query: string, start: number, limit: number): string;\n    clearButton?: any;\n    onSelect?(e: any): void;\n    scroller: any;\n    controller: any;\n\n    constructor(props: t.LeafInputProps) {\n        super(props);\n        this.state = {\n            ...this.state,\n            count: 999,\n            [constants.URL_PARAM_FILTER]: \"\",\n            [constants.URL_PARAM_LIMIT]: 15,\n            [constants.URL_PARAM_START]: 0,\n            lazyLoading: false,\n            rows: [],\n            value: null,\n        }\n\n        this.hasClearButton = false;\n\n        this.getChoices = this.getChoices.bind(this);\n        this.getInput = this.getInput.bind(this);\n        this.itemTemplate = this.itemTemplate.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n    }\n\n    onReady() {\n        if (this.hasClearButton && !this.clear) throw \"clear NotImplemented\";\n        let v = this.getValue();\n        this.setState({\n            [constants.URL_PARAM_FILTER]: v.text,\n            [constants.URL_PARAM_LIMIT]: this.props.urlParams[\n                constants.URL_PARAM_LIMIT],\n            value: v,\n        });\n        this.controller = new this.ex.AbortController.default();\n    }\n\n    onKeyDown = (event) => {\n        if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n            if (this.inputEl && !this.inputEl.getOverlay()) {\n                if (!this.state.rows.length) this.getChoices(this.state[constants.URL_PARAM_FILTER]);\n                this.inputEl.show();\n            } else if (!this.state.lazyLoading) {\n                let sItem = this.scroller.getElementRef().current.querySelector('li.p-highlight');\n                if (sItem) {\n                    let {top, bottom} = this.scroller.getElementRef().current.getBoundingClientRect();\n                    let sItemRect = sItem.getBoundingClientRect();\n\n                    if (sItemRect.top < top) sItem.scrollIntoView(true)\n                    else if (sItemRect.bottom > bottom) sItem.scrollIntoView(false);\n                }\n            }\n            event.stopPropagation();\n        }\n    }\n\n    itemTemplate = (item, options) => {\n        let i = typeof item === \"object\" ? item.text : item;\n        return <div>{i || \"\\u00a0\"}</div>\n    }\n\n    getChoices = (query: string, limit?: number) => {\n        this.controller.abort();\n        this.controller = new this.ex.AbortController.default();\n        limit = limit || this.state[constants.URL_PARAM_LIMIT];\n        let start = limit === this.state[constants.URL_PARAM_LIMIT]\n            ? this.state[constants.URL_PARAM_START]\n            : this.state[constants.URL_PARAM_LIMIT];\n        this.upController.actionHandler.silentFetch({\n            path: this.choicesURL(query, start, limit),\n            signal: this.controller.signal\n        }).then((data) => {\n            let rows = data.rows;\n            if (this.state.rows.length) {\n                rows = rows.filter(row => row.text !== \"\" && row.value !== null);\n            }\n            rows = this.state.rows.concat(rows);\n\n            /**\n             * In case of a learing combo set the non-existent query\n             * as the value (which creates a new database record on\n             *               the server against the value)\n             */\n            if ((this.props.elem.field_options || {}).allowCreate) {\n                if (rows.filter(row => row.text == query).length === 0)\n                    rows.unshift({text: query, value: query});\n            }\n\n            this.setState({\n                [constants.URL_PARAM_FILTER]: query,\n                [constants.URL_PARAM_LIMIT]: limit,\n                count: data.count, lazyLoading: false,\n                rows: rows,\n            });\n        });\n    }\n\n    getInput(customProps = {}) {\n        if (this.state.value === null) return null;\n        return <React.Fragment><this.ex.prAutoComplete.AutoComplete\n            completeMethod={(e) => {\n                if (e.originalEvent.type === 'click' && this.state.rows.length) {\n                    this.inputEl.show();\n                    return;\n                }\n                this.state.rows = [];\n                this.getChoices(e.query, this.state[constants.URL_PARAM_LIMIT]);\n            }}\n            dropdown={true}\n            field=\"text\"\n            itemTemplate={this.itemTemplate}\n            onChange={e => this.setState({\n                value: Object.assign(this.state.value, {\n                    text: e.value, value: null}),\n                rows: [],\n                [constants.URL_PARAM_LIMIT]: this.props.urlParams[\n                    constants.URL_PARAM_LIMIT],\n            })}\n            onSelect={this.onSelect}\n            onShow={() => {\n                if (this.clearButton) {\n                    this.clearButton.style.visibility = 'hidden'\n                }\n            }}\n            ref={this.onInputRef}\n            scrollHeight=\"200px\"\n            suggestions={this.state.rows}\n            tabIndex={this.props.tabIndex}\n            value={this.state.value.text}\n            virtualScrollerOptions={{\n                itemSize: 35,\n                lazy: true,\n                loading: this.state.lazyLoading,\n                onScrollIndexChange: (event) => {\n                    let l = this.state[constants.URL_PARAM_LIMIT];\n                    if (l - event.first < 15 && !this.state.lazyLoading\n                        && this.state.count > l\n                    ) {\n                        this.setState({lazyLoading: true});\n                        this.getChoices(\n                            this.state[constants.URL_PARAM_FILTER], l + 15);\n                    }\n                },\n                ref: el => this.scroller = el,\n                scrollHeight: \"195px\",\n                style: {minWidth: '30ch'},\n            }}\n            {...customProps}/>\n            {this.hasClearButton && this.props.elem.field_options.allowBlank\n                && this.state.value.text\n                && <i key={this.state.touch} ref={el => this.clearButton = el}\n                className={\"pi pi-times l-fk-clear\"}\n                onClick={this.clear}\n                style={{visibility: 'visible', cursor: \"pointer\"}}/>}\n        </React.Fragment>\n    }\n}\n\ntype QuickFilterProps = t.LeafInputProps & {\n    wide: boolean;\n}\n\nexport class QuickFilter extends AutoComplete {\n    static requiredModules = ['queryString'].concat(AutoComplete.requiredModules);\n\n    static propTypes = {\n        ...AutoComplete.propTypes,\n        wide: PropTypes.bool,\n    }\n\n    static defaultProps = {\n        ...AutoComplete.defaultProps,\n        editing_mode: true,\n        elem: {},\n        tabIndex: 0,\n        wide: false,\n        [constants.URL_PARAM_WINDOW_TYPE]: constants.WINDOW_TYPE_UNKNOWN,\n    }\n\n    props: QuickFilterProps;\n\n    constructor(props: QuickFilterProps) {\n        super(props);\n        this.wrapperClasses = [\"l-grid-quickfilter\"];\n        this.styleClasses = [];\n\n        this.choicesURL = this.choicesURL.bind(this);\n        this.getInput = this.getInput.bind(this);\n        this.getValue = this.getValue.bind(this);\n        this.onSelect = this.onSelect.bind(this);\n    }\n\n    getInput() {\n        return super.getInput({\n            placeholder: \"QuickSearch\",\n            style: {\n                width: this.props.wide ? \"100%\" : undefined,\n                marginRight: this.props.wide ? \"1ch\" : undefined,\n                marginLeft: this.props.wide ? \"1ch\" : undefined,\n            }\n        })\n    }\n\n    getValue() {\n        return {text: this.props.urlParams[constants.URL_PARAM_FILTER],\n            value: null}\n    }\n\n    choicesURL(query, start, limit) {\n        return `choices/${this.props.urlParams.packId}/${this.props.urlParams.actorId}?${\n            this.ex.queryString.default.stringify(Object.assign(this.upController\n                .actionHandler.defaultStaticParams(), {\n                    [constants.URL_PARAM_FILTER]: query,\n                    [constants.URL_PARAM_START]: start,\n                    [constants.URL_PARAM_LIMIT]: limit\n                }))}`;\n    }\n\n    onSelect(event) {\n        let pk = event.value.value,\n            c = this.upController;\n        c.history.pushPath({\n            pathname: `/api/${this.props.urlParams.packId}/${this.props.urlParams.actorId}/${pk}`,\n            params: c.actionHandler.defaultStaticParams(),\n        });\n    }\n\n    render() {\n        if (!this.state.ready) return null;\n        return this.getInput();\n    }\n}\n"],"names":["name","ex","classNames","queryString","prDropdown","prInputText","messageInterceptor","elem","event","data","hasOwnProperty","props","constants","Object","keys","master_data","includes","setState","value","maintainTableWidth","count","ctx","undefined","this","flexs","length","forEach","key","tbl","document","getElementById","getElementsByClassName","getBoundingClientRect","width","Array","from","querySelectorAll","el","classList","join","style","setProperty","RegisterImportPool","Labeled","localEx","getExReady","label","ready","_jsxs","React","children","hide_label","className","default","isFilled","title","assign","quicktip","help_text","helpText","_jsx","float","cursor","propTypes","PropTypes","isRequired","defaultProps","ABCComponent","getValueByName","context","param_values","rows","column","rowIndex","LeafComponentBase","Component","constructor","super","filled","getValue","wrapperClasses","dataKey","fields_index","upController","urlParams","controller","bind","innerHTML","setLeafRef","dangerous","v","JSON","stringify","dangerouslySetInnerHTML","__html","input","type","dataContext","actorID","ref","requiredModules","iPool","contextType","DataContextType","propTypesFromLinoLayout","editing_mode","tabIndex","LeafComponentDelayedValue","liveUpdate","params","mk","state","mt","update","data_url","pk","static","actorData","content_type","actor_id","packId","shouldComponentUpdate","getData","prepare","val","delayed","onReady","delayed_value_url","globals","panels","nextProps","nextState","componentDidUpdate","prevProps","prevState","componentWillUnmount","actionHandler","silentFetch","path","defaultStaticParams","then","concat","LeafComponentInput","onKeyDown","styleClasses","disabled","focus","getCellStyleClasses","getInput","onChangeUpdate","onInputRef","onRef","setCellStyle","submit","tabIndexMatch","inputState","inputComponent","InputText","inputOnly","inputProps","onChangeUpdateAssert","postOnChange","window","addEventListener","removeEventListener","editable","row","last_item","meta","disable_editing","disabled_fields","inputEl","focusInput","inputRef","current","modifiedRows","push","modified","autoFocus","onChange","e","target","onClick","container","onclick","currentInputRowIndex","currentInputTabIndex","currentInputWindowType","currentInputAHRefName","refName","history","replaceState","closest","classes","item","remove","add","cellInfo","values","col","windowType","render","LeafComponentInputChoices","hidden_value","dataKeyHidden","fields_index_hidden","text","Dropdown","originalEvent","ctrlKey","altKey","optionLabel","options","showClear","field_options","allowBlank","whiteSpace","prAutoComplete","AbortController","AutoComplete","getOverlay","getChoices","URL_PARAM_FILTER","show","lazyLoading","sItem","scroller","getElementRef","querySelector","top","bottom","sItemRect","scrollIntoView","stopPropagation","itemTemplate","i","query","limit","abort","start","URL_PARAM_LIMIT","URL_PARAM_START","choicesURL","signal","filter","allowCreate","unshift","hasClearButton","clear","customProps","Fragment","completeMethod","dropdown","field","onSelect","onShow","clearButton","visibility","scrollHeight","suggestions","virtualScrollerOptions","itemSize","lazy","loading","onScrollIndexChange","l","first","minWidth","touch","copy","QuickFilter","placeholder","wide","marginRight","marginLeft","actorId","c","pushPath","pathname","bool","URL_PARAM_WINDOW_TYPE","WINDOW_TYPE_UNKNOWN"],"sourceRoot":""}