# coding: utf-8

"""
    Fingerprint Pro Server API

    Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device.   # noqa: E501

    OpenAPI spec version: 3
    Contact: support@fingerprint.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VpnResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'result': 'bool',
        'origin_timezone': 'str',
        'origin_country': 'str',
        'methods': 'VpnResultMethods'
    }

    attribute_map = {
        'result': 'result',
        'origin_timezone': 'originTimezone',
        'origin_country': 'originCountry',
        'methods': 'methods'
    }

    def __init__(self, result=None, origin_timezone=None, origin_country=None, methods=None):  # noqa: E501
        """VpnResult - a model defined in Swagger"""  # noqa: E501
        self._result = None
        self._origin_timezone = None
        self._origin_country = None
        self._methods = None
        self.discriminator = None
        self.result = result
        self.origin_timezone = origin_timezone
        if origin_country is not None:
            self.origin_country = origin_country
        self.methods = methods

    @property
    def result(self):
        """Gets the result of this VpnResult.  # noqa: E501

        VPN or other anonymizing service has been used when sending the request.  # noqa: E501

        :return: The result of this VpnResult.  # noqa: E501
        :rtype: bool
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this VpnResult.

        VPN or other anonymizing service has been used when sending the request.  # noqa: E501

        :param result: The result of this VpnResult.  # noqa: E501
        :type: bool
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def origin_timezone(self):
        """Gets the origin_timezone of this VpnResult.  # noqa: E501

        Local timezone which is used in timezoneMismatch method.  # noqa: E501

        :return: The origin_timezone of this VpnResult.  # noqa: E501
        :rtype: str
        """
        return self._origin_timezone

    @origin_timezone.setter
    def origin_timezone(self, origin_timezone):
        """Sets the origin_timezone of this VpnResult.

        Local timezone which is used in timezoneMismatch method.  # noqa: E501

        :param origin_timezone: The origin_timezone of this VpnResult.  # noqa: E501
        :type: str
        """
        if origin_timezone is None:
            raise ValueError("Invalid value for `origin_timezone`, must not be `None`")  # noqa: E501

        self._origin_timezone = origin_timezone

    @property
    def origin_country(self):
        """Gets the origin_country of this VpnResult.  # noqa: E501

        Country of the request (only for Android SDK version >= 2.4.0, ISO 3166 format or unknown).  # noqa: E501

        :return: The origin_country of this VpnResult.  # noqa: E501
        :rtype: str
        """
        return self._origin_country

    @origin_country.setter
    def origin_country(self, origin_country):
        """Sets the origin_country of this VpnResult.

        Country of the request (only for Android SDK version >= 2.4.0, ISO 3166 format or unknown).  # noqa: E501

        :param origin_country: The origin_country of this VpnResult.  # noqa: E501
        :type: str
        """

        self._origin_country = origin_country

    @property
    def methods(self):
        """Gets the methods of this VpnResult.  # noqa: E501


        :return: The methods of this VpnResult.  # noqa: E501
        :rtype: VpnResultMethods
        """
        return self._methods

    @methods.setter
    def methods(self, methods):
        """Sets the methods of this VpnResult.


        :param methods: The methods of this VpnResult.  # noqa: E501
        :type: VpnResultMethods
        """
        if methods is None:
            raise ValueError("Invalid value for `methods`, must not be `None`")  # noqa: E501

        self._methods = methods

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VpnResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VpnResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VpnResult):
            return True

        return self.to_dict() != other.to_dict()
