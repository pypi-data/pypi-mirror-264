# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['tabulate_django']

package_data = \
{'': ['*']}

install_requires = \
['Django', 'six>=1.16.0,<2.0.0', 'tabulate']

setup_kwargs = {
    'name': 'tabulate-django',
    'version': '0.2.1',
    'description': 'An application to pretty print Django QuerySets and Model instances in the shell',
    'long_description': '# Tabulate-Django\n\nTabulate-Django is a small collection of functions to make working with Django Querysets\nand Objects in the shell easier.\n\nTabulate-Django uses the [tabulate](https://pypi.org/project/tabulate/) library for\nformatting.\n\n## Motivation\n\nWhen using Django, I often need to drop to the shell to retrieve information. In such\ncases I will usually look at the result of a QuerySet, the default output of which is\nnot particularly useful. I tended to use `.values()` to extract the fields that I\nwanted and then pass them into the excellent tabulate library. I would often make the\nsame calls over an over and ended up creating avoid repetition. Over time this function\ngrew in size and capabilities.\n\nIn order to make it easy to put into any codebase I am working on, I decided to publish\nit on PyPI, with the added bonus of making it available for other users\n\nMy motivation is primarily my own needs, so I won\'t commit to adding any features that\nwould not be of use to me, however PRs are welcome.\n\n## Licence\n\nThis software is licenced under the MIT licence\n\n## Installation\n\nThe package is available on PyPI so installation is as simple as\n\n```shell\npip install tabulate-django\n```\n\nor use the package manager of your choice\n\nThis version supports Python 2.7, however compatibility may be removed in a future\nrelease (basically when I stop developing anything under 2.7)\n\n## Usage\n\nFor examples, I am using a simple e-commerce style app called test_app that contains\nthree models, Country, Account and Order.\n\nAccount has a foreign key to Country and Order has a\nforeign key to Account.\n\nCommands are assumed to be running in the Django shell started with\n`python manage.py shell`\n\nFirst, let\'s get a queryset with all Accounts\n\n```python\nfrom test_app.models import Account\nall_accounts = Account.objects.order_by("name")\nprint(all_accounts)\n```\n\nresponse:\n\n```\n<QuerySet [<Account: Alice Smith>, <Account: Bob Jones>, <Account: Charlotte Muller>, <Account: Dietrich Schmidt>, <Account: Eva Dupont>, <Account: Francois Michel>]>\n```\n\nmore information could be provided by running `print(account.values("name", "email")`\n\n```\n<QuerySet [{\'name\': \'Alice Smith\', \'email\': \'alice@smith.example\'}, {\'name\': \'Bob Jones\', \'email\': \'bob.jones@example.com\'}, {\'name\': \'Charlotte Muller\', \'email\': \'charlie@example.com\'}, {\'name\': \'Dietrich Schmidt\', \'email\': \'dschmidt@example.de\'}, {\'name\': \'Eva Dupont\', \'email\': \'eva@dupont.example\'}, {\'name\': \'Francois Michel\', \'email\': \'francois.michel@example.fr\'}]>\n```\n\nAs the number of records and the number of fields gets bigger this becomes hard to read\nand will eventually be truncated\n\n### queryset_table\n\nlet\'s see what Tabulate Django can do. Pass the queryset and an iterable of fields that\nyou wish to extract to the queryset_table\n\n```python\nfrom tabulate_django import queryset_table\nqueryset_table(all_accounts, ["name", "email"])\n```\n\n```\n╒══════════════════╤════════════════════════════╕\n│ Name             │ Email                      │\n╞══════════════════╪════════════════════════════╡\n│ Alice Smith      │ alice@smith.example        │\n├──────────────────┼────────────────────────────┤\n│ Bob Jones        │ bob.jones@example.com      │\n├──────────────────┼────────────────────────────┤\n│ Charlotte Muller │ charlie@example.com        │\n├──────────────────┼────────────────────────────┤\n│ Dietrich Schmidt │ dschmidt@example.de        │\n├──────────────────┼────────────────────────────┤\n│ Eva Dupont       │ eva@dupont.example         │\n├──────────────────┼────────────────────────────┤\n│ Francois Michel  │ francois.michel@example.fr │\n╘══════════════════╧════════════════════════════╛\n\n```\n\nAs you can see, it puts the output in a pretty printed table with automatically named\nheaders\n\n### Table Format\n\nYou can change the format by setting table_format to any of [the formats supported by\ntabulate](https://github.com/astanin/python-tabulate/blob/master/README.md#table-format)\n\nSo to user presto format\n\n```python\nqueryset_table(all_accounts, ["name", "email"], table_format="presto")\n```\n\n```\n Name             | Email\n------------------+----------------------------\n Alice Smith      | alice@smith.example\n Bob Jones        | bob.jones@example.com\n...\n```\n\nThe default is fancy_grid\n\n### TSVs\n\nIn addition to the output formats provided by tabulate, there is an additional format\n"tsv" which outputs in a simple tsv format. This is useful for exporting the results for\nimporting into a spreadsheet or other tool. No escaping is performed so if the data has\nlinebreaks or tabs then it will not be correctly imported\n\n### Output to variable\n\nThe default behaviour of the function is to print the output to the console. If instead\nyou wish for the output to be placed inside a variable, add the parameter print_result=False\ne.g.\n\n```python\nusers=queryset_table(all_accounts, ["name", "email"], print_result=False)\n```\n\n### Foreign Keys\n\nYou can traverse model relationships using `__` notation, so to retrieve the country\nname of each Account you can do\n\n```python\nqueryset_table(all_accounts, ["name", "email", "country__name"])\n```\n\nwould output\n\n```\n╒══════════════════╤════════════════════════════╤════════════════╕\n│ Name             │ Email                      │ Country Name   │\n╞══════════════════╪════════════════════════════╪════════════════╡\n│ Alice Smith      │ alice@smith.example        │ United Kingdom │\n├──────────────────┼────────────────────────────┼────────────────┤\n│ Bob Jones        │ bob.jones@example.com      │ United Kingdom │\n├──────────────────┼────────────────────────────┼────────────────┤\n│ Charlotte Muller │ charlie@example.com        │ Germany        │\n├──────────────────┼────────────────────────────┼────────────────┤\n│ Dietrich Schmidt │ dschmidt@example.de        │ Germany        │\n├──────────────────┼────────────────────────────┼────────────────┤\n│ Eva Dupont       │ eva@dupont.example         │ France         │\n├──────────────────┼────────────────────────────┼────────────────┤\n│ Francois Michel  │ francois.michel@example.fr │ France         │\n╘══════════════════╧════════════════════════════╧════════════════╛\n...\n```\n\n### Changing Table Headings\n\nIf you were unhappy with the generated headers (more likely when using foreign keys and\nmore advanced operations) then you can replace a field with a tuple, the first entry\ncontaining the field specification and the second the heading that you wish the column\nto have\n\ne.g.\n\n```python\nqueryset_table(all_accounts, ["name", "email", ("country__name", "Residence")])\n```\n\nwould output\n\n```\n╒══════════════════╤════════════════════════════╤════════════════╕\n│ Name             │ Email                      │ Residence      │\n╞══════════════════╪════════════════════════════╪════════════════╡\n│ Alice Smith      │ alice@smith.example        │ United Kingdom │\n├──────────────────┼────────────────────────────┼────────────────┤\n│ Bob Jones        │ bob.jones@example.com      │ United Kingdom │\n├──────────────────┼────────────────────────────┼────────────────┤\n...\n```\n\n### Aggregation\n\nAs well as getting simple fields from tables, it is also possible to use certain\naggregation functions to retrieve more information, by using specially formatted field\nspecifications\n\nThese are accessed by preceding the field (or table) name with a symbol\n\n| Function  | Symbol | Notes                                |\n| --------- | ------ | ------------------------------------ |\n| Count     | `#`    |                                      |\n| Min       | `_`    |                                      |\n| Max       | `^`    |                                      |\n| Sum       | `+`    |                                      |\n| Average   | `~`    |                                      |\n| StringAgg | `*`    | Postgres only - used for strings     |\n| ArrayAgg  | `[]`   | Postgres only - used for non-strings |\n\ne.g\n\n```python\nqueryset_table(all_accounts, ["name", "email", "#order", "+order__order_total"])\n```\n\n```\n╒══════════════════╤════════════════════════════╤══════════╤══════════════════════╕\n│ Name             │ Email                      │   #Order │   +Order Order Total │\n╞══════════════════╪════════════════════════════╪══════════╪══════════════════════╡\n│ Alice Smith      │ alice@smith.example        │        3 │                   45 │\n├──────────────────┼────────────────────────────┼──────────┼──────────────────────┤\n│ Bob Jones        │ bob.jones@example.com      │        1 │                  250 │\n├──────────────────┼────────────────────────────┼──────────┼──────────────────────┤\n│ Charlotte Muller │ charlie@example.com        │        1 │                   10 │\n├──────────────────┼────────────────────────────┼──────────┼──────────────────────┤\n│ Dietrich Schmidt │ dschmidt@example.de        │        2 │                  300 │\n├──────────────────┼────────────────────────────┼──────────┼──────────────────────┤\n│ Eva Dupont       │ eva@dupont.example         │        1 │                  220 │\n├──────────────────┼────────────────────────────┼──────────┼──────────────────────┤\n│ Francois Michel  │ francois.michel@example.fr │        1 │                  220 │\n╘══════════════════╧════════════════════════════╧══════════╧══════════════════════╛\n```\n\nAlternatively you can use custom aggregate expressions, e.g.\n\n```python\nfrom django.db.models import Count, Sum\nqueryset_table(\n            all_accounts,\n            [\n                "name",\n                "email",\n                (Count("order"), "Orders"),\n                (Sum("order__order_total"), "Order Value"),\n            ]\n)\n```\n\nwould output\n\n```\n╒══════════════════╤════════════════════════════╤══════════╤═══════════════╕\n│ Name             │ Email                      │   Orders │   Order Value │\n╞══════════════════╪════════════════════════════╪══════════╪═══════════════╡\n│ Alice Smith      │ alice@smith.example        │        3 │            45 │\n├──────────────────┼────────────────────────────┼──────────┼───────────────┤\n│ Bob Jones        │ bob.jones@example.com      │        1 │           250 │\n├──────────────────┼────────────────────────────┼──────────┼───────────────┤\n...\n```\n\nHeader aliases are used here as the default representation of the expression is not\nparticularly friendly\n\n### Filtering\n\nThe queryset can of course be filtered before being passed into the function, however\nyou might wish to only show accounts that have made more than one order. Rather than\nrequiring you to generate the expression yourself you can pass a filter option to the\nfunction which is a dictionary which will be passed as kwargs to `.filter()`\n\n```python\nqueryset_table(\n    all_accounts,\n    [\n        "name",\n        "email",\n        ("#order", "Orders"),\n        ("+order__order_total", "Order Value"),\n    ],\n    filter={"_count_order__gt": 1},\n)\n```\n\nwhich would output:\n\n```\n╒══════════════════╤═════════════════════╤══════════╤═══════════════╕\n│ Name             │ Email               │   Orders │   Order Value │\n╞══════════════════╪═════════════════════╪══════════╪═══════════════╡\n│ Alice Smith      │ alice@smith.example │        3 │            45 │\n├──────────────────┼─────────────────────┼──────────┼───────────────┤\n│ Dietrich Schmidt │ dschmidt@example.de │        2 │           300 │\n╘══════════════════╧═════════════════════╧══════════╧═══════════════╛\n```\n\nto get the keys to use for generated fields you can pass `show_keys=True` to the function\n\n```python\nqueryset_table(\n    all_accounts,\n    [\n        "name",\n        "email",\n        ("#order", "Orders"),\n        ("+order__order_total", "Order Value"),\n    ],\n    show_keys=True,\n)\n```\n\noutputting\n\n```\n╒══════════════════╤════════════════════════════╤═════════════════════════╤═════════════════════════════════════════╕\n│ Name (name)      │ Email (email)              │   Orders (_count_order) │   Order Value (_sum_order__order_total) │\n╞══════════════════╪════════════════════════════╪═════════════════════════╪═════════════════════════════════════════╡\n│ Alice Smith      │ alice@smith.example        │                       3 │                                      45 │\n├──────────────────┼────────────────────────────┼─────────────────────────┼─────────────────────────────────────────┤\n...\n```\n\n### Formatted Strings\n\nSometimes you may want to transform one or more fields into a string, this can be\naccomplished by using a field specification starting with `f|` followed by a format\nstring containing the name of one or more fields e.g.\n\n```python\nqueryset_table(\n    all_accounts,\n    [\n        "name",\n        ("f|https://example.com/admin/test_app/account/{id}/change", "Django Admin URL"),\n    ],\n)\n\n```\n\n```\n╒══════════════════╤═════════════════════════════════════════════════════╕\n│ Name             │ Django Admin URL                                    │\n╞══════════════════╪═════════════════════════════════════════════════════╡\n│ Alice Smith      │ https://example.com/admin/test_app/account/1/change │\n├──────────────────┼─────────────────────────────────────────────────────┤\n│ Bob Jones        │ https://example.com/admin/test_app/account/2/change │\n├──────────────────┼─────────────────────────────────────────────────────┤\n...\n```\n\n### Slicing\n\nTo slice the resulting queryset (to paginate results for example) you can pass a slice\nparameter which is a 2-tuple containg start and end values\n\n```python\nqueryset_table(all_accounts, ["name", "email"], print_result=False, slice=(2, 4))\n```\n\nwhich would output:\n\n```\n╒══════════════════╤═════════════════════╕\n│ Name             │ Email               │\n╞══════════════════╪═════════════════════╡\n│ Charlotte Muller │ charlie@example.com │\n├──────────────────┼─────────────────────┤\n│ Dietrich Schmidt │ dschmidt@example.de │\n╘══════════════════╧═════════════════════╛\n```\n\n## Printing Instance\n\nYou can also print a single instance of a model by passing the instance to the\ninstance_table function\n\n```python\nfrom ptk_tabulate import instance_table\ninstance_table(all_accounts[0])\n```\n\nThis uses the dictionary representation of the instance, and sorts by key\n\n```\n╒════════════╤═════════════════════╕\n│ country_id │ 1                   │\n├────────────┼─────────────────────┤\n│ email      │ alice@smith.example │\n├────────────┼─────────────────────┤\n│ id         │ 1                   │\n├────────────┼─────────────────────┤\n│ name       │ Alice Smith         │\n╘════════════╧═════════════════════╛\n```\n\nThis will automatically hide members that begin with an underscore, to show these\nmembers, pass `private=True` to the function.\n\n`print_result` and `table_format` parameters have the same meaning as in queryset_table\nhowever the special tsv value for table_format is not available\n',
    'author': 'James Hardy',
    'author_email': None,
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/MrWeeble/tabulate-django',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, !=3.6.*',
}


setup(**setup_kwargs)
