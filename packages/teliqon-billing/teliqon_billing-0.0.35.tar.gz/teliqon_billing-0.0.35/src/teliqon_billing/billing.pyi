from . import types
from typing import List, Literal


class BillingAPI:
    def __init__(self, api_token: str, environment_id: int, api_url: str = None) -> None: ...
    def ping(self): ...

    def create_user(self, unique_id: str, credit_limit: float = None, 
        first_name: str = None, last_name: str = None,
        mobile_number: str = None, work_number: str = None,
        email: str = None, company_name: str = None,
        country: str = None, city: str = None,
        address: str = None, zip_code: str = None,
        description: str = None) -> types.BillingUser: ...
    
    def update_user(self, unique_id: str, credit_limit: float = None, 
        first_name: str = None, last_name: str = None,
        mobile_number: str = None, work_number: str = None,
        email: str = None, company_name: str = None,
        country: str = None, city: str = None,
        address: str = None, zip_code: str = None,
        description: str = None) -> types.BillingUser: ...

    def get_user(self, unique_id: str) -> types.BillingUser: ...
    def get_users(self) -> List[types.BillingUser]: ...
    def deposit(self, unique_id: str, amount: float, comment: str = None) -> types.Transaction: ...
    def withdrawal(self, unique_id: str, amount: float, comment: str = None, fee_on_sender: bool = False) -> types.Transaction: ...
    def process_withdrawal(self, unique_id: str, transaction_id: int, status: bool = True) -> types.Transaction: ...
    def in_system_transfer(self, from_unique_id: str, to_unique_id: str, amount: float, comment: str = None, fee_on_sender: bool = True) -> types.Transaction: ...
    def out_system_transfer(self, 
    unique_id: str, 
    amount: float = None, 
    comment: str = None, 
    fee_on_sender: bool = False, 
    service_unique_id: str = None,
    quantity: bool = 1
    ) -> types.Transaction: ...
    def get_user_transactions(self, unique_id: str) -> List[types.Transaction]: ...
    def get_user_subscriptions(self, unique_id: str) -> List[types.Subscription]: ...
    def get_user_subscription(self, unique_id: str, plan_unique_id: str = None, subscription_id: int = None) -> types.Subscription: ...
    def new_user_subscription(self, unique_id: str, plan_unique_id: str, comment: str = "") -> types.Subscription: ...
    def set_subscription_amount(self, unique_id: str, amount: float, plan_unique_id: str = None, subscription_id: int = None): ...
    def set_subscription_status(self, unique_id: str, is_disabled: bool, plan_unique_id: str = None, subscription_id: int = None) -> types.Subscription: ...
    def set_subscription_count_value(self, unique_id: str, count: int, plan_unique_id: str = None, subscription_id: int = None) -> types.Subscription: ...
    def increment_subscription_count_value(self, unique_id: str, plan_unique_id: str = None, subscription_id: int = None) -> types.Subscription: ...
    def decrement_subscription_count_value(self, unique_id: str, plan_unique_id: str = None, subscription_id: int = None) -> types.Subscription: ...
    def get_out_system_service(self, service_unique_id: str) -> types.OutSystemService: ...
    def get_out_system_services(self, service_prefix: str = '') -> List[types.OutSystemService]: ...
    def create_out_system_service(self, service_unique_id: str, title: str, service_prefix: str = '', description: str = '', cost: float = None) -> types.OutSystemService: ...
    def update_out_system_service(self, service_unique_id: str, title: str = None, service_prefix: str = None, description: str = None, cost: float = None) -> types.OutSystemService: ...
    def create_subscription_plan(self, plan_unique_id: str, 
    service_unique_id: str = None, type: Literal["default", "count"] = "default",
    first_payment_amount: float = 0, amount: float = 0, days_frequency: int = 7
    ) -> types.SubscriptionPlan: ...
    def get_subscription_plan(self, plan_unique_id: str) -> types.SubscriptionPlan: ...
    def get_subscription_plans(self) -> List[types.SubscriptionPlan]: ...
    def update_subscription_plan(self, plan_unique_id: str,
    service_unique_id: str = None, type: Literal["default", "count"] = None,
    first_payment_amount: float = None, amount: float = None, days_frequency: int = None) -> types.SubscriptionPlan: ...
    def get_transaction_query(self, filter: dict = None, special_filters: dict = None, exclude: dict = None, order_by: list = None, limit: int = None, offset: int = None) -> list: ...

