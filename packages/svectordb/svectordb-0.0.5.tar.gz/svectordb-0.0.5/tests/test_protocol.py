# Code generated by smithy-python-codegen DO NOT EDIT.

from typing import Any

from smithy_core.aio.utils import async_list
from smithy_http import Fields, tuples_to_fields
from smithy_http.aio import HTTPResponse as _HTTPResponse
from smithy_http.aio.interfaces import HTTPRequest, HTTPResponse
from smithy_http.interfaces import HTTPRequestConfiguration

from svectordb.errors import ServiceError


class TestHttpServiceError(ServiceError):
    """A test error that subclasses the service-error for protocol tests."""

    def __init__(self, request: HTTPRequest):
        self.request = request

class RequestTestHTTPClient:
    """An asynchronous HTTP client solely for testing purposes."""

    async def send(
        self, *, request: HTTPRequest, request_config: HTTPRequestConfiguration | None
    ) -> HTTPResponse:
        # Raise the exception with the request object to bypass actual request handling
        raise TestHttpServiceError(request)

class ResponseTestHTTPClient:
    """An asynchronous HTTP client solely for testing purposes."""

    def __init__(self, status: int, headers: list[tuple[str, str]], body: bytes):
        self.status = status
        self.fields = tuples_to_fields(headers)
        self.body = body

    async def send(
        self, *, request: HTTPRequest, request_config: HTTPRequestConfiguration | None
    ) -> _HTTPResponse:
        # Pre-construct the response from the request and return it
        return _HTTPResponse(
            status=self.status,
            fields=self.fields,
            body=async_list([self.body]),
        )
