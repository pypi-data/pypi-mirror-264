import pickle
import base64

##########################################
##TODO remove dependencies to rdfobj here

from rdfobj import  ModelPopulator
# +from .utils , .meta_model
##########################################


#utilities to manipulate the classes generated 

from biopax.phenotypevocabulary import PhenotypeVocabulary
from biopax.evidencecodevocabulary import EvidenceCodeVocabulary
from biopax.biochemicalreaction import BiochemicalReaction
from biopax.biosource import BioSource
from biopax.evidence import Evidence
from biopax.dnareference import DnaReference
from biopax.publicationxref import PublicationXref
from biopax.rnaregion import RnaRegion
from biopax.smallmoleculereference import SmallMoleculeReference
from biopax.protein import Protein
from biopax.score import Score
from biopax.pathwaystep import PathwayStep
from biopax.geneticinteraction import GeneticInteraction
from biopax.entityreference import EntityReference
from biopax.complexassembly import ComplexAssembly
from biopax.gene import Gene
from biopax.rnareference import RnaReference
from biopax.controlledvocabulary import ControlledVocabulary
from biopax.xref import Xref
from biopax.physicalentity import PhysicalEntity
from biopax.entityreferencetypevocabulary import EntityReferenceTypeVocabulary
from biopax.relationshipxref import RelationshipXref
from biopax.degradation import Degradation
from biopax.molecularinteraction import MolecularInteraction
from biopax.sequencesite import SequenceSite
from biopax.relationshiptypevocabulary import RelationshipTypeVocabulary
from biopax.modulation import Modulation
from biopax.modificationfeature import ModificationFeature
from biopax.covalentbindingfeature import CovalentBindingFeature
from biopax.control import Control
from biopax.templatereactionregulation import TemplateReactionRegulation
from biopax.transportwithbiochemicalreaction import TransportWithBiochemicalReaction
from biopax.sequencemodificationvocabulary import SequenceModificationVocabulary
from biopax.cellvocabulary import CellVocabulary
from biopax.tissuevocabulary import TissueVocabulary
from biopax.interactionvocabulary import InteractionVocabulary
from biopax.dna import Dna
from biopax.dnaregion import DnaRegion
from biopax.dnaregionreference import DnaRegionReference
from biopax.kprime import KPrime
from biopax.templatereaction import TemplateReaction
from biopax.chemicalstructure import ChemicalStructure
from biopax.experimentalform import ExperimentalForm
from biopax.rnaregionreference import RnaRegionReference
from biopax.stoichiometry import Stoichiometry
from biopax.cellularlocationvocabulary import CellularLocationVocabulary
from biopax.fragmentfeature import FragmentFeature
from biopax.complex import Complex
from biopax.proteinreference import ProteinReference
from biopax.experimentalformvocabulary import ExperimentalFormVocabulary
from biopax.bindingfeature import BindingFeature
from biopax.conversion import Conversion
from biopax.sequenceinterval import SequenceInterval
from biopax.transport import Transport
from biopax.deltag import DeltaG
from biopax.interaction import Interaction
from biopax.smallmolecule import SmallMolecule
from biopax.biochemicalpathwaystep import BiochemicalPathwayStep
from biopax.unificationxref import UnificationXref
from biopax.provenance import Provenance
from biopax.entityfeature import EntityFeature
from biopax.sequencelocation import SequenceLocation
from biopax.catalysis import Catalysis
from biopax.sequenceregionvocabulary import SequenceRegionVocabulary
from biopax.pathway import Pathway
from biopax.rna import Rna
from biopax.utilityclass import UtilityClass
from biopax.entity import Entity
  



#return an instance of a class corresponding to the input keywork
def define_model_instance(clsn):


  if clsn is None:
    inst=None
  else:
    clsn=str(clsn).strip().lower()
    if clsn =='':
      inst=None 
    elif clsn.lower() == 'phenotypevocabulary':
      inst = PhenotypeVocabulary() 
    elif clsn.lower() == 'evidencecodevocabulary':
      inst = EvidenceCodeVocabulary() 
    elif clsn.lower() == 'biochemicalreaction':
      inst = BiochemicalReaction() 
    elif clsn.lower() == 'biosource':
      inst = BioSource() 
    elif clsn.lower() == 'evidence':
      inst = Evidence() 
    elif clsn.lower() == 'dnareference':
      inst = DnaReference() 
    elif clsn.lower() == 'publicationxref':
      inst = PublicationXref() 
    elif clsn.lower() == 'rnaregion':
      inst = RnaRegion() 
    elif clsn.lower() == 'smallmoleculereference':
      inst = SmallMoleculeReference() 
    elif clsn.lower() == 'protein':
      inst = Protein() 
    elif clsn.lower() == 'score':
      inst = Score() 
    elif clsn.lower() == 'pathwaystep':
      inst = PathwayStep() 
    elif clsn.lower() == 'geneticinteraction':
      inst = GeneticInteraction() 
    elif clsn.lower() == 'entityreference':
      inst = EntityReference() 
    elif clsn.lower() == 'complexassembly':
      inst = ComplexAssembly() 
    elif clsn.lower() == 'gene':
      inst = Gene() 
    elif clsn.lower() == 'rnareference':
      inst = RnaReference() 
    elif clsn.lower() == 'controlledvocabulary':
      inst = ControlledVocabulary() 
    elif clsn.lower() == 'xref':
      inst = Xref() 
    elif clsn.lower() == 'physicalentity':
      inst = PhysicalEntity() 
    elif clsn.lower() == 'entityreferencetypevocabulary':
      inst = EntityReferenceTypeVocabulary() 
    elif clsn.lower() == 'relationshipxref':
      inst = RelationshipXref() 
    elif clsn.lower() == 'degradation':
      inst = Degradation() 
    elif clsn.lower() == 'molecularinteraction':
      inst = MolecularInteraction() 
    elif clsn.lower() == 'sequencesite':
      inst = SequenceSite() 
    elif clsn.lower() == 'relationshiptypevocabulary':
      inst = RelationshipTypeVocabulary() 
    elif clsn.lower() == 'modulation':
      inst = Modulation() 
    elif clsn.lower() == 'modificationfeature':
      inst = ModificationFeature() 
    elif clsn.lower() == 'covalentbindingfeature':
      inst = CovalentBindingFeature() 
    elif clsn.lower() == 'control':
      inst = Control() 
    elif clsn.lower() == 'templatereactionregulation':
      inst = TemplateReactionRegulation() 
    elif clsn.lower() == 'transportwithbiochemicalreaction':
      inst = TransportWithBiochemicalReaction() 
    elif clsn.lower() == 'sequencemodificationvocabulary':
      inst = SequenceModificationVocabulary() 
    elif clsn.lower() == 'cellvocabulary':
      inst = CellVocabulary() 
    elif clsn.lower() == 'tissuevocabulary':
      inst = TissueVocabulary() 
    elif clsn.lower() == 'interactionvocabulary':
      inst = InteractionVocabulary() 
    elif clsn.lower() == 'dna':
      inst = Dna() 
    elif clsn.lower() == 'dnaregion':
      inst = DnaRegion() 
    elif clsn.lower() == 'dnaregionreference':
      inst = DnaRegionReference() 
    elif clsn.lower() == 'kprime':
      inst = KPrime() 
    elif clsn.lower() == 'templatereaction':
      inst = TemplateReaction() 
    elif clsn.lower() == 'chemicalstructure':
      inst = ChemicalStructure() 
    elif clsn.lower() == 'experimentalform':
      inst = ExperimentalForm() 
    elif clsn.lower() == 'rnaregionreference':
      inst = RnaRegionReference() 
    elif clsn.lower() == 'stoichiometry':
      inst = Stoichiometry() 
    elif clsn.lower() == 'cellularlocationvocabulary':
      inst = CellularLocationVocabulary() 
    elif clsn.lower() == 'fragmentfeature':
      inst = FragmentFeature() 
    elif clsn.lower() == 'complex':
      inst = Complex() 
    elif clsn.lower() == 'proteinreference':
      inst = ProteinReference() 
    elif clsn.lower() == 'experimentalformvocabulary':
      inst = ExperimentalFormVocabulary() 
    elif clsn.lower() == 'bindingfeature':
      inst = BindingFeature() 
    elif clsn.lower() == 'conversion':
      inst = Conversion() 
    elif clsn.lower() == 'sequenceinterval':
      inst = SequenceInterval() 
    elif clsn.lower() == 'transport':
      inst = Transport() 
    elif clsn.lower() == 'deltag':
      inst = DeltaG() 
    elif clsn.lower() == 'interaction':
      inst = Interaction() 
    elif clsn.lower() == 'smallmolecule':
      inst = SmallMolecule() 
    elif clsn.lower() == 'biochemicalpathwaystep':
      inst = BiochemicalPathwayStep() 
    elif clsn.lower() == 'unificationxref':
      inst = UnificationXref() 
    elif clsn.lower() == 'provenance':
      inst = Provenance() 
    elif clsn.lower() == 'entityfeature':
      inst = EntityFeature() 
    elif clsn.lower() == 'sequencelocation':
      inst = SequenceLocation() 
    elif clsn.lower() == 'catalysis':
      inst = Catalysis() 
    elif clsn.lower() == 'sequenceregionvocabulary':
      inst = SequenceRegionVocabulary() 
    elif clsn.lower() == 'pathway':
      inst = Pathway() 
    elif clsn.lower() == 'rna':
      inst = Rna() 
    elif clsn.lower() == 'utilityclass':
      inst = UtilityClass() 
    elif clsn.lower() == 'entity':
      inst = Entity() 
   
    else:
      inst=None
  

  return inst

#return an dictionary class_name->[children class_name]
def classes_children():

  mchildren=dict()
  mchildren['PhenotypeVocabulary']= []
  mchildren['EvidenceCodeVocabulary']= []
  mchildren['BiochemicalReaction']= ['TransportWithBiochemicalReaction']
  mchildren['BioSource']= []
  mchildren['Evidence']= []
  mchildren['DnaReference']= []
  mchildren['PublicationXref']= []
  mchildren['RnaRegion']= []
  mchildren['SmallMoleculeReference']= []
  mchildren['Protein']= []
  mchildren['Score']= []
  mchildren['PathwayStep']= ['BiochemicalPathwayStep']
  mchildren['GeneticInteraction']= []
  mchildren['EntityReference']= ['DnaReference', 'SmallMoleculeReference', 'RnaReference', 'DnaRegionReference', 'RnaRegionReference', 'ProteinReference']
  mchildren['ComplexAssembly']= []
  mchildren['Gene']= []
  mchildren['RnaReference']= []
  mchildren['ControlledVocabulary']= ['PhenotypeVocabulary', 'EvidenceCodeVocabulary', 'EntityReferenceTypeVocabulary', 'RelationshipTypeVocabulary', 'SequenceModificationVocabulary', 'CellVocabulary', 'TissueVocabulary', 'InteractionVocabulary', 'CellularLocationVocabulary', 'ExperimentalFormVocabulary', 'SequenceRegionVocabulary']
  mchildren['Xref']= ['PublicationXref', 'RelationshipXref', 'UnificationXref']
  mchildren['PhysicalEntity']= ['RnaRegion', 'Protein', 'Dna', 'DnaRegion', 'Complex', 'SmallMolecule', 'Rna']
  mchildren['EntityReferenceTypeVocabulary']= []
  mchildren['RelationshipXref']= []
  mchildren['Degradation']= []
  mchildren['MolecularInteraction']= []
  mchildren['SequenceSite']= []
  mchildren['RelationshipTypeVocabulary']= []
  mchildren['Modulation']= []
  mchildren['ModificationFeature']= ['CovalentBindingFeature']
  mchildren['CovalentBindingFeature']= []
  mchildren['Control']= ['Modulation', 'TemplateReactionRegulation', 'Catalysis']
  mchildren['TemplateReactionRegulation']= []
  mchildren['TransportWithBiochemicalReaction']= []
  mchildren['SequenceModificationVocabulary']= []
  mchildren['CellVocabulary']= []
  mchildren['TissueVocabulary']= []
  mchildren['InteractionVocabulary']= []
  mchildren['Dna']= []
  mchildren['DnaRegion']= []
  mchildren['DnaRegionReference']= []
  mchildren['KPrime']= []
  mchildren['TemplateReaction']= []
  mchildren['ChemicalStructure']= []
  mchildren['ExperimentalForm']= []
  mchildren['RnaRegionReference']= []
  mchildren['Stoichiometry']= []
  mchildren['CellularLocationVocabulary']= []
  mchildren['FragmentFeature']= []
  mchildren['Complex']= []
  mchildren['ProteinReference']= []
  mchildren['ExperimentalFormVocabulary']= []
  mchildren['BindingFeature']= ['CovalentBindingFeature']
  mchildren['Conversion']= ['BiochemicalReaction', 'TransportWithBiochemicalReaction', 'ComplexAssembly', 'Degradation', 'Transport', 'TransportWithBiochemicalReaction']
  mchildren['SequenceInterval']= []
  mchildren['Transport']= ['TransportWithBiochemicalReaction']
  mchildren['DeltaG']= []
  mchildren['Interaction']= ['GeneticInteraction', 'MolecularInteraction', 'Control', 'Modulation', 'TemplateReactionRegulation', 'Catalysis', 'TemplateReaction', 'Conversion', 'BiochemicalReaction', 'TransportWithBiochemicalReaction', 'ComplexAssembly', 'Degradation', 'Transport', 'TransportWithBiochemicalReaction']
  mchildren['SmallMolecule']= []
  mchildren['BiochemicalPathwayStep']= []
  mchildren['UnificationXref']= []
  mchildren['Provenance']= []
  mchildren['EntityFeature']= ['ModificationFeature', 'CovalentBindingFeature', 'FragmentFeature', 'BindingFeature', 'CovalentBindingFeature']
  mchildren['SequenceLocation']= ['SequenceSite', 'SequenceInterval']
  mchildren['Catalysis']= []
  mchildren['SequenceRegionVocabulary']= []
  mchildren['Pathway']= []
  mchildren['Rna']= []
  mchildren['UtilityClass']= ['BioSource', 'Score', 'PathwayStep', 'BiochemicalPathwayStep', 'EntityReference', 'DnaReference', 'SmallMoleculeReference', 'RnaReference', 'DnaRegionReference', 'RnaRegionReference', 'ProteinReference', 'ControlledVocabulary', 'PhenotypeVocabulary', 'EvidenceCodeVocabulary', 'EntityReferenceTypeVocabulary', 'RelationshipTypeVocabulary', 'SequenceModificationVocabulary', 'CellVocabulary', 'TissueVocabulary', 'InteractionVocabulary', 'CellularLocationVocabulary', 'ExperimentalFormVocabulary', 'SequenceRegionVocabulary', 'Xref', 'PublicationXref', 'RelationshipXref', 'UnificationXref', 'KPrime', 'ChemicalStructure', 'ExperimentalForm', 'Stoichiometry', 'DeltaG', 'Provenance', 'EntityFeature', 'ModificationFeature', 'CovalentBindingFeature', 'FragmentFeature', 'BindingFeature', 'CovalentBindingFeature', 'SequenceLocation', 'SequenceSite', 'SequenceInterval']
  mchildren['Entity']= ['Gene', 'PhysicalEntity', 'RnaRegion', 'Protein', 'Dna', 'DnaRegion', 'Complex', 'SmallMolecule', 'Rna', 'Interaction', 'GeneticInteraction', 'MolecularInteraction', 'Control', 'Modulation', 'TemplateReactionRegulation', 'Catalysis', 'TemplateReaction', 'Conversion', 'BiochemicalReaction', 'TransportWithBiochemicalReaction', 'ComplexAssembly', 'Degradation', 'Transport', 'TransportWithBiochemicalReaction', 'Pathway']
  
  return mchildren

def class_children(cln):
   mchildren=classes_children()
   if cln in mchildren.keys():
      return mchildren[cln]
   return None 

#list all classes of the model
def classesDict():
   model=dict() 
   model['PhenotypeVocabulary']=PhenotypeVocabulary
   model['EvidenceCodeVocabulary']=EvidenceCodeVocabulary
   model['BiochemicalReaction']=BiochemicalReaction
   model['BioSource']=BioSource
   model['Evidence']=Evidence
   model['DnaReference']=DnaReference
   model['PublicationXref']=PublicationXref
   model['RnaRegion']=RnaRegion
   model['SmallMoleculeReference']=SmallMoleculeReference
   model['Protein']=Protein
   model['Score']=Score
   model['PathwayStep']=PathwayStep
   model['GeneticInteraction']=GeneticInteraction
   model['EntityReference']=EntityReference
   model['ComplexAssembly']=ComplexAssembly
   model['Gene']=Gene
   model['RnaReference']=RnaReference
   model['ControlledVocabulary']=ControlledVocabulary
   model['Xref']=Xref
   model['PhysicalEntity']=PhysicalEntity
   model['EntityReferenceTypeVocabulary']=EntityReferenceTypeVocabulary
   model['RelationshipXref']=RelationshipXref
   model['Degradation']=Degradation
   model['MolecularInteraction']=MolecularInteraction
   model['SequenceSite']=SequenceSite
   model['RelationshipTypeVocabulary']=RelationshipTypeVocabulary
   model['Modulation']=Modulation
   model['ModificationFeature']=ModificationFeature
   model['CovalentBindingFeature']=CovalentBindingFeature
   model['Control']=Control
   model['TemplateReactionRegulation']=TemplateReactionRegulation
   model['TransportWithBiochemicalReaction']=TransportWithBiochemicalReaction
   model['SequenceModificationVocabulary']=SequenceModificationVocabulary
   model['CellVocabulary']=CellVocabulary
   model['TissueVocabulary']=TissueVocabulary
   model['InteractionVocabulary']=InteractionVocabulary
   model['Dna']=Dna
   model['DnaRegion']=DnaRegion
   model['DnaRegionReference']=DnaRegionReference
   model['KPrime']=KPrime
   model['TemplateReaction']=TemplateReaction
   model['ChemicalStructure']=ChemicalStructure
   model['ExperimentalForm']=ExperimentalForm
   model['RnaRegionReference']=RnaRegionReference
   model['Stoichiometry']=Stoichiometry
   model['CellularLocationVocabulary']=CellularLocationVocabulary
   model['FragmentFeature']=FragmentFeature
   model['Complex']=Complex
   model['ProteinReference']=ProteinReference
   model['ExperimentalFormVocabulary']=ExperimentalFormVocabulary
   model['BindingFeature']=BindingFeature
   model['Conversion']=Conversion
   model['SequenceInterval']=SequenceInterval
   model['Transport']=Transport
   model['DeltaG']=DeltaG
   model['Interaction']=Interaction
   model['SmallMolecule']=SmallMolecule
   model['BiochemicalPathwayStep']=BiochemicalPathwayStep
   model['UnificationXref']=UnificationXref
   model['Provenance']=Provenance
   model['EntityFeature']=EntityFeature
   model['SequenceLocation']=SequenceLocation
   model['Catalysis']=Catalysis
   model['SequenceRegionVocabulary']=SequenceRegionVocabulary
   model['Pathway']=Pathway
   model['Rna']=Rna
   model['UtilityClass']=UtilityClass
   model['Entity']=Entity
 
   return model 

#list all classes of the model
def classes():
   model=classesDict()
   return list(model.keys()) 

def createInstance(cln):
    model=classesDict()
    if cln in model.keys():
       cl=model[cln]
       return cl()
    return None 

def parentTree():
 parentdict=dict()
 chl=classes_children()
 for k in chl.keys():
    v=chl[k]
    for el in v:  
      if el in parentdict.keys():
        pad=parentdict[el]
      else:
        pad=dict()
      pad[k]=1
      parentdict[el]=pad
        
 for k in parentdict.keys():
    pad=parentdict[k]
    parentdict[k]=list(pad.keys())
 return parentdict




def modelPopulator():
    mp=PackageModelPopulator().mpop
    return mp


class  PackageModelPopulator():

  def __init__(self):
    self.package_name="biopax"
    self.classDict=None
    self.mpop= None
    self.config()

  def config(self):
    self.classDict=self.classDictConf()
    self.mpop= ModelPopulator(self.classDict,self.package_name)

  def classDictConf(self)  :

     b64conf=b''

     obj = pickle.loads(base64.b64decode(b64conf))
     return obj

def domain():
    return "http://www.biopax.org/release/biopax-level3.owl#"

def prefix():
    return "biopax"    
def shortPrefix():
    return "bi"       


#return parent hierarchy
def get_parent_hierarchy(cls):
    parents = []
    bases = cls.__bases__
    for base in bases:
        if base != object:
            parents.append(base)
            parents.extend(get_parent_hierarchy(base))
    return parents
    
# a generic tostring helper    
def entityToString(entity,help):
    msg=""
    members =classes_children().keys() 
    clsn=entity.__class__.__name__
    msg+= "  uri/pk: %s\n" %( entity.pk)
    msg+= "  class:%s\n" %(clsn )  
    #attributes using getter
    
    hl=get_parent_hierarchy(entity.__class__)
    hl.append(entity.__class__)
    attl_all={} 
    for cn in hl:
      dh=help.select(cn.__name__)  
      if dh is not None:  
        attl=(dh.attributeNames())  
        for attn in attl:
           attl_all[attn]=1 
    
    #attributes using helper 
    for attn in attl_all.keys():
          val=getattr(entity, '_'+attn  )
          
          if val is not None:
            if isinstance(val, object) and  val.__class__.__name__ in members:    
               val="(%s, %s)" %( val.__class__.__name__, val.pk )
            msg+="  %s : %s \n"  %(attn,val  )  
    return msg
