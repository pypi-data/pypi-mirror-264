[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "fgr"
dependencies = []
requires-python = ">=3.10"
authors = [
    {name = "Dan", email = "dan@1howardcapital.com"},
    ]
maintainers = [
    {name = "Dan", email = "dan@1howardcapital.com"},
    ]
description = "Zero-dependency Python framework for object oriented development."
keywords = [
    "fgr",
    "framework",
    "rest",
    ]
readme = "README.md"
version = "0.4.5"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Typing :: Typed",
    ]

[project.urls]
Documentation = "https://fgr.readthedocs.io/en/stable/fgr.html"
Homepage = "https://fgr.readthedocs.io/en/stable/"
Repository = "https://github.com/dan1hc/fgr.git"
Issues = "https://github.com/dan1hc/fgr/issues"
Changelog = "https://github.com/dan1hc/fgr/blob/main/CHANGELOG.md"

[project.optional-dependencies]
develop = [
    "mypy",
    "pre-commit",
    "coverage",
    "pytest",
    "pytest-cov",
    "ruff",
    ]
docs = [
    "commonmark==0.9.*",
    "sphinx==7.*",
    ]

[project.scripts]
fgr = "fgr.commands:main"

[tool.setuptools.package-data]
"*" = [
    "**/static/*.ico",
    "**/static/*.png",
    "**/static/*.tpl",
    ]

[tool.coverage.report]
fail_under = 100
exclude_lines = [
    "pragma: no cover",
    "if typing.TYPE_CHECKING:",
    ]
omit = [
    "**/fgr/commands/**",
    "**/fgr/docs/**",
    ]

[tool.pytest.ini_options]
addopts = "--cov=fgr --cov-report= -p no:warnings"
testpaths = [
    "src/tests",
    ]

[tool.mypy]
files = ["./src/fgr"]
pretty = true
python_version = "3.12"
ignore_missing_imports = true
implicit_optional = true
strict_optional = false
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_untyped_decorators = true
warn_return_any = true
warn_unreachable = true
exclude = "tests"

[[tool.mypy.overrides]]
module = "fgr.docs.commands"
ignore_missing_imports = true

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".github",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "htmlcov",
    "node_modules",
    "site-packages",
    "venv",
    ]
target-version = "py312"

# Standard Py
line-length = 79
indent-width = 4

[tool.ruff.format]
# Unlike Black, use single quotes for non-triple-quoted strings.
quote-style = "single"

# Unlike Black, indent with tabs, rather than spaces.
indent-style = "tab"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint]
select = ["E4", "E7", "E9", "F", "B"]
ignore = ["E501", "E731"]
unfixable = ["B"]

[tool.ruff.lint.per-file-ignores]
"src/fgr/core/codec.py" = ["B009"]
"src/fgr/core/dtypes/utils.py" = ["B009"]
"src/tests/core/fields_test.py" = ["E712"]
"src/tests/core/query_test.py" = ["E712"]
"__init__.py" = ["E402", "F401"]
"**/{tests,docs,tools}/*" = ["E402"]

[tool.semantic_release]
commit_parser = "angular"
commit_author = "github-actions <action@github.com>"
commit_message = "docs: __v{version}__\n\nAutomatically generated by python-semantic-release"
build_command = "python -m pip install --upgrade build && python -m build"
major_on_zero = true
version_variables = [
    "src/fgr/__init__.py:__version__",
    ]
version_toml = [
    "pyproject.toml:project.version",
    ]

[tool.semantic_release.branches.main]
match = "(main)"
prerelease = false

[tool.semantic_release.branches.not_main]
match = "(^(?!main)(.)*$)"
prerelease = true
prerelease_token = "rc"

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "refactor",
    "style",
    "test",
    ]
minor_tags = [
    "feat",
    "refactor",
    ]
patch_tags = [
    "build",
    "fix",
    "perf",
    "test",
    ]
